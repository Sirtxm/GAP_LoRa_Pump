
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4f8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  0801e638  0801e638  0001f638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fa34  0801fa34  00020a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801faf4  0801faf4  00021308  2**0
                  CONTENTS
  5 .ARM          00000008  0801faf4  0801faf4  00020af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fafc  0801fafc  00021308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fafc  0801fafc  00020afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fb00  0801fb00  00020b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  0801fb04  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002204  20000308  0801fe0c  00021308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000250c  0801fe0c  0002150c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003eccd  00000000  00000000  00021332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a2c6  00000000  00000000  0005ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032b0  00000000  00000000  0006a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002679  00000000  00000000  0006d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288de  00000000  00000000  0006fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043a92  00000000  00000000  000984cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5b4  00000000  00000000  000dbf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a7515  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ddb0  00000000  00000000  001a7558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001b5308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e620 	.word	0x0801e620

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801e620 	.word	0x0801e620

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b988 	b.w	80010e8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	468e      	mov	lr, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4617      	mov	r7, r2
 8000e04:	d962      	bls.n	8000ecc <__udivmoddi4+0xdc>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	b14e      	cbz	r6, 8000e20 <__udivmoddi4+0x30>
 8000e0c:	f1c6 0320 	rsb	r3, r6, #32
 8000e10:	fa01 f806 	lsl.w	r8, r1, r6
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	ea43 0808 	orr.w	r8, r3, r8
 8000e1e:	40b4      	lsls	r4, r6
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e44:	f080 80ea 	bcs.w	800101c <__udivmoddi4+0x22c>
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f240 80e7 	bls.w	800101c <__udivmoddi4+0x22c>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	b2a3      	uxth	r3, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e66:	459c      	cmp	ip, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x8e>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e70:	f080 80d6 	bcs.w	8001020 <__udivmoddi4+0x230>
 8000e74:	459c      	cmp	ip, r3
 8000e76:	f240 80d3 	bls.w	8001020 <__udivmoddi4+0x230>
 8000e7a:	443b      	add	r3, r7
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e82:	eba3 030c 	sub.w	r3, r3, ip
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40f3      	lsrs	r3, r6
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xb6>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb0>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x14c>
 8000eae:	4573      	cmp	r3, lr
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xc8>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 8105 	bhi.w	80010c2 <__udivmoddi4+0x2d2>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e5      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ec6:	e9c5 4800 	strd	r4, r8, [r5]
 8000eca:	e7e2      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f000 8090 	beq.w	8000ff2 <__udivmoddi4+0x202>
 8000ed2:	fab2 f682 	clz	r6, r2
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	f040 80a4 	bne.w	8001024 <__udivmoddi4+0x234>
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef6:	fb04 f20c 	mul.w	r2, r4, ip
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x11e>
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x11c>
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f200 80e0 	bhi.w	80010cc <__udivmoddi4+0x2dc>
 8000f0c:	46c4      	mov	ip, r8
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f14:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f18:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f1c:	fb02 f404 	mul.w	r4, r2, r4
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x144>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x142>
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	f200 80ca 	bhi.w	80010c6 <__udivmoddi4+0x2d6>
 8000f32:	4602      	mov	r2, r0
 8000f34:	1b1b      	subs	r3, r3, r4
 8000f36:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f3c:	f1c1 0620 	rsb	r6, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 f706 	lsr.w	r7, r2, r6
 8000f46:	431f      	orrs	r7, r3
 8000f48:	fa0e f401 	lsl.w	r4, lr, r1
 8000f4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f50:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f54:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f58:	4323      	orrs	r3, r4
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	fa1f fc87 	uxth.w	ip, r7
 8000f62:	fbbe f0f9 	udiv	r0, lr, r9
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f6c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f70:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x1a0>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f82:	f080 809c 	bcs.w	80010be <__udivmoddi4+0x2ce>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	f240 8099 	bls.w	80010be <__udivmoddi4+0x2ce>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	443c      	add	r4, r7
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	fa1f fe83 	uxth.w	lr, r3
 8000f98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1ce>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb2:	f080 8082 	bcs.w	80010ba <__udivmoddi4+0x2ca>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	d97f      	bls.n	80010ba <__udivmoddi4+0x2ca>
 8000fba:	3b02      	subs	r3, #2
 8000fbc:	443c      	add	r4, r7
 8000fbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc2:	eba4 040c 	sub.w	r4, r4, ip
 8000fc6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fca:	4564      	cmp	r4, ip
 8000fcc:	4673      	mov	r3, lr
 8000fce:	46e1      	mov	r9, ip
 8000fd0:	d362      	bcc.n	8001098 <__udivmoddi4+0x2a8>
 8000fd2:	d05f      	beq.n	8001094 <__udivmoddi4+0x2a4>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x1fe>
 8000fd6:	ebb8 0203 	subs.w	r2, r8, r3
 8000fda:	eb64 0409 	sbc.w	r4, r4, r9
 8000fde:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	40cc      	lsrs	r4, r1
 8000fea:	e9c5 6400 	strd	r6, r4, [r5]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e74f      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ff2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ff6:	0c01      	lsrs	r1, r0, #16
 8000ff8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001002:	463b      	mov	r3, r7
 8001004:	4638      	mov	r0, r7
 8001006:	463c      	mov	r4, r7
 8001008:	46b8      	mov	r8, r7
 800100a:	46be      	mov	lr, r7
 800100c:	2620      	movs	r6, #32
 800100e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001012:	eba2 0208 	sub.w	r2, r2, r8
 8001016:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101a:	e766      	b.n	8000eea <__udivmoddi4+0xfa>
 800101c:	4601      	mov	r1, r0
 800101e:	e718      	b.n	8000e52 <__udivmoddi4+0x62>
 8001020:	4610      	mov	r0, r2
 8001022:	e72c      	b.n	8000e7e <__udivmoddi4+0x8e>
 8001024:	f1c6 0220 	rsb	r2, r6, #32
 8001028:	fa2e f302 	lsr.w	r3, lr, r2
 800102c:	40b7      	lsls	r7, r6
 800102e:	40b1      	lsls	r1, r6
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	430a      	orrs	r2, r1
 800103a:	fbb3 f8fe 	udiv	r8, r3, lr
 800103e:	b2bc      	uxth	r4, r7
 8001040:	fb0e 3318 	mls	r3, lr, r8, r3
 8001044:	0c11      	lsrs	r1, r2, #16
 8001046:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104a:	fb08 f904 	mul.w	r9, r8, r4
 800104e:	40b0      	lsls	r0, r6
 8001050:	4589      	cmp	r9, r1
 8001052:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001056:	b280      	uxth	r0, r0
 8001058:	d93e      	bls.n	80010d8 <__udivmoddi4+0x2e8>
 800105a:	1879      	adds	r1, r7, r1
 800105c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001060:	d201      	bcs.n	8001066 <__udivmoddi4+0x276>
 8001062:	4589      	cmp	r9, r1
 8001064:	d81f      	bhi.n	80010a6 <__udivmoddi4+0x2b6>
 8001066:	eba1 0109 	sub.w	r1, r1, r9
 800106a:	fbb1 f9fe 	udiv	r9, r1, lr
 800106e:	fb09 f804 	mul.w	r8, r9, r4
 8001072:	fb0e 1119 	mls	r1, lr, r9, r1
 8001076:	b292      	uxth	r2, r2
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	4542      	cmp	r2, r8
 800107e:	d229      	bcs.n	80010d4 <__udivmoddi4+0x2e4>
 8001080:	18ba      	adds	r2, r7, r2
 8001082:	f109 31ff 	add.w	r1, r9, #4294967295
 8001086:	d2c4      	bcs.n	8001012 <__udivmoddi4+0x222>
 8001088:	4542      	cmp	r2, r8
 800108a:	d2c2      	bcs.n	8001012 <__udivmoddi4+0x222>
 800108c:	f1a9 0102 	sub.w	r1, r9, #2
 8001090:	443a      	add	r2, r7
 8001092:	e7be      	b.n	8001012 <__udivmoddi4+0x222>
 8001094:	45f0      	cmp	r8, lr
 8001096:	d29d      	bcs.n	8000fd4 <__udivmoddi4+0x1e4>
 8001098:	ebbe 0302 	subs.w	r3, lr, r2
 800109c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a0:	3801      	subs	r0, #1
 80010a2:	46e1      	mov	r9, ip
 80010a4:	e796      	b.n	8000fd4 <__udivmoddi4+0x1e4>
 80010a6:	eba7 0909 	sub.w	r9, r7, r9
 80010aa:	4449      	add	r1, r9
 80010ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b4:	fb09 f804 	mul.w	r8, r9, r4
 80010b8:	e7db      	b.n	8001072 <__udivmoddi4+0x282>
 80010ba:	4673      	mov	r3, lr
 80010bc:	e77f      	b.n	8000fbe <__udivmoddi4+0x1ce>
 80010be:	4650      	mov	r0, sl
 80010c0:	e766      	b.n	8000f90 <__udivmoddi4+0x1a0>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e6fd      	b.n	8000ec2 <__udivmoddi4+0xd2>
 80010c6:	443b      	add	r3, r7
 80010c8:	3a02      	subs	r2, #2
 80010ca:	e733      	b.n	8000f34 <__udivmoddi4+0x144>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	443b      	add	r3, r7
 80010d2:	e71c      	b.n	8000f0e <__udivmoddi4+0x11e>
 80010d4:	4649      	mov	r1, r9
 80010d6:	e79c      	b.n	8001012 <__udivmoddi4+0x222>
 80010d8:	eba1 0109 	sub.w	r1, r1, r9
 80010dc:	46c4      	mov	ip, r8
 80010de:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e2:	fb09 f804 	mul.w	r8, r9, r4
 80010e6:	e7c4      	b.n	8001072 <__udivmoddi4+0x282>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	43db      	mvns	r3, r3
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001132:	4013      	ands	r3, r2
 8001134:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001146:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <MX_ADC_Init+0x98>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC_Init+0x94>)
 800114c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001150:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_ADC_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC_Init+0x94>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_ADC_Init+0x94>)
 80011c2:	f002 f957 	bl	8003474 <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fc64 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000324 	.word	0x20000324
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <HAL_ADC_MspInit+0x24>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d103      	bne.n	80011f6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011f2:	f7ff ff7b 	bl	80010ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012400 	.word	0x40012400

08001204 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <HAL_ADC_MspDeInit+0x24>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121a:	f7ff ff7f 	bl	800111c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012400 	.word	0x40012400

0800122c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <SYS_InitMeasurement+0x14>)
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <SYS_InitMeasurement+0x18>)
 8001234:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000324 	.word	0x20000324
 8001244:	40012400 	.word	0x40012400

08001248 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <SYS_GetBatteryLevel+0x5c>)
 8001258:	f000 f82a 	bl	80012b0 <ADC_ReadChannels>
 800125c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	e016      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001272:	4293      	cmp	r3, r2
 8001274:	d00b      	beq.n	800128e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <SYS_GetBatteryLevel+0x60>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001280:	fb03 f202 	mul.w	r2, r3, r2
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e004      	b.n	8001298 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <SYS_GetBatteryLevel+0x64>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001298:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	b4002000 	.word	0xb4002000
 80012a8:	1fff75aa 	.word	0x1fff75aa
 80012ac:	004c08d8 	.word	0x004c08d8

080012b0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012c8:	f7ff ff3a 	bl	8001140 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012ce:	f002 ff00 	bl	80040d2 <HAL_ADCEx_Calibration_Start>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012d8:	f000 fbde 	bl	8001a98 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <ADC_ReadChannels+0x88>)
 80012f0:	f002 fc0c 	bl	8003b0c <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80012fa:	f000 fbcd 	bl	8001a98 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001300:	f002 fae8 	bl	80038d4 <HAL_ADC_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800130a:	f000 fbc5 	bl	8001a98 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001314:	f002 fb56 	bl	80039c4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <ADC_ReadChannels+0x88>)
 800131a:	f002 fb21 	bl	8003960 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001320:	f002 fbe7 	bl	8003af2 <HAL_ADC_GetValue>
 8001324:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <ADC_ReadChannels+0x88>)
 8001328:	f002 fa58 	bl	80037dc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800132c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000324 	.word	0x20000324

0800133c <LL_AHB1_GRP1_EnableClock>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001370:	2004      	movs	r0, #4
 8001372:	f7ff ffe3 	bl	800133c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ffe0 	bl	800133c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	200b      	movs	r0, #11
 8001382:	f003 f84c 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001386:	200b      	movs	r0, #11
 8001388:	f003 f863 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800139c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013a0:	d101      	bne.n	80013a6 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80013a6:	2300      	movs	r3, #0
#endif
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58004000 	.word	0x58004000

080013b4 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80013cc:	4b56      	ldr	r3, [pc, #344]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0299      	lsls	r1, r3, #10
 80013d2:	4b56      	ldr	r3, [pc, #344]	@ (800152c <FLASH_IF_Write+0x178>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	0adb      	lsrs	r3, r3, #11
 80013e2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <FLASH_IF_Write+0x174>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	0291      	lsls	r1, r2, #10
 80013f6:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <FLASH_IF_Write+0x178>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	0adb      	lsrs	r3, r3, #11
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <FLASH_IF_Write+0x7a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <FLASH_IF_Write+0x7a>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	e074      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <FLASH_IF_Write+0x17c>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da02      	bge.n	8001442 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800143c:	f06f 0303 	mvn.w	r3, #3
 8001440:	e06d      	b.n	800151e <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	429a      	cmp	r2, r3
 8001448:	d005      	beq.n	8001456 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e05b      	b.n	8001514 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8f8 	bl	8001656 <FLASH_IF_IsEmpty>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d037      	beq.n	80014dc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001472:	f06f 0304 	mvn.w	r3, #4
 8001476:	e052      	b.n	800151e <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800147e:	02db      	lsls	r3, r3, #11
 8001480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001484:	4619      	mov	r1, r3
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f019 f90e 	bl	801a6a8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	6a39      	ldr	r1, [r7, #32]
 8001498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800149a:	b292      	uxth	r2, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f019 f903 	bl	801a6a8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f000 f865 	bl	8001576 <FLASH_IF_EraseByPages>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80014b2:	f06f 0301 	mvn.w	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014b8:	e030      	b.n	800151c <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014c0:	02db      	lsls	r3, r3, #11
 80014c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f88a 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014d4:	f06f 0302 	mvn.w	r3, #2
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 80014da:	e01f      	b.n	800151c <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e4:	f000 f87d 	bl	80015e2 <FLASH_IF_Write_Buffer>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014ee:	f06f 0302 	mvn.w	r3, #2
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80014f4:	e012      	b.n	800151c <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	4413      	add	r3, r2
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	4413      	add	r3, r2
 8001504:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d99f      	bls.n	800145c <FLASH_IF_Write+0xa8>
  }

  return status;
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800151e:	4618      	mov	r0, r3
 8001520:	3730      	adds	r7, #48	@ 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	1fff75e0 	.word	0x1fff75e0
 800152c:	03fffc00 	.word	0x03fffc00
 8001530:	58004000 	.word	0x58004000

08001534 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001540:	e00b      	b.n	800155a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001542:	bf00      	nop
 8001544:	f7ff ff24 	bl	8001390 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1fa      	bne.n	8001544 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800154e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2001      	movs	r0, #1
 8001556:	f003 fb83 	bl	8004c60 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001564:	4299      	cmp	r1, r3
 8001566:	bf08      	it	eq
 8001568:	4290      	cmpeq	r0, r2
 800156a:	d1ea      	bne.n	8001542 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800156c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	@ 0x28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fcfe 	bl	8004f9c <HAL_FLASHEx_Erase_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015a6:	e00a      	b.n	80015be <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80015a8:	f107 0214 	add.w	r2, r7, #20
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fc9a 	bl	8004eec <HAL_FLASHEx_Erase>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <FLASH_IF_EraseByPages+0x62>
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <FLASH_IF_EraseByPages+0x5c>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e003      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	e000      	b.n	80015da <FLASH_IF_EraseByPages+0x64>
 80015d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08a      	sub	sp, #40	@ 0x28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e020      	b.n	800163e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2208      	movs	r2, #8
 8001602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f019 f84f 	bl	801a6a8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	bf08      	it	eq
 8001614:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001618:	d005      	beq.n	8001626 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800161a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff88 	bl	8001534 <FLASH_IF_Write64>
 8001624:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3308      	adds	r3, #8
 800162a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	3308      	adds	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3d9      	bcc.n	80015fc <FLASH_IF_Write_Buffer+0x1a>
 8001648:	e000      	b.n	800164c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800164a:	bf00      	nop
    }
  }

  return status;
 800164c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800164e:	4618      	mov	r0, r3
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001660:	e00a      	b.n	8001678 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d001      	beq.n	8001672 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800166e:	2301      	movs	r3, #1
 8001670:	e039      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e010      	b.n	80016ae <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f103 0208 	add.w	r2, r3, #8
 8001692:	60fa      	str	r2, [r7, #12]
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	bf08      	it	eq
 800169e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80016a2:	d001      	beq.n	80016a8 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01e      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3e9      	bcc.n	800168c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80016c6:	e00a      	b.n	80016de <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d001      	beq.n	80016d8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f1      	bne.n	80016c8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffdb 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff ffd8 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffd5 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|DBG3_Pin|DBG4_Pin|GPIO_PIN_9
 8001746:	2200      	movs	r2, #0
 8001748:	f24c 2118 	movw	r1, #49688	@ 0xc218
 800174c:	4833      	ldr	r0, [pc, #204]	@ (800181c <MX_GPIO_Init+0xfc>)
 800174e:	f003 ff2e 	bl	80055ae <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|DBG2_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001758:	4830      	ldr	r0, [pc, #192]	@ (800181c <MX_GPIO_Init+0xfc>)
 800175a:	f003 ff28 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2131      	movs	r1, #49	@ 0x31
 8001762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001766:	f003 ff22 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f003 ff1b 	bl	80055ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB15 PB9 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_14;
 8001778:	f44f 4342 	mov.w	r3, #49664	@ 0xc200
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4823      	ldr	r0, [pc, #140]	@ (800181c <MX_GPIO_Init+0xfc>)
 8001790:	f003 fcc8 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001794:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	481c      	ldr	r0, [pc, #112]	@ (800181c <MX_GPIO_Init+0xfc>)
 80017ac:	f003 fcba 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80017b0:	2331      	movs	r3, #49	@ 0x31
 80017b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c8:	f003 fcac 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d8:	2301      	movs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	480e      	ldr	r0, [pc, #56]	@ (800181c <MX_GPIO_Init+0xfc>)
 80017e2:	f003 fc9f 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001800:	f003 fc90 	bl	8005124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2029      	movs	r0, #41	@ 0x29
 800180a:	f002 fe08 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180e:	2029      	movs	r0, #41	@ 0x29
 8001810:	f002 fe1f 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	48000400 	.word	0x48000400

08001820 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001830:	f023 0218 	bic.w	r2, r3, #24
 8001834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001850:	f001 fc22 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001854:	f000 f82a 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001858:	f7ff ff62 	bl	8001720 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 800185c:	f008 fc78 	bl	800a150 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001860:	f001 f8e0 	bl	8002a24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2120      	movs	r1, #32
 8001868:	480f      	ldr	r0, [pc, #60]	@ (80018a8 <main+0x5c>)
 800186a:	f003 fea0 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f003 fe99 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001882:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <main+0x5c>)
 8001884:	f003 fe93 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <main+0x5c>)
 8001890:	f003 fe8d 	bl	80055ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189a:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <main+0x5c>)
 800189c:	f003 fe87 	bl	80055ae <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80018a0:	f008 fc5e 	bl	800a160 <MX_LoRaWAN_Process>
 80018a4:	e7fc      	b.n	80018a0 <main+0x54>
 80018a6:	bf00      	nop
 80018a8:	48000400 	.word	0x48000400

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	@ 0x68
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2248      	movs	r2, #72	@ 0x48
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f01a ff11 	bl	801c6e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018d2:	f003 fe9b 	bl	800560c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff ffa2 	bl	8001820 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <SystemClock_Config+0xb0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e4:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <SystemClock_Config+0xb0>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <SystemClock_Config+0xb0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018f8:	2324      	movs	r3, #36	@ 0x24
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018fc:	2381      	movs	r3, #129	@ 0x81
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001908:	23b0      	movs	r3, #176	@ 0xb0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f004 f9c5 	bl	8005ca4 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001920:	f000 f8ba 	bl	8001a98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001924:	234f      	movs	r3, #79	@ 0x4f
 8001926:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	2102      	movs	r1, #2
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fd4a 	bl	80063dc <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800194e:	f000 f8a3 	bl	8001a98 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3768      	adds	r7, #104	@ 0x68
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	58000400 	.word	0x58000400

08001960 <PumpStateMachine>:

/* USER CODE BEGIN 4 */

void PumpStateMachine(PumpState_t state, uint8_t duration)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
    currentPumpState = state;
 8001970:	4a42      	ldr	r2, [pc, #264]	@ (8001a7c <PumpStateMachine+0x11c>)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	7013      	strb	r3, [r2, #0]
    autoDurationMinutes = duration;
 8001976:	4a42      	ldr	r2, [pc, #264]	@ (8001a80 <PumpStateMachine+0x120>)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	7013      	strb	r3, [r2, #0]

    switch (state)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d01d      	beq.n	80019be <PumpStateMachine+0x5e>
 8001982:	2b03      	cmp	r3, #3
 8001984:	dc75      	bgt.n	8001a72 <PumpStateMachine+0x112>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d002      	beq.n	8001990 <PumpStateMachine+0x30>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d02e      	beq.n	80019ec <PumpStateMachine+0x8c>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: DONE!!!\r\n");
            break;

        default:
            break;
 800198e:	e070      	b.n	8001a72 <PumpStateMachine+0x112>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 8001990:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <PumpStateMachine+0x124>)
 8001992:	2201      	movs	r2, #1
 8001994:	2100      	movs	r1, #0
 8001996:	2002      	movs	r0, #2
 8001998:	f019 fed0 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019a2:	4839      	ldr	r0, [pc, #228]	@ (8001a88 <PumpStateMachine+0x128>)
 80019a4:	f003 fe03 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 80019a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ac:	f000 fbc8 	bl	8002140 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b6:	4834      	ldr	r0, [pc, #208]	@ (8001a88 <PumpStateMachine+0x128>)
 80019b8:	f003 fdf9 	bl	80055ae <HAL_GPIO_WritePin>
            break;
 80019bc:	e05a      	b.n	8001a74 <PumpStateMachine+0x114>
            APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 80019be:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <PumpStateMachine+0x12c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	2100      	movs	r1, #0
 80019c4:	2002      	movs	r0, #2
 80019c6:	f019 feb9 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d0:	482d      	ldr	r0, [pc, #180]	@ (8001a88 <PumpStateMachine+0x128>)
 80019d2:	f003 fdec 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 80019d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019da:	f000 fbb1 	bl	8002140 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e4:	4828      	ldr	r0, [pc, #160]	@ (8001a88 <PumpStateMachine+0x128>)
 80019e6:	f003 fde2 	bl	80055ae <HAL_GPIO_WritePin>
            break;
 80019ea:	e043      	b.n	8001a74 <PumpStateMachine+0x114>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2120      	movs	r1, #32
 80019f0:	4825      	ldr	r0, [pc, #148]	@ (8001a88 <PumpStateMachine+0x128>)
 80019f2:	f003 fddc 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019fc:	4822      	ldr	r0, [pc, #136]	@ (8001a88 <PumpStateMachine+0x128>)
 80019fe:	f003 fdd6 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 8001a02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a06:	f000 fb9b 	bl	8002140 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a10:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <PumpStateMachine+0x128>)
 8001a12:	f003 fdcc 	bl	80055ae <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: Duration %d min\r\n", duration);
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <PumpStateMachine+0x130>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2002      	movs	r0, #2
 8001a22:	f019 fe8b 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            HAL_Delay((uint32_t)duration * 60 * 1000);
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fb85 	bl	8002140 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2120      	movs	r1, #32
 8001a3a:	4813      	ldr	r0, [pc, #76]	@ (8001a88 <PumpStateMachine+0x128>)
 8001a3c:	f003 fdb7 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4a:	f003 fdb0 	bl	80055ae <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 8001a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a52:	f000 fb75 	bl	8002140 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a60:	f003 fda5 	bl	80055ae <HAL_GPIO_WritePin>
            APP_LOG(TS_ON, VLEVEL_M, "[PumpStateMachine] STATE_AUTO: DONE!!!\r\n");
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <PumpStateMachine+0x134>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f019 fe66 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            break;
 8001a70:	e000      	b.n	8001a74 <PumpStateMachine+0x114>
            break;
 8001a72:	bf00      	nop
    }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000038a 	.word	0x2000038a
 8001a80:	2000038b 	.word	0x2000038b
 8001a84:	0801e638 	.word	0x0801e638
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	0801e650 	.word	0x0801e650
 8001a90:	0801e66c 	.word	0x0801e66c
 8001a94:	0801e6a0 	.word	0x0801e6a0

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <LL_APB1_GRP1_EnableClock>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	@ 0x30
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	222c      	movs	r2, #44	@ 0x2c
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f01a fdee 	bl	801c6e2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b08:	4a22      	ldr	r2, [pc, #136]	@ (8001b94 <MX_RTC_Init+0xa0>)
 8001b0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b0e:	221f      	movs	r2, #31
 8001b10:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b3a:	4815      	ldr	r0, [pc, #84]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b3c:	f005 f90a 	bl	8006d54 <HAL_RTC_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001b46:	f7ff ffa7 	bl	8001a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001b4a:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b4c:	f005 fbf8 	bl	8007340 <HAL_RTCEx_SetSSRU_IT>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001b56:	f7ff ff9f 	bl	8001a98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b6a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_RTC_Init+0x9c>)
 8001b7a:	f005 f965 	bl	8006e48 <HAL_RTC_SetAlarm_IT>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001b84:	f7ff ff88 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3730      	adds	r7, #48	@ 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000038c 	.word	0x2000038c
 8001b94:	40002800 	.word	0x40002800

08001b98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	@ 0x40
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	2238      	movs	r2, #56	@ 0x38
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f01a fd9a 	bl	801c6e2 <memset>
  if(rtcHandle->Instance==RTC)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <HAL_RTC_MspInit+0x74>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d125      	bne.n	8001c04 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bbc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 ffa9 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bd4:	f7ff ff60 	bl	8001a98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bd8:	f7ff ff64 	bl	8001aa4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001be0:	f7ff ff70 	bl	8001ac4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2002      	movs	r0, #2
 8001bea:	f002 fc18 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f002 fc2f 	bl	8004452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	202a      	movs	r0, #42	@ 0x2a
 8001bfa:	f002 fc10 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001bfe:	202a      	movs	r0, #42	@ 0x2a
 8001c00:	f002 fc27 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3740      	adds	r7, #64	@ 0x40
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40002800 	.word	0x40002800

08001c10 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	58000400 	.word	0x58000400

08001c28 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c44:	f001 fa48 	bl	80030d8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001c48:	f7ff ffe2 	bl	8001c10 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f003 fd6f 	bl	8005730 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001c5a:	f001 fa4b 	bl	80030f4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001c5e:	f001 f8cb 	bl	8002df8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001c6a:	f001 fa35 	bl	80030d8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2000      	movs	r0, #0
 8001c72:	f003 fcd9 	bl	8005628 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001c7e:	f001 fa39 	bl	80030f4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca6:	bf00      	nop
 8001ca8:	e7fd      	b.n	8001ca6 <MemManage_Handler+0x4>

08001caa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <BusFault_Handler+0x4>

08001cb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <UsageFault_Handler+0x4>

08001cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001cf2:	f005 fb61 	bl	80073b8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000038c 	.word	0x2000038c

08001d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <DMA1_Channel1_IRQHandler+0x10>)
 8001d06:	f002 fe3b 	bl	8004980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000500 	.word	0x20000500

08001d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <USART1_IRQHandler+0x10>)
 8001d1a:	f006 f9af 	bl	800807c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003e0 	.word	0x200003e0

08001d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <USART2_IRQHandler+0x10>)
 8001d2e:	f006 f9a5 	bl	800807c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000470 	.word	0x20000470

08001d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001d40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d44:	f003 fc4a 	bl	80055dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <RTC_Alarm_IRQHandler+0x10>)
 8001d52:	f005 f9e1 	bl	8007118 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000038c 	.word	0x2000038c

08001d60 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001d66:	f005 fe8f 	bl	8007a88 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003c4 	.word	0x200003c4

08001d74 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_SUBGHZ_Init+0x20>)
 8001daa:	2208      	movs	r2, #8
 8001dac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_SUBGHZ_Init+0x20>)
 8001db0:	f005 fbee 	bl	8007590 <HAL_SUBGHZ_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001dba:	f7ff fe6d 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200003c4 	.word	0x200003c4

08001dc8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff ffcf 	bl	8001d74 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2032      	movs	r0, #50	@ 0x32
 8001ddc:	f002 fb1f 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001de0:	2032      	movs	r0, #50	@ 0x32
 8001de2:	f002 fb36 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e18:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <LL_FLASH_GetUDN+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	1fff7580 	.word	0x1fff7580

08001e28 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <LL_FLASH_GetDeviceID+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	1fff7584 	.word	0x1fff7584

08001e40 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <LL_FLASH_GetSTCompanyID+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0a1b      	lsrs	r3, r3, #8
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	1fff7584 	.word	0x1fff7584

08001e58 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff ffc6 	bl	8001dee <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001e62:	f019 f9ad 	bl	801b1c0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <SystemApp_Init+0x50>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001e6c:	f000 f98c 	bl	8002188 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001e70:	f019 fc36 	bl	801b6e0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <SystemApp_Init+0x54>)
 8001e76:	f019 fce1 	bl	801b83c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <SystemApp_Init+0x58>)
 8001e7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e80:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001e82:	2002      	movs	r0, #2
 8001e84:	f019 fce8 	bl	801b858 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001e88:	f7ff f9d0 	bl	800122c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001e8c:	f000 fa02 	bl	8002294 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001e90:	f018 fb64 	bl	801a55c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f018 fba0 	bl	801a5dc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f018 fb6c 	bl	801a57c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200003d0 	.word	0x200003d0
 8001eac:	08002079 	.word	0x08002079
 8001eb0:	58004000 	.word	0x58004000

08001eb4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001eb8:	f018 fbc0 	bl	801a63c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001eca:	f7ff f9bd 	bl	8001248 <SYS_GetBatteryLevel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001ed2:	88bb      	ldrh	r3, [r7, #4]
 8001ed4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d902      	bls.n	8001ee2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001edc:	23fe      	movs	r3, #254	@ 0xfe
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	e014      	b.n	8001f0c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001ee2:	88bb      	ldrh	r3, [r7, #4]
 8001ee4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ee8:	d202      	bcs.n	8001ef0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	e00d      	b.n	8001f0c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4613      	mov	r3, r2
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <GetBatteryLevel+0x58>)
 8001f04:	fba3 2302 	umull	r2, r3, r3, r2
 8001f08:	09db      	lsrs	r3, r3, #7
 8001f0a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	1b4e81b5 	.word	0x1b4e81b5

08001f1c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f989 	bl	8002240 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff1f 	bl	8000d74 <__aeabi_f2iz>
 8001f36:	4603      	mov	r3, r0
 8001f38:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001f3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001f52:	f7ff ff5f 	bl	8001e14 <LL_FLASH_GetUDN>
 8001f56:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d138      	bne.n	8001fd2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001f60:	f001 f8d6 	bl	8003110 <HAL_GetUIDw0>
 8001f64:	4604      	mov	r4, r0
 8001f66:	f001 f8e7 	bl	8003138 <HAL_GetUIDw2>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4423      	add	r3, r4
 8001f6e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001f70:	f001 f8d8 	bl	8003124 <HAL_GetUIDw1>
 8001f74:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	0e1a      	lsrs	r2, r3, #24
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	0c1a      	lsrs	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3306      	adds	r3, #6
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	0a1a      	lsrs	r2, r3, #8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3305      	adds	r3, #5
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0e1a      	lsrs	r2, r3, #24
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3303      	adds	r3, #3
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	0c1a      	lsrs	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	0a1a      	lsrs	r2, r3, #8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001fd0:	e031      	b.n	8002036 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	0a1a      	lsrs	r2, r3, #8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	0c1a      	lsrs	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3305      	adds	r3, #5
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	0e1a      	lsrs	r2, r3, #24
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002000:	f7ff ff12 	bl	8001e28 <LL_FLASH_GetDeviceID>
 8002004:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3303      	adds	r3, #3
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002010:	f7ff ff16 	bl	8001e40 <LL_FLASH_GetSTCompanyID>
 8002014:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3302      	adds	r3, #2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	0a1a      	lsrs	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2da      	uxtb	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	701a      	strb	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}

0800203e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002048:	f7ff fee4 	bl	8001e14 <LL_FLASH_GetUDN>
 800204c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d10b      	bne.n	800206e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002056:	f001 f85b 	bl	8003110 <HAL_GetUIDw0>
 800205a:	4604      	mov	r4, r0
 800205c:	f001 f862 	bl	8003124 <HAL_GetUIDw1>
 8002060:	4603      	mov	r3, r0
 8002062:	405c      	eors	r4, r3
 8002064:	f001 f868 	bl	8003138 <HAL_GetUIDw2>
 8002068:	4603      	mov	r3, r0
 800206a:	4063      	eors	r3, r4
 800206c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800206e:	687b      	ldr	r3, [r7, #4]

}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}

08002078 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f018 fbe8 	bl	801a85c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002092:	9200      	str	r2, [sp, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	@ (80020b4 <TimestampNow+0x3c>)
 8002096:	2110      	movs	r1, #16
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f81d 	bl	80020d8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe f8be 	bl	8000220 <strlen>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0801e6cc 	.word	0x0801e6cc

080020b8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f018 fa5c 	bl	801a57c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80020cc:	2100      	movs	r1, #0
 80020ce:	2002      	movs	r0, #2
 80020d0:	f018 fa54 	bl	801a57c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80020d8:	b40c      	push	{r2, r3}
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f018 fd85 	bl	801ac00 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002100:	b002      	add	sp, #8
 8002102:	4770      	bx	lr

08002104 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_GetTick+0x24>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800212a:	f000 fa41 	bl	80025b0 <TIMER_IF_GetTimerValue>
 800212e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200003d0 	.word	0x200003d0

08002140 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fab7 	bl	80026be <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <LL_AHB2_GRP1_EnableClock>:
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002174:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800218e:	f000 ffdd 	bl	800314c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002192:	f000 ffe1 	bl	8003158 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002196:	f000 ffe5 	bl	8003164 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7ff ffcf 	bl	8002158 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7ff ffcc 	bl	8002158 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7ff ffc9 	bl	8002158 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff ffc6 	bl	8002158 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80021cc:	2301      	movs	r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d8:	f002 ffa4 	bl	8005124 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4815      	ldr	r0, [pc, #84]	@ (800223c <DBG_Init+0xb4>)
 80021e8:	f002 ff9c 	bl	8005124 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80021ec:	2308      	movs	r3, #8
 80021ee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4811      	ldr	r0, [pc, #68]	@ (800223c <DBG_Init+0xb4>)
 80021f6:	f002 ff95 	bl	8005124 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80021fa:	2310      	movs	r3, #16
 80021fc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4619      	mov	r1, r3
 8002202:	480e      	ldr	r0, [pc, #56]	@ (800223c <DBG_Init+0xb4>)
 8002204:	f002 ff8e 	bl	8005124 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002210:	f003 f9cd 	bl	80055ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800221a:	4808      	ldr	r0, [pc, #32]	@ (800223c <DBG_Init+0xb4>)
 800221c:	f003 f9c7 	bl	80055ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2108      	movs	r1, #8
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <DBG_Init+0xb4>)
 8002226:	f003 f9c2 	bl	80055ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2110      	movs	r1, #16
 800222e:	4803      	ldr	r0, [pc, #12]	@ (800223c <DBG_Init+0xb4>)
 8002230:	f003 f9bd 	bl	80055ae <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	48000400 	.word	0x48000400

08002240 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002248:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <EnvSensors_Read+0x40>)
 800224a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <EnvSensors_Read+0x44>)
 800224e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <EnvSensors_Read+0x48>)
 8002252:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a08      	ldr	r2, [pc, #32]	@ (800228c <EnvSensors_Read+0x4c>)
 800226a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <EnvSensors_Read+0x50>)
 8002270:	611a      	str	r2, [r3, #16]

  return 0;
 8002272:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	42480000 	.word	0x42480000
 8002284:	41900000 	.word	0x41900000
 8002288:	447a0000 	.word	0x447a0000
 800228c:	003e090d 	.word	0x003e090d
 8002290:	000503ab 	.word	0x000503ab

08002294 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800229e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
	return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <_kill>:

int _kill(int pid, int sig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c2:	f01a fa61 	bl	801c788 <__errno>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2216      	movs	r2, #22
 80022ca:	601a      	str	r2, [r3, #0]
	return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_exit>:

void _exit (int status)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ffe7 	bl	80022b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ea:	bf00      	nop
 80022ec:	e7fd      	b.n	80022ea <_exit+0x12>

080022ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e00a      	b.n	8002316 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002300:	f3af 8000 	nop.w
 8002304:	4601      	mov	r1, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	dbf0      	blt.n	8002300 <_read+0x12>
	}

return len;
 800231e:	687b      	ldr	r3, [r7, #4]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e009      	b.n	800234e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	60ba      	str	r2, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbf1      	blt.n	800233a <_write+0x12>
	}
	return len;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_close>:

int _close(int file)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002386:	605a      	str	r2, [r3, #4]
	return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <_isatty>:

int _isatty(int file)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	return 1;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	return 0;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f01a f9ca 	bl	801c788 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20010000 	.word	0x20010000
 8002420:	00000400 	.word	0x00000400
 8002424:	200003d4 	.word	0x200003d4
 8002428:	20002510 	.word	0x20002510

0800242c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
	...

08002450 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <TIMER_IF_Init+0x5c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <TIMER_IF_Init+0x60>)
 800246a:	f04f 32ff 	mov.w	r2, #4294967295
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002470:	f7ff fb40 	bl	8001af4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002474:	f000 f856 	bl	8002524 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <TIMER_IF_Init+0x60>)
 800247e:	f004 fdef 	bl	8007060 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <TIMER_IF_Init+0x60>)
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800248a:	4809      	ldr	r0, [pc, #36]	@ (80024b0 <TIMER_IF_Init+0x60>)
 800248c:	f004 ff26 	bl	80072dc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002490:	2000      	movs	r0, #0
 8002492:	f000 f9d3 	bl	800283c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002496:	f000 f85f 	bl	8002558 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800249a:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <TIMER_IF_Init+0x5c>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80024a0:	79fb      	ldrb	r3, [r7, #7]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200003d8 	.word	0x200003d8
 80024b0:	2000038c 	.word	0x2000038c

080024b4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	@ 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	222c      	movs	r2, #44	@ 0x2c
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f01a f909 	bl	801c6e2 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80024d0:	f000 f828 	bl	8002524 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <TIMER_IF_StartTimer+0x68>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80024ec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024f0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	2201      	movs	r2, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	@ (8002520 <TIMER_IF_StartTimer+0x6c>)
 8002502:	f004 fca1 	bl	8006e48 <HAL_RTC_SetAlarm_IT>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800250c:	f7ff fac4 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002510:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002514:	4618      	mov	r0, r3
 8002516:	3738      	adds	r7, #56	@ 0x38
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200003dc 	.word	0x200003dc
 8002520:	2000038c 	.word	0x2000038c

08002524 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <TIMER_IF_StopTimer+0x2c>)
 8002530:	2201      	movs	r2, #1
 8002532:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002538:	4806      	ldr	r0, [pc, #24]	@ (8002554 <TIMER_IF_StopTimer+0x30>)
 800253a:	f004 fd91 	bl	8007060 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800253e:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <TIMER_IF_StopTimer+0x30>)
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002546:	79fb      	ldrb	r3, [r7, #7]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40002800 	.word	0x40002800
 8002554:	2000038c 	.word	0x2000038c

08002558 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800255c:	f000 f98e 	bl	800287c <GetTimerTicks>
 8002560:	4603      	mov	r3, r0
 8002562:	4a03      	ldr	r2, [pc, #12]	@ (8002570 <TIMER_IF_SetTimerContext+0x18>)
 8002564:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002566:	4b02      	ldr	r3, [pc, #8]	@ (8002570 <TIMER_IF_SetTimerContext+0x18>)
 8002568:	681b      	ldr	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200003dc 	.word	0x200003dc

08002574 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002578:	4b02      	ldr	r3, [pc, #8]	@ (8002584 <TIMER_IF_GetTimerContext+0x10>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	200003dc 	.word	0x200003dc

08002588 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002592:	f000 f973 	bl	800287c <GetTimerTicks>
 8002596:	4602      	mov	r2, r0
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <TIMER_IF_GetTimerElapsedTime+0x24>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003dc 	.word	0x200003dc

080025b0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <TIMER_IF_GetTimerValue+0x24>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80025c2:	f000 f95b 	bl	800287c <GetTimerTicks>
 80025c6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200003d8 	.word	0x200003d8

080025d8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80025e2:	2303      	movs	r3, #3
 80025e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80025e6:	687b      	ldr	r3, [r7, #4]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80025f2:	b5b0      	push	{r4, r5, r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025fa:	2100      	movs	r1, #0
 80025fc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	2000      	movs	r0, #0
 8002602:	460a      	mov	r2, r1
 8002604:	4603      	mov	r3, r0
 8002606:	0d95      	lsrs	r5, r2, #22
 8002608:	0294      	lsls	r4, r2, #10
 800260a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fe fbd3 	bl	8000dc0 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4613      	mov	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}

0800262c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800262c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002636:	2100      	movs	r1, #0
 8002638:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	2000      	movs	r0, #0
 800263e:	460c      	mov	r4, r1
 8002640:	4605      	mov	r5, r0
 8002642:	4620      	mov	r0, r4
 8002644:	4629      	mov	r1, r5
 8002646:	f04f 0a00 	mov.w	sl, #0
 800264a:	f04f 0b00 	mov.w	fp, #0
 800264e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002652:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002656:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800265a:	4650      	mov	r0, sl
 800265c:	4659      	mov	r1, fp
 800265e:	1b02      	subs	r2, r0, r4
 8002660:	eb61 0305 	sbc.w	r3, r1, r5
 8002664:	f04f 0000 	mov.w	r0, #0
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	0099      	lsls	r1, r3, #2
 800266e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002672:	0090      	lsls	r0, r2, #2
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	eb12 0804 	adds.w	r8, r2, r4
 800267c:	eb43 0905 	adc.w	r9, r3, r5
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002694:	4690      	mov	r8, r2
 8002696:	4699      	mov	r9, r3
 8002698:	4640      	mov	r0, r8
 800269a:	4649      	mov	r1, r9
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	0a82      	lsrs	r2, r0, #10
 80026a6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80026aa:	0a8b      	lsrs	r3, r1, #10
 80026ac:	4613      	mov	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026bc:	4770      	bx	lr

080026be <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff93 	bl	80025f2 <TIMER_IF_Convert_ms2Tick>
 80026cc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80026ce:	f000 f8d5 	bl	800287c <GetTimerTicks>
 80026d2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026d4:	e000      	b.n	80026d8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80026d6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80026d8:	f000 f8d0 	bl	800287c <GetTimerTicks>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f6      	bhi.n	80026d6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80026fa:	f018 feaf 	bl	801b45c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800270e:	f000 f8a5 	bl	800285c <TIMER_IF_BkUp_Read_MSBticks>
 8002712:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f88f 	bl	800283c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002726:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272a:	b08c      	sub	sp, #48	@ 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002734:	f000 f8a2 	bl	800287c <GetTimerTicks>
 8002738:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800273a:	f000 f88f 	bl	800285c <TIMER_IF_BkUp_Read_MSBticks>
 800273e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	2200      	movs	r2, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	000b      	movs	r3, r1
 8002754:	2200      	movs	r2, #0
 8002756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002758:	2000      	movs	r0, #0
 800275a:	460c      	mov	r4, r1
 800275c:	4605      	mov	r5, r0
 800275e:	eb12 0804 	adds.w	r8, r2, r4
 8002762:	eb43 0905 	adc.w	r9, r3, r5
 8002766:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800276a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	0a82      	lsrs	r2, r0, #10
 8002778:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800277c:	0a8b      	lsrs	r3, r1, #10
 800277e:	4613      	mov	r3, r2
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2200      	movs	r2, #0
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002790:	f04f 0b00 	mov.w	fp, #0
 8002794:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff46 	bl	800262c <TIMER_IF_Convert_Tick2ms>
 80027a0:	4603      	mov	r3, r0
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3730      	adds	r7, #48	@ 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027b4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	2100      	movs	r1, #0
 80027c0:	4803      	ldr	r0, [pc, #12]	@ (80027d0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80027c2:	f004 fe1d 	bl	8007400 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000038c 	.word	0x2000038c

080027d4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	2101      	movs	r1, #1
 80027e0:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80027e2:	f004 fe0d 	bl	8007400 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000038c 	.word	0x2000038c

080027f4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80027fe:	2100      	movs	r1, #0
 8002800:	4804      	ldr	r0, [pc, #16]	@ (8002814 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002802:	f004 fe15 	bl	8007430 <HAL_RTCEx_BKUPRead>
 8002806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000038c 	.word	0x2000038c

08002818 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002822:	2101      	movs	r1, #1
 8002824:	4804      	ldr	r0, [pc, #16]	@ (8002838 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002826:	f004 fe03 	bl	8007430 <HAL_RTCEx_BKUPRead>
 800282a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800282c:	687b      	ldr	r3, [r7, #4]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000038c 	.word	0x2000038c

0800283c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	2102      	movs	r1, #2
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800284a:	f004 fdd9 	bl	8007400 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000038c 	.word	0x2000038c

0800285c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002862:	2102      	movs	r1, #2
 8002864:	4804      	ldr	r0, [pc, #16]	@ (8002878 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002866:	f004 fde3 	bl	8007430 <HAL_RTCEx_BKUPRead>
 800286a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800286c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000038c 	.word	0x2000038c

0800287c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002882:	480b      	ldr	r0, [pc, #44]	@ (80028b0 <GetTimerTicks+0x34>)
 8002884:	f7ff fdd8 	bl	8002438 <LL_RTC_TIME_GetSubSecond>
 8002888:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800288a:	e003      	b.n	8002894 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800288c:	4808      	ldr	r0, [pc, #32]	@ (80028b0 <GetTimerTicks+0x34>)
 800288e:	f7ff fdd3 	bl	8002438 <LL_RTC_TIME_GetSubSecond>
 8002892:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002894:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <GetTimerTicks+0x34>)
 8002896:	f7ff fdcf 	bl	8002438 <LL_RTC_TIME_GetSubSecond>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4293      	cmp	r3, r2
 80028a0:	d1f4      	bne.n	800288c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40002800 	.word	0x40002800

080028b4 <LL_AHB2_GRP1_EnableClock>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028d8:	68fb      	ldr	r3, [r7, #12]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <LL_APB1_GRP1_EnableClock>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_APB1_GRP1_DisableClock>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	43db      	mvns	r3, r3
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800292a:	4013      	ands	r3, r2
 800292c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <LL_APB2_GRP1_EnableClock>:
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002944:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4313      	orrs	r3, r2
 800294e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800295c:	68fb      	ldr	r3, [r7, #12]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_APB2_GRP1_DisableClock>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	43db      	mvns	r3, r3
 800297a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800297e:	4013      	ands	r3, r2
 8002980:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002990:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <MX_USART1_UART_Init+0x94>)
 8002994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002996:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ce:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029d4:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029d6:	f005 fa18 	bl	8007e0a <HAL_UART_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029e0:	f7ff f85a 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e4:	2100      	movs	r1, #0
 80029e6:	480d      	ldr	r0, [pc, #52]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029e8:	f007 fac7 	bl	8009f7a <HAL_UARTEx_SetTxFifoThreshold>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029f2:	f7ff f851 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f6:	2100      	movs	r1, #0
 80029f8:	4808      	ldr	r0, [pc, #32]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 80029fa:	f007 fafc 	bl	8009ff6 <HAL_UARTEx_SetRxFifoThreshold>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a04:	f7ff f848 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002a08:	4804      	ldr	r0, [pc, #16]	@ (8002a1c <MX_USART1_UART_Init+0x90>)
 8002a0a:	f007 fa43 	bl	8009e94 <HAL_UARTEx_EnableFifoMode>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a14:	f7ff f840 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200003e0 	.word	0x200003e0
 8002a20:	40013800 	.word	0x40013800

08002a24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a28:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a2a:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <MX_USART2_UART_Init+0x94>)
 8002a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a54:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a6c:	4811      	ldr	r0, [pc, #68]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a6e:	f005 f9cc 	bl	8007e0a <HAL_UART_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a78:	f7ff f80e 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a80:	f007 fa7b 	bl	8009f7a <HAL_UARTEx_SetTxFifoThreshold>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a8a:	f7ff f805 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4808      	ldr	r0, [pc, #32]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002a92:	f007 fab0 	bl	8009ff6 <HAL_UARTEx_SetRxFifoThreshold>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a9c:	f7fe fffc 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002aa0:	4804      	ldr	r0, [pc, #16]	@ (8002ab4 <MX_USART2_UART_Init+0x90>)
 8002aa2:	f007 fa32 	bl	8009f0a <HAL_UARTEx_DisableFifoMode>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002aac:	f7fe fff4 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000470 	.word	0x20000470
 8002ab8:	40004400 	.word	0x40004400

08002abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b096      	sub	sp, #88	@ 0x58
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2238      	movs	r2, #56	@ 0x38
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f019 fe00 	bl	801c6e2 <memset>
  if(uartHandle->Instance==USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a49      	ldr	r2, [pc, #292]	@ (8002c0c <HAL_UART_MspInit+0x150>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d157      	bne.n	8002b9c <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002af0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002af4:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f810 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b06:	f7fe ffc7 	bl	8001a98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b0e:	f7ff ff13 	bl	8002938 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	2002      	movs	r0, #2
 8002b14:	f7ff fece 	bl	80028b4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002b18:	23c0      	movs	r3, #192	@ 0xc0
 8002b1a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b30:	4619      	mov	r1, r3
 8002b32:	4837      	ldr	r0, [pc, #220]	@ (8002c10 <HAL_UART_MspInit+0x154>)
 8002b34:	f002 faf6 	bl	8005124 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b38:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b3a:	4a37      	ldr	r2, [pc, #220]	@ (8002c18 <HAL_UART_MspInit+0x15c>)
 8002b3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b3e:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b40:	2212      	movs	r2, #18
 8002b42:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b44:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b46:	2210      	movs	r2, #16
 8002b48:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4a:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b50:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b56:	4b2f      	ldr	r3, [pc, #188]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b62:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b6e:	4829      	ldr	r0, [pc, #164]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b70:	f001 fc8c 	bl	800448c <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002b7a:	f7fe ff8d 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b82:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b84:	4a23      	ldr	r2, [pc, #140]	@ (8002c14 <HAL_UART_MspInit+0x158>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	2024      	movs	r0, #36	@ 0x24
 8002b90:	f001 fc45 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b94:	2024      	movs	r0, #36	@ 0x24
 8002b96:	f001 fc5c 	bl	8004452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b9a:	e033      	b.n	8002c04 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_UART_MspInit+0x160>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12e      	bne.n	8002c04 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002baa:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002bae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 ffb3 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002bc0:	f7fe ff6a 	bl	8001a98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002bc8:	f7ff fe8c 	bl	80028e4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f7ff fe71 	bl	80028b4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be2:	2307      	movs	r3, #7
 8002be4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf0:	f002 fa98 	bl	8005124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2025      	movs	r0, #37	@ 0x25
 8002bfa:	f001 fc10 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bfe:	2025      	movs	r0, #37	@ 0x25
 8002c00:	f001 fc27 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8002c04:	bf00      	nop
 8002c06:	3758      	adds	r7, #88	@ 0x58
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	48000400 	.word	0x48000400
 8002c14:	20000500 	.word	0x20000500
 8002c18:	40020008 	.word	0x40020008
 8002c1c:	40004400 	.word	0x40004400

08002c20 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <HAL_UART_MspDeInit+0x60>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d110      	bne.n	8002c54 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c32:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c36:	f7ff fe97 	bl	8002968 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002c3a:	21c0      	movs	r1, #192	@ 0xc0
 8002c3c:	4811      	ldr	r0, [pc, #68]	@ (8002c84 <HAL_UART_MspDeInit+0x64>)
 8002c3e:	f002 fbd1 	bl	80053e4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fcc8 	bl	80045dc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c4c:	2024      	movs	r0, #36	@ 0x24
 8002c4e:	f001 fc0e 	bl	800446e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002c52:	e010      	b.n	8002c76 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	@ (8002c88 <HAL_UART_MspDeInit+0x68>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10b      	bne.n	8002c76 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c5e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c62:	f7ff fe57 	bl	8002914 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002c66:	210c      	movs	r1, #12
 8002c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c6c:	f002 fbba 	bl	80053e4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c70:	2025      	movs	r0, #37	@ 0x25
 8002c72:	f001 fbfc 	bl	800446e <HAL_NVIC_DisableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40013800 	.word	0x40013800
 8002c84:	48000400 	.word	0x48000400
 8002c88:	40004400 	.word	0x40004400

08002c8c <LL_APB2_GRP1_ForceReset>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <LL_APB2_GRP1_ReleaseReset>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002ce2:	4905      	ldr	r1, [pc, #20]	@ (8002cf8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	58000800 	.word	0x58000800

08002cfc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d04:	4a07      	ldr	r2, [pc, #28]	@ (8002d24 <vcom_Init+0x28>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d0a:	f7fe fb2f 	bl	800136c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d0e:	f7ff fe3d 	bl	800298c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002d12:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002d16:	f7ff ffdd 	bl	8002cd4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002d1a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000564 	.word	0x20000564

08002d28 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002d2c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d30:	f7ff ffac 	bl	8002c8c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002d34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d38:	f7ff ffb9 	bl	8002cae <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002d3c:	4804      	ldr	r0, [pc, #16]	@ (8002d50 <vcom_DeInit+0x28>)
 8002d3e:	f7ff ff6f 	bl	8002c20 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002d42:	200f      	movs	r0, #15
 8002d44:	f001 fb93 	bl	800446e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002d48:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200003e0 	.word	0x200003e0

08002d54 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	461a      	mov	r2, r3
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4804      	ldr	r0, [pc, #16]	@ (8002d78 <vcom_Trace_DMA+0x24>)
 8002d68:	f005 f8f6 	bl	8007f58 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002d6c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200003e0 	.word	0x200003e0

08002d7c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d84:	4a19      	ldr	r2, [pc, #100]	@ (8002dec <vcom_ReceiveInit+0x70>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d8a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d8e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d98:	4815      	ldr	r0, [pc, #84]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002d9a:	f006 ffee 	bl	8009d7a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002d9e:	bf00      	nop
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dae:	d0f7      	beq.n	8002da0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002db0:	bf00      	nop
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc0:	d1f7      	bne.n	8002db2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002dd0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002dd2:	4807      	ldr	r0, [pc, #28]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002dd4:	f007 f82c 	bl	8009e30 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4906      	ldr	r1, [pc, #24]	@ (8002df4 <vcom_ReceiveInit+0x78>)
 8002ddc:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <vcom_ReceiveInit+0x74>)
 8002dde:	f005 f865 	bl	8007eac <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002de2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000568 	.word	0x20000568
 8002df0:	200003e0 	.word	0x200003e0
 8002df4:	20000560 	.word	0x20000560

08002df8 <vcom_Resume>:

void vcom_Resume(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dfc:	4808      	ldr	r0, [pc, #32]	@ (8002e20 <vcom_Resume+0x28>)
 8002dfe:	f005 f804 	bl	8007e0a <HAL_UART_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <vcom_Resume+0x14>
  {
    Error_Handler();
 8002e08:	f7fe fe46 	bl	8001a98 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e0c:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <vcom_Resume+0x2c>)
 8002e0e:	f001 fb3d 	bl	800448c <HAL_DMA_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <vcom_Resume+0x24>
  {
    Error_Handler();
 8002e18:	f7fe fe3e 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200003e0 	.word	0x200003e0
 8002e24:	20000500 	.word	0x20000500

08002e28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <HAL_UART_TxCpltCallback+0x24>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d103      	bne.n	8002e42 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e3a:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_UART_TxCpltCallback+0x28>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2000      	movs	r0, #0
 8002e40:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	20000564 	.word	0x20000564

08002e54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <HAL_UART_RxCpltCallback+0x44>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d113      	bne.n	8002e8e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_UART_RxCpltCallback+0x48>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_UART_RxCpltCallback+0x30>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e78:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HAL_UART_RxCpltCallback+0x48>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4807      	ldr	r0, [pc, #28]	@ (8002ea0 <HAL_UART_RxCpltCallback+0x4c>)
 8002e82:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <HAL_UART_RxCpltCallback+0x4c>)
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f005 f80f 	bl	8007eac <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	20000568 	.word	0x20000568
 8002ea0:	20000560 	.word	0x20000560

08002ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea4:	480d      	ldr	r0, [pc, #52]	@ (8002edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ea6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea8:	f7ff fac0 	bl	800242c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eac:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eae:	490d      	ldr	r1, [pc, #52]	@ (8002ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <LoopForever+0xe>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef0 <LoopForever+0x16>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ed2:	f019 fc5f 	bl	801c794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ed6:	f7fe fcb9 	bl	800184c <main>

08002eda <LoopForever>:

LoopForever:
    b LoopForever
 8002eda:	e7fe      	b.n	8002eda <LoopForever>
  ldr   r0, =_estack
 8002edc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee4:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002ee8:	0801fb04 	.word	0x0801fb04
  ldr r2, =_sbss
 8002eec:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002ef0:	2000250c 	.word	0x2000250c

08002ef4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC_IRQHandler>

08002ef6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f22:	f002 f8ff 	bl	8005124 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002f26:	2320      	movs	r3, #32
 8002f28:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f32:	f002 f8f7 	bl	8005124 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f36:	2200      	movs	r2, #0
 8002f38:	2120      	movs	r1, #32
 8002f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f3e:	f002 fb36 	bl	80055ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f42:	2200      	movs	r2, #0
 8002f44:	2110      	movs	r1, #16
 8002f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f4a:	f002 fb30 	bl	80055ae <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d83f      	bhi.n	8002fe8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f9b 	.word	0x08002f9b
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002fcf 	.word	0x08002fcf
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2110      	movs	r1, #16
 8002f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f88:	f002 fb11 	bl	80055ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2120      	movs	r1, #32
 8002f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f94:	f002 fb0b 	bl	80055ae <HAL_GPIO_WritePin>
      break;      
 8002f98:	e027      	b.n	8002fea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa2:	f002 fb04 	bl	80055ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2120      	movs	r1, #32
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fae:	f002 fafe 	bl	80055ae <HAL_GPIO_WritePin>
      break;
 8002fb2:	e01a      	b.n	8002fea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fbc:	f002 faf7 	bl	80055ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc8:	f002 faf1 	bl	80055ae <HAL_GPIO_WritePin>
      break;
 8002fcc:	e00d      	b.n	8002fea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd6:	f002 faea 	bl	80055ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002fda:	2201      	movs	r2, #1
 8002fdc:	2120      	movs	r1, #32
 8002fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe2:	f002 fae4 	bl	80055ae <HAL_GPIO_WritePin>
      break;
 8002fe6:	e000      	b.n	8002fea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002fe8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002ff8:	2302      	movs	r3, #2
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003014:	2301      	movs	r3, #1
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800302e:	230f      	movs	r3, #15
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e001      	b.n	8003038 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003034:	2316      	movs	r3, #22
 8003036:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a03      	ldr	r2, [pc, #12]	@ (800305c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6053      	str	r3, [r2, #4]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	e0042000 	.word	0xe0042000

08003060 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a03      	ldr	r2, [pc, #12]	@ (8003078 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	6053      	str	r3, [r2, #4]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	e0042000 	.word	0xe0042000

0800307c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a03      	ldr	r2, [pc, #12]	@ (8003094 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6053      	str	r3, [r2, #4]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	e0042000 	.word	0xe0042000

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a2:	2003      	movs	r0, #3
 80030a4:	f001 f9b0 	bl	8004408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030a8:	f003 fb5c 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <HAL_Init+0x3c>)
 80030b0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b2:	200f      	movs	r0, #15
 80030b4:	f7ff f826 	bl	8002104 <HAL_InitTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	e001      	b.n	80030c8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030c4:	f7fe fddf 	bl	8001c86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030c8:	79fb      	ldrb	r3, [r7, #7]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000000 	.word	0x20000000

080030d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <HAL_SuspendTick+0x18>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a03      	ldr	r2, [pc, #12]	@ (80030f0 <HAL_SuspendTick+0x18>)
 80030e2:	f023 0302 	bic.w	r3, r3, #2
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <HAL_ResumeTick+0x18>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a03      	ldr	r2, [pc, #12]	@ (800310c <HAL_ResumeTick+0x18>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003114:	4b02      	ldr	r3, [pc, #8]	@ (8003120 <HAL_GetUIDw0+0x10>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	1fff7590 	.word	0x1fff7590

08003124 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003128:	4b02      	ldr	r3, [pc, #8]	@ (8003134 <HAL_GetUIDw1+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	1fff7594 	.word	0x1fff7594

08003138 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800313c:	4b02      	ldr	r3, [pc, #8]	@ (8003148 <HAL_GetUIDw2+0x10>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	1fff7598 	.word	0x1fff7598

0800314c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003150:	f7ff ff78 	bl	8003044 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800315c:	f7ff ff80 	bl	8003060 <LL_DBGMCU_DisableDBGStopMode>
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003168:	f7ff ff88 	bl	800307c <LL_DBGMCU_DisableDBGStandbyMode>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2107      	movs	r1, #7
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2107      	movs	r1, #7
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	210f      	movs	r1, #15
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	401a      	ands	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	f003 010f 	and.w	r1, r3, #15
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	43db      	mvns	r3, r3
 80032e0:	401a      	ands	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	0219      	lsls	r1, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	400b      	ands	r3, r1
 80032ea:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80032ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003312:	f023 0317 	bic.w	r3, r3, #23
 8003316:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003338:	f023 0317 	bic.w	r3, r3, #23
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6093      	str	r3, [r2, #8]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800335e:	d101      	bne.n	8003364 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003380:	f023 0317 	bic.w	r3, r3, #23
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033a6:	f023 0317 	bic.w	r3, r3, #23
 80033aa:	f043 0202 	orr.w	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <LL_ADC_IsEnabled+0x18>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_ADC_IsEnabled+0x1a>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d101      	bne.n	80033f8 <LL_ADC_IsDisableOngoing+0x18>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <LL_ADC_IsDisableOngoing+0x1a>
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003414:	f023 0317 	bic.w	r3, r3, #23
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800343a:	f023 0317 	bic.w	r3, r3, #23
 800343e:	f043 0210 	orr.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d101      	bne.n	8003468 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e19e      	b.n	80037d4 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd fe99 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff44 	bl	800334a <LL_ADC_IsInternalRegulatorEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d115      	bne.n	80034f4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff18 	bl	8003302 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d2:	4b99      	ldr	r3, [pc, #612]	@ (8003738 <HAL_ADC_Init+0x2c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	099b      	lsrs	r3, r3, #6
 80034d8:	4a98      	ldr	r2, [pc, #608]	@ (800373c <HAL_ADC_Init+0x2c8>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	3301      	adds	r3, #1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034e6:	e002      	b.n	80034ee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f9      	bne.n	80034e8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff26 	bl	800334a <LL_ADC_IsInternalRegulatorEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	f043 0210 	orr.w	r2, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff93 	bl	8003450 <LL_ADC_REG_IsConversionOngoing>
 800352a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 8144 	bne.w	80037c2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8140 	bne.w	80037c2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff30 	bl	80033bc <LL_ADC_IsEnabled>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80a7 	bne.w	80036b2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
 800356c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800356e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7e5b      	ldrb	r3, [r3, #25]
 8003574:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003576:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e9b      	ldrb	r3, [r3, #26]
 800357c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800357e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003584:	2a00      	cmp	r2, #0
 8003586:	d002      	beq.n	800358e <HAL_ADC_Init+0x11a>
 8003588:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800358c:	e000      	b.n	8003590 <HAL_ADC_Init+0x11c>
 800358e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003590:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003596:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	da04      	bge.n	80035aa <HAL_ADC_Init+0x136>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035a8:	e001      	b.n	80035ae <HAL_ADC_Init+0x13a>
 80035aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80035ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035b6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035b8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d114      	bne.n	80035f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7e9b      	ldrb	r3, [r3, #26]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e00b      	b.n	80035f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003608:	4313      	orrs	r3, r2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 800361a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003634:	4313      	orrs	r3, r2
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d111      	bne.n	800366a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003652:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003658:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800365e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	4b33      	ldr	r3, [pc, #204]	@ (8003740 <HAL_ADC_Init+0x2cc>)
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	430b      	orrs	r3, r1
 800367c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003686:	d014      	beq.n	80036b2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d00f      	beq.n	80036b2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369a:	d00a      	beq.n	80036b2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800369c:	4b29      	ldr	r3, [pc, #164]	@ (8003744 <HAL_ADC_Init+0x2d0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80036ac:	4925      	ldr	r1, [pc, #148]	@ (8003744 <HAL_ADC_Init+0x2d0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	461a      	mov	r2, r3
 80036bc:	2100      	movs	r1, #0
 80036be:	f7ff fd76 	bl	80031ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	461a      	mov	r2, r3
 80036cc:	491e      	ldr	r1, [pc, #120]	@ (8003748 <HAL_ADC_Init+0x2d4>)
 80036ce:	f7ff fd6e 	bl	80031ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f062 020f 	orn	r2, r2, #15
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ea:	e042      	b.n	8003772 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f4:	d13d      	bne.n	8003772 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	e00c      	b.n	8003716 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d006      	beq.n	800371e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3301      	adds	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b07      	cmp	r3, #7
 800371a:	d9ef      	bls.n	80036fc <HAL_ADC_Init+0x288>
 800371c:	e000      	b.n	8003720 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800371e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d112      	bne.n	800374c <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f062 020f 	orn	r2, r2, #15
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
 8003736:	e01c      	b.n	8003772 <HAL_ADC_Init+0x2fe>
 8003738:	20000000 	.word	0x20000000
 800373c:	053e2d63 	.word	0x053e2d63
 8003740:	1ffffc02 	.word	0x1ffffc02
 8003744:	40012708 	.word	0x40012708
 8003748:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	3b01      	subs	r3, #1
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	f003 031c 	and.w	r3, r3, #28
 800375e:	f06f 020f 	mvn.w	r2, #15
 8003762:	fa02 f103 	lsl.w	r1, r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fd36 	bl	80031ea <LL_ADC_GetSamplingTimeCommonChannels>
 800377e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003784:	429a      	cmp	r2, r3
 8003786:	d10b      	bne.n	80037a0 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800379e:	e018      	b.n	80037d2 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a4:	f023 0312 	bic.w	r3, r3, #18
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037c0:	e007      	b.n	80037d2 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	f043 0210 	orr.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06a      	b.n	80038c4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fabe 	bl	8003d7c <ADC_ConversionStop>
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fb82 	bl	8003f14 <ADC_Disable>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fd7f 	bl	8003328 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003838:	f023 0303 	bic.w	r3, r3, #3
 800383c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f240 329f 	movw	r2, #927	@ 0x39f
 8003846:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_ADC_DeInit+0xf0>)
 8003854:	400b      	ands	r3, r1
 8003856:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003866:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0207 	bic.w	r2, r2, #7
 8003876:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003886:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003896:	4b0e      	ldr	r3, [pc, #56]	@ (80038d0 <HAL_ADC_DeInit+0xf4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <HAL_ADC_DeInit+0xf4>)
 800389c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80038a0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fcae 	bl	8001204 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	833e0200 	.word	0x833e0200
 80038d0:	40012708 	.word	0x40012708

080038d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fdb5 	bl	8003450 <LL_ADC_REG_IsConversionOngoing>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d132      	bne.n	8003952 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Start+0x26>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e02e      	b.n	8003958 <HAL_ADC_Start+0x84>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa80 	bl	8003e08 <ADC_Enable>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11a      	bne.n	8003948 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	221c      	movs	r2, #28
 8003932:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fd5f 	bl	8003404 <LL_ADC_REG_StartConversion>
 8003946:	e006      	b.n	8003956 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003950:	e001      	b.n	8003956 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_ADC_Stop+0x16>
 8003972:	2302      	movs	r3, #2
 8003974:	e022      	b.n	80039bc <HAL_ADC_Stop+0x5c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9fc 	bl	8003d7c <ADC_ConversionStop>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d111      	bne.n	80039b2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fac0 	bl	8003f14 <ADC_Disable>
 8003994:	4603      	mov	r3, r0
 8003996:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d102      	bne.n	80039dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80039d6:	2308      	movs	r3, #8
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e010      	b.n	80039fe <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e077      	b.n	8003aea <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80039fa:	2304      	movs	r3, #4
 80039fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039fe:	f7fe fb8b 	bl	8002118 <HAL_GetTick>
 8003a02:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a04:	e021      	b.n	8003a4a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d01d      	beq.n	8003a4a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a0e:	f7fe fb83 	bl	8002118 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <HAL_ADC_PollForConversion+0x60>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d112      	bne.n	8003a4a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e04f      	b.n	8003aea <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0d6      	beq.n	8003a06 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fbd6 	bl	800321a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d031      	beq.n	8003ad8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	7e9b      	ldrb	r3, [r3, #26]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d12d      	bne.n	8003ad8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d126      	bne.n	8003ad8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fcde 	bl	8003450 <LL_ADC_REG_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d112      	bne.n	8003ac0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 020c 	bic.w	r2, r2, #12
 8003aa8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003abe:	e00b      	b.n	8003ad8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e1b      	ldrb	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x28>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e110      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x24a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fc85 	bl	8003450 <LL_ADC_REG_IsConversionOngoing>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 80f7 	bne.w	8003d3c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	f000 80b1 	beq.w	8003cba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b60:	d004      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b66:	4a7e      	ldr	r2, [pc, #504]	@ (8003d60 <HAL_ADC_ConfigChannel+0x254>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d108      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7ff fb82 	bl	8003280 <LL_ADC_REG_SetSequencerChAdd>
 8003b7c:	e041      	b.n	8003c02 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_ConfigChannel+0xa0>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	e011      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0xc4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	6849      	ldr	r1, [r1, #4]
 8003bd4:	f001 011f 	and.w	r1, r1, #31
 8003bd8:	408b      	lsls	r3, r1
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d808      	bhi.n	8003c02 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f7ff fb1e 	bl	800323e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7ff fb5b 	bl	80032ca <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f280 8097 	bge.w	8003d4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1e:	4851      	ldr	r0, [pc, #324]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003c20:	f7ff fab8 	bl	8003194 <LL_ADC_GetCommonPathInternalCh>
 8003c24:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8003d68 <HAL_ADC_ConfigChannel+0x25c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d120      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11b      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c40:	4619      	mov	r1, r3
 8003c42:	4848      	ldr	r0, [pc, #288]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003c44:	f7ff fa94 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c48:	4b48      	ldr	r3, [pc, #288]	@ (8003d6c <HAL_ADC_ConfigChannel+0x260>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	4a48      	ldr	r2, [pc, #288]	@ (8003d70 <HAL_ADC_ConfigChannel+0x264>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c62:	e002      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f9      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c70:	e06c      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3f      	ldr	r2, [pc, #252]	@ (8003d74 <HAL_ADC_ConfigChannel+0x268>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x18a>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4835      	ldr	r0, [pc, #212]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003c90:	f7ff fa6e 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
 8003c94:	e05a      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a37      	ldr	r2, [pc, #220]	@ (8003d78 <HAL_ADC_ConfigChannel+0x26c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d155      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d150      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	482c      	ldr	r0, [pc, #176]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003cb4:	f7ff fa5c 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
 8003cb8:	e048      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc2:	d004      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cc8:	4a25      	ldr	r2, [pc, #148]	@ (8003d60 <HAL_ADC_ConfigChannel+0x254>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d107      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7ff fae3 	bl	80032a4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da32      	bge.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ce6:	481f      	ldr	r0, [pc, #124]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003ce8:	f7ff fa54 	bl	8003194 <LL_ADC_GetCommonPathInternalCh>
 8003cec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <HAL_ADC_ConfigChannel+0x25c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d107      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4818      	ldr	r0, [pc, #96]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003d02:	f7ff fa35 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
 8003d06:	e021      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_ADC_ConfigChannel+0x268>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d107      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4812      	ldr	r0, [pc, #72]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003d1c:	f7ff fa28 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
 8003d20:	e014      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <HAL_ADC_ConfigChannel+0x26c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10f      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003d32:	4619      	mov	r1, r3
 8003d34:	480b      	ldr	r0, [pc, #44]	@ (8003d64 <HAL_ADC_ConfigChannel+0x258>)
 8003d36:	f7ff fa1b 	bl	8003170 <LL_ADC_SetCommonPathInternalCh>
 8003d3a:	e007      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	80000004 	.word	0x80000004
 8003d64:	40012708 	.word	0x40012708
 8003d68:	b0001000 	.word	0xb0001000
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	053e2d63 	.word	0x053e2d63
 8003d74:	b8004000 	.word	0xb8004000
 8003d78:	b4002000 	.word	0xb4002000

08003d7c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fb61 	bl	8003450 <LL_ADC_REG_IsConversionOngoing>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d033      	beq.n	8003dfc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fb21 	bl	80033e0 <LL_ADC_IsDisableOngoing>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fb3e 	bl	800342a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dae:	f7fe f9b3 	bl	8002118 <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003db4:	e01b      	b.n	8003dee <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003db6:	f7fe f9af 	bl	8002118 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d914      	bls.n	8003dee <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1dc      	bne.n	8003db6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff facf 	bl	80033bc <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d169      	bne.n	8003ef8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <ADC_Enable+0xfc>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	f043 0210 	orr.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e055      	b.n	8003efa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fa8c 	bl	8003370 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e58:	482b      	ldr	r0, [pc, #172]	@ (8003f08 <ADC_Enable+0x100>)
 8003e5a:	f7ff f99b 	bl	8003194 <LL_ADC_GetCommonPathInternalCh>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00f      	beq.n	8003e88 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <ADC_Enable+0x104>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <ADC_Enable+0x108>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	3301      	adds	r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e7a:	e002      	b.n	8003e82 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f9      	bne.n	8003e7c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7e5b      	ldrb	r3, [r3, #25]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d033      	beq.n	8003ef8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e90:	f7fe f942 	bl	8002118 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e96:	e028      	b.n	8003eea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fa8d 	bl	80033bc <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fa5f 	bl	8003370 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eb2:	f7fe f931 	bl	8002118 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d914      	bls.n	8003eea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d00d      	beq.n	8003eea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	f043 0210 	orr.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e007      	b.n	8003efa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d1cf      	bne.n	8003e98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	80000017 	.word	0x80000017
 8003f08:	40012708 	.word	0x40012708
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	053e2d63 	.word	0x053e2d63

08003f14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fa5d 	bl	80033e0 <LL_ADC_IsDisableOngoing>
 8003f26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fa45 	bl	80033bc <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d047      	beq.n	8003fc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d144      	bne.n	8003fc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0305 	and.w	r3, r3, #5
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10c      	bne.n	8003f66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fa20 	bl	8003396 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f5e:	f7fe f8db 	bl	8002118 <HAL_GetTick>
 8003f62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f64:	e029      	b.n	8003fba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e023      	b.n	8003fca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f82:	f7fe f8c9 	bl	8002118 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d914      	bls.n	8003fba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e007      	b.n	8003fca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1dc      	bne.n	8003f82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <LL_ADC_SetCalibrationFactor>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_ADC_GetCalibrationFactor>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_ADC_Enable>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004026:	f023 0317 	bic.w	r3, r3, #23
 800402a:	f043 0201 	orr.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <LL_ADC_Disable>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800404c:	f023 0317 	bic.w	r3, r3, #23
 8004050:	f043 0202 	orr.w	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <LL_ADC_IsEnabled>:
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <LL_ADC_IsEnabled+0x18>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_IsEnabled+0x1a>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <LL_ADC_StartCalibration>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004096:	f023 0317 	bic.w	r3, r3, #23
 800409a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_IsCalibrationOnGoing>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_ADCEx_Calibration_Start+0x1e>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0b9      	b.n	8004264 <HAL_ADCEx_Calibration_Start+0x192>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff0b 	bl	8003f14 <ADC_Disable>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ffab 	bl	8004062 <LL_ADC_IsEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 809d 	bne.w	800424e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800411c:	f043 0202 	orr.w	r2, r3, #2
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	f248 0303 	movw	r3, #32771	@ 0x8003
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004140:	f023 0303 	bic.w	r3, r3, #3
 8004144:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e02e      	b.n	80041aa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff98 	bl	8004086 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004156:	e014      	b.n	8004182 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	3301      	adds	r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004164:	d30d      	bcc.n	8004182 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	f023 0312 	bic.w	r3, r3, #18
 800416e:	f043 0210 	orr.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e070      	b.n	8004264 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff90 	bl	80040ac <LL_ADC_IsCalibrationOnGoing>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e2      	bne.n	8004158 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff2f 	bl	8003ffa <LL_ADC_GetCalibrationFactor>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b07      	cmp	r3, #7
 80041ae:	d9cd      	bls.n	800414c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff29 	bl	8004016 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ff01 	bl	8003fd2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff31 	bl	800403c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041da:	f7fd ff9d 	bl	8002118 <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041e0:	e01c      	b.n	800421c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041e2:	f7fd ff99 	bl	8002118 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d915      	bls.n	800421c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff34 	bl	8004062 <LL_ADC_IsEnabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f043 0210 	orr.w	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e023      	b.n	8004264 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff1e 	bl	8004062 <LL_ADC_IsEnabled>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1da      	bne.n	80041e2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	430a      	orrs	r2, r1
 800423a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	f023 0303 	bic.w	r3, r3, #3
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	659a      	str	r2, [r3, #88]	@ 0x58
 800424c:	e005      	b.n	800425a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f043 0210 	orr.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004288:	4013      	ands	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429e:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	60d3      	str	r3, [r2, #12]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <__NVIC_GetPriorityGrouping+0x18>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	f003 0307 	and.w	r3, r3, #7
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db0b      	blt.n	80042fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4906      	ldr	r1, [pc, #24]	@ (8004304 <__NVIC_EnableIRQ+0x34>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db12      	blt.n	8004340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	490a      	ldr	r1, [pc, #40]	@ (800434c <__NVIC_DisableIRQ+0x44>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	3320      	adds	r3, #32
 8004330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004334:	f3bf 8f4f 	dsb	sy
}
 8004338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800433a:	f3bf 8f6f 	isb	sy
}
 800433e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100

08004350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	db0a      	blt.n	800437a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	490c      	ldr	r1, [pc, #48]	@ (800439c <__NVIC_SetPriority+0x4c>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	440b      	add	r3, r1
 8004374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004378:	e00a      	b.n	8004390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <__NVIC_SetPriority+0x50>)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3b04      	subs	r3, #4
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	440b      	add	r3, r1
 800438e:	761a      	strb	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	@ 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f1c3 0307 	rsb	r3, r3, #7
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf28      	it	cs
 80043c2:	2304      	movcs	r3, #4
 80043c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d902      	bls.n	80043d4 <NVIC_EncodePriority+0x30>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3b03      	subs	r3, #3
 80043d2:	e000      	b.n	80043d6 <NVIC_EncodePriority+0x32>
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	401a      	ands	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043ec:	f04f 31ff 	mov.w	r1, #4294967295
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43d9      	mvns	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	4313      	orrs	r3, r2
         );
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	@ 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff2b 	bl	800426c <__NVIC_SetPriorityGrouping>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff42 	bl	80042b4 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ffb4 	bl	80043a4 <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff83 	bl	8004350 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff35 	bl	80042d0 <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff43 	bl	8004308 <__NVIC_DisableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e08e      	b.n	80045bc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_DMA_Init+0x138>)
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d80f      	bhi.n	80044ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b45      	ldr	r3, [pc, #276]	@ (80045c8 <HAL_DMA_Init+0x13c>)
 80044b2:	4413      	add	r3, r2
 80044b4:	4a45      	ldr	r2, [pc, #276]	@ (80045cc <HAL_DMA_Init+0x140>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	009a      	lsls	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a42      	ldr	r2, [pc, #264]	@ (80045d0 <HAL_DMA_Init+0x144>)
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80044c8:	e00e      	b.n	80044e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b40      	ldr	r3, [pc, #256]	@ (80045d4 <HAL_DMA_Init+0x148>)
 80044d2:	4413      	add	r3, r2
 80044d4:	4a3d      	ldr	r2, [pc, #244]	@ (80045cc <HAL_DMA_Init+0x140>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	009a      	lsls	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a3c      	ldr	r2, [pc, #240]	@ (80045d8 <HAL_DMA_Init+0x14c>)
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fb24 	bl	8004b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004548:	d102      	bne.n	8004550 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800455c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004566:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_DMA_Init+0x106>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d80c      	bhi.n	8004592 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb4d 	bl	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	e008      	b.n	80045a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40020407 	.word	0x40020407
 80045c8:	bffdfff8 	.word	0xbffdfff8
 80045cc:	cccccccd 	.word	0xcccccccd
 80045d0:	40020000 	.word	0x40020000
 80045d4:	bffdfbf8 	.word	0xbffdfbf8
 80045d8:	40020400 	.word	0x40020400

080045dc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07b      	b.n	80046e6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_DMA_DeInit+0x114>)
 8004606:	429a      	cmp	r2, r3
 8004608:	d80f      	bhi.n	800462a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <HAL_DMA_DeInit+0x118>)
 8004612:	4413      	add	r3, r2
 8004614:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <HAL_DMA_DeInit+0x11c>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a35      	ldr	r2, [pc, #212]	@ (80046fc <HAL_DMA_DeInit+0x120>)
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
 8004628:	e00e      	b.n	8004648 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	4b33      	ldr	r3, [pc, #204]	@ (8004700 <HAL_DMA_DeInit+0x124>)
 8004632:	4413      	add	r3, r2
 8004634:	4a30      	ldr	r2, [pc, #192]	@ (80046f8 <HAL_DMA_DeInit+0x11c>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2f      	ldr	r2, [pc, #188]	@ (8004704 <HAL_DMA_DeInit+0x128>)
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004654:	f003 021c 	and.w	r2, r3, #28
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa8f 	bl	8004b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800467a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00f      	beq.n	80046a4 <HAL_DMA_DeInit+0xc8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d80b      	bhi.n	80046a4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fac3 	bl	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046a2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40020407 	.word	0x40020407
 80046f4:	bffdfff8 	.word	0xbffdfff8
 80046f8:	cccccccd 	.word	0xcccccccd
 80046fc:	40020000 	.word	0x40020000
 8004700:	bffdfbf8 	.word	0xbffdfbf8
 8004704:	40020400 	.word	0x40020400

08004708 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_DMA_Start_IT+0x20>
 8004724:	2302      	movs	r3, #2
 8004726:	e069      	b.n	80047fc <HAL_DMA_Start_IT+0xf4>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d155      	bne.n	80047e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f9d3 	bl	8004b0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 020e 	orr.w	r2, r2, #14
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e00f      	b.n	80047a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 020a 	orr.w	r2, r2, #10
 800479e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e008      	b.n	80047fa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2280      	movs	r2, #128	@ 0x80
 80047ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e04f      	b.n	80048b6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d008      	beq.n	8004834 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2204      	movs	r2, #4
 8004826:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e040      	b.n	80048b6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020e 	bic.w	r2, r2, #14
 8004842:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004852:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004868:	f003 021c 	and.w	r2, r3, #28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004880:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004898:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d005      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e047      	b.n	8004974 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 020e 	bic.w	r2, r2, #14
 80048f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	f003 021c 	and.w	r2, r3, #28
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f202 	lsl.w	r2, r1, r2
 8004926:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004930:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004948:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004952:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
    }
  }
  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	f003 031c 	and.w	r3, r3, #28
 80049a0:	2204      	movs	r2, #4
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d027      	beq.n	80049fc <HAL_DMA_IRQHandler+0x7c>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	f003 021c 	and.w	r2, r3, #28
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	2104      	movs	r1, #4
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8081 	beq.w	8004af4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80049fa:	e07b      	b.n	8004af4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	f003 031c 	and.w	r3, r3, #28
 8004a04:	2202      	movs	r2, #2
 8004a06:	409a      	lsls	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d03d      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x10c>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d038      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 020a 	bic.w	r2, r2, #10
 8004a36:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <HAL_DMA_IRQHandler+0x180>)
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d909      	bls.n	8004a60 <HAL_DMA_IRQHandler+0xe0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a50:	f003 031c 	and.w	r3, r3, #28
 8004a54:	4a2b      	ldr	r2, [pc, #172]	@ (8004b04 <HAL_DMA_IRQHandler+0x184>)
 8004a56:	2102      	movs	r1, #2
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	6053      	str	r3, [r2, #4]
 8004a5e:	e008      	b.n	8004a72 <HAL_DMA_IRQHandler+0xf2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f003 031c 	and.w	r3, r3, #28
 8004a68:	4a27      	ldr	r2, [pc, #156]	@ (8004b08 <HAL_DMA_IRQHandler+0x188>)
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d038      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a8a:	e033      	b.n	8004af4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a90:	f003 031c 	and.w	r3, r3, #28
 8004a94:	2208      	movs	r2, #8
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x176>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 020e 	bic.w	r2, r2, #14
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f003 021c 	and.w	r2, r3, #28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8004acc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
}
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40020080 	.word	0x40020080
 8004b04:	40020400 	.word	0x40020400
 8004b08:	40020000 	.word	0x40020000

08004b0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f003 021c 	and.w	r2, r3, #28
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2101      	movs	r1, #1
 8004b44:	fa01 f202 	lsl.w	r2, r1, r2
 8004b48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d108      	bne.n	8004b6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b6a:	e007      	b.n	8004b7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	4b1c      	ldr	r3, [pc, #112]	@ (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d813      	bhi.n	8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ba8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3b08      	subs	r3, #8
 8004bb8:	4a14      	ldr	r2, [pc, #80]	@ (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e011      	b.n	8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	009a      	lsls	r2, r3, #2
 8004bcc:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3b08      	subs	r3, #8
 8004bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	3307      	adds	r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004bec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40020407 	.word	0x40020407
 8004c0c:	cccccccd 	.word	0xcccccccd
 8004c10:	4002081c 	.word	0x4002081c
 8004c14:	40020880 	.word	0x40020880

08004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2201      	movs	r2, #1
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	1000823f 	.word	0x1000823f
 8004c5c:	40020940 	.word	0x40020940

08004c60 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <HAL_FLASH_Program+0x80>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_FLASH_Program+0x1a>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e02d      	b.n	8004cd6 <HAL_FLASH_Program+0x76>
 8004c7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_FLASH_Program+0x80>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c80:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <HAL_FLASH_Program+0x80>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c8a:	f000 f869 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11a      	bne.n	8004cce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca2:	68b8      	ldr	r0, [r7, #8]
 8004ca4:	f000 f8be 	bl	8004e24 <FLASH_Program_DoubleWord>
 8004ca8:	e004      	b.n	8004cb4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	68b8      	ldr	r0, [r7, #8]
 8004cb0:	f000 f8de 	bl	8004e70 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cb8:	f000 f852 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <HAL_FLASH_Program+0x84>)
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	4906      	ldr	r1, [pc, #24]	@ (8004ce4 <HAL_FLASH_Program+0x84>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <HAL_FLASH_Program+0x80>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000056c 	.word	0x2000056c
 8004ce4:	58004000 	.word	0x58004000

08004ce8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_FLASH_Unlock+0x38>)
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0b      	bge.n	8004d12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_FLASH_Unlock+0x38>)
 8004cfc:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <HAL_FLASH_Unlock+0x3c>)
 8004cfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_FLASH_Unlock+0x38>)
 8004d02:	4a09      	ldr	r2, [pc, #36]	@ (8004d28 <HAL_FLASH_Unlock+0x40>)
 8004d04:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_FLASH_Unlock+0x38>)
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d12:	79fb      	ldrb	r3, [r7, #7]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	58004000 	.word	0x58004000
 8004d24:	45670123 	.word	0x45670123
 8004d28:	cdef89ab 	.word	0xcdef89ab

08004d2c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_FLASH_Lock+0x30>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <HAL_FLASH_Lock+0x30>)
 8004d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d40:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_FLASH_Lock+0x30>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	db01      	blt.n	8004d4e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	58004000 	.word	0x58004000

08004d60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7fd f9d6 	bl	8002118 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d6e:	e009      	b.n	8004d84 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d70:	f7fd f9d2 	bl	8002118 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d801      	bhi.n	8004d84 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e046      	b.n	8004e12 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d84:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d0ee      	beq.n	8004d70 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d92:	4b22      	ldr	r3, [pc, #136]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004da2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004dae:	4013      	ands	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db8:	d307      	bcc.n	8004dca <FLASH_WaitForLastOperation+0x6a>
 8004dba:	4b18      	ldr	r3, [pc, #96]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dc4:	4915      	ldr	r1, [pc, #84]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	618b      	str	r3, [r1, #24]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <FLASH_WaitForLastOperation+0x7e>
 8004dd4:	4a11      	ldr	r2, [pc, #68]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ddc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004de4:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <FLASH_WaitForLastOperation+0xc0>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e011      	b.n	8004e12 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004dee:	f7fd f993 	bl	8002118 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d801      	bhi.n	8004e02 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e007      	b.n	8004e12 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <FLASH_WaitForLastOperation+0xbc>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e0e:	d0ee      	beq.n	8004dee <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	58004000 	.word	0x58004000
 8004e20:	2000056c 	.word	0x2000056c

08004e24 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e30:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <FLASH_Program_DoubleWord+0x48>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	4a0d      	ldr	r2, [pc, #52]	@ (8004e6c <FLASH_Program_DoubleWord+0x48>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e42:	f3bf 8f6f 	isb	sy
}
 8004e46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	000a      	movs	r2, r1
 8004e56:	2300      	movs	r3, #0
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	3104      	adds	r1, #4
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	58004000 	.word	0x58004000

08004e70 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	@ 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e7a:	2340      	movs	r3, #64	@ 0x40
 8004e7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e86:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <FLASH_Program_Fast+0x78>)
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ee8 <FLASH_Program_Fast+0x78>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e92:	f3ef 8310 	mrs	r3, PRIMASK
 8004e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e98:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e9c:	b672      	cpsid	i
}
 8004e9e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	617b      	str	r3, [r7, #20]
    row_index--;
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004ec0:	bf00      	nop
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <FLASH_Program_Fast+0x78>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ece:	d0f8      	beq.n	8004ec2 <FLASH_Program_Fast+0x52>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004edc:	bf00      	nop
 8004ede:	3724      	adds	r7, #36	@ 0x24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	58004000 	.word	0x58004000

08004eec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ef6:	4b28      	ldr	r3, [pc, #160]	@ (8004f98 <HAL_FLASHEx_Erase+0xac>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_FLASHEx_Erase+0x16>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e046      	b.n	8004f90 <HAL_FLASHEx_Erase+0xa4>
 8004f02:	4b25      	ldr	r3, [pc, #148]	@ (8004f98 <HAL_FLASHEx_Erase+0xac>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f08:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_FLASHEx_Erase+0xac>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f12:	f7ff ff25 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004f16:	4603      	mov	r3, r0
 8004f18:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d133      	bne.n	8004f88 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d108      	bne.n	8004f3a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004f28:	f000 f880 	bl	800502c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f30:	f7ff ff16 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	e024      	b.n	8004f84 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f40:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	e012      	b.n	8004f70 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f000 f87e 	bl	800504c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f54:	f7ff ff04 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	601a      	str	r2, [r3, #0]
          break;
 8004f68:	e00a      	b.n	8004f80 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4413      	add	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d3e4      	bcc.n	8004f4a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f80:	f000 f8c0 	bl	8005104 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f84:	f000 f87a 	bl	800507c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f88:	4b03      	ldr	r3, [pc, #12]	@ (8004f98 <HAL_FLASHEx_Erase+0xac>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]

  return status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	2000056c 	.word	0x2000056c

08004f9c <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_FLASHEx_Erase_IT+0x14>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e034      	b.n	800501a <HAL_FLASHEx_Erase_IT+0x7e>
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fc2:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fc8:	f7ff feca 	bl	8004d60 <FLASH_WaitForLastOperation>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e01c      	b.n	8005018 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004fde:	4b12      	ldr	r3, [pc, #72]	@ (8005028 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4a11      	ldr	r2, [pc, #68]	@ (8005028 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fe4:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8004fe8:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d105      	bne.n	8004ffe <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004ff8:	f000 f818 	bl	800502c <FLASH_MassErase>
 8004ffc:	e00c      	b.n	8005018 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 8005004:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a06      	ldr	r2, [pc, #24]	@ (8005024 <HAL_FLASHEx_Erase_IT+0x88>)
 800500c:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f81a 	bl	800504c <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	2000056c 	.word	0x2000056c
 8005028:	58004000 	.word	0x58004000

0800502c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005030:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <FLASH_MassErase+0x1c>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	4a04      	ldr	r2, [pc, #16]	@ (8005048 <FLASH_MassErase+0x1c>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6153      	str	r3, [r2, #20]
#endif
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	58004000 	.word	0x58004000

0800504c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005054:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <FLASH_PageErase+0x2c>)
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4313      	orrs	r3, r2
 8005062:	4a05      	ldr	r2, [pc, #20]	@ (8005078 <FLASH_PageErase+0x2c>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	6153      	str	r3, [r2, #20]
#endif
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	58004000 	.word	0x58004000

0800507c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005080:	4b1f      	ldr	r3, [pc, #124]	@ (8005100 <FLASH_FlushCaches+0x84>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005088:	2b01      	cmp	r3, #1
 800508a:	d117      	bne.n	80050bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800508c:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <FLASH_FlushCaches+0x84>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1b      	ldr	r2, [pc, #108]	@ (8005100 <FLASH_FlushCaches+0x84>)
 8005092:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005096:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005098:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <FLASH_FlushCaches+0x84>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <FLASH_FlushCaches+0x84>)
 800509e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050b0:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a12      	ldr	r2, [pc, #72]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050ba:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80050bc:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d117      	bne.n	80050f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a06      	ldr	r2, [pc, #24]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a03      	ldr	r2, [pc, #12]	@ (8005100 <FLASH_FlushCaches+0x84>)
 80050f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050f6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr
 8005100:	58004000 	.word	0x58004000

08005104 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <FLASH_AcknowledgePageErase+0x1c>)
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <FLASH_AcknowledgePageErase+0x1c>)
 800510e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005112:	f023 0302 	bic.w	r3, r3, #2
 8005116:	6153      	str	r3, [r2, #20]
#endif
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	58004000 	.word	0x58004000

08005124 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005132:	e140      	b.n	80053b6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2101      	movs	r1, #1
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8132 	beq.w	80053b0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d005      	beq.n	8005164 <HAL_GPIO_Init+0x40>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d130      	bne.n	80051c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2203      	movs	r2, #3
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800519a:	2201      	movs	r2, #1
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0201 	and.w	r2, r3, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d017      	beq.n	8005202 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d123      	bne.n	8005256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	08da      	lsrs	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	08da      	lsrs	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3208      	adds	r2, #8
 8005250:	6939      	ldr	r1, [r7, #16]
 8005252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2203      	movs	r2, #3
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0203 	and.w	r2, r3, #3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 808c 	beq.w	80053b0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005298:	4a4e      	ldr	r2, [pc, #312]	@ (80053d4 <HAL_GPIO_Init+0x2b0>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	2207      	movs	r2, #7
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80052c2:	d00d      	beq.n	80052e0 <HAL_GPIO_Init+0x1bc>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a44      	ldr	r2, [pc, #272]	@ (80053d8 <HAL_GPIO_Init+0x2b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <HAL_GPIO_Init+0x1b8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a43      	ldr	r2, [pc, #268]	@ (80053dc <HAL_GPIO_Init+0x2b8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d101      	bne.n	80052d8 <HAL_GPIO_Init+0x1b4>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e004      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052d8:	2307      	movs	r3, #7
 80052da:	e002      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052e0:	2300      	movs	r3, #0
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	f002 0203 	and.w	r2, r2, #3
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	4093      	lsls	r3, r2
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052f2:	4938      	ldr	r1, [pc, #224]	@ (80053d4 <HAL_GPIO_Init+0x2b0>)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	3302      	adds	r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005300:	4b37      	ldr	r3, [pc, #220]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	43db      	mvns	r3, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005324:	4a2e      	ldr	r2, [pc, #184]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800532a:	4b2d      	ldr	r3, [pc, #180]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800534e:	4a24      	ldr	r2, [pc, #144]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005354:	4b22      	ldr	r3, [pc, #136]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800535a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43db      	mvns	r3, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800537a:	4a19      	ldr	r2, [pc, #100]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005382:	4b17      	ldr	r3, [pc, #92]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005388:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80053a8:	4a0d      	ldr	r2, [pc, #52]	@ (80053e0 <HAL_GPIO_Init+0x2bc>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f47f aeb7 	bne.w	8005134 <HAL_GPIO_Init+0x10>
  }
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	48000400 	.word	0x48000400
 80053dc:	48000800 	.word	0x48000800
 80053e0:	58000800 	.word	0x58000800

080053e4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053f2:	e0af      	b.n	8005554 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053f4:	2201      	movs	r2, #1
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80a2 	beq.w	800554e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800540a:	4a59      	ldr	r2, [pc, #356]	@ (8005570 <HAL_GPIO_DeInit+0x18c>)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	3302      	adds	r3, #2
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	2207      	movs	r2, #7
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005432:	d00d      	beq.n	8005450 <HAL_GPIO_DeInit+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a4f      	ldr	r2, [pc, #316]	@ (8005574 <HAL_GPIO_DeInit+0x190>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <HAL_GPIO_DeInit+0x68>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a4e      	ldr	r2, [pc, #312]	@ (8005578 <HAL_GPIO_DeInit+0x194>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <HAL_GPIO_DeInit+0x64>
 8005444:	2302      	movs	r3, #2
 8005446:	e004      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 8005448:	2307      	movs	r3, #7
 800544a:	e002      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 8005450:	2300      	movs	r3, #0
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	f002 0203 	and.w	r2, r2, #3
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	4093      	lsls	r3, r2
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	429a      	cmp	r2, r3
 8005460:	d136      	bne.n	80054d0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005462:	4b46      	ldr	r3, [pc, #280]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005464:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	43db      	mvns	r3, r3
 800546c:	4943      	ldr	r1, [pc, #268]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 800546e:	4013      	ands	r3, r2
 8005470:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005474:	4b41      	ldr	r3, [pc, #260]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005476:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	493f      	ldr	r1, [pc, #252]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005480:	4013      	ands	r3, r2
 8005482:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005486:	4b3d      	ldr	r3, [pc, #244]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	493b      	ldr	r1, [pc, #236]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005490:	4013      	ands	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005494:	4b39      	ldr	r3, [pc, #228]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	43db      	mvns	r3, r3
 800549c:	4937      	ldr	r1, [pc, #220]	@ (800557c <HAL_GPIO_DeInit+0x198>)
 800549e:	4013      	ands	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	2207      	movs	r2, #7
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <HAL_GPIO_DeInit+0x18c>)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	3302      	adds	r3, #2
 80054ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	43da      	mvns	r2, r3
 80054c2:	482b      	ldr	r0, [pc, #172]	@ (8005570 <HAL_GPIO_DeInit+0x18c>)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	400a      	ands	r2, r1
 80054ca:	3302      	adds	r3, #2
 80054cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2103      	movs	r1, #3
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	08da      	lsrs	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3208      	adds	r2, #8
 80054ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	220f      	movs	r2, #15
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	08d2      	lsrs	r2, r2, #3
 8005504:	4019      	ands	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3208      	adds	r2, #8
 800550a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2103      	movs	r1, #3
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	2101      	movs	r1, #1
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	2103      	movs	r1, #3
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	401a      	ands	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	3301      	adds	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af49 	bne.w	80053f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	48000400 	.word	0x48000400
 8005578:	48000800 	.word	0x48000800
 800557c:	58000800 	.word	0x58000800

08005580 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	887b      	ldrh	r3, [r7, #2]
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e001      	b.n	80055a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	807b      	strh	r3, [r7, #2]
 80055ba:	4613      	mov	r3, r2
 80055bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055be:	787b      	ldrb	r3, [r7, #1]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055ca:	e002      	b.n	80055d2 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055cc:	887a      	ldrh	r2, [r7, #2]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055e6:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055f2:	4a05      	ldr	r2, [pc, #20]	@ (8005608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f004 fed0 	bl	800a3a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	58000800 	.word	0x58000800

0800560c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a03      	ldr	r2, [pc, #12]	@ (8005624 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	58000400 	.word	0x58000400

08005628 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <HAL_PWR_EnterSLEEPMode+0x60>)
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005646:	d10d      	bne.n	8005664 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005648:	f000 f83c 	bl	80056c4 <HAL_PWREx_DisableLowPowerRunMode>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005652:	e015      	b.n	8005680 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005660:	f000 f822 	bl	80056a8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005664:	4b09      	ldr	r3, [pc, #36]	@ (800568c <HAL_PWR_EnterSLEEPMode+0x64>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <HAL_PWR_EnterSLEEPMode+0x64>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005676:	bf30      	wfi
 8005678:	e002      	b.n	8005680 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800567a:	bf40      	sev
    __WFE();
 800567c:	bf20      	wfe
    __WFE();
 800567e:	bf20      	wfe
  }
}
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	58000400 	.word	0x58000400
 800568c:	e000ed00 	.word	0xe000ed00

08005690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005694:	4b03      	ldr	r3, [pc, #12]	@ (80056a4 <HAL_PWREx_GetVoltageRange+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	58000400 	.word	0x58000400

080056a8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80056ac:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a03      	ldr	r2, [pc, #12]	@ (80056c0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	58000400 	.word	0x58000400

080056c4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80056ca:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a15      	ldr	r2, [pc, #84]	@ (8005724 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80056d6:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2232      	movs	r2, #50	@ 0x32
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	4a12      	ldr	r2, [pc, #72]	@ (800572c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	0c9b      	lsrs	r3, r3, #18
 80056e8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056ea:	e002      	b.n	80056f2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fe:	d102      	bne.n	8005706 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f2      	bne.n	80056ec <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005706:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800570e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005712:	d101      	bne.n	8005718 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e000      	b.n	800571a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	58000400 	.word	0x58000400
 8005728:	20000000 	.word	0x20000000
 800572c:	431bde83 	.word	0x431bde83

08005730 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	4a0e      	ldr	r2, [pc, #56]	@ (800577c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005750:	f043 0304 	orr.w	r3, r3, #4
 8005754:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800575c:	bf30      	wfi
 800575e:	e002      	b.n	8005766 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005760:	bf40      	sev
    __WFE();
 8005762:	bf20      	wfe
    __WFE();
 8005764:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005766:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	4a05      	ldr	r2, [pc, #20]	@ (8005780 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	6113      	str	r3, [r2, #16]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	58000400 	.word	0x58000400
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005788:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005794:	d101      	bne.n	800579a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	58000400 	.word	0x58000400

080057a8 <LL_RCC_HSE_EnableTcxo>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057ba:	6013      	str	r3, [r2, #0]
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <LL_RCC_HSE_DisableTcxo>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f2:	d101      	bne.n	80057f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <LL_RCC_HSE_Enable>:
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	6013      	str	r3, [r2, #0]
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <LL_RCC_HSE_Disable>:
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800582c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005830:	6013      	str	r3, [r2, #0]
}
 8005832:	bf00      	nop
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <LL_RCC_HSE_IsReady>:
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800583e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800584c:	d101      	bne.n	8005852 <LL_RCC_HSE_IsReady+0x18>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <LL_RCC_HSE_IsReady+0x1a>
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <LL_RCC_HSI_Enable>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800586a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <LL_RCC_HSI_Disable>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <LL_RCC_HSI_IsReady>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a6:	d101      	bne.n	80058ac <LL_RCC_HSI_IsReady+0x18>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <LL_RCC_HSI_IsReady+0x1a>
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <LL_RCC_LSE_IsReady>:
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d101      	bne.n	80058f6 <LL_RCC_LSE_IsReady+0x18>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <LL_RCC_LSE_IsReady+0x1a>
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <LL_RCC_LSI_Enable>:
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <LL_RCC_LSI_Disable>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800592c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <LL_RCC_LSI_IsReady>:
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d101      	bne.n	8005958 <LL_RCC_LSI_IsReady+0x18>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <LL_RCC_LSI_IsReady+0x1a>
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <LL_RCC_MSI_Enable>:
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6013      	str	r3, [r2, #0]
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <LL_RCC_MSI_Disable>:
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	6013      	str	r3, [r2, #0]
}
 8005992:	bf00      	nop
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <LL_RCC_MSI_IsReady>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d101      	bne.n	80059b0 <LL_RCC_MSI_IsReady+0x16>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_RCC_MSI_IsReady+0x18>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d101      	bne.n	80059d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <LL_RCC_MSI_GetRange>:
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <LL_RCC_SetSysClkSource>:
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <LL_RCC_GetSysClkSource>:
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <LL_RCC_SetAHBPrescaler>:
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_SetAHB3Prescaler>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005aa2:	f023 020f 	bic.w	r2, r3, #15
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_SetAPB1Prescaler>:
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <LL_RCC_SetAPB2Prescaler>:
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_GetAHBPrescaler>:
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <LL_RCC_GetAHB3Prescaler>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_GetAPB1Prescaler>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_GetAPB2Prescaler>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb0:	d101      	bne.n	8005bb6 <LL_RCC_PLL_IsReady+0x18>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <LL_RCC_PLL_IsReady+0x1a>
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d101      	bne.n	8005c32 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c50:	d101      	bne.n	8005c56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c72:	d101      	bne.n	8005c78 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c94:	d101      	bne.n	8005c9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e38b      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb6:	f7ff fece 	bl	8005a56 <LL_RCC_GetSysClkSource>
 8005cba:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cbc:	f7ff ffa2 	bl	8005c04 <LL_RCC_PLL_GetMainSource>
 8005cc0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80c9 	beq.w	8005e62 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x3e>
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d17b      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d178      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ce2:	f7ff fe5a 	bl	800599a <LL_RCC_MSI_IsReady>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x54>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e36a      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x72>
 8005d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d14:	e006      	b.n	8005d24 <HAL_RCC_OscConfig+0x80>
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d222      	bcs.n	8005d6e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fd51 	bl	80067d4 <RCC_SetFlashLatencyFromMSIRange>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e348      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d46:	f043 0308 	orr.w	r3, r3, #8
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fe4e 	bl	8005a08 <LL_RCC_MSI_SetCalibTrimming>
 8005d6c:	e021      	b.n	8005db2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d78:	f043 0308 	orr.w	r3, r3, #8
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fe35 	bl	8005a08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd16 	bl	80067d4 <RCC_SetFlashLatencyFromMSIRange>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e30d      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005db2:	f000 fcd7 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4aa1      	ldr	r2, [pc, #644]	@ (8006040 <HAL_RCC_OscConfig+0x39c>)
 8005dba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006044 <HAL_RCC_OscConfig+0x3a0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fc f99f 	bl	8002104 <HAL_InitTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d047      	beq.n	8005e60 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	e2fc      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02c      	beq.n	8005e36 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ddc:	f7ff fdc1 	bl	8005962 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005de0:	f7fc f99a 	bl	8002118 <HAL_GetTick>
 8005de4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005de8:	f7fc f996 	bl	8002118 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e2e9      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005dfa:	f7ff fdce 	bl	800599a <LL_RCC_MSI_IsReady>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f1      	beq.n	8005de8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e0e:	f043 0308 	orr.w	r3, r3, #8
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e26:	4313      	orrs	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fdea 	bl	8005a08 <LL_RCC_MSI_SetCalibTrimming>
 8005e34:	e015      	b.n	8005e62 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e36:	f7ff fda2 	bl	800597e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e3a:	f7fc f96d 	bl	8002118 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e42:	f7fc f969 	bl	8002118 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e2bc      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e54:	f7ff fda1 	bl	800599a <LL_RCC_MSI_IsReady>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f1      	bne.n	8005e42 <HAL_RCC_OscConfig+0x19e>
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e60:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d05f      	beq.n	8005f2e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_OscConfig+0x1dc>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	2b0c      	cmp	r3, #12
 8005e78:	d10d      	bne.n	8005e96 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d10a      	bne.n	8005e96 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	f7ff fcdb 	bl	800583a <LL_RCC_HSE_IsReady>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d050      	beq.n	8005f2c <HAL_RCC_OscConfig+0x288>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d14c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e29b      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d102      	bne.n	8005ebc <HAL_RCC_OscConfig+0x218>
 8005eb6:	f7ff fca4 	bl	8005802 <LL_RCC_HSE_Enable>
 8005eba:	e00d      	b.n	8005ed8 <HAL_RCC_OscConfig+0x234>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005ec4:	d104      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x22c>
 8005ec6:	f7ff fc6f 	bl	80057a8 <LL_RCC_HSE_EnableTcxo>
 8005eca:	f7ff fc9a 	bl	8005802 <LL_RCC_HSE_Enable>
 8005ece:	e003      	b.n	8005ed8 <HAL_RCC_OscConfig+0x234>
 8005ed0:	f7ff fca5 	bl	800581e <LL_RCC_HSE_Disable>
 8005ed4:	f7ff fc76 	bl	80057c4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc f91a 	bl	8002118 <HAL_GetTick>
 8005ee4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fc f916 	bl	8002118 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	@ 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e269      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005efa:	f7ff fc9e 	bl	800583a <LL_RCC_HSE_IsReady>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f1      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x244>
 8005f04:	e013      	b.n	8005f2e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc f907 	bl	8002118 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0e:	f7fc f903 	bl	8002118 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b64      	cmp	r3, #100	@ 0x64
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e256      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f20:	f7ff fc8b 	bl	800583a <LL_RCC_HSE_IsReady>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f1      	bne.n	8005f0e <HAL_RCC_OscConfig+0x26a>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d04b      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_OscConfig+0x2a8>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d113      	bne.n	8005f6e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d110      	bne.n	8005f6e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	f7ff fca2 	bl	8005894 <LL_RCC_HSI_IsReady>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_RCC_OscConfig+0x2be>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e235      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fca5 	bl	80058b6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6c:	e031      	b.n	8005fd2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d019      	beq.n	8005faa <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f76:	f7ff fc71 	bl	800585c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fc f8cd 	bl	8002118 <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fc f8c9 	bl	8002118 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e21c      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f94:	f7ff fc7e 	bl	8005894 <LL_RCC_HSI_IsReady>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f1      	beq.n	8005f82 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fc87 	bl	80058b6 <LL_RCC_HSI_SetCalibTrimming>
 8005fa8:	e013      	b.n	8005fd2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005faa:	f7ff fc65 	bl	8005878 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fae:	f7fc f8b3 	bl	8002118 <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb6:	f7fc f8af 	bl	8002118 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e202      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fc8:	f7ff fc64 	bl	8005894 <LL_RCC_HSI_IsReady>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f1      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d06f      	beq.n	80060be <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d057      	beq.n	8006096 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fee:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d036      	beq.n	800606c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1db      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d018      	beq.n	8006052 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006020:	f7ff fc7e 	bl	8005920 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006024:	f7fc f878 	bl	8002118 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800602a:	e00d      	b.n	8006048 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800602c:	f7fc f874 	bl	8002118 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b11      	cmp	r3, #17
 8006038:	d906      	bls.n	8006048 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1c7      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
 800603e:	bf00      	nop
 8006040:	20000000 	.word	0x20000000
 8006044:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006048:	f7ff fc7a 	bl	8005940 <LL_RCC_LSI_IsReady>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1ec      	bne.n	800602c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800605a:	f023 0210 	bic.w	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800606c:	f7ff fc48 	bl	8005900 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fc f852 	bl	8002118 <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006078:	f7fc f84e 	bl	8002118 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b11      	cmp	r3, #17
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e1a1      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800608a:	f7ff fc59 	bl	8005940 <LL_RCC_LSI_IsReady>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f1      	beq.n	8006078 <HAL_RCC_OscConfig+0x3d4>
 8006094:	e013      	b.n	80060be <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006096:	f7ff fc43 	bl	8005920 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609a:	f7fc f83d 	bl	8002118 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a2:	f7fc f839 	bl	8002118 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b11      	cmp	r3, #17
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e18c      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80060b4:	f7ff fc44 	bl	8005940 <LL_RCC_LSI_IsReady>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f1      	bne.n	80060a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80d8 	beq.w	800627c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060cc:	f7ff fb5a 	bl	8005784 <LL_PWR_IsEnabledBkUpAccess>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d113      	bne.n	80060fe <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80060d6:	f7ff fa99 	bl	800560c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060da:	f7fc f81d 	bl	8002118 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e2:	f7fc f819 	bl	8002118 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e16c      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060f4:	f7ff fb46 	bl	8005784 <LL_PWR_IsEnabledBkUpAccess>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f1      	beq.n	80060e2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d07b      	beq.n	80061fe <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b85      	cmp	r3, #133	@ 0x85
 800610c:	d003      	beq.n	8006116 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d109      	bne.n	800612a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612a:	f7fb fff5 	bl	8002118 <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fb ffe7 	bl	8002118 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e138      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800615c:	f7ff fbbf 	bl	80058de <LL_RCC_LSE_IsReady>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0ef      	beq.n	8006146 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b81      	cmp	r3, #129	@ 0x81
 800616c:	d003      	beq.n	8006176 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b85      	cmp	r3, #133	@ 0x85
 8006174:	d121      	bne.n	80061ba <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006176:	f7fb ffcf 	bl	8002118 <HAL_GetTick>
 800617a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006190:	e00a      	b.n	80061a8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fb ffc1 	bl	8002118 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e112      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0ec      	beq.n	8006192 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061b8:	e060      	b.n	800627c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ba:	f7fb ffad 	bl	8002118 <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fb ff9f 	bl	8002118 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0f0      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ec      	bne.n	80061d6 <HAL_RCC_OscConfig+0x532>
 80061fc:	e03e      	b.n	800627c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fe:	f7fb ff8b 	bl	8002118 <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621a:	f7fb ff7d 	bl	8002118 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0ce      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ec      	bne.n	800621a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006240:	f7fb ff6a 	bl	8002118 <HAL_GetTick>
 8006244:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800625a:	e00a      	b.n	8006272 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625c:	f7fb ff5c 	bl	8002118 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0ad      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006272:	f7ff fb34 	bl	80058de <LL_RCC_LSE_IsReady>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1ef      	bne.n	800625c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80a3 	beq.w	80063cc <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d076      	beq.n	800637a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	2b02      	cmp	r3, #2
 8006292:	d14b      	bne.n	800632c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006294:	f7ff fc75 	bl	8005b82 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fb ff3e 	bl	8002118 <HAL_GetTick>
 800629c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fb ff3a 	bl	8002118 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b0a      	cmp	r3, #10
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e08d      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062b2:	f7ff fc74 	bl	8005b9e <LL_RCC_PLL_IsReady>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f1      	bne.n	80062a0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	4b45      	ldr	r3, [pc, #276]	@ (80063d8 <HAL_RCC_OscConfig+0x734>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062ce:	4311      	orrs	r1, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062d4:	0212      	lsls	r2, r2, #8
 80062d6:	4311      	orrs	r1, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062dc:	4311      	orrs	r1, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062e2:	4311      	orrs	r1, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80062e8:	430a      	orrs	r2, r1
 80062ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f2:	f7ff fc38 	bl	8005b66 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006304:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fb ff07 	bl	8002118 <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630e:	f7fb ff03 	bl	8002118 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b0a      	cmp	r3, #10
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e056      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006320:	f7ff fc3d 	bl	8005b9e <LL_RCC_PLL_IsReady>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f1      	beq.n	800630e <HAL_RCC_OscConfig+0x66a>
 800632a:	e04f      	b.n	80063cc <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632c:	f7ff fc29 	bl	8005b82 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800634a:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800634e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006352:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fb fee0 	bl	8002118 <HAL_GetTick>
 8006358:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fb fedc 	bl	8002118 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b0a      	cmp	r3, #10
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e02f      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800636e:	f7ff fc16 	bl	8005b9e <LL_RCC_PLL_IsReady>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f1      	bne.n	800635c <HAL_RCC_OscConfig+0x6b8>
 8006378:	e028      	b.n	80063cc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e023      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f003 0203 	and.w	r2, r3, #3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006398:	429a      	cmp	r2, r3
 800639a:	d115      	bne.n	80063c8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d10e      	bne.n	80063c8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d106      	bne.n	80063c8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	11c1808c 	.word	0x11c1808c

080063dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e10f      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f0:	4b89      	ldr	r3, [pc, #548]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d91b      	bls.n	8006436 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b86      	ldr	r3, [pc, #536]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 0207 	bic.w	r2, r3, #7
 8006406:	4984      	ldr	r1, [pc, #528]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640e:	f7fb fe83 	bl	8002118 <HAL_GetTick>
 8006412:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006414:	e008      	b.n	8006428 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006416:	f7fb fe7f 	bl	8002118 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e0f3      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006428:	4b7b      	ldr	r3, [pc, #492]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d1ef      	bne.n	8006416 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d016      	beq.n	8006470 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fb10 	bl	8005a6c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800644c:	f7fb fe64 	bl	8002118 <HAL_GetTick>
 8006450:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006454:	f7fb fe60 	bl	8002118 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e0d4      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006466:	f7ff fbd8 	bl	8005c1a <LL_RCC_IsActiveFlag_HPRE>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f1      	beq.n	8006454 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fb06 	bl	8005a92 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006486:	f7fb fe47 	bl	8002118 <HAL_GetTick>
 800648a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800648e:	f7fb fe43 	bl	8002118 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e0b7      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80064a0:	f7ff fbcc 	bl	8005c3c <LL_RCC_IsActiveFlag_SHDHPRE>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f1      	beq.n	800648e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff faff 	bl	8005abe <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064c0:	f7fb fe2a 	bl	8002118 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064c8:	f7fb fe26 	bl	8002118 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e09a      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064da:	f7ff fbc1 	bl	8005c60 <LL_RCC_IsActiveFlag_PPRE1>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f1      	beq.n	80064c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d017      	beq.n	8006520 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff faf4 	bl	8005ae4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064fc:	f7fb fe0c 	bl	8002118 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006504:	f7fb fe08 	bl	8002118 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e07c      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006516:	f7ff fbb4 	bl	8005c82 <LL_RCC_IsActiveFlag_PPRE2>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f1      	beq.n	8006504 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d043      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d106      	bne.n	8006542 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006534:	f7ff f981 	bl	800583a <LL_RCC_HSE_IsReady>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11e      	bne.n	800657c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e066      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d106      	bne.n	8006558 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800654a:	f7ff fb28 	bl	8005b9e <LL_RCC_PLL_IsReady>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d113      	bne.n	800657c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e05b      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006560:	f7ff fa1b 	bl	800599a <LL_RCC_MSI_IsReady>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e050      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800656e:	f7ff f991 	bl	8005894 <LL_RCC_HSI_IsReady>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e049      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff fa55 	bl	8005a30 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006586:	f7fb fdc7 	bl	8002118 <HAL_GetTick>
 800658a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658e:	f7fb fdc3 	bl	8002118 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e035      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a4:	f7ff fa57 	bl	8005a56 <LL_RCC_GetSysClkSource>
 80065a8:	4602      	mov	r2, r0
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d1ec      	bne.n	800658e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b4:	4b18      	ldr	r3, [pc, #96]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d21b      	bcs.n	80065fa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f023 0207 	bic.w	r2, r3, #7
 80065ca:	4913      	ldr	r1, [pc, #76]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d2:	f7fb fda1 	bl	8002118 <HAL_GetTick>
 80065d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065da:	f7fb fd9d 	bl	8002118 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e011      	b.n	8006610 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x23c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1ef      	bne.n	80065da <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065fa:	f000 f8b3 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80065fe:	4603      	mov	r3, r0
 8006600:	4a06      	ldr	r2, [pc, #24]	@ (800661c <HAL_RCC_ClockConfig+0x240>)
 8006602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006604:	4b06      	ldr	r3, [pc, #24]	@ (8006620 <HAL_RCC_ClockConfig+0x244>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fb fd7b 	bl	8002104 <HAL_InitTick>
 800660e:	4603      	mov	r3, r0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	58004000 	.word	0x58004000
 800661c:	20000000 	.word	0x20000000
 8006620:	20000004 	.word	0x20000004

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	b590      	push	{r4, r7, lr}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006632:	f7ff fa10 	bl	8005a56 <LL_RCC_GetSysClkSource>
 8006636:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006638:	f7ff fae4 	bl	8005c04 <LL_RCC_PLL_GetMainSource>
 800663c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_GetSysClockFreq+0x2c>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b0c      	cmp	r3, #12
 8006648:	d139      	bne.n	80066be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d136      	bne.n	80066be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006650:	f7ff f9b3 	bl	80059ba <LL_RCC_MSI_IsEnabledRangeSelect>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d115      	bne.n	8006686 <HAL_RCC_GetSysClockFreq+0x62>
 800665a:	f7ff f9ae 	bl	80059ba <LL_RCC_MSI_IsEnabledRangeSelect>
 800665e:	4603      	mov	r3, r0
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HAL_RCC_GetSysClockFreq+0x4e>
 8006664:	f7ff f9b9 	bl	80059da <LL_RCC_MSI_GetRange>
 8006668:	4603      	mov	r3, r0
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	e005      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x5a>
 8006672:	f7ff f9bd 	bl	80059f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006676:	4603      	mov	r3, r0
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	4a36      	ldr	r2, [pc, #216]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x134>)
 8006680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006684:	e014      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8006686:	f7ff f998 	bl	80059ba <LL_RCC_MSI_IsEnabledRangeSelect>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d106      	bne.n	800669e <HAL_RCC_GetSysClockFreq+0x7a>
 8006690:	f7ff f9a3 	bl	80059da <LL_RCC_MSI_GetRange>
 8006694:	4603      	mov	r3, r0
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	e005      	b.n	80066aa <HAL_RCC_GetSysClockFreq+0x86>
 800669e:	f7ff f9a7 	bl	80059f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80066a2:	4603      	mov	r3, r0
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x134>)
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d115      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066bc:	e012      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d102      	bne.n	80066ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066c4:	4b25      	ldr	r3, [pc, #148]	@ (800675c <HAL_RCC_GetSysClockFreq+0x138>)
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	e00c      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d109      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80066d0:	f7ff f886 	bl	80057e0 <LL_RCC_HSE_IsEnabledDiv2>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d102      	bne.n	80066e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80066da:	4b20      	ldr	r3, [pc, #128]	@ (800675c <HAL_RCC_GetSysClockFreq+0x138>)
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	e001      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80066e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x13c>)
 80066e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066e4:	f7ff f9b7 	bl	8005a56 <LL_RCC_GetSysClkSource>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b0c      	cmp	r3, #12
 80066ec:	d12f      	bne.n	800674e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80066ee:	f7ff fa89 	bl	8005c04 <LL_RCC_PLL_GetMainSource>
 80066f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d003      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0xde>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d003      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0xe4>
 8006700:	e00d      	b.n	800671e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006702:	4b16      	ldr	r3, [pc, #88]	@ (800675c <HAL_RCC_GetSysClockFreq+0x138>)
 8006704:	60fb      	str	r3, [r7, #12]
        break;
 8006706:	e00d      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006708:	f7ff f86a 	bl	80057e0 <LL_RCC_HSE_IsEnabledDiv2>
 800670c:	4603      	mov	r3, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d102      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <HAL_RCC_GetSysClockFreq+0x138>)
 8006714:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006716:	e005      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006718:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x13c>)
 800671a:	60fb      	str	r3, [r7, #12]
        break;
 800671c:	e002      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60fb      	str	r3, [r7, #12]
        break;
 8006722:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006724:	f7ff fa4c 	bl	8005bc0 <LL_RCC_PLL_GetN>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	fb03 f402 	mul.w	r4, r3, r2
 8006730:	f7ff fa5d 	bl	8005bee <LL_RCC_PLL_GetDivider>
 8006734:	4603      	mov	r3, r0
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	3301      	adds	r3, #1
 800673a:	fbb4 f4f3 	udiv	r4, r4, r3
 800673e:	f7ff fa4b 	bl	8005bd8 <LL_RCC_PLL_GetR>
 8006742:	4603      	mov	r3, r0
 8006744:	0f5b      	lsrs	r3, r3, #29
 8006746:	3301      	adds	r3, #1
 8006748:	fbb4 f3f3 	udiv	r3, r4, r3
 800674c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800674e:	697b      	ldr	r3, [r7, #20]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}
 8006758:	0801f0ec 	.word	0x0801f0ec
 800675c:	00f42400 	.word	0x00f42400
 8006760:	01e84800 	.word	0x01e84800

08006764 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b598      	push	{r3, r4, r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006768:	f7ff ff5c 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 800676c:	4604      	mov	r4, r0
 800676e:	f7ff f9cc 	bl	8005b0a <LL_RCC_GetAHBPrescaler>
 8006772:	4603      	mov	r3, r0
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	4a03      	ldr	r2, [pc, #12]	@ (8006788 <HAL_RCC_GetHCLKFreq+0x24>)
 800677c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006780:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006784:	4618      	mov	r0, r3
 8006786:	bd98      	pop	{r3, r4, r7, pc}
 8006788:	0801f08c 	.word	0x0801f08c

0800678c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800678c:	b598      	push	{r3, r4, r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006790:	f7ff ffe8 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006794:	4604      	mov	r4, r0
 8006796:	f7ff f9d0 	bl	8005b3a <LL_RCC_GetAPB1Prescaler>
 800679a:	4603      	mov	r3, r0
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	4a03      	ldr	r2, [pc, #12]	@ (80067ac <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd98      	pop	{r3, r4, r7, pc}
 80067ac:	0801f0cc 	.word	0x0801f0cc

080067b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b0:	b598      	push	{r3, r4, r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80067b4:	f7ff ffd6 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067b8:	4604      	mov	r4, r0
 80067ba:	f7ff f9c9 	bl	8005b50 <LL_RCC_GetAPB2Prescaler>
 80067be:	4603      	mov	r3, r0
 80067c0:	0adb      	lsrs	r3, r3, #11
 80067c2:	4a03      	ldr	r2, [pc, #12]	@ (80067d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	bd98      	pop	{r3, r4, r7, pc}
 80067d0:	0801f0cc 	.word	0x0801f0cc

080067d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	091b      	lsrs	r3, r3, #4
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	4a10      	ldr	r2, [pc, #64]	@ (8006828 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80067e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80067ec:	f7ff f998 	bl	8005b20 <LL_RCC_GetAHB3Prescaler>
 80067f0:	4603      	mov	r3, r0
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	4a0c      	ldr	r2, [pc, #48]	@ (800682c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80067fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	0c9c      	lsrs	r4, r3, #18
 8006810:	f7fe ff3e 	bl	8005690 <HAL_PWREx_GetVoltageRange>
 8006814:	4603      	mov	r3, r0
 8006816:	4619      	mov	r1, r3
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f80b 	bl	8006834 <RCC_SetFlashLatency>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	0801f0ec 	.word	0x0801f0ec
 800682c:	0801f08c 	.word	0x0801f08c
 8006830:	431bde83 	.word	0x431bde83

08006834 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	@ 0x38
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800683e:	4a3a      	ldr	r2, [pc, #232]	@ (8006928 <RCC_SetFlashLatency+0xf4>)
 8006840:	f107 0320 	add.w	r3, r7, #32
 8006844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006848:	6018      	str	r0, [r3, #0]
 800684a:	3304      	adds	r3, #4
 800684c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800684e:	4a37      	ldr	r2, [pc, #220]	@ (800692c <RCC_SetFlashLatency+0xf8>)
 8006850:	f107 0318 	add.w	r3, r7, #24
 8006854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006858:	6018      	str	r0, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800685e:	4a34      	ldr	r2, [pc, #208]	@ (8006930 <RCC_SetFlashLatency+0xfc>)
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	ca07      	ldmia	r2, {r0, r1, r2}
 8006866:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d11b      	bne.n	80068ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006876:	2300      	movs	r3, #0
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
 800687a:	e014      	b.n	80068a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	3338      	adds	r3, #56	@ 0x38
 8006882:	443b      	add	r3, r7
 8006884:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4293      	cmp	r3, r2
 800688e:	d807      	bhi.n	80068a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	3338      	adds	r3, #56	@ 0x38
 8006896:	443b      	add	r3, r7
 8006898:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689e:	e021      	b.n	80068e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	3301      	adds	r3, #1
 80068a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d9e7      	bls.n	800687c <RCC_SetFlashLatency+0x48>
 80068ac:	e01a      	b.n	80068e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068ae:	2300      	movs	r3, #0
 80068b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b2:	e014      	b.n	80068de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	3338      	adds	r3, #56	@ 0x38
 80068ba:	443b      	add	r3, r7
 80068bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d807      	bhi.n	80068d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	3338      	adds	r3, #56	@ 0x38
 80068ce:	443b      	add	r3, r7
 80068d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d6:	e005      	b.n	80068e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068da:	3301      	adds	r3, #1
 80068dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d9e7      	bls.n	80068b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068e4:	4b13      	ldr	r3, [pc, #76]	@ (8006934 <RCC_SetFlashLatency+0x100>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f023 0207 	bic.w	r2, r3, #7
 80068ec:	4911      	ldr	r1, [pc, #68]	@ (8006934 <RCC_SetFlashLatency+0x100>)
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068f4:	f7fb fc10 	bl	8002118 <HAL_GetTick>
 80068f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068fa:	e008      	b.n	800690e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068fc:	f7fb fc0c 	bl	8002118 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e007      	b.n	800691e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800690e:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <RCC_SetFlashLatency+0x100>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006918:	429a      	cmp	r2, r3
 800691a:	d1ef      	bne.n	80068fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3738      	adds	r7, #56	@ 0x38
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	0801e6d8 	.word	0x0801e6d8
 800692c:	0801e6e0 	.word	0x0801e6e0
 8006930:	0801e6e8 	.word	0x0801e6e8
 8006934:	58004000 	.word	0x58004000

08006938 <LL_RCC_LSE_IsReady>:
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800693c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d101      	bne.n	8006950 <LL_RCC_LSE_IsReady+0x18>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <LL_RCC_LSE_IsReady+0x1a>
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <LL_RCC_SetUSARTClockSource>:
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006966:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	43db      	mvns	r3, r3
 8006970:	401a      	ands	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <LL_RCC_SetI2SClockSource>:
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800699e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <LL_RCC_SetLPUARTClockSource>:
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80069bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <LL_RCC_SetI2CClockSource>:
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80069f6:	43db      	mvns	r3, r3
 80069f8:	401a      	ands	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <LL_RCC_SetLPTIMClockSource>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	401a      	ands	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <LL_RCC_SetRNGClockSource>:
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a58:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <LL_RCC_SetADCClockSource>:
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <LL_RCC_SetRTCClockSource>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ab0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <LL_RCC_GetRTCClockSource>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <LL_RCC_ForceBackupDomainReset>:
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <LL_RCC_ReleaseBackupDomainReset>:
{
 8006afe:	b480      	push	{r7}
 8006b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006b16:	bf00      	nop
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b30:	2300      	movs	r3, #0
 8006b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d058      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006b40:	f7fe fd64 	bl	800560c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b44:	f7fb fae8 	bl	8002118 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4c:	f7fb fae4 	bl	8002118 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d902      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	74fb      	strb	r3, [r7, #19]
        break;
 8006b5e:	e006      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b60:	4b7b      	ldr	r3, [pc, #492]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6c:	d1ee      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006b6e:	7cfb      	ldrb	r3, [r7, #19]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d13c      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b74:	f7ff ffa7 	bl	8006ac6 <LL_RCC_GetRTCClockSource>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d00f      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b90:	f7ff ffa5 	bl	8006ade <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b94:	f7ff ffb3 	bl	8006afe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d014      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fb fab4 	bl	8002118 <HAL_GetTick>
 8006bb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006bb2:	e00b      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb4:	f7fb fab0 	bl	8002118 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d902      	bls.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	74fb      	strb	r3, [r7, #19]
            break;
 8006bca:	e004      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006bcc:	f7ff feb4 	bl	8006938 <LL_RCC_LSE_IsReady>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d1ee      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff5b 	bl	8006a9c <LL_RCC_SetRTCClockSource>
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	74bb      	strb	r3, [r7, #18]
 8006bec:	e001      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fea9 	bl	800695a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fe9e 	bl	800695a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fec0 	bl	80069b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fee6 	bl	8006a16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fedb 	bl	8006a16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fed0 	bl	8006a16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fea9 	bl	80069de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fe9e 	bl	80069de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fe93 	bl	80069de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d011      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fe5e 	bl	800698a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ce6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fea5 	bl	8006a48 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d011      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fea3 	bl	8006a72 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d34:	d107      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d44:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006d46:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	58000400 	.word	0x58000400

08006d54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d068      	beq.n	8006e38 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fa ff0c 	bl	8001b98 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d88:	4b2e      	ldr	r3, [pc, #184]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006d8a:	22ca      	movs	r2, #202	@ 0xca
 8006d8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006d90:	2253      	movs	r2, #83	@ 0x53
 8006d92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa0f 	bl	80071b8 <RTC_EnterInitMode>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d13f      	bne.n	8006e24 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006da4:	4b27      	ldr	r3, [pc, #156]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	4a26      	ldr	r2, [pc, #152]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006daa:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006db4:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6859      	ldr	r1, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4319      	orrs	r1, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	491e      	ldr	r1, [pc, #120]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	491a      	ldr	r1, [pc, #104]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006dde:	4b19      	ldr	r3, [pc, #100]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	430b      	orrs	r3, r1
 8006df0:	4914      	ldr	r1, [pc, #80]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa12 	bl	8007220 <RTC_ExitInitMode>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10e      	bne.n	8006e24 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a19      	ldr	r1, [r3, #32]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	4319      	orrs	r1, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e24:	4b07      	ldr	r3, [pc, #28]	@ (8006e44 <HAL_RTC_Init+0xf0>)
 8006e26:	22ff      	movs	r2, #255	@ 0xff
 8006e28:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40002800 	.word	0x40002800

08006e48 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_RTC_SetAlarm_IT+0x1e>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0f3      	b.n	800704e <HAL_RTC_SetAlarm_IT+0x206>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006e76:	4b78      	ldr	r3, [pc, #480]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e7e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e86:	d06a      	beq.n	8006f5e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d13a      	bne.n	8006f04 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e8e:	4b72      	ldr	r3, [pc, #456]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f9f5 	bl	800729c <RTC_ByteToBcd2>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f9ee 	bl	800729c <RTC_ByteToBcd2>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ec4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	789b      	ldrb	r3, [r3, #2]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f9e6 	bl	800729c <RTC_ByteToBcd2>
 8006ed0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ed2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006edc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f9d8 	bl	800729c <RTC_ByteToBcd2>
 8006eec:	4603      	mov	r3, r0
 8006eee:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ef0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ef8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e02c      	b.n	8006f5e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006f0c:	d00d      	beq.n	8006f2a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f16:	d008      	beq.n	8006f2a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f18:	4b4f      	ldr	r3, [pc, #316]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f36:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f3c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	78db      	ldrb	r3, [r3, #3]
 8006f42:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f44:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f4c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f4e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f54:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f60:	22ca      	movs	r2, #202	@ 0xca
 8006f62:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f64:	4b3c      	ldr	r3, [pc, #240]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f66:	2253      	movs	r2, #83	@ 0x53
 8006f68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f72:	d12c      	bne.n	8006fce <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f74:	4b38      	ldr	r3, [pc, #224]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	4a37      	ldr	r2, [pc, #220]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006f7e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f80:	4b35      	ldr	r3, [pc, #212]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8c:	d107      	bne.n	8006f9e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	4930      	ldr	r1, [pc, #192]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	644b      	str	r3, [r1, #68]	@ 0x44
 8006f9c:	e006      	b.n	8006fac <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006fac:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb8:	f043 0201 	orr.w	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006fc0:	4b25      	ldr	r3, [pc, #148]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4a24      	ldr	r2, [pc, #144]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fc6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006fca:	6193      	str	r3, [r2, #24]
 8006fcc:	e02b      	b.n	8007026 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006fce:	4b22      	ldr	r3, [pc, #136]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	4a21      	ldr	r2, [pc, #132]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006fd8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006fda:	4b1f      	ldr	r3, [pc, #124]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fdc:	2202      	movs	r2, #2
 8006fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4919      	ldr	r1, [pc, #100]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006ff6:	e006      	b.n	8007006 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006ff8:	4a17      	ldr	r2, [pc, #92]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006ffe:	4a16      	ldr	r2, [pc, #88]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007006:	4a14      	ldr	r2, [pc, #80]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	f043 0202 	orr.w	r2, r3, #2
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800701a:	4b0f      	ldr	r3, [pc, #60]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	4a0e      	ldr	r2, [pc, #56]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8007020:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007024:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <HAL_RTC_SetAlarm_IT+0x214>)
 8007028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800702c:	4a0b      	ldr	r2, [pc, #44]	@ (800705c <HAL_RTC_SetAlarm_IT+0x214>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007032:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007036:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <HAL_RTC_SetAlarm_IT+0x210>)
 8007038:	22ff      	movs	r2, #255	@ 0xff
 800703a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}
 8007056:	bf00      	nop
 8007058:	40002800 	.word	0x40002800
 800705c:	58000800 	.word	0x58000800

08007060 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_RTC_DeactivateAlarm+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e048      	b.n	800710a <HAL_RTC_DeactivateAlarm+0xaa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007088:	4b22      	ldr	r3, [pc, #136]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 800708a:	22ca      	movs	r2, #202	@ 0xca
 800708c:	625a      	str	r2, [r3, #36]	@ 0x24
 800708e:	4b21      	ldr	r3, [pc, #132]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007090:	2253      	movs	r2, #83	@ 0x53
 8007092:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800709a:	d115      	bne.n	80070c8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800709c:	4b1d      	ldr	r3, [pc, #116]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80070a6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ac:	4a19      	ldr	r2, [pc, #100]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070b2:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	f023 0201 	bic.w	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070c0:	4b14      	ldr	r3, [pc, #80]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070c6:	e014      	b.n	80070f2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070c8:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	4a11      	ldr	r2, [pc, #68]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ce:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80070d2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80070d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070de:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e4:	f023 0202 	bic.w	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070ec:	4b09      	ldr	r3, [pc, #36]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ee:	2202      	movs	r2, #2
 80070f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070f2:	4b08      	ldr	r3, [pc, #32]	@ (8007114 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070f4:	22ff      	movs	r2, #255	@ 0xff
 80070f6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr
 8007114:	40002800 	.word	0x40002800

08007118 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007120:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007122:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	4013      	ands	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007136:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007138:	2201      	movs	r2, #1
 800713a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fb fad8 	bl	80026f2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <HAL_RTC_AlarmIRQHandler+0x50>)
 800714e:	2202      	movs	r2, #2
 8007150:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f94a 	bl	80073ec <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40002800 	.word	0x40002800

0800716c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007174:	4b0f      	ldr	r3, [pc, #60]	@ (80071b4 <HAL_RTC_WaitForSynchro+0x48>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4a0e      	ldr	r2, [pc, #56]	@ (80071b4 <HAL_RTC_WaitForSynchro+0x48>)
 800717a:	f023 0320 	bic.w	r3, r3, #32
 800717e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007180:	f7fa ffca 	bl	8002118 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007186:	e009      	b.n	800719c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007188:	f7fa ffc6 	bl	8002118 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007196:	d901      	bls.n	800719c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e006      	b.n	80071aa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <HAL_RTC_WaitForSynchro+0x48>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0ef      	beq.n	8007188 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40002800 	.word	0x40002800

080071b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80071c4:	4b15      	ldr	r3, [pc, #84]	@ (800721c <RTC_EnterInitMode+0x64>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d120      	bne.n	8007212 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071d0:	4b12      	ldr	r3, [pc, #72]	@ (800721c <RTC_EnterInitMode+0x64>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4a11      	ldr	r2, [pc, #68]	@ (800721c <RTC_EnterInitMode+0x64>)
 80071d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071da:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80071dc:	f7fa ff9c 	bl	8002118 <HAL_GetTick>
 80071e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071e2:	e00d      	b.n	8007200 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071e4:	f7fa ff98 	bl	8002118 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071f2:	d905      	bls.n	8007200 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2203      	movs	r2, #3
 80071fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <RTC_EnterInitMode+0x64>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <RTC_EnterInitMode+0x5a>
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d1e8      	bne.n	80071e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40002800 	.word	0x40002800

08007220 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800722c:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <RTC_ExitInitMode+0x78>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <RTC_ExitInitMode+0x78>)
 8007232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007236:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007238:	4b17      	ldr	r3, [pc, #92]	@ (8007298 <RTC_ExitInitMode+0x78>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff91 	bl	800716c <HAL_RTC_WaitForSynchro>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e017      	b.n	800728e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800725e:	4b0e      	ldr	r3, [pc, #56]	@ (8007298 <RTC_ExitInitMode+0x78>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	4a0d      	ldr	r2, [pc, #52]	@ (8007298 <RTC_ExitInitMode+0x78>)
 8007264:	f023 0320 	bic.w	r3, r3, #32
 8007268:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff ff7e 	bl	800716c <HAL_RTC_WaitForSynchro>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2203      	movs	r2, #3
 800727a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007282:	4b05      	ldr	r3, [pc, #20]	@ (8007298 <RTC_ExitInitMode+0x78>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	4a04      	ldr	r2, [pc, #16]	@ (8007298 <RTC_ExitInitMode+0x78>)
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40002800 	.word	0x40002800

0800729c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80072ae:	e005      	b.n	80072bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	3b0a      	subs	r3, #10
 80072ba:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d8f6      	bhi.n	80072b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b2db      	uxtb	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
	...

080072dc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e01f      	b.n	8007332 <HAL_RTCEx_EnableBypassShadow+0x56>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007302:	4b0e      	ldr	r3, [pc, #56]	@ (800733c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007304:	22ca      	movs	r2, #202	@ 0xca
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24
 8007308:	4b0c      	ldr	r3, [pc, #48]	@ (800733c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800730a:	2253      	movs	r2, #83	@ 0x53
 800730c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800730e:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	4a0a      	ldr	r2, [pc, #40]	@ (800733c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007314:	f043 0320 	orr.w	r3, r3, #32
 8007318:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731a:	4b08      	ldr	r3, [pc, #32]	@ (800733c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800731c:	22ff      	movs	r2, #255	@ 0xff
 800731e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr
 800733c:	40002800 	.word	0x40002800

08007340 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007352:	2302      	movs	r3, #2
 8007354:	e027      	b.n	80073a6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007366:	4b12      	ldr	r3, [pc, #72]	@ (80073b0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007368:	22ca      	movs	r2, #202	@ 0xca
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24
 800736c:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800736e:	2253      	movs	r2, #83	@ 0x53
 8007370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007372:	4b0f      	ldr	r3, [pc, #60]	@ (80073b0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	4a0e      	ldr	r2, [pc, #56]	@ (80073b0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	4a0b      	ldr	r2, [pc, #44]	@ (80073b4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800738a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738e:	4b08      	ldr	r3, [pc, #32]	@ (80073b0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007390:	22ff      	movs	r2, #255	@ 0xff
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr
 80073b0:	40002800 	.word	0x40002800
 80073b4:	58000800 	.word	0x58000800

080073b8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80073c0:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80073cc:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073ce:	2240      	movs	r2, #64	@ 0x40
 80073d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fb f997 	bl	8002706 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40002800 	.word	0x40002800

080073ec <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
	...

08007400 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800740c:	4b07      	ldr	r3, [pc, #28]	@ (800742c <HAL_RTCEx_BKUPWrite+0x2c>)
 800740e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	4000b100 	.word	0x4000b100

08007430 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800743a:	4b07      	ldr	r3, [pc, #28]	@ (8007458 <HAL_RTCEx_BKUPRead+0x28>)
 800743c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	4000b100 	.word	0x4000b100

0800745c <LL_PWR_SetRadioBusyTrigger>:
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007464:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800746c:	4904      	ldr	r1, [pc, #16]	@ (8007480 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4313      	orrs	r3, r2
 8007472:	608b      	str	r3, [r1, #8]
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	58000400 	.word	0x58000400

08007484 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748e:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	58000400 	.word	0x58000400

080074a4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ae:	4a04      	ldr	r2, [pc, #16]	@ (80074c0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	58000400 	.word	0x58000400

080074c4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074c8:	4b03      	ldr	r3, [pc, #12]	@ (80074d8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ce:	619a      	str	r2, [r3, #24]
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	58000400 	.word	0x58000400

080074dc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80074e0:	4b06      	ldr	r3, [pc, #24]	@ (80074fc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d101      	bne.n	80074f0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	58000400 	.word	0x58000400

08007500 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b04      	cmp	r3, #4
 800750e:	d101      	bne.n	8007514 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	58000400 	.word	0x58000400

08007524 <LL_RCC_RF_DisableReset>:
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007534:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007538:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800753c:	bf00      	nop
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <LL_RCC_IsRFUnderReset>:
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800754c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007558:	d101      	bne.n	800755e <LL_RCC_IsRFUnderReset+0x1a>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <LL_RCC_IsRFUnderReset+0x1c>
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <LL_EXTI_EnableIT_32_63+0x24>)
 8007572:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007576:	4905      	ldr	r1, [pc, #20]	@ (800758c <LL_EXTI_EnableIT_32_63+0x24>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	58000800 	.word	0x58000800

08007590 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
    return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	e04b      	b.n	800763e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	799b      	ldrb	r3, [r3, #6]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d105      	bne.n	80075c0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fa fc04 	bl	8001dc8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80075c6:	f7ff ffad 	bl	8007524 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007648 <HAL_SUBGHZ_Init+0xb8>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	0cdb      	lsrs	r3, r3, #19
 80075d8:	2264      	movs	r2, #100	@ 0x64
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	609a      	str	r2, [r3, #8]
      break;
 80075f0:	e007      	b.n	8007602 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80075f8:	f7ff ffa4 	bl	8007544 <LL_RCC_IsRFUnderReset>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1ee      	bne.n	80075e0 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007602:	f7ff ff3f 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007606:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800760a:	f7ff ffad 	bl	8007568 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800760e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007612:	f7ff ff23 	bl	800745c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007616:	f7ff ff55 	bl	80074c4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 faaf 	bl	8007b88 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	719a      	strb	r2, [r3, #6]

  return status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000000 	.word	0x20000000

0800764c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	460b      	mov	r3, r1
 800765a:	817b      	strh	r3, [r7, #10]
 800765c:	4613      	mov	r3, r2
 800765e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	799b      	ldrb	r3, [r3, #6]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d14a      	bne.n	8007700 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	795b      	ldrb	r3, [r3, #5]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007672:	2302      	movs	r3, #2
 8007674:	e045      	b.n	8007702 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2202      	movs	r2, #2
 8007680:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fb4e 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007688:	f7ff ff0c 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800768c:	210d      	movs	r1, #13
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fa9a 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007694:	897b      	ldrh	r3, [r7, #10]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	b29b      	uxth	r3, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fa92 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076a4:	897b      	ldrh	r3, [r7, #10]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	4619      	mov	r1, r3
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fa8c 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076b0:	2300      	movs	r3, #0
 80076b2:	82bb      	strh	r3, [r7, #20]
 80076b4:	e00a      	b.n	80076cc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076b6:	8abb      	ldrh	r3, [r7, #20]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fa81 	bl	8007bc8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076c6:	8abb      	ldrh	r3, [r7, #20]
 80076c8:	3301      	adds	r3, #1
 80076ca:	82bb      	strh	r3, [r7, #20]
 80076cc:	8aba      	ldrh	r2, [r7, #20]
 80076ce:	893b      	ldrh	r3, [r7, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3f0      	bcc.n	80076b6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076d4:	f7ff fed6 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fb47 	bl	8007d6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
 80076ea:	e001      	b.n	80076f0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	715a      	strb	r2, [r3, #5]

    return status;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	e000      	b.n	8007702 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b088      	sub	sp, #32
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	461a      	mov	r2, r3
 8007716:	460b      	mov	r3, r1
 8007718:	817b      	strh	r3, [r7, #10]
 800771a:	4613      	mov	r3, r2
 800771c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	799b      	ldrb	r3, [r3, #6]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d14a      	bne.n	80077c2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	795b      	ldrb	r3, [r3, #5]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007734:	2302      	movs	r3, #2
 8007736:	e045      	b.n	80077c4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 faf0 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007744:	f7ff feae 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007748:	211d      	movs	r1, #29
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fa3c 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007750:	897b      	ldrh	r3, [r7, #10]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b29b      	uxth	r3, r3
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa34 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007760:	897b      	ldrh	r3, [r7, #10]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	4619      	mov	r1, r3
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fa2e 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800776c:	2100      	movs	r1, #0
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fa2a 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007774:	2300      	movs	r3, #0
 8007776:	82fb      	strh	r3, [r7, #22]
 8007778:	e009      	b.n	800778e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fa79 	bl	8007c74 <SUBGHZSPI_Receive>
      pData++;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	3301      	adds	r3, #1
 8007786:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007788:	8afb      	ldrh	r3, [r7, #22]
 800778a:	3301      	adds	r3, #1
 800778c:	82fb      	strh	r3, [r7, #22]
 800778e:	8afa      	ldrh	r2, [r7, #22]
 8007790:	893b      	ldrh	r3, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	d3f1      	bcc.n	800777a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007796:	f7ff fe75 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fae6 	bl	8007d6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e001      	b.n	80077b2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	715a      	strb	r2, [r3, #5]

    return status;
 80077be:	7ffb      	ldrb	r3, [r7, #31]
 80077c0:	e000      	b.n	80077c4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	461a      	mov	r2, r3
 80077d8:	460b      	mov	r3, r1
 80077da:	72fb      	strb	r3, [r7, #11]
 80077dc:	4613      	mov	r3, r2
 80077de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	799b      	ldrb	r3, [r3, #6]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d14a      	bne.n	8007880 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e045      	b.n	8007882 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fa91 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b84      	cmp	r3, #132	@ 0x84
 8007806:	d002      	beq.n	800780e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	2b94      	cmp	r3, #148	@ 0x94
 800780c:	d103      	bne.n	8007816 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	711a      	strb	r2, [r3, #4]
 8007814:	e002      	b.n	800781c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800781c:	f7ff fe42 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f9cf 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800782a:	2300      	movs	r3, #0
 800782c:	82bb      	strh	r3, [r7, #20]
 800782e:	e00a      	b.n	8007846 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007830:	8abb      	ldrh	r3, [r7, #20]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f9c4 	bl	8007bc8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007840:	8abb      	ldrh	r3, [r7, #20]
 8007842:	3301      	adds	r3, #1
 8007844:	82bb      	strh	r3, [r7, #20]
 8007846:	8aba      	ldrh	r2, [r7, #20]
 8007848:	893b      	ldrh	r3, [r7, #8]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3f0      	bcc.n	8007830 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800784e:	f7ff fe19 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	2b84      	cmp	r3, #132	@ 0x84
 8007856:	d002      	beq.n	800785e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fa87 	bl	8007d6c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
 800786a:	e001      	b.n	8007870 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	715a      	strb	r2, [r3, #5]

    return status;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	e000      	b.n	8007882 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b088      	sub	sp, #32
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	461a      	mov	r2, r3
 8007896:	460b      	mov	r3, r1
 8007898:	72fb      	strb	r3, [r7, #11]
 800789a:	4613      	mov	r3, r2
 800789c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	799b      	ldrb	r3, [r3, #6]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d13d      	bne.n	8007928 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	795b      	ldrb	r3, [r3, #5]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e038      	b.n	800792a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fa30 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078c4:	f7ff fdee 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f97b 	bl	8007bc8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f977 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	82fb      	strh	r3, [r7, #22]
 80078de:	e009      	b.n	80078f4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f9c6 	bl	8007c74 <SUBGHZSPI_Receive>
      pData++;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	3301      	adds	r3, #1
 80078ec:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078ee:	8afb      	ldrh	r3, [r7, #22]
 80078f0:	3301      	adds	r3, #1
 80078f2:	82fb      	strh	r3, [r7, #22]
 80078f4:	8afa      	ldrh	r2, [r7, #22]
 80078f6:	893b      	ldrh	r3, [r7, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d3f1      	bcc.n	80078e0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078fc:	f7ff fdc2 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fa33 	bl	8007d6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	77fb      	strb	r3, [r7, #31]
 8007912:	e001      	b.n	8007918 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	715a      	strb	r2, [r3, #5]

    return status;
 8007924:	7ffb      	ldrb	r3, [r7, #31]
 8007926:	e000      	b.n	800792a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	461a      	mov	r2, r3
 800793e:	460b      	mov	r3, r1
 8007940:	72fb      	strb	r3, [r7, #11]
 8007942:	4613      	mov	r3, r2
 8007944:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	799b      	ldrb	r3, [r3, #6]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d13e      	bne.n	80079ce <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	795b      	ldrb	r3, [r3, #5]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007958:	2302      	movs	r3, #2
 800795a:	e039      	b.n	80079d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f9de 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007968:	f7ff fd9c 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800796c:	210e      	movs	r1, #14
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f92a 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f925 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	82bb      	strh	r3, [r7, #20]
 8007982:	e00a      	b.n	800799a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007984:	8abb      	ldrh	r3, [r7, #20]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	4619      	mov	r1, r3
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f91a 	bl	8007bc8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007994:	8abb      	ldrh	r3, [r7, #20]
 8007996:	3301      	adds	r3, #1
 8007998:	82bb      	strh	r3, [r7, #20]
 800799a:	8aba      	ldrh	r2, [r7, #20]
 800799c:	893b      	ldrh	r3, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3f0      	bcc.n	8007984 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079a2:	f7ff fd6f 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f9e0 	bl	8007d6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
 80079b8:	e001      	b.n	80079be <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	715a      	strb	r2, [r3, #5]

    return status;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	e000      	b.n	80079d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
  }
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	461a      	mov	r2, r3
 80079e4:	460b      	mov	r3, r1
 80079e6:	72fb      	strb	r3, [r7, #11]
 80079e8:	4613      	mov	r3, r2
 80079ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	799b      	ldrb	r3, [r3, #6]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d141      	bne.n	8007a7e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	795b      	ldrb	r3, [r3, #5]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e03c      	b.n	8007a80 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f989 	bl	8007d24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a12:	f7ff fd47 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a16:	211e      	movs	r1, #30
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f8d5 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	4619      	mov	r1, r3
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f8d0 	bl	8007bc8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a28:	2100      	movs	r1, #0
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f8cc 	bl	8007bc8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a30:	2300      	movs	r3, #0
 8007a32:	82fb      	strh	r3, [r7, #22]
 8007a34:	e009      	b.n	8007a4a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a36:	69b9      	ldr	r1, [r7, #24]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f91b 	bl	8007c74 <SUBGHZSPI_Receive>
      pData++;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a44:	8afb      	ldrh	r3, [r7, #22]
 8007a46:	3301      	adds	r3, #1
 8007a48:	82fb      	strh	r3, [r7, #22]
 8007a4a:	8afa      	ldrh	r2, [r7, #22]
 8007a4c:	893b      	ldrh	r3, [r7, #8]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d3f1      	bcc.n	8007a36 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a52:	f7ff fd17 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f988 	bl	8007d6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e001      	b.n	8007a6e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	715a      	strb	r2, [r3, #5]

    return status;
 8007a7a:	7ffb      	ldrb	r3, [r7, #31]
 8007a7c:	e000      	b.n	8007a80 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007a7e:	2302      	movs	r3, #2
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3720      	adds	r7, #32
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007a90:	2300      	movs	r3, #0
 8007a92:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a94:	f107 020c 	add.w	r2, r7, #12
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2112      	movs	r1, #18
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fef4 	bl	800788a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007aa2:	7b3b      	ldrb	r3, [r7, #12]
 8007aa4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	b21a      	sxth	r2, r3
 8007aae:	7b7b      	ldrb	r3, [r7, #13]
 8007ab0:	b21b      	sxth	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_SUBGHZ_IRQHandler+0x40>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f012 fb7e 	bl	801a1c4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_SUBGHZ_IRQHandler+0x52>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f012 fb83 	bl	801a1e0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	089b      	lsrs	r3, r3, #2
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_SUBGHZ_IRQHandler+0x64>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f012 fbd2 	bl	801a290 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007aec:	89fb      	ldrh	r3, [r7, #14]
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f012 fbd7 	bl	801a2ac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	091b      	lsrs	r3, r3, #4
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SUBGHZ_IRQHandler+0x88>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f012 fbdc 	bl	801a2c8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_SUBGHZ_IRQHandler+0x9a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f012 fba9 	bl	801a274 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b22:	89fb      	ldrh	r3, [r7, #14]
 8007b24:	099b      	lsrs	r3, r3, #6
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f012 fb64 	bl	801a1fc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b34:	89fb      	ldrh	r3, [r7, #14]
 8007b36:	09db      	lsrs	r3, r3, #7
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00e      	beq.n	8007b5e <HAL_SUBGHZ_IRQHandler+0xd6>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b40:	89fb      	ldrh	r3, [r7, #14]
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d004      	beq.n	8007b56 <HAL_SUBGHZ_IRQHandler+0xce>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f012 fb62 	bl	801a218 <HAL_SUBGHZ_CADStatusCallback>
 8007b54:	e003      	b.n	8007b5e <HAL_SUBGHZ_IRQHandler+0xd6>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f012 fb5d 	bl	801a218 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b5e:	89fb      	ldrh	r3, [r7, #14]
 8007b60:	0a5b      	lsrs	r3, r3, #9
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_SUBGHZ_IRQHandler+0xe8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f012 fb72 	bl	801a254 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007b70:	f107 020c 	add.w	r2, r7, #12
 8007b74:	2302      	movs	r3, #2
 8007b76:	2102      	movs	r1, #2
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff fe27 	bl	80077cc <HAL_SUBGHZ_ExecSetCmd>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b90:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b9a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007b9c:	4a09      	ldr	r2, [pc, #36]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007ba4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007ba6:	4b07      	ldr	r3, [pc, #28]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007ba8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007bac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bae:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a04      	ldr	r2, [pc, #16]	@ (8007bc4 <SUBGHZSPI_Init+0x3c>)
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bb8:	6013      	str	r3, [r2, #0]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr
 8007bc4:	58010000 	.word	0x58010000

08007bc8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bd8:	4b23      	ldr	r3, [pc, #140]	@ (8007c68 <SUBGHZSPI_Transmit+0xa0>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	0cdb      	lsrs	r3, r3, #19
 8007be6:	2264      	movs	r2, #100	@ 0x64
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	609a      	str	r2, [r3, #8]
      break;
 8007bfe:	e008      	b.n	8007c12 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c06:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <SUBGHZSPI_Transmit+0xa4>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d1ed      	bne.n	8007bee <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c12:	4b17      	ldr	r3, [pc, #92]	@ (8007c70 <SUBGHZSPI_Transmit+0xa8>)
 8007c14:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c1c:	4b12      	ldr	r3, [pc, #72]	@ (8007c68 <SUBGHZSPI_Transmit+0xa0>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	0cdb      	lsrs	r3, r3, #19
 8007c2a:	2264      	movs	r2, #100	@ 0x64
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	609a      	str	r2, [r3, #8]
      break;
 8007c42:	e008      	b.n	8007c56 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c4a:	4b08      	ldr	r3, [pc, #32]	@ (8007c6c <SUBGHZSPI_Transmit+0xa4>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d1ed      	bne.n	8007c32 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c56:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <SUBGHZSPI_Transmit+0xa4>)
 8007c58:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20000000 	.word	0x20000000
 8007c6c:	58010000 	.word	0x58010000
 8007c70:	5801000c 	.word	0x5801000c

08007c74 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c82:	4b25      	ldr	r3, [pc, #148]	@ (8007d18 <SUBGHZSPI_Receive+0xa4>)
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4613      	mov	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	0cdb      	lsrs	r3, r3, #19
 8007c90:	2264      	movs	r2, #100	@ 0x64
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	609a      	str	r2, [r3, #8]
      break;
 8007ca8:	e008      	b.n	8007cbc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d1c <SUBGHZSPI_Receive+0xa8>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d1ed      	bne.n	8007c98 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cbc:	4b18      	ldr	r3, [pc, #96]	@ (8007d20 <SUBGHZSPI_Receive+0xac>)
 8007cbe:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	22ff      	movs	r2, #255	@ 0xff
 8007cc4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cc6:	4b14      	ldr	r3, [pc, #80]	@ (8007d18 <SUBGHZSPI_Receive+0xa4>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	0cdb      	lsrs	r3, r3, #19
 8007cd4:	2264      	movs	r2, #100	@ 0x64
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	609a      	str	r2, [r3, #8]
      break;
 8007cec:	e008      	b.n	8007d00 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cf4:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <SUBGHZSPI_Receive+0xa8>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d1ed      	bne.n	8007cdc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d00:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <SUBGHZSPI_Receive+0xa8>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	701a      	strb	r2, [r3, #0]

  return status;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20000000 	.word	0x20000000
 8007d1c:	58010000 	.word	0x58010000
 8007d20:	5801000c 	.word	0x5801000c

08007d24 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	791b      	ldrb	r3, [r3, #4]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d111      	bne.n	8007d58 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d44:	f7ff fbae 	bl	80074a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f9      	bne.n	8007d48 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d54:	f7ff fb96 	bl	8007484 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f807 	bl	8007d6c <SUBGHZ_WaitOnBusy>
 8007d5e:	4603      	mov	r3, r0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20000000 	.word	0x20000000

08007d6c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007d78:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <SUBGHZ_WaitOnBusy+0x58>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	4413      	add	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	0d1b      	lsrs	r3, r3, #20
 8007d86:	2264      	movs	r2, #100	@ 0x64
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007d8e:	f7ff fbb7 	bl	8007500 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007d92:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	609a      	str	r2, [r3, #8]
      break;
 8007da4:	e009      	b.n	8007dba <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007dac:	f7ff fb96 	bl	80074dc <LL_PWR_IsActiveFlag_RFBUSYS>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d0e9      	beq.n	8007d8e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000000 	.word	0x20000000

08007dc8 <LL_RCC_GetUSARTClockSource>:
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	401a      	ands	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	4313      	orrs	r3, r2
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc80      	pop	{r7}
 8007dea:	4770      	bx	lr

08007dec <LL_RCC_GetLPUARTClockSource>:
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4013      	ands	r3, r2
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr

08007e0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e042      	b.n	8007ea2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fa fe44 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	@ 0x24
 8007e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc4b 	bl	80086e8 <UART_SetConfig>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e022      	b.n	8007ea2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 feb3 	bl	8008bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 ff39 	bl	8008d12 <UART_CheckIdleState>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	@ 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d142      	bne.n	8007f4a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_UART_Receive_IT+0x24>
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e03b      	b.n	8007f4c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Receive_IT+0x36>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e034      	b.n	8007f4c <HAL_UART_Receive_IT+0xa0>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a17      	ldr	r2, [pc, #92]	@ (8007f54 <HAL_UART_Receive_IT+0xa8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01f      	beq.n	8007f3a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d018      	beq.n	8007f3a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	613b      	str	r3, [r7, #16]
   return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	623b      	str	r3, [r7, #32]
 8007f28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	69f9      	ldr	r1, [r7, #28]
 8007f2c:	6a3a      	ldr	r2, [r7, #32]
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e6      	bne.n	8007f08 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fff9 	bl	8008f38 <UART_Start_Receive_IT>
 8007f46:	4603      	mov	r3, r0
 8007f48:	e000      	b.n	8007f4c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	@ 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40008000 	.word	0x40008000

08007f58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	@ 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d17a      	bne.n	8008066 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_UART_Transmit_DMA+0x24>
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e073      	b.n	8008068 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Transmit_DMA+0x36>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e06c      	b.n	8008068 <HAL_UART_Transmit_DMA+0x110>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2221      	movs	r2, #33	@ 0x21
 8007fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02c      	beq.n	800801e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc8:	4a29      	ldr	r2, [pc, #164]	@ (8008070 <HAL_UART_Transmit_DMA+0x118>)
 8007fca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd0:	4a28      	ldr	r2, [pc, #160]	@ (8008074 <HAL_UART_Transmit_DMA+0x11c>)
 8007fd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fd8:	4a27      	ldr	r2, [pc, #156]	@ (8008078 <HAL_UART_Transmit_DMA+0x120>)
 8007fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fec:	4619      	mov	r1, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3328      	adds	r3, #40	@ 0x28
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	f7fc fb86 	bl	8004708 <HAL_DMA_Start_IT>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2210      	movs	r2, #16
 8008006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e024      	b.n	8008068 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2240      	movs	r2, #64	@ 0x40
 8008024:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3308      	adds	r3, #8
 8008034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	613b      	str	r3, [r7, #16]
   return(result);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804e:	623a      	str	r2, [r7, #32]
 8008050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	69f9      	ldr	r1, [r7, #28]
 8008054:	6a3a      	ldr	r2, [r7, #32]
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	61bb      	str	r3, [r7, #24]
   return(result);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e5      	bne.n	800802e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	e000      	b.n	8008068 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008066:	2302      	movs	r3, #2
  }
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	@ 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	080092d3 	.word	0x080092d3
 8008074:	0800936d 	.word	0x0800936d
 8008078:	08009389 	.word	0x08009389

0800807c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b0ba      	sub	sp, #232	@ 0xe8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80080a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080aa:	4013      	ands	r3, r2
 80080ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80080b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d11b      	bne.n	80080f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d015      	beq.n	80080f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 82d6 	beq.w	8008692 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
      }
      return;
 80080ee:	e2d0      	b.n	8008692 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 811f 	beq.w	8008338 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080fe:	4b8b      	ldr	r3, [pc, #556]	@ (800832c <HAL_UART_IRQHandler+0x2b0>)
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008106:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800810a:	4b89      	ldr	r3, [pc, #548]	@ (8008330 <HAL_UART_IRQHandler+0x2b4>)
 800810c:	4013      	ands	r3, r2
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8112 	beq.w	8008338 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d011      	beq.n	8008144 <HAL_UART_IRQHandler+0xc8>
 8008120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d011      	beq.n	8008174 <HAL_UART_IRQHandler+0xf8>
 8008150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2202      	movs	r2, #2
 8008162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800816a:	f043 0204 	orr.w	r2, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d011      	beq.n	80081a4 <HAL_UART_IRQHandler+0x128>
 8008180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2204      	movs	r2, #4
 8008192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800819a:	f043 0202 	orr.w	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d017      	beq.n	80081e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081c0:	4b5a      	ldr	r3, [pc, #360]	@ (800832c <HAL_UART_IRQHandler+0x2b0>)
 80081c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2208      	movs	r2, #8
 80081ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081d6:	f043 0208 	orr.w	r2, r3, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d012      	beq.n	8008212 <HAL_UART_IRQHandler+0x196>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00c      	beq.n	8008212 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 823c 	beq.w	8008696 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800822a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800823a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008266:	2b40      	cmp	r3, #64	@ 0x40
 8008268:	d005      	beq.n	8008276 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800826a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800826e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008272:	2b00      	cmp	r3, #0
 8008274:	d04f      	beq.n	8008316 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 ffc6 	bl	8009208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008286:	2b40      	cmp	r3, #64	@ 0x40
 8008288:	d141      	bne.n	800830e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3308      	adds	r3, #8
 80082b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d9      	bne.n	800828a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d013      	beq.n	8008306 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e2:	4a14      	ldr	r2, [pc, #80]	@ (8008334 <HAL_UART_IRQHandler+0x2b8>)
 80082e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fc fae8 	bl	80048c0 <HAL_DMA_Abort_IT>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d017      	beq.n	8008326 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	e00f      	b.n	8008326 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9d9 	bl	80086be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	e00b      	b.n	8008326 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9d5 	bl	80086be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e007      	b.n	8008326 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9d1 	bl	80086be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8008324:	e1b7      	b.n	8008696 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008326:	bf00      	nop
    return;
 8008328:	e1b5      	b.n	8008696 <HAL_UART_IRQHandler+0x61a>
 800832a:	bf00      	nop
 800832c:	10000001 	.word	0x10000001
 8008330:	04000120 	.word	0x04000120
 8008334:	08009409 	.word	0x08009409

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833c:	2b01      	cmp	r3, #1
 800833e:	f040 814a 	bne.w	80085d6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8143 	beq.w	80085d6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 813c 	beq.w	80085d6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2210      	movs	r2, #16
 8008364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b40      	cmp	r3, #64	@ 0x40
 8008372:	f040 80b5 	bne.w	80084e0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008382:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 8187 	beq.w	800869a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008396:	429a      	cmp	r2, r3
 8008398:	f080 817f 	bcs.w	800869a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 8086 	bne.w	80084c4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1da      	bne.n	80083b8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008426:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800842a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800842e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e1      	bne.n	8008402 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800844e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008464:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e3      	bne.n	800843e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e4      	bne.n	8008484 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fc f9a0 	bl	8004804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f8f9 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80084de:	e0dc      	b.n	800869a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80ce 	beq.w	800869e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008502:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80c9 	beq.w	800869e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800851a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800852e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008530:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800853c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e4      	bne.n	800850c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	623b      	str	r3, [r7, #32]
   return(result);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800856a:	633a      	str	r2, [r7, #48]	@ 0x30
 800856c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e1      	bne.n	8008542 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	69b9      	ldr	r1, [r7, #24]
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	617b      	str	r3, [r7, #20]
   return(result);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e4      	bne.n	8008592 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f87e 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085d4:	e063      	b.n	800869e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00e      	beq.n	8008600 <HAL_UART_IRQHandler+0x584>
 80085e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fba3 	bl	8009d44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085fe:	e051      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008608:	2b00      	cmp	r3, #0
 800860a:	d014      	beq.n	8008636 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008614:	2b00      	cmp	r3, #0
 8008616:	d105      	bne.n	8008624 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800861c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008628:	2b00      	cmp	r3, #0
 800862a:	d03a      	beq.n	80086a2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
    }
    return;
 8008634:	e035      	b.n	80086a2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <HAL_UART_IRQHandler+0x5da>
 8008642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fef0 	bl	8009434 <UART_EndTransmit_IT>
    return;
 8008654:	e026      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_UART_IRQHandler+0x5fa>
 8008662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008666:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fb7a 	bl	8009d68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008674:	e016      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <HAL_UART_IRQHandler+0x628>
 8008682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008686:	2b00      	cmp	r3, #0
 8008688:	da0c      	bge.n	80086a4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fb63 	bl	8009d56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008690:	e008      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
      return;
 8008692:	bf00      	nop
 8008694:	e006      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
    return;
 8008696:	bf00      	nop
 8008698:	e004      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
      return;
 800869a:	bf00      	nop
 800869c:	e002      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
      return;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <HAL_UART_IRQHandler+0x628>
    return;
 80086a2:	bf00      	nop
  }
}
 80086a4:	37e8      	adds	r7, #232	@ 0xe8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr

080086be <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr
	...

080086e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ec:	b08c      	sub	sp, #48	@ 0x30
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	431a      	orrs	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4313      	orrs	r3, r2
 800870e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b94      	ldr	r3, [pc, #592]	@ (8008968 <UART_SetConfig+0x280>)
 8008718:	4013      	ands	r3, r2
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008720:	430b      	orrs	r3, r1
 8008722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a89      	ldr	r2, [pc, #548]	@ (800896c <UART_SetConfig+0x284>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008750:	4313      	orrs	r3, r2
 8008752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800875e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008768:	430b      	orrs	r3, r1
 800876a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008772:	f023 010f 	bic.w	r1, r3, #15
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a7a      	ldr	r2, [pc, #488]	@ (8008970 <UART_SetConfig+0x288>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d127      	bne.n	80087dc <UART_SetConfig+0xf4>
 800878c:	2003      	movs	r0, #3
 800878e:	f7ff fb1b 	bl	8007dc8 <LL_RCC_GetUSARTClockSource>
 8008792:	4603      	mov	r3, r0
 8008794:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008798:	2b03      	cmp	r3, #3
 800879a:	d81b      	bhi.n	80087d4 <UART_SetConfig+0xec>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <UART_SetConfig+0xbc>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087c5 	.word	0x080087c5
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ba:	e080      	b.n	80088be <UART_SetConfig+0x1d6>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c2:	e07c      	b.n	80088be <UART_SetConfig+0x1d6>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ca:	e078      	b.n	80088be <UART_SetConfig+0x1d6>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d2:	e074      	b.n	80088be <UART_SetConfig+0x1d6>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087da:	e070      	b.n	80088be <UART_SetConfig+0x1d6>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a64      	ldr	r2, [pc, #400]	@ (8008974 <UART_SetConfig+0x28c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d138      	bne.n	8008858 <UART_SetConfig+0x170>
 80087e6:	200c      	movs	r0, #12
 80087e8:	f7ff faee 	bl	8007dc8 <LL_RCC_GetUSARTClockSource>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d82c      	bhi.n	8008850 <UART_SetConfig+0x168>
 80087f6:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <UART_SetConfig+0x114>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008851 	.word	0x08008851
 8008804:	08008851 	.word	0x08008851
 8008808:	08008851 	.word	0x08008851
 800880c:	08008841 	.word	0x08008841
 8008810:	08008851 	.word	0x08008851
 8008814:	08008851 	.word	0x08008851
 8008818:	08008851 	.word	0x08008851
 800881c:	08008839 	.word	0x08008839
 8008820:	08008851 	.word	0x08008851
 8008824:	08008851 	.word	0x08008851
 8008828:	08008851 	.word	0x08008851
 800882c:	08008849 	.word	0x08008849
 8008830:	2300      	movs	r3, #0
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008836:	e042      	b.n	80088be <UART_SetConfig+0x1d6>
 8008838:	2302      	movs	r3, #2
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883e:	e03e      	b.n	80088be <UART_SetConfig+0x1d6>
 8008840:	2304      	movs	r3, #4
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e03a      	b.n	80088be <UART_SetConfig+0x1d6>
 8008848:	2308      	movs	r3, #8
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884e:	e036      	b.n	80088be <UART_SetConfig+0x1d6>
 8008850:	2310      	movs	r3, #16
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008856:	e032      	b.n	80088be <UART_SetConfig+0x1d6>
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a43      	ldr	r2, [pc, #268]	@ (800896c <UART_SetConfig+0x284>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d12a      	bne.n	80088b8 <UART_SetConfig+0x1d0>
 8008862:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008866:	f7ff fac1 	bl	8007dec <LL_RCC_GetLPUARTClockSource>
 800886a:	4603      	mov	r3, r0
 800886c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008870:	d01a      	beq.n	80088a8 <UART_SetConfig+0x1c0>
 8008872:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008876:	d81b      	bhi.n	80088b0 <UART_SetConfig+0x1c8>
 8008878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800887c:	d00c      	beq.n	8008898 <UART_SetConfig+0x1b0>
 800887e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008882:	d815      	bhi.n	80088b0 <UART_SetConfig+0x1c8>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <UART_SetConfig+0x1a8>
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800888c:	d008      	beq.n	80088a0 <UART_SetConfig+0x1b8>
 800888e:	e00f      	b.n	80088b0 <UART_SetConfig+0x1c8>
 8008890:	2300      	movs	r3, #0
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008896:	e012      	b.n	80088be <UART_SetConfig+0x1d6>
 8008898:	2302      	movs	r3, #2
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889e:	e00e      	b.n	80088be <UART_SetConfig+0x1d6>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e00a      	b.n	80088be <UART_SetConfig+0x1d6>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	e006      	b.n	80088be <UART_SetConfig+0x1d6>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e002      	b.n	80088be <UART_SetConfig+0x1d6>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a2a      	ldr	r2, [pc, #168]	@ (800896c <UART_SetConfig+0x284>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	f040 80a4 	bne.w	8008a12 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d823      	bhi.n	800891a <UART_SetConfig+0x232>
 80088d2:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <UART_SetConfig+0x1f0>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	0800891b 	.word	0x0800891b
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800891b 	.word	0x0800891b
 80088e8:	0800890b 	.word	0x0800890b
 80088ec:	0800891b 	.word	0x0800891b
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800891b 	.word	0x0800891b
 80088f8:	08008913 	.word	0x08008913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fc:	f7fd ff46 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008902:	e010      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008904:	4b1c      	ldr	r3, [pc, #112]	@ (8008978 <UART_SetConfig+0x290>)
 8008906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008908:	e00d      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800890a:	f7fd fe8b 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 800890e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008910:	e009      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008918:	e005      	b.n	8008926 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8137 	beq.w	8008b9c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	4a12      	ldr	r2, [pc, #72]	@ (800897c <UART_SetConfig+0x294>)
 8008934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008938:	461a      	mov	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008940:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4413      	add	r3, r2
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d305      	bcc.n	800895e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	429a      	cmp	r2, r3
 800895c:	d910      	bls.n	8008980 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008964:	e11a      	b.n	8008b9c <UART_SetConfig+0x4b4>
 8008966:	bf00      	nop
 8008968:	cfff69f3 	.word	0xcfff69f3
 800896c:	40008000 	.word	0x40008000
 8008970:	40013800 	.word	0x40013800
 8008974:	40004400 	.word	0x40004400
 8008978:	00f42400 	.word	0x00f42400
 800897c:	0801f17c 	.word	0x0801f17c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	2200      	movs	r2, #0
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	60fa      	str	r2, [r7, #12]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	4a8e      	ldr	r2, [pc, #568]	@ (8008bc8 <UART_SetConfig+0x4e0>)
 800898e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008992:	b29b      	uxth	r3, r3
 8008994:	2200      	movs	r2, #0
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800899e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089a2:	f7f8 fa0d 	bl	8000dc0 <__aeabi_uldivmod>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4610      	mov	r0, r2
 80089ac:	4619      	mov	r1, r3
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	020b      	lsls	r3, r1, #8
 80089b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089bc:	0202      	lsls	r2, r0, #8
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	6849      	ldr	r1, [r1, #4]
 80089c2:	0849      	lsrs	r1, r1, #1
 80089c4:	2000      	movs	r0, #0
 80089c6:	460c      	mov	r4, r1
 80089c8:	4605      	mov	r5, r0
 80089ca:	eb12 0804 	adds.w	r8, r2, r4
 80089ce:	eb43 0905 	adc.w	r9, r3, r5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	469a      	mov	sl, r3
 80089da:	4693      	mov	fp, r2
 80089dc:	4652      	mov	r2, sl
 80089de:	465b      	mov	r3, fp
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f8 f9ec 	bl	8000dc0 <__aeabi_uldivmod>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4613      	mov	r3, r2
 80089ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089f6:	d308      	bcc.n	8008a0a <UART_SetConfig+0x322>
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fe:	d204      	bcs.n	8008a0a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	e0c8      	b.n	8008b9c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a10:	e0c4      	b.n	8008b9c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a1a:	d168      	bne.n	8008aee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d828      	bhi.n	8008a76 <UART_SetConfig+0x38e>
 8008a24:	a201      	add	r2, pc, #4	@ (adr r2, 8008a2c <UART_SetConfig+0x344>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	08008a77 	.word	0x08008a77
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a77 	.word	0x08008a77
 8008a44:	08008a77 	.word	0x08008a77
 8008a48:	08008a77 	.word	0x08008a77
 8008a4c:	08008a6f 	.word	0x08008a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fd fe9c 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a56:	e014      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a58:	f7fd feaa 	bl	80067b0 <HAL_RCC_GetPCLK2Freq>
 8008a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a5e:	e010      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a60:	4b5a      	ldr	r3, [pc, #360]	@ (8008bcc <UART_SetConfig+0x4e4>)
 8008a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a64:	e00d      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a66:	f7fd fddd 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8008a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a6c:	e009      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a74:	e005      	b.n	8008a82 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8089 	beq.w	8008b9c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8008bc8 <UART_SetConfig+0x4e0>)
 8008a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a94:	461a      	mov	r2, r3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9c:	005a      	lsls	r2, r3, #1
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	441a      	add	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	2b0f      	cmp	r3, #15
 8008ab6:	d916      	bls.n	8008ae6 <UART_SetConfig+0x3fe>
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008abe:	d212      	bcs.n	8008ae6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f023 030f 	bic.w	r3, r3, #15
 8008ac8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	085b      	lsrs	r3, r3, #1
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	8bfb      	ldrh	r3, [r7, #30]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	8bfa      	ldrh	r2, [r7, #30]
 8008ae2:	60da      	str	r2, [r3, #12]
 8008ae4:	e05a      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008aec:	e056      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d827      	bhi.n	8008b46 <UART_SetConfig+0x45e>
 8008af6:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0x414>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	08008b47 	.word	0x08008b47
 8008b0c:	08008b37 	.word	0x08008b37
 8008b10:	08008b47 	.word	0x08008b47
 8008b14:	08008b47 	.word	0x08008b47
 8008b18:	08008b47 	.word	0x08008b47
 8008b1c:	08008b3f 	.word	0x08008b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fd fe34 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b26:	e014      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b28:	f7fd fe42 	bl	80067b0 <HAL_RCC_GetPCLK2Freq>
 8008b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2e:	e010      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b30:	4b26      	ldr	r3, [pc, #152]	@ (8008bcc <UART_SetConfig+0x4e4>)
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b34:	e00d      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b36:	f7fd fd75 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8008b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b3c:	e009      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b44:	e005      	b.n	8008b52 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b50:	bf00      	nop
    }

    if (pclk != 0U)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d021      	beq.n	8008b9c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc8 <UART_SetConfig+0x4e0>)
 8008b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	441a      	add	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	2b0f      	cmp	r3, #15
 8008b82:	d908      	bls.n	8008b96 <UART_SetConfig+0x4ae>
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8a:	d204      	bcs.n	8008b96 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a3a      	ldr	r2, [r7, #32]
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	e002      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3730      	adds	r7, #48	@ 0x30
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc6:	bf00      	nop
 8008bc8:	0801f17c 	.word	0x0801f17c
 8008bcc:	00f42400 	.word	0x00f42400

08008bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cce:	d10a      	bne.n	8008ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr

08008d12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af02      	add	r7, sp, #8
 8008d18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d22:	f7f9 f9f9 	bl	8002118 <HAL_GetTick>
 8008d26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d10e      	bne.n	8008d54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f82f 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e025      	b.n	8008da0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d10e      	bne.n	8008d80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f819 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e00f      	b.n	8008da0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b09c      	sub	sp, #112	@ 0x70
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	e0a9      	b.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	f000 80a5 	beq.w	8008f0e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc4:	f7f9 f9a8 	bl	8002118 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d302      	bcc.n	8008dda <UART_WaitOnFlagUntilTimeout+0x32>
 8008dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d140      	bne.n	8008e5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dfa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008dfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e6      	bne.n	8008dda <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3308      	adds	r3, #8
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e5      	bne.n	8008e0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e069      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d051      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e78:	d149      	bne.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e6      	bne.n	8008e84 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ed6:	623a      	str	r2, [r7, #32]
 8008ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	69f9      	ldr	r1, [r7, #28]
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e010      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4013      	ands	r3, r2
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	bf0c      	ite	eq
 8008f1e:	2301      	moveq	r3, #1
 8008f20:	2300      	movne	r3, #0
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	f43f af46 	beq.w	8008dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3770      	adds	r7, #112	@ 0x70
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b0a3      	sub	sp, #140	@ 0x8c
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f6a:	d10e      	bne.n	8008f8a <UART_Start_Receive_IT+0x52>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <UART_Start_Receive_IT+0x48>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008f7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f7e:	e02d      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	22ff      	movs	r2, #255	@ 0xff
 8008f84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f88:	e028      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10d      	bne.n	8008fae <UART_Start_Receive_IT+0x76>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <UART_Start_Receive_IT+0x6c>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	22ff      	movs	r2, #255	@ 0xff
 8008f9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fa2:	e01b      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	227f      	movs	r2, #127	@ 0x7f
 8008fa8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fac:	e016      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fb6:	d10d      	bne.n	8008fd4 <UART_Start_Receive_IT+0x9c>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <UART_Start_Receive_IT+0x92>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	227f      	movs	r2, #127	@ 0x7f
 8008fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fc8:	e008      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	223f      	movs	r2, #63	@ 0x3f
 8008fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fd2:	e003      	b.n	8008fdc <UART_Start_Receive_IT+0xa4>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2222      	movs	r2, #34	@ 0x22
 8008fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008ffc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009010:	673a      	str	r2, [r7, #112]	@ 0x70
 8009012:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009016:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800901e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e3      	bne.n	8008fec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902c:	d153      	bne.n	80090d6 <UART_Start_Receive_IT+0x19e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	429a      	cmp	r2, r3
 8009038:	d34d      	bcc.n	80090d6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009042:	d107      	bne.n	8009054 <UART_Start_Receive_IT+0x11c>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a4a      	ldr	r2, [pc, #296]	@ (8009178 <UART_Start_Receive_IT+0x240>)
 8009050:	671a      	str	r2, [r3, #112]	@ 0x70
 8009052:	e002      	b.n	800905a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a49      	ldr	r2, [pc, #292]	@ (800917c <UART_Start_Receive_IT+0x244>)
 8009058:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01a      	beq.n	80090a0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800907a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800908e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009092:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800909a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e4      	bne.n	800906a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3308      	adds	r3, #8
 80090be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80090c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80090ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <UART_Start_Receive_IT+0x168>
 80090d4:	e04a      	b.n	800916c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090de:	d107      	bne.n	80090f0 <UART_Start_Receive_IT+0x1b8>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a25      	ldr	r2, [pc, #148]	@ (8009180 <UART_Start_Receive_IT+0x248>)
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80090ee:	e002      	b.n	80090f6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a24      	ldr	r2, [pc, #144]	@ (8009184 <UART_Start_Receive_IT+0x24c>)
 80090f4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d019      	beq.n	800913a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800911a:	677b      	str	r3, [r7, #116]	@ 0x74
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009124:	637b      	str	r3, [r7, #52]	@ 0x34
 8009126:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800912a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e6      	bne.n	8009106 <UART_Start_Receive_IT+0x1ce>
 8009138:	e018      	b.n	800916c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	613b      	str	r3, [r7, #16]
   return(result);
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f043 0320 	orr.w	r3, r3, #32
 800914e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	6a3a      	ldr	r2, [r7, #32]
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	61bb      	str	r3, [r7, #24]
   return(result);
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e6      	bne.n	800913a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	378c      	adds	r7, #140	@ 0x8c
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr
 8009178:	08009a45 	.word	0x08009a45
 800917c:	0800974d 	.word	0x0800974d
 8009180:	080095eb 	.word	0x080095eb
 8009184:	0800948b 	.word	0x0800948b

08009188 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b08f      	sub	sp, #60	@ 0x3c
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	61fb      	str	r3, [r7, #28]
   return(result);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e6      	bne.n	8009190 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e2:	61ba      	str	r2, [r7, #24]
 80091e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6979      	ldr	r1, [r7, #20]
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	613b      	str	r3, [r7, #16]
   return(result);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e5      	bne.n	80091c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80091fe:	bf00      	nop
 8009200:	373c      	adds	r7, #60	@ 0x3c
 8009202:	46bd      	mov	sp, r7
 8009204:	bc80      	pop	{r7}
 8009206:	4770      	bx	lr

08009208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b095      	sub	sp, #84	@ 0x54
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800922e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009230:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e6      	bne.n	8009210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	61fb      	str	r3, [r7, #28]
   return(result);
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800926c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d118      	bne.n	80092b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f023 0310 	bic.w	r3, r3, #16
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6979      	ldr	r1, [r7, #20]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	613b      	str	r3, [r7, #16]
   return(result);
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e6      	bne.n	8009282 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80092c8:	bf00      	nop
 80092ca:	3754      	adds	r7, #84	@ 0x54
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b090      	sub	sp, #64	@ 0x40
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d137      	bne.n	800935e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3308      	adds	r3, #8
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	623b      	str	r3, [r7, #32]
   return(result);
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800930c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800930e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009316:	633a      	str	r2, [r7, #48]	@ 0x30
 8009318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e5      	bne.n	80092f6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800932a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	60fb      	str	r3, [r7, #12]
   return(result);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	69b9      	ldr	r1, [r7, #24]
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	617b      	str	r3, [r7, #20]
   return(result);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e6      	bne.n	800932a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935c:	e002      	b.n	8009364 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800935e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009360:	f7f9 fd62 	bl	8002e28 <HAL_UART_TxCpltCallback>
}
 8009364:	bf00      	nop
 8009366:	3740      	adds	r7, #64	@ 0x40
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009378:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff f996 	bl	80086ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800939c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b0:	2b80      	cmp	r3, #128	@ 0x80
 80093b2:	d109      	bne.n	80093c8 <UART_DMAError+0x40>
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b21      	cmp	r3, #33	@ 0x21
 80093b8:	d106      	bne.n	80093c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff fee0 	bl	8009188 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d109      	bne.n	80093ea <UART_DMAError+0x62>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b22      	cmp	r3, #34	@ 0x22
 80093da:	d106      	bne.n	80093ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093e4:	6978      	ldr	r0, [r7, #20]
 80093e6:	f7ff ff0f 	bl	8009208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f0:	f043 0210 	orr.w	r2, r3, #16
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fa:	6978      	ldr	r0, [r7, #20]
 80093fc:	f7ff f95f 	bl	80086be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009400:	bf00      	nop
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff f949 	bl	80086be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60bb      	str	r3, [r7, #8]
   return(result);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6979      	ldr	r1, [r7, #20]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	613b      	str	r3, [r7, #16]
   return(result);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e6      	bne.n	800943c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7f9 fcd3 	bl	8002e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009482:	bf00      	nop
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b096      	sub	sp, #88	@ 0x58
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009498:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a2:	2b22      	cmp	r3, #34	@ 0x22
 80094a4:	f040 8095 	bne.w	80095d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ae:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80094b6:	b2d9      	uxtb	r1, r3
 80094b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c2:	400a      	ands	r2, r1
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d178      	bne.n	80095e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009504:	653b      	str	r3, [r7, #80]	@ 0x50
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800950e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009510:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800951c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e6      	bne.n	80094f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	623b      	str	r3, [r7, #32]
   return(result);
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009542:	633a      	str	r2, [r7, #48]	@ 0x30
 8009544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d12e      	bne.n	80095ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0310 	bic.w	r3, r3, #16
 8009586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	69b9      	ldr	r1, [r7, #24]
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	617b      	str	r3, [r7, #20]
   return(result);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e6      	bne.n	8009572 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d103      	bne.n	80095ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2210      	movs	r2, #16
 80095b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff f884 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095c8:	e00b      	b.n	80095e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7f9 fc42 	bl	8002e54 <HAL_UART_RxCpltCallback>
}
 80095d0:	e007      	b.n	80095e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f042 0208 	orr.w	r2, r2, #8
 80095e0:	619a      	str	r2, [r3, #24]
}
 80095e2:	bf00      	nop
 80095e4:	3758      	adds	r7, #88	@ 0x58
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b096      	sub	sp, #88	@ 0x58
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009602:	2b22      	cmp	r3, #34	@ 0x22
 8009604:	f040 8095 	bne.w	8009732 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009616:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009618:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800961c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009620:	4013      	ands	r3, r2
 8009622:	b29a      	uxth	r2, r3
 8009624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009626:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962c:	1c9a      	adds	r2, r3, #2
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800964a:	b29b      	uxth	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d178      	bne.n	8009742 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800966e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009670:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e6      	bne.n	8009650 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	61fb      	str	r3, [r7, #28]
   return(result);
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d12e      	bne.n	800972a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f023 0310 	bic.w	r3, r3, #16
 80096e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	613b      	str	r3, [r7, #16]
   return(result);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f003 0310 	and.w	r3, r3, #16
 800970e:	2b10      	cmp	r3, #16
 8009710:	d103      	bne.n	800971a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2210      	movs	r2, #16
 8009718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fe ffd4 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009728:	e00b      	b.n	8009742 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7f9 fb92 	bl	8002e54 <HAL_UART_RxCpltCallback>
}
 8009730:	e007      	b.n	8009742 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f042 0208 	orr.w	r2, r2, #8
 8009740:	619a      	str	r2, [r3, #24]
}
 8009742:	bf00      	nop
 8009744:	3758      	adds	r7, #88	@ 0x58
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b0a6      	sub	sp, #152	@ 0x98
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800975a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009782:	2b22      	cmp	r3, #34	@ 0x22
 8009784:	f040 814f 	bne.w	8009a26 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800978e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009792:	e0f6      	b.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800979e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80097a2:	b2d9      	uxtb	r1, r3
 80097a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ae:	400a      	ands	r2, r1
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d053      	beq.n	800988e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d011      	beq.n	8009816 <UART_RxISR_8BIT_FIFOEN+0xca>
 80097f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2201      	movs	r2, #1
 8009804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800980c:	f043 0201 	orr.w	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009816:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d011      	beq.n	8009846 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009822:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00b      	beq.n	8009846 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2202      	movs	r2, #2
 8009834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800983c:	f043 0204 	orr.w	r2, r3, #4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009846:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d011      	beq.n	8009876 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00b      	beq.n	8009876 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2204      	movs	r2, #4
 8009864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800986c:	f043 0202 	orr.w	r2, r3, #2
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fe ff1c 	bl	80086be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009894:	b29b      	uxth	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d173      	bne.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80098a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80098bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098be:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80098c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80098ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e4      	bne.n	800989a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e6:	f023 0301 	bic.w	r3, r3, #1
 80098ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098f4:	657a      	str	r2, [r7, #84]	@ 0x54
 80098f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e3      	bne.n	80098d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d12e      	bne.n	800997c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009934:	f023 0310 	bic.w	r3, r3, #16
 8009938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009942:	643b      	str	r3, [r7, #64]	@ 0x40
 8009944:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b10      	cmp	r3, #16
 8009962:	d103      	bne.n	800996c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2210      	movs	r2, #16
 800996a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe feab 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
 800997a:	e002      	b.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7f9 fa69 	bl	8002e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009982:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800998a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	f47f aefe 	bne.w	8009794 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800999e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d045      	beq.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d23e      	bcs.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3308      	adds	r3, #8
 80099be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3308      	adds	r3, #8
 80099d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80099d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e5      	bne.n	80099b8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a14      	ldr	r2, [pc, #80]	@ (8009a40 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80099f0:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f043 0320 	orr.w	r3, r3, #32
 8009a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6979      	ldr	r1, [r7, #20]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a24:	e007      	b.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	619a      	str	r2, [r3, #24]
}
 8009a36:	bf00      	nop
 8009a38:	3798      	adds	r7, #152	@ 0x98
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800948b 	.word	0x0800948b

08009a44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b0a8      	sub	sp, #160	@ 0xa0
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a52:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7a:	2b22      	cmp	r3, #34	@ 0x22
 8009a7c:	f040 8153 	bne.w	8009d26 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a86:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a8a:	e0fa      	b.n	8009c82 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a9e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009aa2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009aae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d053      	beq.n	8009b8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d011      	beq.n	8009b12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009aee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2201      	movs	r2, #1
 8009b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b08:	f043 0201 	orr.w	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d011      	beq.n	8009b42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b38:	f043 0204 	orr.w	r2, r3, #4
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b46:	f003 0304 	and.w	r3, r3, #4
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d011      	beq.n	8009b72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00b      	beq.n	8009b72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b68:	f043 0202 	orr.w	r2, r3, #2
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d006      	beq.n	8009b8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fe fd9e 	bl	80086be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d175      	bne.n	8009c82 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bba:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e4      	bne.n	8009b96 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be2:	f023 0301 	bic.w	r3, r3, #1
 8009be6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009bf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e1      	bne.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d12e      	bne.n	8009c7c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c34:	f023 0310 	bic.w	r3, r3, #16
 8009c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e6      	bne.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d103      	bne.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2210      	movs	r2, #16
 8009c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fe fd2b 	bl	80086d0 <HAL_UARTEx_RxEventCallback>
 8009c7a:	e002      	b.n	8009c82 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7f9 f8e9 	bl	8002e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f47f aefa 	bne.w	8009a8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c9e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ca2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d045      	beq.n	8009d36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cb0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d23e      	bcs.n	8009d36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cce:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009cd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e5      	bne.n	8009cb8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a14      	ldr	r2, [pc, #80]	@ (8009d40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009cf0:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f043 0320 	orr.w	r3, r3, #32
 8009d06:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	69b9      	ldr	r1, [r7, #24]
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d24:	e007      	b.n	8009d36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f042 0208 	orr.w	r2, r2, #8
 8009d34:	619a      	str	r2, [r3, #24]
}
 8009d36:	bf00      	nop
 8009d38:	37a0      	adds	r7, #160	@ 0xa0
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	080095eb 	.word	0x080095eb

08009d44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr

08009d56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr

08009d68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bc80      	pop	{r7}
 8009d78:	4770      	bx	lr

08009d7a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	af02      	add	r7, sp, #8
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	1d3b      	adds	r3, r7, #4
 8009d84:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009d96:	2302      	movs	r3, #2
 8009d98:	e046      	b.n	8009e28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2224      	movs	r2, #36	@ 0x24
 8009da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d105      	bne.n	8009de0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009dd4:	1d3b      	adds	r3, r7, #4
 8009dd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f949 	bl	800a072 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009df0:	f7f8 f992 	bl	8002118 <HAL_GetTick>
 8009df4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009df6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7fe ffcf 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	75fb      	strb	r3, [r7, #23]
 8009e14:	e003      	b.n	8009e1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b089      	sub	sp, #36	@ 0x24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_UARTEx_EnableStopMode+0x16>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e021      	b.n	8009e8a <HAL_UARTEx_EnableStopMode+0x5a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f043 0302 	orr.w	r3, r3, #2
 8009e62:	61fb      	str	r3, [r7, #28]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6979      	ldr	r1, [r7, #20]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e6      	bne.n	8009e4e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3724      	adds	r7, #36	@ 0x24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bc80      	pop	{r7}
 8009e92:	4770      	bx	lr

08009e94 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_UARTEx_EnableFifoMode+0x16>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e02b      	b.n	8009f02 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2224      	movs	r2, #36	@ 0x24
 8009eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 0201 	bic.w	r2, r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ed8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009ee0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f8e4 	bl	800a0b8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e027      	b.n	8009f70 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2224      	movs	r2, #36	@ 0x24
 8009f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0201 	bic.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr

08009f7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e02d      	b.n	8009fee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2224      	movs	r2, #36	@ 0x24
 8009f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f872 	bl	800a0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e02d      	b.n	800a06a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2224      	movs	r2, #36	@ 0x24
 800a01a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0201 	bic.w	r2, r2, #1
 800a034:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f834 	bl	800a0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a072:	b480      	push	{r7}
 800a074:	b085      	sub	sp, #20
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	1d3b      	adds	r3, r7, #4
 800a07c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f023 0210 	bic.w	r2, r3, #16
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	4619      	mov	r1, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a0a0:	7abb      	ldrb	r3, [r7, #10]
 800a0a2:	061a      	lsls	r2, r3, #24
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	605a      	str	r2, [r3, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bc80      	pop	{r7}
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d108      	bne.n	800a0da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0d8:	e031      	b.n	800a13e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0da:	2308      	movs	r3, #8
 800a0dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0de:	2308      	movs	r3, #8
 800a0e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	0e5b      	lsrs	r3, r3, #25
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0307 	and.w	r3, r3, #7
 800a0f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	0f5b      	lsrs	r3, r3, #29
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	7b3a      	ldrb	r2, [r7, #12]
 800a106:	4910      	ldr	r1, [pc, #64]	@ (800a148 <UARTEx_SetNbDataToProcess+0x90>)
 800a108:	5c8a      	ldrb	r2, [r1, r2]
 800a10a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a10e:	7b3a      	ldrb	r2, [r7, #12]
 800a110:	490e      	ldr	r1, [pc, #56]	@ (800a14c <UARTEx_SetNbDataToProcess+0x94>)
 800a112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a114:	fb93 f3f2 	sdiv	r3, r3, r2
 800a118:	b29a      	uxth	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	7b7a      	ldrb	r2, [r7, #13]
 800a124:	4908      	ldr	r1, [pc, #32]	@ (800a148 <UARTEx_SetNbDataToProcess+0x90>)
 800a126:	5c8a      	ldrb	r2, [r1, r2]
 800a128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a12c:	7b7a      	ldrb	r2, [r7, #13]
 800a12e:	4907      	ldr	r1, [pc, #28]	@ (800a14c <UARTEx_SetNbDataToProcess+0x94>)
 800a130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a132:	fb93 f3f2 	sdiv	r3, r3, r2
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a13e:	bf00      	nop
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr
 800a148:	0801f194 	.word	0x0801f194
 800a14c:	0801f19c 	.word	0x0801f19c

0800a150 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a154:	f7f7 fe80 	bl	8001e58 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a158:	f000 f820 	bl	800a19c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a15c:	bf00      	nop
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	f010 fe9c 	bl	801aea4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a16c:	bf00      	nop
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a174:	f3bf 8f4f 	dsb	sy
}
 800a178:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a17a:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <__NVIC_SystemReset+0x24>)
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a182:	4904      	ldr	r1, [pc, #16]	@ (800a194 <__NVIC_SystemReset+0x24>)
 800a184:	4b04      	ldr	r3, [pc, #16]	@ (800a198 <__NVIC_SystemReset+0x28>)
 800a186:	4313      	orrs	r3, r2
 800a188:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a18a:	f3bf 8f4f 	dsb	sy
}
 800a18e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <__NVIC_SystemReset+0x20>
 800a194:	e000ed00 	.word	0xe000ed00
 800a198:	05fa0004 	.word	0x05fa0004

0800a19c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	4b60      	ldr	r3, [pc, #384]	@ (800a334 <LoRaWAN_Init+0x198>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	2002      	movs	r0, #2
 800a1ba:	f011 fabf 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9302      	str	r3, [sp, #8]
 800a1c2:	2304      	movs	r3, #4
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	4b5b      	ldr	r3, [pc, #364]	@ (800a338 <LoRaWAN_Init+0x19c>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	2002      	movs	r0, #2
 800a1d2:	f011 fab3 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	2302      	movs	r3, #2
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4b56      	ldr	r3, [pc, #344]	@ (800a33c <LoRaWAN_Init+0x1a0>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	2002      	movs	r0, #2
 800a1ea:	f011 faa7 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a1ee:	1d3b      	adds	r3, r7, #4
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f003 f8a4 	bl	800d340 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	0e1b      	lsrs	r3, r3, #24
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0c1b      	lsrs	r3, r3, #16
 800a204:	b2db      	uxtb	r3, r3
 800a206:	4619      	mov	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	9101      	str	r1, [sp, #4]
 800a212:	9200      	str	r2, [sp, #0]
 800a214:	4b4a      	ldr	r3, [pc, #296]	@ (800a340 <LoRaWAN_Init+0x1a4>)
 800a216:	2200      	movs	r2, #0
 800a218:	2100      	movs	r1, #0
 800a21a:	2002      	movs	r0, #2
 800a21c:	f011 fa8e 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a220:	1d3b      	adds	r3, r7, #4
 800a222:	4619      	mov	r1, r3
 800a224:	2001      	movs	r0, #1
 800a226:	f003 f88b 	bl	800d340 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	0e1b      	lsrs	r3, r3, #24
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	b2db      	uxtb	r3, r3
 800a238:	4619      	mov	r1, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	b2c0      	uxtb	r0, r0
 800a244:	9003      	str	r0, [sp, #12]
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	9101      	str	r1, [sp, #4]
 800a24a:	9200      	str	r2, [sp, #0]
 800a24c:	4b3d      	ldr	r3, [pc, #244]	@ (800a344 <LoRaWAN_Init+0x1a8>)
 800a24e:	2200      	movs	r2, #0
 800a250:	2100      	movs	r1, #0
 800a252:	2002      	movs	r0, #2
 800a254:	f011 fa72 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4b3a      	ldr	r3, [pc, #232]	@ (800a348 <LoRaWAN_Init+0x1ac>)
 800a25e:	2200      	movs	r2, #0
 800a260:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a264:	4839      	ldr	r0, [pc, #228]	@ (800a34c <LoRaWAN_Init+0x1b0>)
 800a266:	f010 ffbb 	bl	801b1e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a26a:	2300      	movs	r3, #0
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b38      	ldr	r3, [pc, #224]	@ (800a350 <LoRaWAN_Init+0x1b4>)
 800a270:	2200      	movs	r2, #0
 800a272:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a276:	4837      	ldr	r0, [pc, #220]	@ (800a354 <LoRaWAN_Init+0x1b8>)
 800a278:	f010 ffb2 	bl	801b1e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a27c:	2300      	movs	r3, #0
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4b35      	ldr	r3, [pc, #212]	@ (800a358 <LoRaWAN_Init+0x1bc>)
 800a282:	2201      	movs	r2, #1
 800a284:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a288:	4834      	ldr	r0, [pc, #208]	@ (800a35c <LoRaWAN_Init+0x1c0>)
 800a28a:	f010 ffa9 	bl	801b1e0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a28e:	2300      	movs	r3, #0
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4b33      	ldr	r3, [pc, #204]	@ (800a360 <LoRaWAN_Init+0x1c4>)
 800a294:	2200      	movs	r2, #0
 800a296:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a29a:	4832      	ldr	r0, [pc, #200]	@ (800a364 <LoRaWAN_Init+0x1c8>)
 800a29c:	f010 ffa0 	bl	801b1e0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a2a0:	4a31      	ldr	r2, [pc, #196]	@ (800a368 <LoRaWAN_Init+0x1cc>)
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f010 fef9 	bl	801b09c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a2aa:	4a30      	ldr	r2, [pc, #192]	@ (800a36c <LoRaWAN_Init+0x1d0>)
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	2002      	movs	r0, #2
 800a2b0:	f010 fef4 	bl	801b09c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a2b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a370 <LoRaWAN_Init+0x1d4>)
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	2004      	movs	r0, #4
 800a2ba:	f010 feef 	bl	801b09c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a2be:	4a2d      	ldr	r2, [pc, #180]	@ (800a374 <LoRaWAN_Init+0x1d8>)
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	2008      	movs	r0, #8
 800a2c4:	f010 feea 	bl	801b09c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a2c8:	f000 fc64 	bl	800ab94 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a2cc:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a2d0:	4829      	ldr	r0, [pc, #164]	@ (800a378 <LoRaWAN_Init+0x1dc>)
 800a2d2:	f002 f91b 	bl	800c50c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a2d6:	4829      	ldr	r0, [pc, #164]	@ (800a37c <LoRaWAN_Init+0x1e0>)
 800a2d8:	f002 f976 	bl	800c5c8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a2dc:	481f      	ldr	r0, [pc, #124]	@ (800a35c <LoRaWAN_Init+0x1c0>)
 800a2de:	f010 ffb5 	bl	801b24c <UTIL_TIMER_Start>
  UTIL_TIMER_Create(&CurrentSensorTimer, 1000, UTIL_TIMER_ONESHOT, CurrentSensorCallback, NULL);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4b26      	ldr	r3, [pc, #152]	@ (800a380 <LoRaWAN_Init+0x1e4>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a2ee:	4825      	ldr	r0, [pc, #148]	@ (800a384 <LoRaWAN_Init+0x1e8>)
 800a2f0:	f010 ff76 	bl	801b1e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&CurrentSensorTimer);
 800a2f4:	4823      	ldr	r0, [pc, #140]	@ (800a384 <LoRaWAN_Init+0x1e8>)
 800a2f6:	f010 ffa9 	bl	801b24c <UTIL_TIMER_Start>
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a2fa:	4b23      	ldr	r3, [pc, #140]	@ (800a388 <LoRaWAN_Init+0x1ec>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	4a23      	ldr	r2, [pc, #140]	@ (800a38c <LoRaWAN_Init+0x1f0>)
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f002 fadb 	bl	800c8c0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a30a:	4b21      	ldr	r3, [pc, #132]	@ (800a390 <LoRaWAN_Init+0x1f4>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10b      	bne.n	800a32a <LoRaWAN_Init+0x18e>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a312:	4b20      	ldr	r3, [pc, #128]	@ (800a394 <LoRaWAN_Init+0x1f8>)
 800a314:	6819      	ldr	r1, [r3, #0]
 800a316:	2300      	movs	r3, #0
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	4b1f      	ldr	r3, [pc, #124]	@ (800a398 <LoRaWAN_Init+0x1fc>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	481f      	ldr	r0, [pc, #124]	@ (800a39c <LoRaWAN_Init+0x200>)
 800a320:	f010 ff5e 	bl	801b1e0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a324:	481d      	ldr	r0, [pc, #116]	@ (800a39c <LoRaWAN_Init+0x200>)
 800a326:	f010 ff91 	bl	801b24c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	0801e6f4 	.word	0x0801e6f4
 800a338:	0801e718 	.word	0x0801e718
 800a33c:	0801e73c 	.word	0x0801e73c
 800a340:	0801e760 	.word	0x0801e760
 800a344:	0801e784 	.word	0x0801e784
 800a348:	0800a701 	.word	0x0800a701
 800a34c:	200006ac 	.word	0x200006ac
 800a350:	0800a713 	.word	0x0800a713
 800a354:	200006c4 	.word	0x200006c4
 800a358:	0800a725 	.word	0x0800a725
 800a35c:	200006dc 	.word	0x200006dc
 800a360:	0800aa5d 	.word	0x0800aa5d
 800a364:	200005a0 	.word	0x200005a0
 800a368:	0800c855 	.word	0x0800c855
 800a36c:	0800a669 	.word	0x0800a669
 800a370:	0800aa81 	.word	0x0800aa81
 800a374:	0800a9dd 	.word	0x0800a9dd
 800a378:	2000000c 	.word	0x2000000c
 800a37c:	20000058 	.word	0x20000058
 800a380:	0800a3c9 	.word	0x0800a3c9
 800a384:	200006f4 	.word	0x200006f4
 800a388:	20000008 	.word	0x20000008
 800a38c:	20000009 	.word	0x20000009
 800a390:	20000584 	.word	0x20000584
 800a394:	2000006c 	.word	0x2000006c
 800a398:	0800a6dd 	.word	0x0800a6dd
 800a39c:	20000588 	.word	0x20000588

0800a3a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3b0:	d104      	bne.n	800a3bc <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	2002      	movs	r0, #2
 800a3b6:	f010 fe93 	bl	801b0e0 <UTIL_SEQ_SetTask>
      }
      break;
 800a3ba:	e000      	b.n	800a3be <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a3bc:	bf00      	nop
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <CurrentSensorCallback>:

static void CurrentSensorCallback(void *context)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    static bool lastCurrentState = false;
    static bool initialized = false;

    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800a3d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a3d4:	4858      	ldr	r0, [pc, #352]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a3d6:	f7fb f8d3 	bl	8005580 <HAL_GPIO_ReadPin>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
    bool currentState = (pinState == GPIO_PIN_SET);
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	bf0c      	ite	eq
 800a3e4:	2301      	moveq	r3, #1
 800a3e6:	2300      	movne	r3, #0
 800a3e8:	73bb      	strb	r3, [r7, #14]

    if (!initialized)
 800a3ea:	4b54      	ldr	r3, [pc, #336]	@ (800a53c <CurrentSensorCallback+0x174>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	f083 0301 	eor.w	r3, r3, #1
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d03f      	beq.n	800a478 <CurrentSensorCallback+0xb0>
    {
        lastCurrentState = currentState;
 800a3f8:	4a51      	ldr	r2, [pc, #324]	@ (800a540 <CurrentSensorCallback+0x178>)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	7013      	strb	r3, [r2, #0]
        currentDetected = currentState;
 800a3fe:	4a51      	ldr	r2, [pc, #324]	@ (800a544 <CurrentSensorCallback+0x17c>)
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	7013      	strb	r3, [r2, #0]
        initialized = true;
 800a404:	4b4d      	ldr	r3, [pc, #308]	@ (800a53c <CurrentSensorCallback+0x174>)
 800a406:	2201      	movs	r2, #1
 800a408:	701a      	strb	r2, [r3, #0]

        if (currentState)
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d018      	beq.n	800a442 <CurrentSensorCallback+0x7a>
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: Current detected! Sending pump ON uplink...\r\n");
 800a410:	4b4d      	ldr	r3, [pc, #308]	@ (800a548 <CurrentSensorCallback+0x180>)
 800a412:	2201      	movs	r2, #1
 800a414:	2100      	movs	r1, #0
 800a416:	2002      	movs	r0, #2
 800a418:	f011 f990 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a41c:	4b4b      	ldr	r3, [pc, #300]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a41e:	2202      	movs	r2, #2
 800a420:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a422:	4b4a      	ldr	r3, [pc, #296]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a424:	2201      	movs	r2, #1
 800a426:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a428:	4b49      	ldr	r3, [pc, #292]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a42e:	4b47      	ldr	r3, [pc, #284]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a430:	4a47      	ldr	r2, [pc, #284]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a432:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a434:	2201      	movs	r2, #1
 800a436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a43a:	483f      	ldr	r0, [pc, #252]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a43c:	f7fb f8b7 	bl	80055ae <HAL_GPIO_WritePin>
 800a440:	e017      	b.n	800a472 <CurrentSensorCallback+0xaa>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "First check: No current! Sending pump OFF uplink...\r\n");
 800a442:	4b44      	ldr	r3, [pc, #272]	@ (800a554 <CurrentSensorCallback+0x18c>)
 800a444:	2201      	movs	r2, #1
 800a446:	2100      	movs	r1, #0
 800a448:	2002      	movs	r0, #2
 800a44a:	f011 f977 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a44e:	4b3f      	ldr	r3, [pc, #252]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a450:	2202      	movs	r2, #2
 800a452:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a454:	4b3d      	ldr	r3, [pc, #244]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a456:	2201      	movs	r2, #1
 800a458:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a45a:	4b3d      	ldr	r3, [pc, #244]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a460:	4b3a      	ldr	r3, [pc, #232]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a462:	4a3b      	ldr	r2, [pc, #236]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a464:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a466:	2200      	movs	r2, #0
 800a468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a46c:	4832      	ldr	r0, [pc, #200]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a46e:	f7fb f89e 	bl	80055ae <HAL_GPIO_WritePin>
        }


        SendTxData();
 800a472:	f000 f8f9 	bl	800a668 <SendTxData>
 800a476:	e058      	b.n	800a52a <CurrentSensorCallback+0x162>
    }
    else if (currentState != lastCurrentState)
 800a478:	4b31      	ldr	r3, [pc, #196]	@ (800a540 <CurrentSensorCallback+0x178>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	7bba      	ldrb	r2, [r7, #14]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d053      	beq.n	800a52a <CurrentSensorCallback+0x162>
    {
        if (currentState)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01b      	beq.n	800a4c0 <CurrentSensorCallback+0xf8>
        {
            APP_LOG(TS_ON, VLEVEL_M, "Current detected! Sending pump ON uplink...\r\n");
 800a488:	4b33      	ldr	r3, [pc, #204]	@ (800a558 <CurrentSensorCallback+0x190>)
 800a48a:	2201      	movs	r2, #1
 800a48c:	2100      	movs	r1, #0
 800a48e:	2002      	movs	r0, #2
 800a490:	f011 f954 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a494:	4b2d      	ldr	r3, [pc, #180]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a496:	2202      	movs	r2, #2
 800a498:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a49a:	4b2c      	ldr	r3, [pc, #176]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x01; // Pump ON
 800a4a0:	4b2b      	ldr	r3, [pc, #172]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a4a6:	4b29      	ldr	r3, [pc, #164]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a4a8:	4a29      	ldr	r2, [pc, #164]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a4aa:	605a      	str	r2, [r3, #4]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a4b2:	4821      	ldr	r0, [pc, #132]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a4b4:	f7fb f87b 	bl	80055ae <HAL_GPIO_WritePin>
            currentDetected = true;
 800a4b8:	4b22      	ldr	r3, [pc, #136]	@ (800a544 <CurrentSensorCallback+0x17c>)
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e02f      	b.n	800a520 <CurrentSensorCallback+0x158>
        }
        else
        {
            APP_LOG(TS_ON, VLEVEL_M, "No current! Sending pump OFF uplink...\r\n");
 800a4c0:	4b26      	ldr	r3, [pc, #152]	@ (800a55c <CurrentSensorCallback+0x194>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	2002      	movs	r0, #2
 800a4c8:	f011 f938 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
            AppData.Port = LORAWAN_USER_APP_PORT;
 800a4cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	701a      	strb	r2, [r3, #0]
            AppData.BufferSize = 1;
 800a4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	705a      	strb	r2, [r3, #1]
            AppDataBuffer[0] = 0x00; // Pump OFF
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
            AppData.Buffer = AppDataBuffer;
 800a4de:	4b1b      	ldr	r3, [pc, #108]	@ (800a54c <CurrentSensorCallback+0x184>)
 800a4e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a550 <CurrentSensorCallback+0x188>)
 800a4e2:	605a      	str	r2, [r3, #4]

            currentDetected = false;
 800a4e4:	4b17      	ldr	r3, [pc, #92]	@ (800a544 <CurrentSensorCallback+0x17c>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]

            if (pumpState == STATE_PUMP_ON || pumpState == STATE_AUTO)
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a560 <CurrentSensorCallback+0x198>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d003      	beq.n	800a4fa <CurrentSensorCallback+0x132>
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <CurrentSensorCallback+0x198>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d10c      	bne.n	800a514 <CurrentSensorCallback+0x14c>
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // LED error
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a500:	480d      	ldr	r0, [pc, #52]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a502:	f7fb f854 	bl	80055ae <HAL_GPIO_WritePin>
                APP_LOG(TS_ON, VLEVEL_M, "ERROR: Pump should be ON but no current detected!\r\n");
 800a506:	4b17      	ldr	r3, [pc, #92]	@ (800a564 <CurrentSensorCallback+0x19c>)
 800a508:	2201      	movs	r2, #1
 800a50a:	2100      	movs	r1, #0
 800a50c:	2002      	movs	r0, #2
 800a50e:	f011 f915 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800a512:	e005      	b.n	800a520 <CurrentSensorCallback+0x158>
            }
            else
            {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a514:	2201      	movs	r2, #1
 800a516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a51a:	4807      	ldr	r0, [pc, #28]	@ (800a538 <CurrentSensorCallback+0x170>)
 800a51c:	f7fb f847 	bl	80055ae <HAL_GPIO_WritePin>
            }
        }

        lastCurrentState = currentState;
 800a520:	4a07      	ldr	r2, [pc, #28]	@ (800a540 <CurrentSensorCallback+0x178>)
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	7013      	strb	r3, [r2, #0]
        SendTxData();
 800a526:	f000 f89f 	bl	800a668 <SendTxData>
    }

    UTIL_TIMER_Start(&CurrentSensorTimer);
 800a52a:	480f      	ldr	r0, [pc, #60]	@ (800a568 <CurrentSensorCallback+0x1a0>)
 800a52c:	f010 fe8e 	bl	801b24c <UTIL_TIMER_Start>
}
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	48000400 	.word	0x48000400
 800a53c:	2000070d 	.word	0x2000070d
 800a540:	2000070e 	.word	0x2000070e
 800a544:	2000070c 	.word	0x2000070c
 800a548:	0801e7a8 	.word	0x0801e7a8
 800a54c:	20000070 	.word	0x20000070
 800a550:	200005b8 	.word	0x200005b8
 800a554:	0801e7e4 	.word	0x0801e7e4
 800a558:	0801e81c 	.word	0x0801e81c
 800a55c:	0801e84c 	.word	0x0801e84c
 800a560:	20000388 	.word	0x20000388
 800a564:	0801e878 	.word	0x0801e878
 800a568:	200006f4 	.word	0x200006f4

0800a56c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af02      	add	r7, sp, #8
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if (params != NULL && appData != NULL && appData->Buffer != NULL && appData->BufferSize > 0)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d063      	beq.n	800a644 <OnRxData+0xd8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d060      	beq.n	800a644 <OnRxData+0xd8>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d05c      	beq.n	800a644 <OnRxData+0xd8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d058      	beq.n	800a644 <OnRxData+0xd8>
  {
    uint8_t command = appData->Buffer[0];
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	73fb      	strb	r3, [r7, #15]
    uint8_t duration = appData->Buffer[1];
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	73bb      	strb	r3, [r7, #14]


    switch (command)
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d034      	beq.n	800a612 <OnRxData+0xa6>
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	dc42      	bgt.n	800a632 <OnRxData+0xc6>
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d002      	beq.n	800a5b6 <OnRxData+0x4a>
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d010      	beq.n	800a5d6 <OnRxData+0x6a>
 800a5b4:	e03d      	b.n	800a632 <OnRxData+0xc6>
    {
      case 0x01:  // Pump ON
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x01: Pump ON\r\n");
 800a5b6:	4b25      	ldr	r3, [pc, #148]	@ (800a64c <OnRxData+0xe0>)
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	2002      	movs	r0, #2
 800a5be:	f011 f8bd 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_ON;
 800a5c2:	4b23      	ldr	r3, [pc, #140]	@ (800a650 <OnRxData+0xe4>)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a5c8:	4b21      	ldr	r3, [pc, #132]	@ (800a650 <OnRxData+0xe4>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f7 f9c6 	bl	8001960 <PumpStateMachine>
        break;
 800a5d4:	e036      	b.n	800a644 <OnRxData+0xd8>

      case 0x02:  // Pump AUTO
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x02: Pump AUTO\r\n");
 800a5d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a654 <OnRxData+0xe8>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2002      	movs	r0, #2
 800a5de:	f011 f8ad 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        durationMinutes = duration;
 800a5e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a658 <OnRxData+0xec>)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	7013      	strb	r3, [r2, #0]
        APP_LOG(TS_ON, VLEVEL_M, "Duration: %d minute(s)\r\n", durationMinutes);
 800a5e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a658 <OnRxData+0xec>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a65c <OnRxData+0xf0>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	2002      	movs	r0, #2
 800a5f6:	f011 f8a1 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_AUTO;
 800a5fa:	4b15      	ldr	r3, [pc, #84]	@ (800a650 <OnRxData+0xe4>)
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState,durationMinutes);
 800a600:	4b13      	ldr	r3, [pc, #76]	@ (800a650 <OnRxData+0xe4>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	4a14      	ldr	r2, [pc, #80]	@ (800a658 <OnRxData+0xec>)
 800a606:	7812      	ldrb	r2, [r2, #0]
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f7 f9a8 	bl	8001960 <PumpStateMachine>
        break;
 800a610:	e018      	b.n	800a644 <OnRxData+0xd8>

      case 0x03:  // Pump OFF
        APP_LOG(TS_ON, VLEVEL_M, "Command 0x03: Pump OFF\r\n");
 800a612:	4b13      	ldr	r3, [pc, #76]	@ (800a660 <OnRxData+0xf4>)
 800a614:	2201      	movs	r2, #1
 800a616:	2100      	movs	r1, #0
 800a618:	2002      	movs	r0, #2
 800a61a:	f011 f88f 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        pumpState = STATE_PUMP_OFF;
 800a61e:	4b0c      	ldr	r3, [pc, #48]	@ (800a650 <OnRxData+0xe4>)
 800a620:	2203      	movs	r2, #3
 800a622:	701a      	strb	r2, [r3, #0]
        PumpStateMachine(pumpState, 0);
 800a624:	4b0a      	ldr	r3, [pc, #40]	@ (800a650 <OnRxData+0xe4>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f7 f998 	bl	8001960 <PumpStateMachine>
        break;
 800a630:	e008      	b.n	800a644 <OnRxData+0xd8>

      default:
        APP_LOG(TS_ON, VLEVEL_M, "Unknown command: 0x%02X\r\n", command);
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	4b0b      	ldr	r3, [pc, #44]	@ (800a664 <OnRxData+0xf8>)
 800a638:	2201      	movs	r2, #1
 800a63a:	2100      	movs	r1, #0
 800a63c:	2002      	movs	r0, #2
 800a63e:	f011 f87d 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a642:	bf00      	nop
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	0801e8ac 	.word	0x0801e8ac
 800a650:	20000388 	.word	0x20000388
 800a654:	0801e8c4 	.word	0x0801e8c4
 800a658:	20000389 	.word	0x20000389
 800a65c:	0801e8e0 	.word	0x0801e8e0
 800a660:	0801e8fc 	.word	0x0801e8fc
 800a664:	0801e918 	.word	0x0801e918

0800a668 <SendTxData>:

static void SendTxData(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
	 LmHandlerErrorStatus_t status;

	  if (AppData.BufferSize == 0 || AppData.Buffer == NULL)
 800a66e:	4b16      	ldr	r3, [pc, #88]	@ (800a6c8 <SendTxData+0x60>)
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <SendTxData+0x16>
 800a676:	4b14      	ldr	r3, [pc, #80]	@ (800a6c8 <SendTxData+0x60>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <SendTxData+0x24>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "No data to send!\r\n");
 800a67e:	4b13      	ldr	r3, [pc, #76]	@ (800a6cc <SendTxData+0x64>)
 800a680:	2201      	movs	r2, #1
 800a682:	2100      	movs	r1, #0
 800a684:	2001      	movs	r0, #1
 800a686:	f011 f859 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
	    return;
 800a68a:	e019      	b.n	800a6c0 <SendTxData+0x58>
	  }

	  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a68c:	4b10      	ldr	r3, [pc, #64]	@ (800a6d0 <SendTxData+0x68>)
 800a68e:	78db      	ldrb	r3, [r3, #3]
 800a690:	2200      	movs	r2, #0
 800a692:	4619      	mov	r1, r3
 800a694:	480c      	ldr	r0, [pc, #48]	@ (800a6c8 <SendTxData+0x60>)
 800a696:	f002 f9b1 	bl	800c9fc <LmHandlerSend>
 800a69a:	4603      	mov	r3, r0
 800a69c:	71fb      	strb	r3, [r7, #7]

	  if (status == LORAMAC_HANDLER_SUCCESS)
 800a69e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <SendTxData+0x4c>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST SUCCESS\r\n");
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <SendTxData+0x6c>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	f011 f845 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800a6b2:	e005      	b.n	800a6c0 <SendTxData+0x58>
	  }
	  else
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST FAILED\r\n");
 800a6b4:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <SendTxData+0x70>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	2001      	movs	r0, #1
 800a6bc:	f011 f83e 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
	  }
  /* USER CODE END SendTxData_1 */
}
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000070 	.word	0x20000070
 800a6cc:	0801e934 	.word	0x0801e934
 800a6d0:	20000058 	.word	0x20000058
 800a6d4:	0801e948 	.word	0x0801e948
 800a6d8:	0801e960 	.word	0x0801e960

0800a6dc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2002      	movs	r0, #2
 800a6e8:	f010 fcfa 	bl	801b0e0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a6ec:	4803      	ldr	r0, [pc, #12]	@ (800a6fc <OnTxTimerEvent+0x20>)
 800a6ee:	f010 fdad 	bl	801b24c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000588 	.word	0x20000588

0800a700 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bc80      	pop	{r7}
 800a710:	4770      	bx	lr

0800a712 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	bc80      	pop	{r7}
 800a722:	4770      	bx	lr

0800a724 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	bc80      	pop	{r7}
 800a734:	4770      	bx	lr
	...

0800a738 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af04      	add	r7, sp, #16
 800a73e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d041      	beq.n	800a7ca <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d03d      	beq.n	800a7ca <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a74e:	4821      	ldr	r0, [pc, #132]	@ (800a7d4 <OnTxData+0x9c>)
 800a750:	f010 fd7c 	bl	801b24c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a754:	4b20      	ldr	r3, [pc, #128]	@ (800a7d8 <OnTxData+0xa0>)
 800a756:	2200      	movs	r2, #0
 800a758:	2100      	movs	r1, #0
 800a75a:	2002      	movs	r0, #2
 800a75c:	f010 ffee 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	7c12      	ldrb	r2, [r2, #16]
 800a768:	4611      	mov	r1, r2
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a770:	4610      	mov	r0, r2
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a778:	9203      	str	r2, [sp, #12]
 800a77a:	9002      	str	r0, [sp, #8]
 800a77c:	9101      	str	r1, [sp, #4]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4b16      	ldr	r3, [pc, #88]	@ (800a7dc <OnTxData+0xa4>)
 800a782:	2200      	movs	r2, #0
 800a784:	2100      	movs	r1, #0
 800a786:	2003      	movs	r0, #3
 800a788:	f010 ffd8 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a78c:	4b14      	ldr	r3, [pc, #80]	@ (800a7e0 <OnTxData+0xa8>)
 800a78e:	2200      	movs	r2, #0
 800a790:	2100      	movs	r1, #0
 800a792:	2003      	movs	r0, #3
 800a794:	f010 ffd2 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7a1b      	ldrb	r3, [r3, #8]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d10e      	bne.n	800a7be <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7a5b      	ldrb	r3, [r3, #9]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <OnTxData+0x74>
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <OnTxData+0xac>)
 800a7aa:	e000      	b.n	800a7ae <OnTxData+0x76>
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <OnTxData+0xb0>)
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <OnTxData+0xb4>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2003      	movs	r0, #3
 800a7b8:	f010 ffc0 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a7bc:	e005      	b.n	800a7ca <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a7be:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f0 <OnTxData+0xb8>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	2003      	movs	r0, #3
 800a7c6:	f010 ffb9 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200006ac 	.word	0x200006ac
 800a7d8:	0801e978 	.word	0x0801e978
 800a7dc:	0801e9ac 	.word	0x0801e9ac
 800a7e0:	0801e9e0 	.word	0x0801e9e0
 800a7e4:	0801e9f0 	.word	0x0801e9f0
 800a7e8:	0801e9f4 	.word	0x0801e9f4
 800a7ec:	0801e9fc 	.word	0x0801e9fc
 800a7f0:	0801ea10 	.word	0x0801ea10

0800a7f4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d108      	bne.n	800a818 <OnJoinRequest+0x24>
	{
	    APP_LOG(TS_OFF, VLEVEL_M, "Join Success -> Switching to Class C and Halt\r\n");
 800a806:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <OnJoinRequest+0x2c>)
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	2002      	movs	r0, #2
 800a80e:	f010 ff95 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
	    LmHandlerRequestClass(CLASS_C);    // บังคับเปลี่ยนเป็น Class C
 800a812:	2002      	movs	r0, #2
 800a814:	f002 f9e0 	bl	800cbd8 <LmHandlerRequestClass>
	}

  /* USER CODE END OnJoinRequest_1 */
}
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	0801ea20 	.word	0x0801ea20

0800a824 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a826:	b093      	sub	sp, #76	@ 0x4c
 800a828:	af0c      	add	r7, sp, #48	@ 0x30
 800a82a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d056      	beq.n	800a8e0 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d008      	beq.n	800a84c <OnBeaconStatusChange+0x28>
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d049      	beq.n	800a8d2 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a83e:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e8 <OnBeaconStatusChange+0xc4>)
 800a840:	2200      	movs	r2, #0
 800a842:	2100      	movs	r1, #0
 800a844:	2002      	movs	r0, #2
 800a846:	f010 ff79 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a84a:	e049      	b.n	800a8e0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	7c1b      	ldrb	r3, [r3, #16]
 800a850:	4618      	mov	r0, r3
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a858:	461c      	mov	r4, r3
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a860:	461d      	mov	r5, r3
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	6852      	ldr	r2, [r2, #4]
 800a86a:	6979      	ldr	r1, [r7, #20]
 800a86c:	7d89      	ldrb	r1, [r1, #22]
 800a86e:	460e      	mov	r6, r1
 800a870:	6979      	ldr	r1, [r7, #20]
 800a872:	7dc9      	ldrb	r1, [r1, #23]
 800a874:	6139      	str	r1, [r7, #16]
 800a876:	6979      	ldr	r1, [r7, #20]
 800a878:	7e09      	ldrb	r1, [r1, #24]
 800a87a:	60f9      	str	r1, [r7, #12]
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	7e49      	ldrb	r1, [r1, #25]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	6979      	ldr	r1, [r7, #20]
 800a884:	7e89      	ldrb	r1, [r1, #26]
 800a886:	6079      	str	r1, [r7, #4]
 800a888:	6979      	ldr	r1, [r7, #20]
 800a88a:	7ec9      	ldrb	r1, [r1, #27]
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	6979      	ldr	r1, [r7, #20]
 800a890:	7f09      	ldrb	r1, [r1, #28]
 800a892:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a894:	f8d7 c000 	ldr.w	ip, [r7]
 800a898:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a89c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a8a0:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a8a4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a8a8:	f8cd c020 	str.w	ip, [sp, #32]
 800a8ac:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a8b0:	f8cd c01c 	str.w	ip, [sp, #28]
 800a8b4:	6939      	ldr	r1, [r7, #16]
 800a8b6:	9106      	str	r1, [sp, #24]
 800a8b8:	9605      	str	r6, [sp, #20]
 800a8ba:	9204      	str	r2, [sp, #16]
 800a8bc:	9303      	str	r3, [sp, #12]
 800a8be:	9502      	str	r5, [sp, #8]
 800a8c0:	9401      	str	r4, [sp, #4]
 800a8c2:	9000      	str	r0, [sp, #0]
 800a8c4:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <OnBeaconStatusChange+0xc8>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2002      	movs	r0, #2
 800a8cc:	f010 ff36 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a8d0:	e006      	b.n	800a8e0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a8d2:	4b07      	ldr	r3, [pc, #28]	@ (800a8f0 <OnBeaconStatusChange+0xcc>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	2002      	movs	r0, #2
 800a8da:	f010 ff2f 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a8de:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a8e0:	bf00      	nop
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e8:	0801ea50 	.word	0x0801ea50
 800a8ec:	0801ea68 	.word	0x0801ea68
 800a8f0:	0801eadc 	.word	0x0801eadc

0800a8f4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	4a06      	ldr	r2, [pc, #24]	@ (800a91c <OnClassChange+0x28>)
 800a902:	5cd3      	ldrb	r3, [r2, r3]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <OnClassChange+0x2c>)
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	2002      	movs	r0, #2
 800a90e:	f010 ff15 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	0801eb18 	.word	0x0801eb18
 800a920:	0801eafc 	.word	0x0801eafc

0800a924 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a928:	2100      	movs	r1, #0
 800a92a:	2001      	movs	r0, #1
 800a92c:	f010 fbd8 	bl	801b0e0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a930:	bf00      	nop
 800a932:	bd80      	pop	{r7, pc}

0800a934 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a93c:	4a0d      	ldr	r2, [pc, #52]	@ (800a974 <OnTxPeriodicityChanged+0x40>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a942:	4b0c      	ldr	r3, [pc, #48]	@ (800a974 <OnTxPeriodicityChanged+0x40>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a94a:	4b0a      	ldr	r3, [pc, #40]	@ (800a974 <OnTxPeriodicityChanged+0x40>)
 800a94c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a950:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a952:	4809      	ldr	r0, [pc, #36]	@ (800a978 <OnTxPeriodicityChanged+0x44>)
 800a954:	f010 fce8 	bl	801b328 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a958:	4b06      	ldr	r3, [pc, #24]	@ (800a974 <OnTxPeriodicityChanged+0x40>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4806      	ldr	r0, [pc, #24]	@ (800a978 <OnTxPeriodicityChanged+0x44>)
 800a960:	f010 fd52 	bl	801b408 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a964:	4804      	ldr	r0, [pc, #16]	@ (800a978 <OnTxPeriodicityChanged+0x44>)
 800a966:	f010 fc71 	bl	801b24c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	2000006c 	.word	0x2000006c
 800a978:	20000588 	.word	0x20000588

0800a97c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a986:	4a04      	ldr	r2, [pc, #16]	@ (800a998 <OnTxFrameCtrlChanged+0x1c>)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000058 	.word	0x20000058

0800a99c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a9a6:	4a04      	ldr	r2, [pc, #16]	@ (800a9b8 <OnPingSlotPeriodicityChanged+0x1c>)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bc80      	pop	{r7}
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	20000058 	.word	0x20000058

0800a9bc <OnSystemReset>:

static void OnSystemReset(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a9c0:	f002 fcef 	bl	800d3a2 <LmHandlerHalt>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <OnSystemReset+0x1c>
 800a9ca:	f001 fffb 	bl	800c9c4 <LmHandlerJoinStatus>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d101      	bne.n	800a9d8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a9d4:	f7ff fbcc 	bl	800a170 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a9d8:	bf00      	nop
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <StopJoin>:

static void StopJoin(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a9e0:	4817      	ldr	r0, [pc, #92]	@ (800aa40 <StopJoin+0x64>)
 800a9e2:	f010 fca1 	bl	801b328 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a9e6:	f002 fccf 	bl	800d388 <LmHandlerStop>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a9f0:	4b14      	ldr	r3, [pc, #80]	@ (800aa44 <StopJoin+0x68>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2002      	movs	r0, #2
 800a9f8:	f010 fea0 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800a9fc:	e01a      	b.n	800aa34 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a9fe:	4b12      	ldr	r3, [pc, #72]	@ (800aa48 <StopJoin+0x6c>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	2100      	movs	r1, #0
 800aa04:	2002      	movs	r0, #2
 800aa06:	f010 fe99 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800aa0a:	4b10      	ldr	r3, [pc, #64]	@ (800aa4c <StopJoin+0x70>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800aa10:	4b0f      	ldr	r3, [pc, #60]	@ (800aa50 <StopJoin+0x74>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	2100      	movs	r1, #0
 800aa16:	2002      	movs	r0, #2
 800aa18:	f010 fe90 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800aa1c:	480d      	ldr	r0, [pc, #52]	@ (800aa54 <StopJoin+0x78>)
 800aa1e:	f001 fdd3 	bl	800c5c8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800aa22:	4b0a      	ldr	r3, [pc, #40]	@ (800aa4c <StopJoin+0x70>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2101      	movs	r1, #1
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f001 ff49 	bl	800c8c0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800aa2e:	4804      	ldr	r0, [pc, #16]	@ (800aa40 <StopJoin+0x64>)
 800aa30:	f010 fc0c 	bl	801b24c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800aa34:	4808      	ldr	r0, [pc, #32]	@ (800aa58 <StopJoin+0x7c>)
 800aa36:	f010 fc09 	bl	801b24c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800aa3a:	bf00      	nop
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000588 	.word	0x20000588
 800aa44:	0801eb1c 	.word	0x0801eb1c
 800aa48:	0801eb3c 	.word	0x0801eb3c
 800aa4c:	20000008 	.word	0x20000008
 800aa50:	0801eb50 	.word	0x0801eb50
 800aa54:	20000058 	.word	0x20000058
 800aa58:	200005a0 	.word	0x200005a0

0800aa5c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <OnStopJoinTimerEvent+0x20>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d103      	bne.n	800aa74 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	2008      	movs	r0, #8
 800aa70:	f010 fb36 	bl	801b0e0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20000008 	.word	0x20000008

0800aa80 <StoreContext>:

static void StoreContext(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800aa86:	23ff      	movs	r3, #255	@ 0xff
 800aa88:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800aa8a:	f002 fc97 	bl	800d3bc <LmHandlerNvmDataStore>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800aa92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa96:	f113 0f08 	cmn.w	r3, #8
 800aa9a:	d106      	bne.n	800aaaa <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	@ (800aac8 <StoreContext+0x48>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	2002      	movs	r0, #2
 800aaa4:	f010 fe4a 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800aaa8:	e00a      	b.n	800aac0 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800aaaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d105      	bne.n	800aac0 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800aab4:	4b05      	ldr	r3, [pc, #20]	@ (800aacc <StoreContext+0x4c>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	2002      	movs	r0, #2
 800aabc:	f010 fe3e 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0801eb70 	.word	0x0801eb70
 800aacc:	0801eb88 	.word	0x0801eb88

0800aad0 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d106      	bne.n	800aaee <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800aae0:	4b08      	ldr	r3, [pc, #32]	@ (800ab04 <OnNvmDataChange+0x34>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	2002      	movs	r0, #2
 800aae8:	f010 fe28 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800aaec:	e005      	b.n	800aafa <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800aaee:	4b06      	ldr	r3, [pc, #24]	@ (800ab08 <OnNvmDataChange+0x38>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2002      	movs	r0, #2
 800aaf6:	f010 fe21 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	0801eba0 	.word	0x0801eba0
 800ab08:	0801ebb4 	.word	0x0801ebb4

0800ab0c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800ab16:	f7fa f8e7 	bl	8004ce8 <HAL_FLASH_Unlock>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d11c      	bne.n	800ab5a <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800ab20:	4b10      	ldr	r3, [pc, #64]	@ (800ab64 <OnStoreContextRequest+0x58>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	029a      	lsls	r2, r3, #10
 800ab26:	4b10      	ldr	r3, [pc, #64]	@ (800ab68 <OnStoreContextRequest+0x5c>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800ab2e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	0adb      	lsrs	r3, r3, #11
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f6 fd19 	bl	8001576 <FLASH_IF_EraseByPages>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4806      	ldr	r0, [pc, #24]	@ (800ab6c <OnStoreContextRequest+0x60>)
 800ab52:	f7f6 fc2f 	bl	80013b4 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800ab56:	f7fa f8e9 	bl	8004d2c <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	1fff75e0 	.word	0x1fff75e0
 800ab68:	03fffc00 	.word	0x03fffc00
 800ab6c:	0803f000 	.word	0x0803f000

0800ab70 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4903      	ldr	r1, [pc, #12]	@ (800ab90 <OnRestoreContextRequest+0x20>)
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f00f fd90 	bl	801a6a8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	0803f000 	.word	0x0803f000

0800ab94 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800ab98:	4b15      	ldr	r3, [pc, #84]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ab9e:	4b14      	ldr	r3, [pc, #80]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800aba4:	4b12      	ldr	r3, [pc, #72]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800abaa:	4b11      	ldr	r3, [pc, #68]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abac:	2200      	movs	r2, #0
 800abae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800abb0:	4b0f      	ldr	r3, [pc, #60]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	4a0d      	ldr	r2, [pc, #52]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abba:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800abbc:	4b0c      	ldr	r3, [pc, #48]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10d      	bne.n	800abe0 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800abc4:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <LoraInfo_Init+0x60>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	2000      	movs	r0, #0
 800abcc:	f010 fdb6 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800abd0:	bf00      	nop
 800abd2:	f010 fda1 	bl	801b718 <UTIL_ADV_TRACE_IsBufferEmpty>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d1fa      	bne.n	800abd2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800abe0:	4b03      	ldr	r3, [pc, #12]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800abe6:	4b02      	ldr	r3, [pc, #8]	@ (800abf0 <LoraInfo_Init+0x5c>)
 800abe8:	2203      	movs	r2, #3
 800abea:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800abec:	bf00      	nop
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20000710 	.word	0x20000710
 800abf4:	0801ebc8 	.word	0x0801ebc8

0800abf8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800abfc:	4b02      	ldr	r3, [pc, #8]	@ (800ac08 <LoraInfo_GetPtr+0x10>)
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bc80      	pop	{r7}
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000710 	.word	0x20000710

0800ac0c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ac10:	f7f8 f971 	bl	8002ef6 <BSP_RADIO_Init>
 800ac14:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	4603      	mov	r3, r0
 800ac22:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f8 f996 	bl	8002f58 <BSP_RADIO_ConfigRFSwitch>
 800ac2c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ac3a:	f7f8 f9db 	bl	8002ff4 <BSP_RADIO_GetTxConfig>
 800ac3e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ac48:	f7f8 f9db 	bl	8003002 <BSP_RADIO_IsTCXO>
 800ac4c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ac56:	f7f8 f9db 	bl	8003010 <BSP_RADIO_IsDCDC>
 800ac5a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f8 f9d6 	bl	800301e <BSP_RADIO_GetRFOMaxPowerConfig>
 800ac72:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	33f1      	adds	r3, #241	@ 0xf1
 800ac88:	2210      	movs	r2, #16
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f00c fa39 	bl	8017104 <memset1>
    ctx->M_n = 0;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	22f0      	movs	r2, #240	@ 0xf0
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00c fa2f 	bl	8017104 <memset1>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	461a      	mov	r2, r3
 800acbc:	2110      	movs	r1, #16
 800acbe:	6838      	ldr	r0, [r7, #0]
 800acc0:	f000 fe60 	bl	800b984 <lorawan_aes_set_key>
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08c      	sub	sp, #48	@ 0x30
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80a1 	beq.w	800ae26 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800acea:	f1c3 0310 	rsb	r3, r3, #16
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	bf28      	it	cs
 800acf4:	4613      	movcs	r3, r2
 800acf6:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad04:	4413      	add	r3, r2
 800ad06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad08:	b292      	uxth	r2, r2
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f00c f9be 	bl	801708e <memcpy1>
        ctx->M_n += mlen;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1a:	441a      	add	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad28:	2b0f      	cmp	r3, #15
 800ad2a:	f240 808d 	bls.w	800ae48 <AES_CMAC_Update+0x17c>
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	429a      	cmp	r2, r3
 800ad34:	f000 8088 	beq.w	800ae48 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad38:	2300      	movs	r3, #0
 800ad3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad3c:	e015      	b.n	800ad6a <AES_CMAC_Update+0x9e>
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad42:	4413      	add	r3, r2
 800ad44:	33f1      	adds	r3, #241	@ 0xf1
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	68f9      	ldr	r1, [r7, #12]
 800ad4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4053      	eors	r3, r2
 800ad56:	b2d9      	uxtb	r1, r3
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5c:	4413      	add	r3, r2
 800ad5e:	33f1      	adds	r3, #241	@ 0xf1
 800ad60:	460a      	mov	r2, r1
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad66:	3301      	adds	r3, #1
 800ad68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6c:	2b0f      	cmp	r3, #15
 800ad6e:	dde6      	ble.n	800ad3e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f00c f986 	bl	801708e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	f107 0114 	add.w	r1, r7, #20
 800ad88:	f107 0314 	add.w	r3, r7, #20
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fed7 	bl	800bb40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	33f1      	adds	r3, #241	@ 0xf1
 800ad96:	f107 0114 	add.w	r1, r7, #20
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f00c f976 	bl	801708e <memcpy1>

        data += mlen;
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	4413      	add	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800adb2:	e038      	b.n	800ae26 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800adb4:	2300      	movs	r3, #0
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adb8:	e013      	b.n	800ade2 <AES_CMAC_Update+0x116>
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbe:	4413      	add	r3, r2
 800adc0:	33f1      	adds	r3, #241	@ 0xf1
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	440b      	add	r3, r1
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	4053      	eors	r3, r2
 800adce:	b2d9      	uxtb	r1, r3
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	4413      	add	r3, r2
 800add6:	33f1      	adds	r3, #241	@ 0xf1
 800add8:	460a      	mov	r2, r1
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adde:	3301      	adds	r3, #1
 800ade0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	2b0f      	cmp	r3, #15
 800ade6:	dde8      	ble.n	800adba <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	2210      	movs	r2, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	f00c f94a 	bl	801708e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	f107 0114 	add.w	r1, r7, #20
 800ae00:	f107 0314 	add.w	r3, r7, #20
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fe9b 	bl	800bb40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	33f1      	adds	r3, #241	@ 0xf1
 800ae0e:	f107 0114 	add.w	r1, r7, #20
 800ae12:	2210      	movs	r2, #16
 800ae14:	4618      	mov	r0, r3
 800ae16:	f00c f93a 	bl	801708e <memcpy1>

        data += 16;
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	3310      	adds	r3, #16
 800ae1e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3b10      	subs	r3, #16
 800ae24:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b10      	cmp	r3, #16
 800ae2a:	d8c3      	bhi.n	800adb4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	b292      	uxth	r2, r2
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f00c f928 	bl	801708e <memcpy1>
    ctx->M_n = len;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ae46:	e000      	b.n	800ae4a <AES_CMAC_Update+0x17e>
            return;
 800ae48:	bf00      	nop
}
 800ae4a:	3730      	adds	r7, #48	@ 0x30
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b092      	sub	sp, #72	@ 0x48
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae5a:	f107 031c 	add.w	r3, r7, #28
 800ae5e:	2210      	movs	r2, #16
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f00c f94e 	bl	8017104 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	f107 011c 	add.w	r1, r7, #28
 800ae6e:	f107 031c 	add.w	r3, r7, #28
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fe64 	bl	800bb40 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ae78:	7f3b      	ldrb	r3, [r7, #28]
 800ae7a:	b25b      	sxtb	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	da31      	bge.n	800aee4 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ae80:	2300      	movs	r3, #0
 800ae82:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae84:	e01c      	b.n	800aec0 <AES_CMAC_Final+0x70>
 800ae86:	f107 021c 	add.w	r2, r7, #28
 800ae8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae8c:	4413      	add	r3, r2
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	b25b      	sxtb	r3, r3
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	b25a      	sxtb	r2, r3
 800ae96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae98:	3301      	adds	r3, #1
 800ae9a:	3348      	adds	r3, #72	@ 0x48
 800ae9c:	443b      	add	r3, r7
 800ae9e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aea2:	09db      	lsrs	r3, r3, #7
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	b25b      	sxtb	r3, r3
 800aeac:	b2d9      	uxtb	r1, r3
 800aeae:	f107 021c 	add.w	r2, r7, #28
 800aeb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb4:	4413      	add	r3, r2
 800aeb6:	460a      	mov	r2, r1
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebc:	3301      	adds	r3, #1
 800aebe:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec2:	2b0e      	cmp	r3, #14
 800aec4:	dddf      	ble.n	800ae86 <AES_CMAC_Final+0x36>
 800aec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800aed2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aed6:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800aeda:	43db      	mvns	r3, r3
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aee2:	e028      	b.n	800af36 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800aee4:	2300      	movs	r3, #0
 800aee6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aee8:	e01c      	b.n	800af24 <AES_CMAC_Final+0xd4>
 800aeea:	f107 021c 	add.w	r2, r7, #28
 800aeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef0:	4413      	add	r3, r2
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	b25a      	sxtb	r2, r3
 800aefa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aefc:	3301      	adds	r3, #1
 800aefe:	3348      	adds	r3, #72	@ 0x48
 800af00:	443b      	add	r3, r7
 800af02:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af06:	09db      	lsrs	r3, r3, #7
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	b25b      	sxtb	r3, r3
 800af0c:	4313      	orrs	r3, r2
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	b2d9      	uxtb	r1, r3
 800af12:	f107 021c 	add.w	r2, r7, #28
 800af16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af18:	4413      	add	r3, r2
 800af1a:	460a      	mov	r2, r1
 800af1c:	701a      	strb	r2, [r3, #0]
 800af1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af20:	3301      	adds	r3, #1
 800af22:	643b      	str	r3, [r7, #64]	@ 0x40
 800af24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af26:	2b0e      	cmp	r3, #14
 800af28:	dddf      	ble.n	800aeea <AES_CMAC_Final+0x9a>
 800af2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	b2db      	uxtb	r3, r3
 800af32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d11d      	bne.n	800af7c <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af40:	2300      	movs	r3, #0
 800af42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af44:	e016      	b.n	800af74 <AES_CMAC_Final+0x124>
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4a:	4413      	add	r3, r2
 800af4c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af50:	781a      	ldrb	r2, [r3, #0]
 800af52:	f107 011c 	add.w	r1, r7, #28
 800af56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af58:	440b      	add	r3, r1
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	4053      	eors	r3, r2
 800af5e:	b2d9      	uxtb	r1, r3
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af64:	4413      	add	r3, r2
 800af66:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af6a:	460a      	mov	r2, r1
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af70:	3301      	adds	r3, #1
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af76:	2b0f      	cmp	r3, #15
 800af78:	dde5      	ble.n	800af46 <AES_CMAC_Final+0xf6>
 800af7a:	e098      	b.n	800b0ae <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800af7c:	7f3b      	ldrb	r3, [r7, #28]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	da31      	bge.n	800afe8 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800af84:	2300      	movs	r3, #0
 800af86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af88:	e01c      	b.n	800afc4 <AES_CMAC_Final+0x174>
 800af8a:	f107 021c 	add.w	r2, r7, #28
 800af8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af90:	4413      	add	r3, r2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b25b      	sxtb	r3, r3
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	b25a      	sxtb	r2, r3
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	3301      	adds	r3, #1
 800af9e:	3348      	adds	r3, #72	@ 0x48
 800afa0:	443b      	add	r3, r7
 800afa2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afa6:	09db      	lsrs	r3, r3, #7
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	b25b      	sxtb	r3, r3
 800afac:	4313      	orrs	r3, r2
 800afae:	b25b      	sxtb	r3, r3
 800afb0:	b2d9      	uxtb	r1, r3
 800afb2:	f107 021c 	add.w	r2, r7, #28
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	4413      	add	r3, r2
 800afba:	460a      	mov	r2, r1
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	3301      	adds	r3, #1
 800afc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	2b0e      	cmp	r3, #14
 800afc8:	dddf      	ble.n	800af8a <AES_CMAC_Final+0x13a>
 800afca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800afd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afda:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800afde:	43db      	mvns	r3, r3
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe6:	e028      	b.n	800b03a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800afe8:	2300      	movs	r3, #0
 800afea:	637b      	str	r3, [r7, #52]	@ 0x34
 800afec:	e01c      	b.n	800b028 <AES_CMAC_Final+0x1d8>
 800afee:	f107 021c 	add.w	r2, r7, #28
 800aff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff4:	4413      	add	r3, r2
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b25b      	sxtb	r3, r3
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	b25a      	sxtb	r2, r3
 800affe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b000:	3301      	adds	r3, #1
 800b002:	3348      	adds	r3, #72	@ 0x48
 800b004:	443b      	add	r3, r7
 800b006:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b00a:	09db      	lsrs	r3, r3, #7
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	b25b      	sxtb	r3, r3
 800b010:	4313      	orrs	r3, r2
 800b012:	b25b      	sxtb	r3, r3
 800b014:	b2d9      	uxtb	r1, r3
 800b016:	f107 021c 	add.w	r2, r7, #28
 800b01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01c:	4413      	add	r3, r2
 800b01e:	460a      	mov	r2, r1
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b024:	3301      	adds	r3, #1
 800b026:	637b      	str	r3, [r7, #52]	@ 0x34
 800b028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02a:	2b0e      	cmp	r3, #14
 800b02c:	dddf      	ble.n	800afee <AES_CMAC_Final+0x19e>
 800b02e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	b2db      	uxtb	r3, r3
 800b036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	4413      	add	r3, r2
 800b044:	2280      	movs	r2, #128	@ 0x80
 800b046:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b04a:	e007      	b.n	800b05c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4413      	add	r3, r2
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b070:	2b0f      	cmp	r3, #15
 800b072:	d9eb      	bls.n	800b04c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b074:	2300      	movs	r3, #0
 800b076:	633b      	str	r3, [r7, #48]	@ 0x30
 800b078:	e016      	b.n	800b0a8 <AES_CMAC_Final+0x258>
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	4413      	add	r3, r2
 800b080:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b084:	781a      	ldrb	r2, [r3, #0]
 800b086:	f107 011c 	add.w	r1, r7, #28
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	440b      	add	r3, r1
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	4053      	eors	r3, r2
 800b092:	b2d9      	uxtb	r1, r3
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	4413      	add	r3, r2
 800b09a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b09e:	460a      	mov	r2, r1
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	dde5      	ble.n	800b07a <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0b2:	e015      	b.n	800b0e0 <AES_CMAC_Final+0x290>
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b8:	4413      	add	r3, r2
 800b0ba:	33f1      	adds	r3, #241	@ 0xf1
 800b0bc:	781a      	ldrb	r2, [r3, #0]
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c2:	440b      	add	r3, r1
 800b0c4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	4053      	eors	r3, r2
 800b0cc:	b2d9      	uxtb	r1, r3
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d2:	4413      	add	r3, r2
 800b0d4:	33f1      	adds	r3, #241	@ 0xf1
 800b0d6:	460a      	mov	r2, r1
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	3301      	adds	r3, #1
 800b0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e2:	2b0f      	cmp	r3, #15
 800b0e4:	dde6      	ble.n	800b0b4 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	2210      	movs	r2, #16
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f00b ffcb 	bl	801708e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	f107 030c 	add.w	r3, r7, #12
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fd1d 	bl	800bb40 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b106:	f107 031c 	add.w	r3, r7, #28
 800b10a:	2210      	movs	r2, #16
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f00b fff8 	bl	8017104 <memset1>
}
 800b114:	bf00      	nop
 800b116:	3748      	adds	r7, #72	@ 0x48
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	781a      	ldrb	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3301      	adds	r3, #1
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	7852      	ldrb	r2, [r2, #1]
 800b136:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3302      	adds	r3, #2
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	7892      	ldrb	r2, [r2, #2]
 800b140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3303      	adds	r3, #3
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	78d2      	ldrb	r2, [r2, #3]
 800b14a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3304      	adds	r3, #4
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	7912      	ldrb	r2, [r2, #4]
 800b154:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3305      	adds	r3, #5
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	7952      	ldrb	r2, [r2, #5]
 800b15e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3306      	adds	r3, #6
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	7992      	ldrb	r2, [r2, #6]
 800b168:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3307      	adds	r3, #7
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	79d2      	ldrb	r2, [r2, #7]
 800b172:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3308      	adds	r3, #8
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	7a12      	ldrb	r2, [r2, #8]
 800b17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3309      	adds	r3, #9
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	7a52      	ldrb	r2, [r2, #9]
 800b186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	330a      	adds	r3, #10
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	7a92      	ldrb	r2, [r2, #10]
 800b190:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	330b      	adds	r3, #11
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	7ad2      	ldrb	r2, [r2, #11]
 800b19a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	7b12      	ldrb	r2, [r2, #12]
 800b1a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	330d      	adds	r3, #13
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	7b52      	ldrb	r2, [r2, #13]
 800b1ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	330e      	adds	r3, #14
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	7b92      	ldrb	r2, [r2, #14]
 800b1b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	330f      	adds	r3, #15
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	7bd2      	ldrb	r2, [r2, #15]
 800b1c2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr

0800b1ce <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b1dc:	e007      	b.n	800b1ee <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	1c53      	adds	r3, r2, #1
 800b1e2:	60bb      	str	r3, [r7, #8]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	1c59      	adds	r1, r3, #1
 800b1e8:	60f9      	str	r1, [r7, #12]
 800b1ea:	7812      	ldrb	r2, [r2, #0]
 800b1ec:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	1e5a      	subs	r2, r3, #1
 800b1f2:	71fa      	strb	r2, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1f2      	bne.n	800b1de <copy_block_nn+0x10>
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc80      	pop	{r7}
 800b202:	4770      	bx	lr

0800b204 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	4053      	eors	r3, r2
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3301      	adds	r3, #1
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	3301      	adds	r3, #1
 800b228:	781a      	ldrb	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3301      	adds	r3, #1
 800b22e:	404a      	eors	r2, r1
 800b230:	b2d2      	uxtb	r2, r2
 800b232:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3302      	adds	r3, #2
 800b238:	7819      	ldrb	r1, [r3, #0]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	3302      	adds	r3, #2
 800b23e:	781a      	ldrb	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3302      	adds	r3, #2
 800b244:	404a      	eors	r2, r1
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3303      	adds	r3, #3
 800b24e:	7819      	ldrb	r1, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	3303      	adds	r3, #3
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3303      	adds	r3, #3
 800b25a:	404a      	eors	r2, r1
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3304      	adds	r3, #4
 800b264:	7819      	ldrb	r1, [r3, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	3304      	adds	r3, #4
 800b26a:	781a      	ldrb	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3304      	adds	r3, #4
 800b270:	404a      	eors	r2, r1
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3305      	adds	r3, #5
 800b27a:	7819      	ldrb	r1, [r3, #0]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	3305      	adds	r3, #5
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3305      	adds	r3, #5
 800b286:	404a      	eors	r2, r1
 800b288:	b2d2      	uxtb	r2, r2
 800b28a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3306      	adds	r3, #6
 800b290:	7819      	ldrb	r1, [r3, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	3306      	adds	r3, #6
 800b296:	781a      	ldrb	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3306      	adds	r3, #6
 800b29c:	404a      	eors	r2, r1
 800b29e:	b2d2      	uxtb	r2, r2
 800b2a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	7819      	ldrb	r1, [r3, #0]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	3307      	adds	r3, #7
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3307      	adds	r3, #7
 800b2b2:	404a      	eors	r2, r1
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	7819      	ldrb	r1, [r3, #0]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	781a      	ldrb	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	404a      	eors	r2, r1
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3309      	adds	r3, #9
 800b2d2:	7819      	ldrb	r1, [r3, #0]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	3309      	adds	r3, #9
 800b2d8:	781a      	ldrb	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3309      	adds	r3, #9
 800b2de:	404a      	eors	r2, r1
 800b2e0:	b2d2      	uxtb	r2, r2
 800b2e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	330a      	adds	r3, #10
 800b2e8:	7819      	ldrb	r1, [r3, #0]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	330a      	adds	r3, #10
 800b2ee:	781a      	ldrb	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	330a      	adds	r3, #10
 800b2f4:	404a      	eors	r2, r1
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	330b      	adds	r3, #11
 800b2fe:	7819      	ldrb	r1, [r3, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	330b      	adds	r3, #11
 800b304:	781a      	ldrb	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	330b      	adds	r3, #11
 800b30a:	404a      	eors	r2, r1
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	330c      	adds	r3, #12
 800b314:	7819      	ldrb	r1, [r3, #0]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	781a      	ldrb	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	330c      	adds	r3, #12
 800b320:	404a      	eors	r2, r1
 800b322:	b2d2      	uxtb	r2, r2
 800b324:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	330d      	adds	r3, #13
 800b32a:	7819      	ldrb	r1, [r3, #0]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	330d      	adds	r3, #13
 800b330:	781a      	ldrb	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	330d      	adds	r3, #13
 800b336:	404a      	eors	r2, r1
 800b338:	b2d2      	uxtb	r2, r2
 800b33a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	330e      	adds	r3, #14
 800b340:	7819      	ldrb	r1, [r3, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	330e      	adds	r3, #14
 800b346:	781a      	ldrb	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	330e      	adds	r3, #14
 800b34c:	404a      	eors	r2, r1
 800b34e:	b2d2      	uxtb	r2, r2
 800b350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	330f      	adds	r3, #15
 800b356:	7819      	ldrb	r1, [r3, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	330f      	adds	r3, #15
 800b35c:	781a      	ldrb	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	330f      	adds	r3, #15
 800b362:	404a      	eors	r2, r1
 800b364:	b2d2      	uxtb	r2, r2
 800b366:	701a      	strb	r2, [r3, #0]
#endif
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	4053      	eors	r3, r2
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	3301      	adds	r3, #1
 800b392:	7819      	ldrb	r1, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3301      	adds	r3, #1
 800b398:	781a      	ldrb	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	404a      	eors	r2, r1
 800b3a0:	b2d2      	uxtb	r2, r2
 800b3a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	7819      	ldrb	r1, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	781a      	ldrb	r2, [r3, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3302      	adds	r3, #2
 800b3b4:	404a      	eors	r2, r1
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3303      	adds	r3, #3
 800b3be:	7819      	ldrb	r1, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3303      	adds	r3, #3
 800b3ca:	404a      	eors	r2, r1
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	7819      	ldrb	r1, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	781a      	ldrb	r2, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	404a      	eors	r2, r1
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	3305      	adds	r3, #5
 800b3ea:	7819      	ldrb	r1, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3305      	adds	r3, #5
 800b3f0:	781a      	ldrb	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3305      	adds	r3, #5
 800b3f6:	404a      	eors	r2, r1
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	3306      	adds	r3, #6
 800b400:	7819      	ldrb	r1, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3306      	adds	r3, #6
 800b406:	781a      	ldrb	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3306      	adds	r3, #6
 800b40c:	404a      	eors	r2, r1
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3307      	adds	r3, #7
 800b416:	7819      	ldrb	r1, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3307      	adds	r3, #7
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3307      	adds	r3, #7
 800b422:	404a      	eors	r2, r1
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	3308      	adds	r3, #8
 800b42c:	7819      	ldrb	r1, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	3308      	adds	r3, #8
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3308      	adds	r3, #8
 800b438:	404a      	eors	r2, r1
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3309      	adds	r3, #9
 800b442:	7819      	ldrb	r1, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3309      	adds	r3, #9
 800b448:	781a      	ldrb	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3309      	adds	r3, #9
 800b44e:	404a      	eors	r2, r1
 800b450:	b2d2      	uxtb	r2, r2
 800b452:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	330a      	adds	r3, #10
 800b458:	7819      	ldrb	r1, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	330a      	adds	r3, #10
 800b45e:	781a      	ldrb	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	330a      	adds	r3, #10
 800b464:	404a      	eors	r2, r1
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	330b      	adds	r3, #11
 800b46e:	7819      	ldrb	r1, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	330b      	adds	r3, #11
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	330b      	adds	r3, #11
 800b47a:	404a      	eors	r2, r1
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	330c      	adds	r3, #12
 800b484:	7819      	ldrb	r1, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	330c      	adds	r3, #12
 800b48a:	781a      	ldrb	r2, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	330c      	adds	r3, #12
 800b490:	404a      	eors	r2, r1
 800b492:	b2d2      	uxtb	r2, r2
 800b494:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	330d      	adds	r3, #13
 800b49a:	7819      	ldrb	r1, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	330d      	adds	r3, #13
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	330d      	adds	r3, #13
 800b4a6:	404a      	eors	r2, r1
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	330e      	adds	r3, #14
 800b4b0:	7819      	ldrb	r1, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	330e      	adds	r3, #14
 800b4b6:	781a      	ldrb	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	330e      	adds	r3, #14
 800b4bc:	404a      	eors	r2, r1
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	330f      	adds	r3, #15
 800b4c6:	7819      	ldrb	r1, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	330f      	adds	r3, #15
 800b4cc:	781a      	ldrb	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	330f      	adds	r3, #15
 800b4d2:	404a      	eors	r2, r1
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr

0800b4e2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fe88 	bl	800b204 <xor_block>
}
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	4b48      	ldr	r3, [pc, #288]	@ (800b62c <shift_sub_rows+0x130>)
 800b50c:	5c9a      	ldrb	r2, [r3, r2]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3304      	adds	r3, #4
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	4619      	mov	r1, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3304      	adds	r3, #4
 800b51e:	4a43      	ldr	r2, [pc, #268]	@ (800b62c <shift_sub_rows+0x130>)
 800b520:	5c52      	ldrb	r2, [r2, r1]
 800b522:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3308      	adds	r3, #8
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	4619      	mov	r1, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3308      	adds	r3, #8
 800b530:	4a3e      	ldr	r2, [pc, #248]	@ (800b62c <shift_sub_rows+0x130>)
 800b532:	5c52      	ldrb	r2, [r2, r1]
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	330c      	adds	r3, #12
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	4619      	mov	r1, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	330c      	adds	r3, #12
 800b542:	4a3a      	ldr	r2, [pc, #232]	@ (800b62c <shift_sub_rows+0x130>)
 800b544:	5c52      	ldrb	r2, [r2, r1]
 800b546:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	73fb      	strb	r3, [r7, #15]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3305      	adds	r3, #5
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4619      	mov	r1, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3301      	adds	r3, #1
 800b55a:	4a34      	ldr	r2, [pc, #208]	@ (800b62c <shift_sub_rows+0x130>)
 800b55c:	5c52      	ldrb	r2, [r2, r1]
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3309      	adds	r3, #9
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3305      	adds	r3, #5
 800b56c:	4a2f      	ldr	r2, [pc, #188]	@ (800b62c <shift_sub_rows+0x130>)
 800b56e:	5c52      	ldrb	r2, [r2, r1]
 800b570:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	330d      	adds	r3, #13
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3309      	adds	r3, #9
 800b57e:	4a2b      	ldr	r2, [pc, #172]	@ (800b62c <shift_sub_rows+0x130>)
 800b580:	5c52      	ldrb	r2, [r2, r1]
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	7bfa      	ldrb	r2, [r7, #15]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	330d      	adds	r3, #13
 800b58a:	4928      	ldr	r1, [pc, #160]	@ (800b62c <shift_sub_rows+0x130>)
 800b58c:	5c8a      	ldrb	r2, [r1, r2]
 800b58e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	789b      	ldrb	r3, [r3, #2]
 800b594:	73fb      	strb	r3, [r7, #15]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	330a      	adds	r3, #10
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	4619      	mov	r1, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	4a22      	ldr	r2, [pc, #136]	@ (800b62c <shift_sub_rows+0x130>)
 800b5a4:	5c52      	ldrb	r2, [r2, r1]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	7bfa      	ldrb	r2, [r7, #15]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	330a      	adds	r3, #10
 800b5ae:	491f      	ldr	r1, [pc, #124]	@ (800b62c <shift_sub_rows+0x130>)
 800b5b0:	5c8a      	ldrb	r2, [r1, r2]
 800b5b2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	799b      	ldrb	r3, [r3, #6]
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	330e      	adds	r3, #14
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3306      	adds	r3, #6
 800b5c6:	4a19      	ldr	r2, [pc, #100]	@ (800b62c <shift_sub_rows+0x130>)
 800b5c8:	5c52      	ldrb	r2, [r2, r1]
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	330e      	adds	r3, #14
 800b5d2:	4916      	ldr	r1, [pc, #88]	@ (800b62c <shift_sub_rows+0x130>)
 800b5d4:	5c8a      	ldrb	r2, [r1, r2]
 800b5d6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7bdb      	ldrb	r3, [r3, #15]
 800b5dc:	73fb      	strb	r3, [r7, #15]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	330b      	adds	r3, #11
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	330f      	adds	r3, #15
 800b5ea:	4a10      	ldr	r2, [pc, #64]	@ (800b62c <shift_sub_rows+0x130>)
 800b5ec:	5c52      	ldrb	r2, [r2, r1]
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3307      	adds	r3, #7
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	330b      	adds	r3, #11
 800b5fc:	4a0b      	ldr	r2, [pc, #44]	@ (800b62c <shift_sub_rows+0x130>)
 800b5fe:	5c52      	ldrb	r2, [r2, r1]
 800b600:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3303      	adds	r3, #3
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	4619      	mov	r1, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3307      	adds	r3, #7
 800b60e:	4a07      	ldr	r2, [pc, #28]	@ (800b62c <shift_sub_rows+0x130>)
 800b610:	5c52      	ldrb	r2, [r2, r1]
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	7bfa      	ldrb	r2, [r7, #15]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3303      	adds	r3, #3
 800b61a:	4904      	ldr	r1, [pc, #16]	@ (800b62c <shift_sub_rows+0x130>)
 800b61c:	5c8a      	ldrb	r2, [r1, r2]
 800b61e:	701a      	strb	r2, [r3, #0]
}
 800b620:	bf00      	nop
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	bc80      	pop	{r7}
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	0801f1a4 	.word	0x0801f1a4

0800b630 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b638:	f107 0308 	add.w	r3, r7, #8
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fd6c 	bl	800b11c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b644:	7a3b      	ldrb	r3, [r7, #8]
 800b646:	461a      	mov	r2, r3
 800b648:	4b9a      	ldr	r3, [pc, #616]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	7b7b      	ldrb	r3, [r7, #13]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b99      	ldr	r3, [pc, #612]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b652:	5c5b      	ldrb	r3, [r3, r1]
 800b654:	4053      	eors	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	7cbb      	ldrb	r3, [r7, #18]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b97      	ldr	r3, [pc, #604]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b65e:	5c5b      	ldrb	r3, [r3, r1]
 800b660:	4053      	eors	r3, r2
 800b662:	b2da      	uxtb	r2, r3
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	4619      	mov	r1, r3
 800b668:	4b94      	ldr	r3, [pc, #592]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b66a:	5c5b      	ldrb	r3, [r3, r1]
 800b66c:	4053      	eors	r3, r2
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b674:	7a3b      	ldrb	r3, [r7, #8]
 800b676:	461a      	mov	r2, r3
 800b678:	4b90      	ldr	r3, [pc, #576]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b67a:	5c9a      	ldrb	r2, [r3, r2]
 800b67c:	7b7b      	ldrb	r3, [r7, #13]
 800b67e:	4619      	mov	r1, r3
 800b680:	4b8c      	ldr	r3, [pc, #560]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b682:	5c5b      	ldrb	r3, [r3, r1]
 800b684:	4053      	eors	r3, r2
 800b686:	b2da      	uxtb	r2, r3
 800b688:	7cbb      	ldrb	r3, [r7, #18]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4b8a      	ldr	r3, [pc, #552]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b68e:	5c5b      	ldrb	r3, [r3, r1]
 800b690:	4053      	eors	r3, r2
 800b692:	b2d9      	uxtb	r1, r3
 800b694:	7dfb      	ldrb	r3, [r7, #23]
 800b696:	461a      	mov	r2, r3
 800b698:	4b88      	ldr	r3, [pc, #544]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b69a:	5c9a      	ldrb	r2, [r3, r2]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	404a      	eors	r2, r1
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6a6:	7a3b      	ldrb	r3, [r7, #8]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b84      	ldr	r3, [pc, #528]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b6ac:	5c9a      	ldrb	r2, [r3, r2]
 800b6ae:	7b7b      	ldrb	r3, [r7, #13]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4b82      	ldr	r3, [pc, #520]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b6b4:	5c5b      	ldrb	r3, [r3, r1]
 800b6b6:	4053      	eors	r3, r2
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7cbb      	ldrb	r3, [r7, #18]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4b7d      	ldr	r3, [pc, #500]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b6c0:	5c5b      	ldrb	r3, [r3, r1]
 800b6c2:	4053      	eors	r3, r2
 800b6c4:	b2d9      	uxtb	r1, r3
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4b7b      	ldr	r3, [pc, #492]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b6cc:	5c9a      	ldrb	r2, [r3, r2]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	404a      	eors	r2, r1
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b6d8:	7a3b      	ldrb	r3, [r7, #8]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	4b76      	ldr	r3, [pc, #472]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b6de:	5c9a      	ldrb	r2, [r3, r2]
 800b6e0:	7b7b      	ldrb	r3, [r7, #13]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4b75      	ldr	r3, [pc, #468]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b6e6:	5c5b      	ldrb	r3, [r3, r1]
 800b6e8:	4053      	eors	r3, r2
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	7cbb      	ldrb	r3, [r7, #18]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4b72      	ldr	r3, [pc, #456]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b6f2:	5c5b      	ldrb	r3, [r3, r1]
 800b6f4:	4053      	eors	r3, r2
 800b6f6:	b2d9      	uxtb	r1, r3
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4b6d      	ldr	r3, [pc, #436]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b6fe:	5c9a      	ldrb	r2, [r3, r2]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3303      	adds	r3, #3
 800b704:	404a      	eors	r2, r1
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b70a:	7b3b      	ldrb	r3, [r7, #12]
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b69      	ldr	r3, [pc, #420]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b710:	5c9a      	ldrb	r2, [r3, r2]
 800b712:	7c7b      	ldrb	r3, [r7, #17]
 800b714:	4619      	mov	r1, r3
 800b716:	4b68      	ldr	r3, [pc, #416]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b718:	5c5b      	ldrb	r3, [r3, r1]
 800b71a:	4053      	eors	r3, r2
 800b71c:	b2da      	uxtb	r2, r3
 800b71e:	7dbb      	ldrb	r3, [r7, #22]
 800b720:	4619      	mov	r1, r3
 800b722:	4b66      	ldr	r3, [pc, #408]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b724:	5c5b      	ldrb	r3, [r3, r1]
 800b726:	4053      	eors	r3, r2
 800b728:	b2d9      	uxtb	r1, r3
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b63      	ldr	r3, [pc, #396]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b730:	5c9a      	ldrb	r2, [r3, r2]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3304      	adds	r3, #4
 800b736:	404a      	eors	r2, r1
 800b738:	b2d2      	uxtb	r2, r2
 800b73a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b73c:	7b3b      	ldrb	r3, [r7, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	4b5e      	ldr	r3, [pc, #376]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b742:	5c9a      	ldrb	r2, [r3, r2]
 800b744:	7c7b      	ldrb	r3, [r7, #17]
 800b746:	4619      	mov	r1, r3
 800b748:	4b5a      	ldr	r3, [pc, #360]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b74a:	5c5b      	ldrb	r3, [r3, r1]
 800b74c:	4053      	eors	r3, r2
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	7dbb      	ldrb	r3, [r7, #22]
 800b752:	4619      	mov	r1, r3
 800b754:	4b58      	ldr	r3, [pc, #352]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b756:	5c5b      	ldrb	r3, [r3, r1]
 800b758:	4053      	eors	r3, r2
 800b75a:	b2d9      	uxtb	r1, r3
 800b75c:	7afb      	ldrb	r3, [r7, #11]
 800b75e:	461a      	mov	r2, r3
 800b760:	4b56      	ldr	r3, [pc, #344]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b762:	5c9a      	ldrb	r2, [r3, r2]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3305      	adds	r3, #5
 800b768:	404a      	eors	r2, r1
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b76e:	7b3b      	ldrb	r3, [r7, #12]
 800b770:	461a      	mov	r2, r3
 800b772:	4b52      	ldr	r3, [pc, #328]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b774:	5c9a      	ldrb	r2, [r3, r2]
 800b776:	7c7b      	ldrb	r3, [r7, #17]
 800b778:	4619      	mov	r1, r3
 800b77a:	4b50      	ldr	r3, [pc, #320]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b77c:	5c5b      	ldrb	r3, [r3, r1]
 800b77e:	4053      	eors	r3, r2
 800b780:	b2da      	uxtb	r2, r3
 800b782:	7dbb      	ldrb	r3, [r7, #22]
 800b784:	4619      	mov	r1, r3
 800b786:	4b4b      	ldr	r3, [pc, #300]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b788:	5c5b      	ldrb	r3, [r3, r1]
 800b78a:	4053      	eors	r3, r2
 800b78c:	b2d9      	uxtb	r1, r3
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	461a      	mov	r2, r3
 800b792:	4b49      	ldr	r3, [pc, #292]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b794:	5c9a      	ldrb	r2, [r3, r2]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3306      	adds	r3, #6
 800b79a:	404a      	eors	r2, r1
 800b79c:	b2d2      	uxtb	r2, r2
 800b79e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7a0:	7b3b      	ldrb	r3, [r7, #12]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b44      	ldr	r3, [pc, #272]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b7a6:	5c9a      	ldrb	r2, [r3, r2]
 800b7a8:	7c7b      	ldrb	r3, [r7, #17]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4b43      	ldr	r3, [pc, #268]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b7ae:	5c5b      	ldrb	r3, [r3, r1]
 800b7b0:	4053      	eors	r3, r2
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	7dbb      	ldrb	r3, [r7, #22]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4b40      	ldr	r3, [pc, #256]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b7ba:	5c5b      	ldrb	r3, [r3, r1]
 800b7bc:	4053      	eors	r3, r2
 800b7be:	b2d9      	uxtb	r1, r3
 800b7c0:	7afb      	ldrb	r3, [r7, #11]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4b3b      	ldr	r3, [pc, #236]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b7c6:	5c9a      	ldrb	r2, [r3, r2]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3307      	adds	r3, #7
 800b7cc:	404a      	eors	r2, r1
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b7d2:	7c3b      	ldrb	r3, [r7, #16]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b37      	ldr	r3, [pc, #220]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b7d8:	5c9a      	ldrb	r2, [r3, r2]
 800b7da:	7d7b      	ldrb	r3, [r7, #21]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4b36      	ldr	r3, [pc, #216]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b7e0:	5c5b      	ldrb	r3, [r3, r1]
 800b7e2:	4053      	eors	r3, r2
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	7abb      	ldrb	r3, [r7, #10]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4b34      	ldr	r3, [pc, #208]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b7ec:	5c5b      	ldrb	r3, [r3, r1]
 800b7ee:	4053      	eors	r3, r2
 800b7f0:	b2d9      	uxtb	r1, r3
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4b31      	ldr	r3, [pc, #196]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b7f8:	5c9a      	ldrb	r2, [r3, r2]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	404a      	eors	r2, r1
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b804:	7c3b      	ldrb	r3, [r7, #16]
 800b806:	461a      	mov	r2, r3
 800b808:	4b2c      	ldr	r3, [pc, #176]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b80a:	5c9a      	ldrb	r2, [r3, r2]
 800b80c:	7d7b      	ldrb	r3, [r7, #21]
 800b80e:	4619      	mov	r1, r3
 800b810:	4b28      	ldr	r3, [pc, #160]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b812:	5c5b      	ldrb	r3, [r3, r1]
 800b814:	4053      	eors	r3, r2
 800b816:	b2da      	uxtb	r2, r3
 800b818:	7abb      	ldrb	r3, [r7, #10]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4b26      	ldr	r3, [pc, #152]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b81e:	5c5b      	ldrb	r3, [r3, r1]
 800b820:	4053      	eors	r3, r2
 800b822:	b2d9      	uxtb	r1, r3
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	461a      	mov	r2, r3
 800b828:	4b24      	ldr	r3, [pc, #144]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b82a:	5c9a      	ldrb	r2, [r3, r2]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3309      	adds	r3, #9
 800b830:	404a      	eors	r2, r1
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b836:	7c3b      	ldrb	r3, [r7, #16]
 800b838:	461a      	mov	r2, r3
 800b83a:	4b20      	ldr	r3, [pc, #128]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b83c:	5c9a      	ldrb	r2, [r3, r2]
 800b83e:	7d7b      	ldrb	r3, [r7, #21]
 800b840:	4619      	mov	r1, r3
 800b842:	4b1e      	ldr	r3, [pc, #120]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b844:	5c5b      	ldrb	r3, [r3, r1]
 800b846:	4053      	eors	r3, r2
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	7abb      	ldrb	r3, [r7, #10]
 800b84c:	4619      	mov	r1, r3
 800b84e:	4b19      	ldr	r3, [pc, #100]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b850:	5c5b      	ldrb	r3, [r3, r1]
 800b852:	4053      	eors	r3, r2
 800b854:	b2d9      	uxtb	r1, r3
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	461a      	mov	r2, r3
 800b85a:	4b17      	ldr	r3, [pc, #92]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b85c:	5c9a      	ldrb	r2, [r3, r2]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	330a      	adds	r3, #10
 800b862:	404a      	eors	r2, r1
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b868:	7c3b      	ldrb	r3, [r7, #16]
 800b86a:	461a      	mov	r2, r3
 800b86c:	4b12      	ldr	r3, [pc, #72]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b86e:	5c9a      	ldrb	r2, [r3, r2]
 800b870:	7d7b      	ldrb	r3, [r7, #21]
 800b872:	4619      	mov	r1, r3
 800b874:	4b11      	ldr	r3, [pc, #68]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b876:	5c5b      	ldrb	r3, [r3, r1]
 800b878:	4053      	eors	r3, r2
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	7abb      	ldrb	r3, [r7, #10]
 800b87e:	4619      	mov	r1, r3
 800b880:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <mix_sub_columns+0x28c>)
 800b882:	5c5b      	ldrb	r3, [r3, r1]
 800b884:	4053      	eors	r3, r2
 800b886:	b2d9      	uxtb	r1, r3
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	461a      	mov	r2, r3
 800b88c:	4b09      	ldr	r3, [pc, #36]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b88e:	5c9a      	ldrb	r2, [r3, r2]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	330b      	adds	r3, #11
 800b894:	404a      	eors	r2, r1
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b89a:	7d3b      	ldrb	r3, [r7, #20]
 800b89c:	461a      	mov	r2, r3
 800b89e:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <mix_sub_columns+0x284>)
 800b8a0:	5c9a      	ldrb	r2, [r3, r2]
 800b8a2:	7a7b      	ldrb	r3, [r7, #9]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4b04      	ldr	r3, [pc, #16]	@ (800b8b8 <mix_sub_columns+0x288>)
 800b8a8:	5c5b      	ldrb	r3, [r3, r1]
 800b8aa:	4053      	eors	r3, r2
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	e005      	b.n	800b8c0 <mix_sub_columns+0x290>
 800b8b4:	0801f2a4 	.word	0x0801f2a4
 800b8b8:	0801f3a4 	.word	0x0801f3a4
 800b8bc:	0801f1a4 	.word	0x0801f1a4
 800b8c0:	4b2d      	ldr	r3, [pc, #180]	@ (800b978 <mix_sub_columns+0x348>)
 800b8c2:	5c5b      	ldrb	r3, [r3, r1]
 800b8c4:	4053      	eors	r3, r2
 800b8c6:	b2d9      	uxtb	r1, r3
 800b8c8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b978 <mix_sub_columns+0x348>)
 800b8ce:	5c9a      	ldrb	r2, [r3, r2]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	404a      	eors	r2, r1
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b8da:	7d3b      	ldrb	r3, [r7, #20]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4b26      	ldr	r3, [pc, #152]	@ (800b978 <mix_sub_columns+0x348>)
 800b8e0:	5c9a      	ldrb	r2, [r3, r2]
 800b8e2:	7a7b      	ldrb	r3, [r7, #9]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4b25      	ldr	r3, [pc, #148]	@ (800b97c <mix_sub_columns+0x34c>)
 800b8e8:	5c5b      	ldrb	r3, [r3, r1]
 800b8ea:	4053      	eors	r3, r2
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4b23      	ldr	r3, [pc, #140]	@ (800b980 <mix_sub_columns+0x350>)
 800b8f4:	5c5b      	ldrb	r3, [r3, r1]
 800b8f6:	4053      	eors	r3, r2
 800b8f8:	b2d9      	uxtb	r1, r3
 800b8fa:	7cfb      	ldrb	r3, [r7, #19]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b978 <mix_sub_columns+0x348>)
 800b900:	5c9a      	ldrb	r2, [r3, r2]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	330d      	adds	r3, #13
 800b906:	404a      	eors	r2, r1
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b90c:	7d3b      	ldrb	r3, [r7, #20]
 800b90e:	461a      	mov	r2, r3
 800b910:	4b19      	ldr	r3, [pc, #100]	@ (800b978 <mix_sub_columns+0x348>)
 800b912:	5c9a      	ldrb	r2, [r3, r2]
 800b914:	7a7b      	ldrb	r3, [r7, #9]
 800b916:	4619      	mov	r1, r3
 800b918:	4b17      	ldr	r3, [pc, #92]	@ (800b978 <mix_sub_columns+0x348>)
 800b91a:	5c5b      	ldrb	r3, [r3, r1]
 800b91c:	4053      	eors	r3, r2
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	4619      	mov	r1, r3
 800b924:	4b15      	ldr	r3, [pc, #84]	@ (800b97c <mix_sub_columns+0x34c>)
 800b926:	5c5b      	ldrb	r3, [r3, r1]
 800b928:	4053      	eors	r3, r2
 800b92a:	b2d9      	uxtb	r1, r3
 800b92c:	7cfb      	ldrb	r3, [r7, #19]
 800b92e:	461a      	mov	r2, r3
 800b930:	4b13      	ldr	r3, [pc, #76]	@ (800b980 <mix_sub_columns+0x350>)
 800b932:	5c9a      	ldrb	r2, [r3, r2]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	330e      	adds	r3, #14
 800b938:	404a      	eors	r2, r1
 800b93a:	b2d2      	uxtb	r2, r2
 800b93c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b93e:	7d3b      	ldrb	r3, [r7, #20]
 800b940:	461a      	mov	r2, r3
 800b942:	4b0f      	ldr	r3, [pc, #60]	@ (800b980 <mix_sub_columns+0x350>)
 800b944:	5c9a      	ldrb	r2, [r3, r2]
 800b946:	7a7b      	ldrb	r3, [r7, #9]
 800b948:	4619      	mov	r1, r3
 800b94a:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <mix_sub_columns+0x348>)
 800b94c:	5c5b      	ldrb	r3, [r3, r1]
 800b94e:	4053      	eors	r3, r2
 800b950:	b2da      	uxtb	r2, r3
 800b952:	7bbb      	ldrb	r3, [r7, #14]
 800b954:	4619      	mov	r1, r3
 800b956:	4b08      	ldr	r3, [pc, #32]	@ (800b978 <mix_sub_columns+0x348>)
 800b958:	5c5b      	ldrb	r3, [r3, r1]
 800b95a:	4053      	eors	r3, r2
 800b95c:	b2d9      	uxtb	r1, r3
 800b95e:	7cfb      	ldrb	r3, [r7, #19]
 800b960:	461a      	mov	r2, r3
 800b962:	4b06      	ldr	r3, [pc, #24]	@ (800b97c <mix_sub_columns+0x34c>)
 800b964:	5c9a      	ldrb	r2, [r3, r2]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	330f      	adds	r3, #15
 800b96a:	404a      	eors	r2, r1
 800b96c:	b2d2      	uxtb	r2, r2
 800b96e:	701a      	strb	r2, [r3, #0]
  }
 800b970:	bf00      	nop
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	0801f1a4 	.word	0x0801f1a4
 800b97c:	0801f2a4 	.word	0x0801f2a4
 800b980:	0801f3a4 	.word	0x0801f3a4

0800b984 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	3b10      	subs	r3, #16
 800b996:	2b10      	cmp	r3, #16
 800b998:	bf8c      	ite	hi
 800b99a:	2201      	movhi	r2, #1
 800b99c:	2200      	movls	r2, #0
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d10b      	bne.n	800b9bc <lorawan_aes_set_key+0x38>
 800b9a4:	4a64      	ldr	r2, [pc, #400]	@ (800bb38 <lorawan_aes_set_key+0x1b4>)
 800b9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bf14      	ite	ne
 800b9b2:	2301      	movne	r3, #1
 800b9b4:	2300      	moveq	r3, #0
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d105      	bne.n	800b9c8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b9c4:	23ff      	movs	r3, #255	@ 0xff
 800b9c6:	e0b3      	b.n	800bb30 <lorawan_aes_set_key+0x1ac>
        break;
 800b9c8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7afa      	ldrb	r2, [r7, #11]
 800b9ce:	68f9      	ldr	r1, [r7, #12]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fbfc 	bl	800b1ce <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	331c      	adds	r3, #28
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b9e0:	7c7b      	ldrb	r3, [r7, #17]
 800b9e2:	091b      	lsrs	r3, r3, #4
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	75fb      	strb	r3, [r7, #23]
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75bb      	strb	r3, [r7, #22]
 800b9f8:	e094      	b.n	800bb24 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	3b04      	subs	r3, #4
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	5cd3      	ldrb	r3, [r2, r3]
 800ba02:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	3b03      	subs	r3, #3
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	5cd3      	ldrb	r3, [r2, r3]
 800ba0c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	3b02      	subs	r3, #2
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	5cd3      	ldrb	r3, [r2, r3]
 800ba16:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	5cd3      	ldrb	r3, [r2, r3]
 800ba20:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	7afa      	ldrb	r2, [r7, #11]
 800ba26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba2a:	fb01 f202 	mul.w	r2, r1, r2
 800ba2e:	1a9b      	subs	r3, r3, r2
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d128      	bne.n	800ba88 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800ba36:	7d7b      	ldrb	r3, [r7, #21]
 800ba38:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba3a:	7d3b      	ldrb	r3, [r7, #20]
 800ba3c:	4a3f      	ldr	r2, [pc, #252]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba3e:	5cd2      	ldrb	r2, [r2, r3]
 800ba40:	7dbb      	ldrb	r3, [r7, #22]
 800ba42:	4053      	eors	r3, r2
 800ba44:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba46:	7cfb      	ldrb	r3, [r7, #19]
 800ba48:	4a3c      	ldr	r2, [pc, #240]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba4a:	5cd3      	ldrb	r3, [r2, r3]
 800ba4c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba4e:	7cbb      	ldrb	r3, [r7, #18]
 800ba50:	4a3a      	ldr	r2, [pc, #232]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba52:	5cd3      	ldrb	r3, [r2, r3]
 800ba54:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba56:	7c3b      	ldrb	r3, [r7, #16]
 800ba58:	4a38      	ldr	r2, [pc, #224]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba5a:	5cd3      	ldrb	r3, [r2, r3]
 800ba5c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	b25a      	sxtb	r2, r3
 800ba66:	7dbb      	ldrb	r3, [r7, #22]
 800ba68:	09db      	lsrs	r3, r3, #7
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	0049      	lsls	r1, r1, #1
 800ba72:	440b      	add	r3, r1
 800ba74:	4619      	mov	r1, r3
 800ba76:	00c8      	lsls	r0, r1, #3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	440b      	add	r3, r1
 800ba7e:	b25b      	sxtb	r3, r3
 800ba80:	4053      	eors	r3, r2
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	75bb      	strb	r3, [r7, #22]
 800ba86:	e01c      	b.n	800bac2 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	2b18      	cmp	r3, #24
 800ba8c:	d919      	bls.n	800bac2 <lorawan_aes_set_key+0x13e>
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	7afa      	ldrb	r2, [r7, #11]
 800ba92:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba96:	fb01 f202 	mul.w	r2, r1, r2
 800ba9a:	1a9b      	subs	r3, r3, r2
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b10      	cmp	r3, #16
 800baa0:	d10f      	bne.n	800bac2 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800baa2:	7d7b      	ldrb	r3, [r7, #21]
 800baa4:	4a25      	ldr	r2, [pc, #148]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800baa6:	5cd3      	ldrb	r3, [r2, r3]
 800baa8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800baaa:	7d3b      	ldrb	r3, [r7, #20]
 800baac:	4a23      	ldr	r2, [pc, #140]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800baae:	5cd3      	ldrb	r3, [r2, r3]
 800bab0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bab2:	7cfb      	ldrb	r3, [r7, #19]
 800bab4:	4a21      	ldr	r2, [pc, #132]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800bab6:	5cd3      	ldrb	r3, [r2, r3]
 800bab8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800baba:	7cbb      	ldrb	r3, [r7, #18]
 800babc:	4a1f      	ldr	r2, [pc, #124]	@ (800bb3c <lorawan_aes_set_key+0x1b8>)
 800babe:	5cd3      	ldrb	r3, [r2, r3]
 800bac0:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bac2:	7dfa      	ldrb	r2, [r7, #23]
 800bac4:	7afb      	ldrb	r3, [r7, #11]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800baca:	7c3b      	ldrb	r3, [r7, #16]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	5cd1      	ldrb	r1, [r2, r3]
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	7d7a      	ldrb	r2, [r7, #21]
 800bad4:	404a      	eors	r2, r1
 800bad6:	b2d1      	uxtb	r1, r2
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800badc:	7c3b      	ldrb	r3, [r7, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	5cd1      	ldrb	r1, [r2, r3]
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	3301      	adds	r3, #1
 800bae8:	7d3a      	ldrb	r2, [r7, #20]
 800baea:	404a      	eors	r2, r1
 800baec:	b2d1      	uxtb	r1, r2
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800baf2:	7c3b      	ldrb	r3, [r7, #16]
 800baf4:	3302      	adds	r3, #2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	5cd1      	ldrb	r1, [r2, r3]
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	3302      	adds	r3, #2
 800bafe:	7cfa      	ldrb	r2, [r7, #19]
 800bb00:	404a      	eors	r2, r1
 800bb02:	b2d1      	uxtb	r1, r2
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb08:	7c3b      	ldrb	r3, [r7, #16]
 800bb0a:	3303      	adds	r3, #3
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	5cd1      	ldrb	r1, [r2, r3]
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	3303      	adds	r3, #3
 800bb14:	7cba      	ldrb	r2, [r7, #18]
 800bb16:	404a      	eors	r2, r1
 800bb18:	b2d1      	uxtb	r1, r2
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	3304      	adds	r3, #4
 800bb22:	75fb      	strb	r3, [r7, #23]
 800bb24:	7dfa      	ldrb	r2, [r7, #23]
 800bb26:	7c7b      	ldrb	r3, [r7, #17]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	f4ff af66 	bcc.w	800b9fa <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	00010101 	.word	0x00010101
 800bb3c:	0801f1a4 	.word	0x0801f1a4

0800bb40 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08a      	sub	sp, #40	@ 0x28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d038      	beq.n	800bbc8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	f107 0314 	add.w	r3, r7, #20
 800bb5c:	68f9      	ldr	r1, [r7, #12]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fc07 	bl	800b372 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb6a:	e014      	b.n	800bb96 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff fd5d 	bl	800b630 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bb7c:	0112      	lsls	r2, r2, #4
 800bb7e:	441a      	add	r2, r3
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fcab 	bl	800b4e2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb90:	3301      	adds	r3, #1
 800bb92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bb9c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3e3      	bcc.n	800bb6c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff fca7 	bl	800b4fc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bbb4:	0112      	lsls	r2, r2, #4
 800bbb6:	441a      	add	r2, r3
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	68b8      	ldr	r0, [r7, #8]
 800bbc0:	f7ff fbd7 	bl	800b372 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e000      	b.n	800bbca <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bbc8:	23ff      	movs	r3, #255	@ 0xff
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3728      	adds	r7, #40	@ 0x28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbd6:	b09d      	sub	sp, #116	@ 0x74
 800bbd8:	af10      	add	r7, sp, #64	@ 0x40
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bbe0:	2306      	movs	r3, #6
 800bbe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bbe6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 f9a7 	bl	800bf44 <SecureElementGetKeyByID>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bbfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 80b0 	bne.w	800bd66 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc0e:	4b58      	ldr	r3, [pc, #352]	@ (800bd70 <PrintKey+0x19c>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	2100      	movs	r1, #0
 800bc14:	2002      	movs	r0, #2
 800bc16:	f00f fd91 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc1a:	e056      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d106      	bne.n	800bc32 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc24:	4b53      	ldr	r3, [pc, #332]	@ (800bd74 <PrintKey+0x1a0>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2002      	movs	r0, #2
 800bc2c:	f00f fd86 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc30:	e04b      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d106      	bne.n	800bc48 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc3a:	4b4f      	ldr	r3, [pc, #316]	@ (800bd78 <PrintKey+0x1a4>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	2002      	movs	r0, #2
 800bc42:	f00f fd7b 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc46:	e040      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d106      	bne.n	800bc5e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc50:	4b4a      	ldr	r3, [pc, #296]	@ (800bd7c <PrintKey+0x1a8>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	2002      	movs	r0, #2
 800bc58:	f00f fd70 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc5c:	e035      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc62:	2b04      	cmp	r3, #4
 800bc64:	d106      	bne.n	800bc74 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bc66:	4b46      	ldr	r3, [pc, #280]	@ (800bd80 <PrintKey+0x1ac>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	2002      	movs	r0, #2
 800bc6e:	f00f fd65 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc72:	e02a      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc78:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc7a:	d106      	bne.n	800bc8a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bc7c:	4b41      	ldr	r3, [pc, #260]	@ (800bd84 <PrintKey+0x1b0>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	2002      	movs	r0, #2
 800bc84:	f00f fd5a 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc88:	e01f      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc8e:	2b80      	cmp	r3, #128	@ 0x80
 800bc90:	d106      	bne.n	800bca0 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bc92:	4b3d      	ldr	r3, [pc, #244]	@ (800bd88 <PrintKey+0x1b4>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	2002      	movs	r0, #2
 800bc9a:	f00f fd4f 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bc9e:	e014      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bca4:	2b81      	cmp	r3, #129	@ 0x81
 800bca6:	d106      	bne.n	800bcb6 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bca8:	4b38      	ldr	r3, [pc, #224]	@ (800bd8c <PrintKey+0x1b8>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2100      	movs	r1, #0
 800bcae:	2002      	movs	r0, #2
 800bcb0:	f00f fd44 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 800bcb4:	e009      	b.n	800bcca <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcba:	2b82      	cmp	r3, #130	@ 0x82
 800bcbc:	d105      	bne.n	800bcca <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bcbe:	4b34      	ldr	r3, [pc, #208]	@ (800bd90 <PrintKey+0x1bc>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	2002      	movs	r0, #2
 800bcc6:	f00f fd39 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd2:	789b      	ldrb	r3, [r3, #2]
 800bcd4:	461c      	mov	r4, r3
 800bcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd8:	78db      	ldrb	r3, [r3, #3]
 800bcda:	461d      	mov	r5, r3
 800bcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcde:	791b      	ldrb	r3, [r3, #4]
 800bce0:	461e      	mov	r6, r3
 800bce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce4:	795b      	ldrb	r3, [r3, #5]
 800bce6:	623b      	str	r3, [r7, #32]
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	799b      	ldrb	r3, [r3, #6]
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf0:	79db      	ldrb	r3, [r3, #7]
 800bcf2:	61bb      	str	r3, [r7, #24]
 800bcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf6:	7a1b      	ldrb	r3, [r3, #8]
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	7a5b      	ldrb	r3, [r3, #9]
 800bcfe:	613b      	str	r3, [r7, #16]
 800bd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd02:	7a9b      	ldrb	r3, [r3, #10]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd08:	7adb      	ldrb	r3, [r3, #11]
 800bd0a:	60bb      	str	r3, [r7, #8]
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	7b1b      	ldrb	r3, [r3, #12]
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd14:	7b5b      	ldrb	r3, [r3, #13]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1a:	7b9b      	ldrb	r3, [r3, #14]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	7bdb      	ldrb	r3, [r3, #15]
 800bd22:	461a      	mov	r2, r3
 800bd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd26:	7c1b      	ldrb	r3, [r3, #16]
 800bd28:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd2c:	910d      	str	r1, [sp, #52]	@ 0x34
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	9208      	str	r2, [sp, #32]
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	9207      	str	r2, [sp, #28]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	9206      	str	r2, [sp, #24]
 800bd4a:	69fa      	ldr	r2, [r7, #28]
 800bd4c:	9205      	str	r2, [sp, #20]
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	9603      	str	r6, [sp, #12]
 800bd54:	9502      	str	r5, [sp, #8]
 800bd56:	9401      	str	r4, [sp, #4]
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd94 <PrintKey+0x1c0>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2100      	movs	r1, #0
 800bd60:	2002      	movs	r0, #2
 800bd62:	f00f fceb 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bd66:	bf00      	nop
 800bd68:	3734      	adds	r7, #52	@ 0x34
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	0801ec18 	.word	0x0801ec18
 800bd74:	0801ec30 	.word	0x0801ec30
 800bd78:	0801ec48 	.word	0x0801ec48
 800bd7c:	0801ec60 	.word	0x0801ec60
 800bd80:	0801ec78 	.word	0x0801ec78
 800bd84:	0801ec90 	.word	0x0801ec90
 800bd88:	0801eca8 	.word	0x0801eca8
 800bd8c:	0801ecc0 	.word	0x0801ecc0
 800bd90:	0801ecd8 	.word	0x0801ecd8
 800bd94:	0801ecf0 	.word	0x0801ecf0

0800bd98 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	6039      	str	r1, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]
 800bda8:	e01a      	b.n	800bde0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdaa:	4b12      	ldr	r3, [pc, #72]	@ (800bdf4 <GetKeyByID+0x5c>)
 800bdac:	6819      	ldr	r1, [r3, #0]
 800bdae:	7bfa      	ldrb	r2, [r7, #15]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	4413      	add	r3, r2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3310      	adds	r3, #16
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	79fa      	ldrb	r2, [r7, #7]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d10b      	bne.n	800bdda <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bdc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf4 <GetKeyByID+0x5c>)
 800bdc4:	6819      	ldr	r1, [r3, #0]
 800bdc6:	7bfa      	ldrb	r2, [r7, #15]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	011b      	lsls	r3, r3, #4
 800bdcc:	4413      	add	r3, r2
 800bdce:	3310      	adds	r3, #16
 800bdd0:	18ca      	adds	r2, r1, r3
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e006      	b.n	800bde8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	3301      	adds	r3, #1
 800bdde:	73fb      	strb	r3, [r7, #15]
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b09      	cmp	r3, #9
 800bde4:	d9e1      	bls.n	800bdaa <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bde6:	2303      	movs	r3, #3
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20000720 	.word	0x20000720

0800bdf8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bdf8:	b590      	push	{r4, r7, lr}
 800bdfa:	b0d1      	sub	sp, #324	@ 0x144
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800be02:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800be06:	6020      	str	r0, [r4, #0]
 800be08:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800be0c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800be10:	6001      	str	r1, [r0, #0]
 800be12:	4619      	mov	r1, r3
 800be14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be18:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be22:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800be26:	460a      	mov	r2, r1
 800be28:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <ComputeCmac+0x48>
 800be38:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be40:	2302      	movs	r3, #2
 800be42:	e05c      	b.n	800befe <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe ff17 	bl	800ac7c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be4e:	f107 0210 	add.w	r2, r7, #16
 800be52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be56:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff ff9a 	bl	800bd98 <GetKeyByID>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be6a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d143      	bne.n	800befa <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	f107 0314 	add.w	r3, r7, #20
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f7fe ff12 	bl	800acae <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800be8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d009      	beq.n	800beac <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800be98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800be9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bea0:	f107 0014 	add.w	r0, r7, #20
 800bea4:	2210      	movs	r2, #16
 800bea6:	6819      	ldr	r1, [r3, #0]
 800bea8:	f7fe ff10 	bl	800accc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800beac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beb0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800beb4:	881a      	ldrh	r2, [r3, #0]
 800beb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800beba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bebe:	f107 0014 	add.w	r0, r7, #20
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	f7fe ff02 	bl	800accc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bec8:	f107 0214 	add.w	r2, r7, #20
 800becc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe ffbc 	bl	800ae50 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bed8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bedc:	061a      	lsls	r2, r3, #24
 800bede:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bee2:	041b      	lsls	r3, r3, #16
 800bee4:	431a      	orrs	r2, r3
 800bee6:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800beea:	021b      	lsls	r3, r3, #8
 800beec:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800beee:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bef2:	431a      	orrs	r2, r3
 800bef4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bef8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800befa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800befe:	4618      	mov	r0, r3
 800bf00:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd90      	pop	{r4, r7, pc}

0800bf08 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e00a      	b.n	800bf32 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bf1c:	4a07      	ldr	r2, [pc, #28]	@ (800bf3c <SecureElementInit+0x34>)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bf22:	4b06      	ldr	r3, [pc, #24]	@ (800bf3c <SecureElementInit+0x34>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	22c0      	movs	r2, #192	@ 0xc0
 800bf28:	4905      	ldr	r1, [pc, #20]	@ (800bf40 <SecureElementInit+0x38>)
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f00b f8af 	bl	801708e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000720 	.word	0x20000720
 800bf40:	0801fa34 	.word	0x0801fa34

0800bf44 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	6039      	str	r1, [r7, #0]
 800bf4e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
 800bf54:	e01a      	b.n	800bf8c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bf56:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <SecureElementGetKeyByID+0x5c>)
 800bf58:	6819      	ldr	r1, [r3, #0]
 800bf5a:	7bfa      	ldrb	r2, [r7, #15]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	4413      	add	r3, r2
 800bf62:	440b      	add	r3, r1
 800bf64:	3310      	adds	r3, #16
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	79fa      	ldrb	r2, [r7, #7]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d10b      	bne.n	800bf86 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa0 <SecureElementGetKeyByID+0x5c>)
 800bf70:	6819      	ldr	r1, [r3, #0]
 800bf72:	7bfa      	ldrb	r2, [r7, #15]
 800bf74:	4613      	mov	r3, r2
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	4413      	add	r3, r2
 800bf7a:	3310      	adds	r3, #16
 800bf7c:	18ca      	adds	r2, r1, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e006      	b.n	800bf94 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	2b09      	cmp	r3, #9
 800bf90:	d9e1      	bls.n	800bf56 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf92:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20000720 	.word	0x20000720

0800bfa4 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa6:	b08b      	sub	sp, #44	@ 0x2c
 800bfa8:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfaa:	4b3f      	ldr	r3, [pc, #252]	@ (800c0a8 <SecureElementPrintKeys+0x104>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	2002      	movs	r0, #2
 800bfb2:	f00f fbc3 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	f7ff fe0c 	bl	800bbd4 <PrintKey>
    PrintKey(NWK_KEY);
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	f7ff fe09 	bl	800bbd4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfc2:	4b3a      	ldr	r3, [pc, #232]	@ (800c0ac <SecureElementPrintKeys+0x108>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	2002      	movs	r0, #2
 800bfca:	f00f fbb7 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bfce:	2003      	movs	r0, #3
 800bfd0:	f7ff fe00 	bl	800bbd4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfd4:	2002      	movs	r0, #2
 800bfd6:	f7ff fdfd 	bl	800bbd4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800bfda:	4b35      	ldr	r3, [pc, #212]	@ (800c0b0 <SecureElementPrintKeys+0x10c>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2100      	movs	r1, #0
 800bfe0:	2002      	movs	r0, #2
 800bfe2:	f00f fbab 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bfe6:	4b33      	ldr	r3, [pc, #204]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	4b31      	ldr	r3, [pc, #196]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	785b      	ldrb	r3, [r3, #1]
 800bff4:	4619      	mov	r1, r3
 800bff6:	4b2f      	ldr	r3, [pc, #188]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	789b      	ldrb	r3, [r3, #2]
 800bffc:	4618      	mov	r0, r3
 800bffe:	4b2d      	ldr	r3, [pc, #180]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	78db      	ldrb	r3, [r3, #3]
 800c004:	461c      	mov	r4, r3
 800c006:	4b2b      	ldr	r3, [pc, #172]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	791b      	ldrb	r3, [r3, #4]
 800c00c:	461d      	mov	r5, r3
 800c00e:	4b29      	ldr	r3, [pc, #164]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	795b      	ldrb	r3, [r3, #5]
 800c014:	461e      	mov	r6, r3
 800c016:	4b27      	ldr	r3, [pc, #156]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	799b      	ldrb	r3, [r3, #6]
 800c01c:	607b      	str	r3, [r7, #4]
 800c01e:	4b25      	ldr	r3, [pc, #148]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	79db      	ldrb	r3, [r3, #7]
 800c024:	9307      	str	r3, [sp, #28]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	9306      	str	r3, [sp, #24]
 800c02a:	9605      	str	r6, [sp, #20]
 800c02c:	9504      	str	r5, [sp, #16]
 800c02e:	9403      	str	r4, [sp, #12]
 800c030:	9002      	str	r0, [sp, #8]
 800c032:	9101      	str	r1, [sp, #4]
 800c034:	9200      	str	r2, [sp, #0]
 800c036:	4b20      	ldr	r3, [pc, #128]	@ (800c0b8 <SecureElementPrintKeys+0x114>)
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	2002      	movs	r0, #2
 800c03e:	f00f fb7d 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c042:	4b1c      	ldr	r3, [pc, #112]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	7a1b      	ldrb	r3, [r3, #8]
 800c048:	461a      	mov	r2, r3
 800c04a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	7a5b      	ldrb	r3, [r3, #9]
 800c050:	4619      	mov	r1, r3
 800c052:	4b18      	ldr	r3, [pc, #96]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	7a9b      	ldrb	r3, [r3, #10]
 800c058:	4618      	mov	r0, r3
 800c05a:	4b16      	ldr	r3, [pc, #88]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	7adb      	ldrb	r3, [r3, #11]
 800c060:	461c      	mov	r4, r3
 800c062:	4b14      	ldr	r3, [pc, #80]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	7b1b      	ldrb	r3, [r3, #12]
 800c068:	461d      	mov	r5, r3
 800c06a:	4b12      	ldr	r3, [pc, #72]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	7b5b      	ldrb	r3, [r3, #13]
 800c070:	461e      	mov	r6, r3
 800c072:	4b10      	ldr	r3, [pc, #64]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	7b9b      	ldrb	r3, [r3, #14]
 800c078:	607b      	str	r3, [r7, #4]
 800c07a:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b4 <SecureElementPrintKeys+0x110>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	7bdb      	ldrb	r3, [r3, #15]
 800c080:	9307      	str	r3, [sp, #28]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	9306      	str	r3, [sp, #24]
 800c086:	9605      	str	r6, [sp, #20]
 800c088:	9504      	str	r5, [sp, #16]
 800c08a:	9403      	str	r4, [sp, #12]
 800c08c:	9002      	str	r0, [sp, #8]
 800c08e:	9101      	str	r1, [sp, #4]
 800c090:	9200      	str	r2, [sp, #0]
 800c092:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <SecureElementPrintKeys+0x118>)
 800c094:	2200      	movs	r2, #0
 800c096:	2100      	movs	r1, #0
 800c098:	2002      	movs	r0, #2
 800c09a:	f00f fb4f 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0a8:	0801ed44 	.word	0x0801ed44
 800c0ac:	0801ed5c 	.word	0x0801ed5c
 800c0b0:	0801ed74 	.word	0x0801ed74
 800c0b4:	20000720 	.word	0x20000720
 800c0b8:	0801ed8c 	.word	0x0801ed8c
 800c0bc:	0801edcc 	.word	0x0801edcc

0800c0c0 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c0c4:	2004      	movs	r0, #4
 800c0c6:	f7ff fd85 	bl	800bbd4 <PrintKey>
    PrintKey(MC_KE_KEY);
 800c0ca:	207f      	movs	r0, #127	@ 0x7f
 800c0cc:	f7ff fd82 	bl	800bbd4 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c0d0:	2002      	movs	r0, #2
 800c0d2:	f7ff fd7f 	bl	800bbd4 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c0d6:	2003      	movs	r0, #3
 800c0d8:	f7ff fd7c 	bl	800bbd4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e04b      	b.n	800c192 <SecureElementSetKey+0xae>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	77fb      	strb	r3, [r7, #31]
 800c0fe:	e044      	b.n	800c18a <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c100:	4b26      	ldr	r3, [pc, #152]	@ (800c19c <SecureElementSetKey+0xb8>)
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	7ffa      	ldrb	r2, [r7, #31]
 800c106:	4613      	mov	r3, r2
 800c108:	011b      	lsls	r3, r3, #4
 800c10a:	4413      	add	r3, r2
 800c10c:	440b      	add	r3, r1
 800c10e:	3310      	adds	r3, #16
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	79fa      	ldrb	r2, [r7, #7]
 800c114:	429a      	cmp	r2, r3
 800c116:	d135      	bne.n	800c184 <SecureElementSetKey+0xa0>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	2b80      	cmp	r3, #128	@ 0x80
 800c11c:	d122      	bne.n	800c164 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c11e:	2306      	movs	r3, #6
 800c120:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	605a      	str	r2, [r3, #4]
 800c12c:	609a      	str	r2, [r3, #8]
 800c12e:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c130:	f107 030c 	add.w	r3, r7, #12
 800c134:	227f      	movs	r2, #127	@ 0x7f
 800c136:	2110      	movs	r1, #16
 800c138:	6838      	ldr	r0, [r7, #0]
 800c13a:	f000 f87e 	bl	800c23a <SecureElementAesEncrypt>
 800c13e:	4603      	mov	r3, r0
 800c140:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c142:	4b16      	ldr	r3, [pc, #88]	@ (800c19c <SecureElementSetKey+0xb8>)
 800c144:	6819      	ldr	r1, [r3, #0]
 800c146:	7ffa      	ldrb	r2, [r7, #31]
 800c148:	4613      	mov	r3, r2
 800c14a:	011b      	lsls	r3, r3, #4
 800c14c:	4413      	add	r3, r2
 800c14e:	3310      	adds	r3, #16
 800c150:	440b      	add	r3, r1
 800c152:	3301      	adds	r3, #1
 800c154:	f107 010c 	add.w	r1, r7, #12
 800c158:	2210      	movs	r2, #16
 800c15a:	4618      	mov	r0, r3
 800c15c:	f00a ff97 	bl	801708e <memcpy1>
                return retval;
 800c160:	7fbb      	ldrb	r3, [r7, #30]
 800c162:	e016      	b.n	800c192 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c164:	4b0d      	ldr	r3, [pc, #52]	@ (800c19c <SecureElementSetKey+0xb8>)
 800c166:	6819      	ldr	r1, [r3, #0]
 800c168:	7ffa      	ldrb	r2, [r7, #31]
 800c16a:	4613      	mov	r3, r2
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	4413      	add	r3, r2
 800c170:	3310      	adds	r3, #16
 800c172:	440b      	add	r3, r1
 800c174:	3301      	adds	r3, #1
 800c176:	2210      	movs	r2, #16
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f00a ff87 	bl	801708e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c180:	2300      	movs	r3, #0
 800c182:	e006      	b.n	800c192 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c184:	7ffb      	ldrb	r3, [r7, #31]
 800c186:	3301      	adds	r3, #1
 800c188:	77fb      	strb	r3, [r7, #31]
 800c18a:	7ffb      	ldrb	r3, [r7, #31]
 800c18c:	2b09      	cmp	r3, #9
 800c18e:	d9b7      	bls.n	800c100 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c190:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c192:	4618      	mov	r0, r3
 800c194:	3720      	adds	r7, #32
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000720 	.word	0x20000720

0800c1a0 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	80fb      	strh	r3, [r7, #6]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c1b6:	797b      	ldrb	r3, [r7, #5]
 800c1b8:	2b7e      	cmp	r3, #126	@ 0x7e
 800c1ba:	d901      	bls.n	800c1c0 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e009      	b.n	800c1d4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c1c0:	7979      	ldrb	r1, [r7, #5]
 800c1c2:	88fa      	ldrh	r2, [r7, #6]
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	68b9      	ldr	r1, [r7, #8]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff fe13 	bl	800bdf8 <ComputeCmac>
 800c1d2:	4603      	mov	r3, r0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	607a      	str	r2, [r7, #4]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	817b      	strh	r3, [r7, #10]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	e01b      	b.n	800c232 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c1fa:	2306      	movs	r3, #6
 800c1fc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c202:	7a79      	ldrb	r1, [r7, #9]
 800c204:	897a      	ldrh	r2, [r7, #10]
 800c206:	f107 0310 	add.w	r3, r7, #16
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	460b      	mov	r3, r1
 800c20e:	68f9      	ldr	r1, [r7, #12]
 800c210:	2000      	movs	r0, #0
 800c212:	f7ff fdf1 	bl	800bdf8 <ComputeCmac>
 800c216:	4603      	mov	r3, r0
 800c218:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c21a:	7dfb      	ldrb	r3, [r7, #23]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c220:	7dfb      	ldrb	r3, [r7, #23]
 800c222:	e006      	b.n	800c232 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d001      	beq.n	800c230 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c22c:	2301      	movs	r3, #1
 800c22e:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c230:	7dfb      	ldrb	r3, [r7, #23]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b0c2      	sub	sp, #264	@ 0x108
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c24a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	4603      	mov	r3, r0
 800c252:	817b      	strh	r3, [r7, #10]
 800c254:	460b      	mov	r3, r1
 800c256:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d006      	beq.n	800c26c <SecureElementAesEncrypt+0x32>
 800c25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c26c:	2302      	movs	r3, #2
 800c26e:	e046      	b.n	800c2fe <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c270:	897b      	ldrh	r3, [r7, #10]
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	b29b      	uxth	r3, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c27c:	2305      	movs	r3, #5
 800c27e:	e03e      	b.n	800c2fe <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c280:	f107 0314 	add.w	r3, r7, #20
 800c284:	22f0      	movs	r2, #240	@ 0xf0
 800c286:	2100      	movs	r1, #0
 800c288:	4618      	mov	r0, r3
 800c28a:	f00a ff3b 	bl	8017104 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c28e:	f107 0210 	add.w	r2, r7, #16
 800c292:	7a7b      	ldrb	r3, [r7, #9]
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff fd7e 	bl	800bd98 <GetKeyByID>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c2a2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d127      	bne.n	800c2fa <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	f107 0214 	add.w	r2, r7, #20
 800c2b2:	2110      	movs	r1, #16
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fb65 	bl	800b984 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c2c0:	e018      	b.n	800c2f4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c2c2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	18d0      	adds	r0, r2, r3
 800c2ca:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2ce:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c2d2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c2d6:	6812      	ldr	r2, [r2, #0]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f107 0214 	add.w	r2, r7, #20
 800c2de:	4619      	mov	r1, r3
 800c2e0:	f7ff fc2e 	bl	800bb40 <lorawan_aes_encrypt>
            block = block + 16;
 800c2e4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c2e8:	3310      	adds	r3, #16
 800c2ea:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c2ee:	897b      	ldrh	r3, [r7, #10]
 800c2f0:	3b10      	subs	r3, #16
 800c2f2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c2f4:	897b      	ldrh	r3, [r7, #10]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e3      	bne.n	800c2c2 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c2fa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
 800c314:	4613      	mov	r3, r2
 800c316:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c31e:	2302      	movs	r3, #2
 800c320:	e02d      	b.n	800c37e <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c322:	2306      	movs	r3, #6
 800c324:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c326:	78bb      	ldrb	r3, [r7, #2]
 800c328:	2b7f      	cmp	r3, #127	@ 0x7f
 800c32a:	d104      	bne.n	800c336 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d001      	beq.n	800c336 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c332:	2303      	movs	r3, #3
 800c334:	e023      	b.n	800c37e <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	605a      	str	r2, [r3, #4]
 800c340:	609a      	str	r2, [r3, #8]
 800c342:	60da      	str	r2, [r3, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	78fa      	ldrb	r2, [r7, #3]
 800c34a:	2110      	movs	r1, #16
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff ff74 	bl	800c23a <SecureElementAesEncrypt>
 800c352:	4603      	mov	r3, r0
 800c354:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c356:	7ffb      	ldrb	r3, [r7, #31]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c35c:	7ffb      	ldrb	r3, [r7, #31]
 800c35e:	e00e      	b.n	800c37e <SecureElementDeriveAndStoreKey+0x76>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c360:	f107 020c 	add.w	r2, r7, #12
 800c364:	78bb      	ldrb	r3, [r7, #2]
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff febb 	bl	800c0e4 <SecureElementSetKey>
 800c36e:	4603      	mov	r3, r0
 800c370:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c372:	7ffb      	ldrb	r3, [r7, #31]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c378:	7ffb      	ldrb	r3, [r7, #31]
 800c37a:	e000      	b.n	800c37e <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c37c:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3720      	adds	r7, #32
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b086      	sub	sp, #24
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607b      	str	r3, [r7, #4]
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	4613      	mov	r3, r2
 800c396:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <SecureElementProcessJoinAccept+0x24>
 800c39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <SecureElementProcessJoinAccept+0x24>
 800c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d101      	bne.n	800c3ae <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e064      	b.n	800c478 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3b2:	2b21      	cmp	r3, #33	@ 0x21
 800c3b4:	d901      	bls.n	800c3ba <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c3b6:	2305      	movs	r3, #5
 800c3b8:	e05e      	b.n	800c478 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3ca:	f00a fe60 	bl	801708e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	1c58      	adds	r0, r3, #1
 800c3d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	b299      	uxth	r1, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	3301      	adds	r3, #1
 800c3e0:	7dfa      	ldrb	r2, [r7, #23]
 800c3e2:	f7ff ff2a 	bl	800c23a <SecureElementAesEncrypt>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c3ec:	2307      	movs	r3, #7
 800c3ee:	e043      	b.n	800c478 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f2:	330b      	adds	r3, #11
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	09db      	lsrs	r3, r3, #7
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c402:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c406:	3b04      	subs	r3, #4
 800c408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c40a:	4413      	add	r3, r2
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c410:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c414:	3b03      	subs	r3, #3
 800c416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c418:	4413      	add	r3, r2
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	021b      	lsls	r3, r3, #8
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	4313      	orrs	r3, r2
 800c422:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c424:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c428:	3b02      	subs	r3, #2
 800c42a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42c:	4413      	add	r3, r2
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	4313      	orrs	r3, r2
 800c436:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c438:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c440:	4413      	add	r3, r2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	061b      	lsls	r3, r3, #24
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	4313      	orrs	r3, r2
 800c44a:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10e      	bne.n	800c472 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c454:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3b04      	subs	r3, #4
 800c45c:	b299      	uxth	r1, r3
 800c45e:	2301      	movs	r3, #1
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c464:	f7ff feba 	bl	800c1dc <SecureElementVerifyAesCmac>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c46e:	2301      	movs	r3, #1
 800c470:	e002      	b.n	800c478 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c472:	2304      	movs	r3, #4
 800c474:	e000      	b.n	800c478 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c48e:	2302      	movs	r3, #2
 800c490:	e007      	b.n	800c4a2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c492:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <SecureElementSetDevEui+0x2c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2208      	movs	r2, #8
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f00a fdf7 	bl	801708e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20000720 	.word	0x20000720

0800c4b0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c4b4:	4b02      	ldr	r3, [pc, #8]	@ (800c4c0 <SecureElementGetDevEui+0x10>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr
 800c4c0:	20000720 	.word	0x20000720

0800c4c4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e008      	b.n	800c4e8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c4d6:	4b06      	ldr	r3, [pc, #24]	@ (800c4f0 <SecureElementSetJoinEui+0x2c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	2208      	movs	r2, #8
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f00a fdd4 	bl	801708e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	20000720 	.word	0x20000720

0800c4f4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c4f8:	4b03      	ldr	r3, [pc, #12]	@ (800c508 <SecureElementGetJoinEui+0x14>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3308      	adds	r3, #8
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	bc80      	pop	{r7}
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	20000720 	.word	0x20000720

0800c50c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c516:	4a23      	ldr	r2, [pc, #140]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c51c:	4b22      	ldr	r3, [pc, #136]	@ (800c5a8 <LmHandlerInit+0x9c>)
 800c51e:	4a23      	ldr	r2, [pc, #140]	@ (800c5ac <LmHandlerInit+0xa0>)
 800c520:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c522:	4b21      	ldr	r3, [pc, #132]	@ (800c5a8 <LmHandlerInit+0x9c>)
 800c524:	4a22      	ldr	r2, [pc, #136]	@ (800c5b0 <LmHandlerInit+0xa4>)
 800c526:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c528:	4b1f      	ldr	r3, [pc, #124]	@ (800c5a8 <LmHandlerInit+0x9c>)
 800c52a:	4a22      	ldr	r2, [pc, #136]	@ (800c5b4 <LmHandlerInit+0xa8>)
 800c52c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c52e:	4b1e      	ldr	r3, [pc, #120]	@ (800c5a8 <LmHandlerInit+0x9c>)
 800c530:	4a21      	ldr	r2, [pc, #132]	@ (800c5b8 <LmHandlerInit+0xac>)
 800c532:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c534:	4b1b      	ldr	r3, [pc, #108]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a20      	ldr	r2, [pc, #128]	@ (800c5bc <LmHandlerInit+0xb0>)
 800c53c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c53e:	4b19      	ldr	r3, [pc, #100]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4a1d      	ldr	r2, [pc, #116]	@ (800c5bc <LmHandlerInit+0xb0>)
 800c546:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c548:	4b16      	ldr	r3, [pc, #88]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	4a1b      	ldr	r2, [pc, #108]	@ (800c5bc <LmHandlerInit+0xb0>)
 800c550:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c552:	4b1a      	ldr	r3, [pc, #104]	@ (800c5bc <LmHandlerInit+0xb0>)
 800c554:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c0 <LmHandlerInit+0xb4>)
 800c556:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c558:	4b12      	ldr	r3, [pc, #72]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	4a17      	ldr	r2, [pc, #92]	@ (800c5bc <LmHandlerInit+0xb0>)
 800c560:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c562:	4a18      	ldr	r2, [pc, #96]	@ (800c5c4 <LmHandlerInit+0xb8>)
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c568:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c56e:	4a15      	ldr	r2, [pc, #84]	@ (800c5c4 <LmHandlerInit+0xb8>)
 800c570:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c572:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c578:	4a12      	ldr	r2, [pc, #72]	@ (800c5c4 <LmHandlerInit+0xb8>)
 800c57a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c57c:	4b09      	ldr	r3, [pc, #36]	@ (800c5a4 <LmHandlerInit+0x98>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	4a10      	ldr	r2, [pc, #64]	@ (800c5c4 <LmHandlerInit+0xb8>)
 800c584:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c586:	490f      	ldr	r1, [pc, #60]	@ (800c5c4 <LmHandlerInit+0xb8>)
 800c588:	2000      	movs	r0, #0
 800c58a:	f000 fd87 	bl	800d09c <LmHandlerPackageRegister>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c594:	f04f 33ff 	mov.w	r3, #4294967295
 800c598:	e000      	b.n	800c59c <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	2000075c 	.word	0x2000075c
 800c5a8:	20000760 	.word	0x20000760
 800c5ac:	0800cda9 	.word	0x0800cda9
 800c5b0:	0800ce11 	.word	0x0800ce11
 800c5b4:	0800cedd 	.word	0x0800cedd
 800c5b8:	0800cff5 	.word	0x0800cff5
 800c5bc:	20000770 	.word	0x20000770
 800c5c0:	0800d46d 	.word	0x0800d46d
 800c5c4:	20000724 	.word	0x20000724

0800c5c8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b094      	sub	sp, #80	@ 0x50
 800c5cc:	af04      	add	r7, sp, #16
 800c5ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c5d0:	2214      	movs	r2, #20
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4891      	ldr	r0, [pc, #580]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c5d6:	f00e f867 	bl	801a6a8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c5da:	4b91      	ldr	r3, [pc, #580]	@ (800c820 <LmHandlerConfigure+0x258>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c5e0:	f7fe fb0a 	bl	800abf8 <LoraInfo_GetPtr>
 800c5e4:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c5e6:	4b8d      	ldr	r3, [pc, #564]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	4093      	lsls	r3, r2
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d107      	bne.n	800c60c <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c5fc:	4b89      	ldr	r3, [pc, #548]	@ (800c824 <LmHandlerConfigure+0x25c>)
 800c5fe:	2201      	movs	r2, #1
 800c600:	2100      	movs	r1, #0
 800c602:	2000      	movs	r0, #0
 800c604:	f00f f89a 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c608:	bf00      	nop
 800c60a:	e7fd      	b.n	800c608 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c60c:	4b83      	ldr	r3, [pc, #524]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	461a      	mov	r2, r3
 800c612:	4985      	ldr	r1, [pc, #532]	@ (800c828 <LmHandlerConfigure+0x260>)
 800c614:	4885      	ldr	r0, [pc, #532]	@ (800c82c <LmHandlerConfigure+0x264>)
 800c616:	f004 fe95 	bl	8011344 <LoRaMacInitialization>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c620:	f04f 33ff 	mov.w	r3, #4294967295
 800c624:	e0f5      	b.n	800c812 <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c626:	2327      	movs	r3, #39	@ 0x27
 800c628:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c62a:	f107 0318 	add.w	r3, r7, #24
 800c62e:	4618      	mov	r0, r3
 800c630:	f005 fbd8 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800c63a:	4b7d      	ldr	r3, [pc, #500]	@ (800c830 <LmHandlerConfigure+0x268>)
 800c63c:	2201      	movs	r2, #1
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	e02a      	b.n	800c698 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c642:	2328      	movs	r3, #40	@ 0x28
 800c644:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c646:	4b7b      	ldr	r3, [pc, #492]	@ (800c834 <LmHandlerConfigure+0x26c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c650:	f107 0318 	add.w	r3, r7, #24
 800c654:	4618      	mov	r0, r3
 800c656:	f005 fa1f 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c65a:	4b76      	ldr	r3, [pc, #472]	@ (800c834 <LmHandlerConfigure+0x26c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c666:	4610      	mov	r0, r2
 800c668:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c66a:	2327      	movs	r3, #39	@ 0x27
 800c66c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c66e:	f107 0318 	add.w	r3, r7, #24
 800c672:	4618      	mov	r0, r3
 800c674:	f005 fbb6 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10c      	bne.n	800c698 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c67e:	2301      	movs	r3, #1
 800c680:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c682:	f107 0318 	add.w	r3, r7, #24
 800c686:	4618      	mov	r0, r3
 800c688:	f005 fa06 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c68c:	7f3b      	ldrb	r3, [r7, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c692:	4b67      	ldr	r3, [pc, #412]	@ (800c830 <LmHandlerConfigure+0x268>)
 800c694:	2201      	movs	r2, #1
 800c696:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c698:	4b65      	ldr	r3, [pc, #404]	@ (800c830 <LmHandlerConfigure+0x268>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d02a      	beq.n	800c6f6 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c6a0:	4b64      	ldr	r3, [pc, #400]	@ (800c834 <LmHandlerConfigure+0x26c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c6aa:	4b62      	ldr	r3, [pc, #392]	@ (800c834 <LmHandlerConfigure+0x26c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c6b4:	2306      	movs	r3, #6
 800c6b6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c6b8:	f107 0318 	add.w	r3, r7, #24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f005 f9eb 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	4a5c      	ldr	r2, [pc, #368]	@ (800c838 <LmHandlerConfigure+0x270>)
 800c6c6:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c6c8:	2327      	movs	r3, #39	@ 0x27
 800c6ca:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c6cc:	f107 0318 	add.w	r3, r7, #24
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f005 f9e1 	bl	8011a98 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c6dc:	4b4f      	ldr	r3, [pc, #316]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c6de:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c6e6:	4b4d      	ldr	r3, [pc, #308]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c6e8:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c6f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c6f2:	709a      	strb	r2, [r3, #2]
 800c6f4:	e019      	b.n	800c72a <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c6f6:	2305      	movs	r3, #5
 800c6f8:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c6fe:	f107 0318 	add.w	r3, r7, #24
 800c702:	4618      	mov	r0, r3
 800c704:	f005 fb6e 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c708:	4b4a      	ldr	r3, [pc, #296]	@ (800c834 <LmHandlerConfigure+0x26c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	4798      	blx	r3
 800c710:	4603      	mov	r3, r0
 800c712:	4a49      	ldr	r2, [pc, #292]	@ (800c838 <LmHandlerConfigure+0x270>)
 800c714:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c716:	2306      	movs	r3, #6
 800c718:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c71a:	4b47      	ldr	r3, [pc, #284]	@ (800c838 <LmHandlerConfigure+0x270>)
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c720:	f107 0318 	add.w	r3, r7, #24
 800c724:	4618      	mov	r0, r3
 800c726:	f005 fb5d 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c72a:	2302      	movs	r3, #2
 800c72c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c72e:	f107 0318 	add.w	r3, r7, #24
 800c732:	4618      	mov	r0, r3
 800c734:	f005 f9b0 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	2208      	movs	r2, #8
 800c73c:	4619      	mov	r1, r3
 800c73e:	483e      	ldr	r0, [pc, #248]	@ (800c838 <LmHandlerConfigure+0x270>)
 800c740:	f00a fca5 	bl	801708e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c744:	2303      	movs	r3, #3
 800c746:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c748:	f107 0318 	add.w	r3, r7, #24
 800c74c:	4618      	mov	r0, r3
 800c74e:	f005 f9a3 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	2208      	movs	r2, #8
 800c756:	4619      	mov	r1, r3
 800c758:	4838      	ldr	r0, [pc, #224]	@ (800c83c <LmHandlerConfigure+0x274>)
 800c75a:	f00a fc98 	bl	801708e <memcpy1>

    SecureElementPrintKeys();
 800c75e:	f7ff fc21 	bl	800bfa4 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c762:	4b37      	ldr	r3, [pc, #220]	@ (800c840 <LmHandlerConfigure+0x278>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	4b36      	ldr	r3, [pc, #216]	@ (800c844 <LmHandlerConfigure+0x27c>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	4619      	mov	r1, r3
 800c76e:	4b36      	ldr	r3, [pc, #216]	@ (800c848 <LmHandlerConfigure+0x280>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	4b35      	ldr	r3, [pc, #212]	@ (800c84c <LmHandlerConfigure+0x284>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	9303      	str	r3, [sp, #12]
 800c77a:	9002      	str	r0, [sp, #8]
 800c77c:	9101      	str	r1, [sp, #4]
 800c77e:	9200      	str	r2, [sp, #0]
 800c780:	4b33      	ldr	r3, [pc, #204]	@ (800c850 <LmHandlerConfigure+0x288>)
 800c782:	2200      	movs	r2, #0
 800c784:	2100      	movs	r1, #0
 800c786:	2002      	movs	r0, #2
 800c788:	f00e ffd8 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c78c:	230f      	movs	r3, #15
 800c78e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c790:	2301      	movs	r3, #1
 800c792:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c794:	f107 0318 	add.w	r3, r7, #24
 800c798:	4618      	mov	r0, r3
 800c79a:	f005 fb23 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c79e:	2310      	movs	r3, #16
 800c7a0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7a6:	f107 0318 	add.w	r3, r7, #24
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f005 fb1a 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c7b4:	4b19      	ldr	r3, [pc, #100]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c7b6:	789b      	ldrb	r3, [r3, #2]
 800c7b8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7ba:	f107 0318 	add.w	r3, r7, #24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f005 fb10 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c7c4:	2338      	movs	r3, #56	@ 0x38
 800c7c6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c7c8:	4b14      	ldr	r3, [pc, #80]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7ce:	f107 0318 	add.w	r3, r7, #24
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f005 fb06 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c7d8:	230f      	movs	r3, #15
 800c7da:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	f107 0210 	add.w	r2, r7, #16
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f008 f9b0 	bl	8014b4c <RegionGetPhyParam>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bf14      	ite	ne
 800c7f6:	2301      	movne	r3, #1
 800c7f8:	2300      	moveq	r3, #0
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	4b07      	ldr	r3, [pc, #28]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c7fe:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c800:	2014      	movs	r0, #20
 800c802:	f000 fab9 	bl	800cd78 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c806:	4b05      	ldr	r3, [pc, #20]	@ (800c81c <LmHandlerConfigure+0x254>)
 800c808:	799b      	ldrb	r3, [r3, #6]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f006 f918 	bl	8012a40 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3740      	adds	r7, #64	@ 0x40
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	20000748 	.word	0x20000748
 800c820:	20000788 	.word	0x20000788
 800c824:	0801ee0c 	.word	0x0801ee0c
 800c828:	20000770 	.word	0x20000770
 800c82c:	20000760 	.word	0x20000760
 800c830:	2000087e 	.word	0x2000087e
 800c834:	2000075c 	.word	0x2000075c
 800c838:	20000078 	.word	0x20000078
 800c83c:	20000080 	.word	0x20000080
 800c840:	2000008f 	.word	0x2000008f
 800c844:	2000008e 	.word	0x2000008e
 800c848:	2000008d 	.word	0x2000008d
 800c84c:	2000008c 	.word	0x2000008c
 800c850:	0801ee58 	.word	0x0801ee58

0800c854 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c85a:	f002 fd45 	bl	800f2e8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c85e:	f000 fd3b 	bl	800d2d8 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c862:	f000 fd0f 	bl	800d284 <LmHandlerPackageIsTxPending>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d117      	bne.n	800c89c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c86c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a4 <LmHandlerProcess+0x50>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d014      	beq.n	800c89e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c874:	2300      	movs	r3, #0
 800c876:	703b      	strb	r3, [r7, #0]
 800c878:	2300      	movs	r3, #0
 800c87a:	707b      	strb	r3, [r7, #1]
 800c87c:	2300      	movs	r3, #0
 800c87e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c880:	4b09      	ldr	r3, [pc, #36]	@ (800c8a8 <LmHandlerProcess+0x54>)
 800c882:	78d9      	ldrb	r1, [r3, #3]
 800c884:	463b      	mov	r3, r7
 800c886:	2200      	movs	r2, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f8b7 	bl	800c9fc <LmHandlerSend>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d104      	bne.n	800c89e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c894:	4b03      	ldr	r3, [pc, #12]	@ (800c8a4 <LmHandlerProcess+0x50>)
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	e000      	b.n	800c89e <LmHandlerProcess+0x4a>
        return;
 800c89c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20000788 	.word	0x20000788
 800c8a8:	20000748 	.word	0x20000748

0800c8ac <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c8b0:	4b02      	ldr	r3, [pc, #8]	@ (800c8bc <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bc80      	pop	{r7}
 800c8ba:	4770      	bx	lr
 800c8bc:	20000784 	.word	0x20000784

0800c8c0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b090      	sub	sp, #64	@ 0x40
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	460a      	mov	r2, r1
 800c8ca:	71fb      	strb	r3, [r7, #7]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c8d6:	4b36      	ldr	r3, [pc, #216]	@ (800c9b0 <LmHandlerJoin+0xf0>)
 800c8d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d10b      	bne.n	800c900 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c8ee:	4b31      	ldr	r3, [pc, #196]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c8f0:	2202      	movs	r2, #2
 800c8f2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c8f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c8f6:	79bb      	ldrb	r3, [r7, #6]
 800c8f8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c8fa:	f004 ffdb 	bl	80118b4 <LoRaMacStart>
 800c8fe:	e041      	b.n	800c984 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c900:	2301      	movs	r3, #1
 800c902:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c906:	4b2b      	ldr	r3, [pc, #172]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c908:	2201      	movs	r2, #1
 800c90a:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c90c:	4b28      	ldr	r3, [pc, #160]	@ (800c9b0 <LmHandlerJoin+0xf0>)
 800c90e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c912:	4b28      	ldr	r3, [pc, #160]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c914:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c916:	4b27      	ldr	r3, [pc, #156]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c918:	2200      	movs	r2, #0
 800c91a:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c91c:	4a25      	ldr	r2, [pc, #148]	@ (800c9b4 <LmHandlerJoin+0xf4>)
 800c91e:	79bb      	ldrb	r3, [r7, #6]
 800c920:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c922:	4b25      	ldr	r3, [pc, #148]	@ (800c9b8 <LmHandlerJoin+0xf8>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	f083 0301 	eor.w	r3, r3, #1
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d01e      	beq.n	800c96e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c930:	231f      	movs	r3, #31
 800c932:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c934:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b0 <LmHandlerJoin+0xf0>)
 800c936:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c93a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c93c:	f107 0308 	add.w	r3, r7, #8
 800c940:	4618      	mov	r0, r3
 800c942:	f005 fa4f 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c946:	2320      	movs	r3, #32
 800c948:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c94a:	4b19      	ldr	r3, [pc, #100]	@ (800c9b0 <LmHandlerJoin+0xf0>)
 800c94c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c950:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	4618      	mov	r0, r3
 800c958:	f005 fa44 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c95c:	2329      	movs	r3, #41	@ 0x29
 800c95e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c960:	4b16      	ldr	r3, [pc, #88]	@ (800c9bc <LmHandlerJoin+0xfc>)
 800c962:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4618      	mov	r0, r3
 800c96a:	f005 fa3b 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c96e:	f004 ffa1 	bl	80118b4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c972:	2301      	movs	r3, #1
 800c974:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c976:	2301      	movs	r3, #1
 800c978:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	4618      	mov	r0, r3
 800c980:	f005 fa30 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c984:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b8 <LmHandlerJoin+0xf8>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	f083 0301 	eor.w	r3, r3, #1
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <LmHandlerJoin+0xd8>
 800c992:	79bb      	ldrb	r3, [r7, #6]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d004      	beq.n	800c9a2 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c99c:	4618      	mov	r0, r3
 800c99e:	f005 fd91 	bl	80124c4 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a4:	4a06      	ldr	r2, [pc, #24]	@ (800c9c0 <LmHandlerJoin+0x100>)
 800c9a6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c9a8:	bf00      	nop
 800c9aa:	3740      	adds	r7, #64	@ 0x40
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20000748 	.word	0x20000748
 800c9b4:	20000090 	.word	0x20000090
 800c9b8:	2000087e 	.word	0x2000087e
 800c9bc:	01000400 	.word	0x01000400
 800c9c0:	20000784 	.word	0x20000784

0800c9c4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08a      	sub	sp, #40	@ 0x28
 800c9c8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f005 f861 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c9e4:	793b      	ldrb	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e002      	b.n	800c9f4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e000      	b.n	800c9f4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c9f2:	2300      	movs	r3, #0
    }
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3728      	adds	r7, #40	@ 0x28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08a      	sub	sp, #40	@ 0x28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca0c:	23ff      	movs	r3, #255	@ 0xff
 800ca0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800ca12:	f002 f9c9 	bl	800eda8 <LoRaMacIsBusy>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca1c:	f06f 0301 	mvn.w	r3, #1
 800ca20:	e0a3      	b.n	800cb6a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800ca22:	f7ff ffcf 	bl	800c9c4 <LmHandlerJoinStatus>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d00a      	beq.n	800ca42 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ca2c:	4b51      	ldr	r3, [pc, #324]	@ (800cb74 <LmHandlerSend+0x178>)
 800ca2e:	799b      	ldrb	r3, [r3, #6]
 800ca30:	4a50      	ldr	r2, [pc, #320]	@ (800cb74 <LmHandlerSend+0x178>)
 800ca32:	79d2      	ldrb	r2, [r2, #7]
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff ff42 	bl	800c8c0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca3c:	f06f 0302 	mvn.w	r3, #2
 800ca40:	e093      	b.n	800cb6a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ca42:	4a4d      	ldr	r2, [pc, #308]	@ (800cb78 <LmHandlerSend+0x17c>)
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ca48:	78fb      	ldrb	r3, [r7, #3]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bf14      	ite	ne
 800ca4e:	2301      	movne	r3, #1
 800ca50:	2300      	moveq	r3, #0
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ca56:	4b49      	ldr	r3, [pc, #292]	@ (800cb7c <LmHandlerSend+0x180>)
 800ca58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ca5c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	785b      	ldrb	r3, [r3, #1]
 800ca62:	f107 020c 	add.w	r2, r7, #12
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f004 ff85 	bl	8011978 <LoRaMacQueryTxPossible>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d009      	beq.n	800ca88 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ca74:	2300      	movs	r3, #0
 800ca76:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ca80:	23f9      	movs	r3, #249	@ 0xf9
 800ca82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca86:	e008      	b.n	800ca9a <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ca9a:	4b37      	ldr	r3, [pc, #220]	@ (800cb78 <LmHandlerSend+0x17c>)
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	3310      	adds	r3, #16
 800caa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caa4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800caa8:	4b34      	ldr	r3, [pc, #208]	@ (800cb7c <LmHandlerSend+0x180>)
 800caaa:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800caae:	4b32      	ldr	r3, [pc, #200]	@ (800cb78 <LmHandlerSend+0x17c>)
 800cab0:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800cab2:	78ba      	ldrb	r2, [r7, #2]
 800cab4:	f107 0310 	add.w	r3, r7, #16
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f005 fe88 	bl	80127d0 <LoRaMacMcpsRequest>
 800cac0:	4603      	mov	r3, r0
 800cac2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	4a2d      	ldr	r2, [pc, #180]	@ (800cb80 <LmHandlerSend+0x184>)
 800caca:	6013      	str	r3, [r2, #0]

    switch (status)
 800cacc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cad0:	2b11      	cmp	r3, #17
 800cad2:	d843      	bhi.n	800cb5c <LmHandlerSend+0x160>
 800cad4:	a201      	add	r2, pc, #4	@ (adr r2, 800cadc <LmHandlerSend+0xe0>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb25 	.word	0x0800cb25
 800cae0:	0800cb3d 	.word	0x0800cb3d
 800cae4:	0800cb5d 	.word	0x0800cb5d
 800cae8:	0800cb5d 	.word	0x0800cb5d
 800caec:	0800cb5d 	.word	0x0800cb5d
 800caf0:	0800cb5d 	.word	0x0800cb5d
 800caf4:	0800cb5d 	.word	0x0800cb5d
 800caf8:	0800cb45 	.word	0x0800cb45
 800cafc:	0800cb5d 	.word	0x0800cb5d
 800cb00:	0800cb5d 	.word	0x0800cb5d
 800cb04:	0800cb5d 	.word	0x0800cb5d
 800cb08:	0800cb55 	.word	0x0800cb55
 800cb0c:	0800cb5d 	.word	0x0800cb5d
 800cb10:	0800cb5d 	.word	0x0800cb5d
 800cb14:	0800cb3d 	.word	0x0800cb3d
 800cb18:	0800cb3d 	.word	0x0800cb3d
 800cb1c:	0800cb3d 	.word	0x0800cb3d
 800cb20:	0800cb4d 	.word	0x0800cb4d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800cb24:	4b17      	ldr	r3, [pc, #92]	@ (800cb84 <LmHandlerSend+0x188>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800cb2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb2e:	f113 0f07 	cmn.w	r3, #7
 800cb32:	d017      	beq.n	800cb64 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800cb3a:	e013      	b.n	800cb64 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cb3c:	23fe      	movs	r3, #254	@ 0xfe
 800cb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb42:	e010      	b.n	800cb66 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cb44:	23fd      	movs	r3, #253	@ 0xfd
 800cb46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb4a:	e00c      	b.n	800cb66 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cb4c:	23fb      	movs	r3, #251	@ 0xfb
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb52:	e008      	b.n	800cb66 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cb54:	23fa      	movs	r3, #250	@ 0xfa
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb5a:	e004      	b.n	800cb66 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cb5c:	23ff      	movs	r3, #255	@ 0xff
 800cb5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cb62:	e000      	b.n	800cb66 <LmHandlerSend+0x16a>
            break;
 800cb64:	bf00      	nop
    }

    return lmhStatus;
 800cb66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3728      	adds	r7, #40	@ 0x28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20000090 	.word	0x20000090
 800cb78:	20000098 	.word	0x20000098
 800cb7c:	20000748 	.word	0x20000748
 800cb80:	20000784 	.word	0x20000784
 800cb84:	20000788 	.word	0x20000788

0800cb88 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cb8e:	2309      	movs	r3, #9
 800cb90:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cb92:	463b      	mov	r3, r7
 800cb94:	4618      	mov	r0, r3
 800cb96:	f005 fc95 	bl	80124c4 <LoRaMacMlmeRequest>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	4a06      	ldr	r2, [pc, #24]	@ (800cbbc <LmHandlerDeviceTimeReq+0x34>)
 800cba2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e001      	b.n	800cbb2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cbae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000784 	.word	0x20000784

0800cbc0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cbca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr

0800cbd8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08c      	sub	sp, #48	@ 0x30
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800cbe8:	f002 f8de 	bl	800eda8 <LoRaMacIsBusy>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cbf2:	f06f 0301 	mvn.w	r3, #1
 800cbf6:	e071      	b.n	800ccdc <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cbf8:	f7ff fee4 	bl	800c9c4 <LmHandlerJoinStatus>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d002      	beq.n	800cc08 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cc02:	f06f 0302 	mvn.w	r3, #2
 800cc06:	e069      	b.n	800ccdc <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	4618      	mov	r0, r3
 800cc12:	f004 ff41 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc20:	e05c      	b.n	800ccdc <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cc22:	7b3b      	ldrb	r3, [r7, #12]
 800cc24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cc28:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d052      	beq.n	800ccd8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d028      	beq.n	800cc8a <LmHandlerRequestClass+0xb2>
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	dc48      	bgt.n	800ccce <LmHandlerRequestClass+0xf6>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <LmHandlerRequestClass+0x6e>
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d01e      	beq.n	800cc82 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800cc44:	e043      	b.n	800ccce <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800cc46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d041      	beq.n	800ccd2 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cc52:	f107 0308 	add.w	r3, r7, #8
 800cc56:	4618      	mov	r0, r3
 800cc58:	f005 f8c4 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cc62:	4b20      	ldr	r3, [pc, #128]	@ (800cce4 <LmHandlerRequestClass+0x10c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d032      	beq.n	800ccd2 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800cce4 <LmHandlerRequestClass+0x10c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc72:	79fa      	ldrb	r2, [r7, #7]
 800cc74:	4610      	mov	r0, r2
 800cc76:	4798      	blx	r3
            break;
 800cc78:	e02b      	b.n	800ccd2 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cc7a:	23ff      	movs	r3, #255	@ 0xff
 800cc7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cc80:	e027      	b.n	800ccd2 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cc82:	23ff      	movs	r3, #255	@ 0xff
 800cc84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cc88:	e026      	b.n	800ccd8 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800cc8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cc92:	23ff      	movs	r3, #255	@ 0xff
 800cc94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cc98:	e01d      	b.n	800ccd6 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	4618      	mov	r0, r3
 800cca4:	f005 f89e 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10b      	bne.n	800ccc6 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <LmHandlerRequestClass+0x10c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00e      	beq.n	800ccd6 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800ccb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cce4 <LmHandlerRequestClass+0x10c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccbe:	79fa      	ldrb	r2, [r7, #7]
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	4798      	blx	r3
            break;
 800ccc4:	e007      	b.n	800ccd6 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ccc6:	23ff      	movs	r3, #255	@ 0xff
 800ccc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800cccc:	e003      	b.n	800ccd6 <LmHandlerRequestClass+0xfe>
            break;
 800ccce:	bf00      	nop
 800ccd0:	e002      	b.n	800ccd8 <LmHandlerRequestClass+0x100>
            break;
 800ccd2:	bf00      	nop
 800ccd4:	e000      	b.n	800ccd8 <LmHandlerRequestClass+0x100>
            break;
 800ccd6:	bf00      	nop
        }
    }
    return errorStatus;
 800ccd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3730      	adds	r7, #48	@ 0x30
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	2000075c 	.word	0x2000075c

0800cce8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08c      	sub	sp, #48	@ 0x30
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d102      	bne.n	800ccfc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfa:	e010      	b.n	800cd1e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cd00:	f107 030c 	add.w	r3, r7, #12
 800cd04:	4618      	mov	r0, r3
 800cd06:	f004 fec7 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295
 800cd14:	e003      	b.n	800cd1e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cd16:	7c3a      	ldrb	r2, [r7, #16]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3730      	adds	r7, #48	@ 0x30
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08c      	sub	sp, #48	@ 0x30
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d102      	bne.n	800cd3c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd36:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3a:	e016      	b.n	800cd6a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cd3c:	2320      	movs	r3, #32
 800cd3e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cd40:	f107 030c 	add.w	r3, r7, #12
 800cd44:	4618      	mov	r0, r3
 800cd46:	f004 fea7 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd50:	f04f 33ff 	mov.w	r3, #4294967295
 800cd54:	e009      	b.n	800cd6a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cd56:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f993 2000 	ldrsb.w	r2, [r3]
 800cd64:	4b03      	ldr	r3, [pc, #12]	@ (800cd74 <LmHandlerGetTxDatarate+0x4c>)
 800cd66:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3730      	adds	r7, #48	@ 0x30
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20000748 	.word	0x20000748

0800cd78 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08c      	sub	sp, #48	@ 0x30
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cd80:	2323      	movs	r3, #35	@ 0x23
 800cd82:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cd88:	f107 030c 	add.w	r3, r7, #12
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f005 f829 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd98:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9c:	e000      	b.n	800cda0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3730      	adds	r7, #48	@ 0x30
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cdb0:	4b15      	ldr	r3, [pc, #84]	@ (800ce08 <McpsConfirm+0x60>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	785a      	ldrb	r2, [r3, #1]
 800cdba:	4b13      	ldr	r3, [pc, #76]	@ (800ce08 <McpsConfirm+0x60>)
 800cdbc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	789b      	ldrb	r3, [r3, #2]
 800cdc2:	b25a      	sxtb	r2, r3
 800cdc4:	4b10      	ldr	r3, [pc, #64]	@ (800ce08 <McpsConfirm+0x60>)
 800cdc6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	4a0e      	ldr	r2, [pc, #56]	@ (800ce08 <McpsConfirm+0x60>)
 800cdce:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ce08 <McpsConfirm+0x60>)
 800cdd8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	4b09      	ldr	r3, [pc, #36]	@ (800ce08 <McpsConfirm+0x60>)
 800cde2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	791b      	ldrb	r3, [r3, #4]
 800cde8:	461a      	mov	r2, r3
 800cdea:	4b07      	ldr	r3, [pc, #28]	@ (800ce08 <McpsConfirm+0x60>)
 800cdec:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdee:	4b07      	ldr	r3, [pc, #28]	@ (800ce0c <McpsConfirm+0x64>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf4:	4804      	ldr	r0, [pc, #16]	@ (800ce08 <McpsConfirm+0x60>)
 800cdf6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	f000 f9c6 	bl	800d18c <LmHandlerPackagesNotify>
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	20000098 	.word	0x20000098
 800ce0c:	2000075c 	.word	0x2000075c

0800ce10 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ce1e:	4b2c      	ldr	r3, [pc, #176]	@ (800ced0 <McpsIndication+0xc0>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	785a      	ldrb	r2, [r3, #1]
 800ce28:	4b29      	ldr	r3, [pc, #164]	@ (800ced0 <McpsIndication+0xc0>)
 800ce2a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ce2c:	4b28      	ldr	r3, [pc, #160]	@ (800ced0 <McpsIndication+0xc0>)
 800ce2e:	785b      	ldrb	r3, [r3, #1]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d149      	bne.n	800cec8 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	791b      	ldrb	r3, [r3, #4]
 800ce38:	b25a      	sxtb	r2, r3
 800ce3a:	4b25      	ldr	r3, [pc, #148]	@ (800ced0 <McpsIndication+0xc0>)
 800ce3c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce44:	b25a      	sxtb	r2, r3
 800ce46:	4b22      	ldr	r3, [pc, #136]	@ (800ced0 <McpsIndication+0xc0>)
 800ce48:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce50:	4b1f      	ldr	r3, [pc, #124]	@ (800ced0 <McpsIndication+0xc0>)
 800ce52:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	78da      	ldrb	r2, [r3, #3]
 800ce58:	4b1d      	ldr	r3, [pc, #116]	@ (800ced0 <McpsIndication+0xc0>)
 800ce5a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	4a1b      	ldr	r2, [pc, #108]	@ (800ced0 <McpsIndication+0xc0>)
 800ce62:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	78db      	ldrb	r3, [r3, #3]
 800ce68:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7b1b      	ldrb	r3, [r3, #12]
 800ce6e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ce76:	4b17      	ldr	r3, [pc, #92]	@ (800ced4 <McpsIndication+0xc4>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7c:	f107 0210 	add.w	r2, r7, #16
 800ce80:	4913      	ldr	r1, [pc, #76]	@ (800ced0 <McpsIndication+0xc0>)
 800ce82:	4610      	mov	r0, r2
 800ce84:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ce86:	4b13      	ldr	r3, [pc, #76]	@ (800ced4 <McpsIndication+0xc4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d007      	beq.n	800cea0 <McpsIndication+0x90>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7e1b      	ldrb	r3, [r3, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ce98:	4b0e      	ldr	r3, [pc, #56]	@ (800ced4 <McpsIndication+0xc4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cea0:	6879      	ldr	r1, [r7, #4]
 800cea2:	2001      	movs	r0, #1
 800cea4:	f000 f972 	bl	800d18c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cea8:	f107 030f 	add.w	r3, r7, #15
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff ff1b 	bl	800cce8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	795b      	ldrb	r3, [r3, #5]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d107      	bne.n	800ceca <McpsIndication+0xba>
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800cec0:	4b05      	ldr	r3, [pc, #20]	@ (800ced8 <McpsIndication+0xc8>)
 800cec2:	2201      	movs	r2, #1
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	e000      	b.n	800ceca <McpsIndication+0xba>
        return;
 800cec8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	200000b4 	.word	0x200000b4
 800ced4:	2000075c 	.word	0x2000075c
 800ced8:	20000788 	.word	0x20000788

0800cedc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08c      	sub	sp, #48	@ 0x30
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cee4:	4b3c      	ldr	r3, [pc, #240]	@ (800cfd8 <MlmeConfirm+0xfc>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	785a      	ldrb	r2, [r3, #1]
 800ceee:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd8 <MlmeConfirm+0xfc>)
 800cef0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cef2:	4b3a      	ldr	r3, [pc, #232]	@ (800cfdc <MlmeConfirm+0x100>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef8:	4837      	ldr	r0, [pc, #220]	@ (800cfd8 <MlmeConfirm+0xfc>)
 800cefa:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	2002      	movs	r0, #2
 800cf00:	f000 f944 	bl	800d18c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	2b0b      	cmp	r3, #11
 800cf0c:	d85c      	bhi.n	800cfc8 <MlmeConfirm+0xec>
 800cf0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf14 <MlmeConfirm+0x38>)
 800cf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf14:	0800cf45 	.word	0x0800cf45
 800cf18:	0800cfc9 	.word	0x0800cfc9
 800cf1c:	0800cfc9 	.word	0x0800cfc9
 800cf20:	0800cf97 	.word	0x0800cf97
 800cf24:	0800cfc9 	.word	0x0800cfc9
 800cf28:	0800cfc9 	.word	0x0800cfc9
 800cf2c:	0800cfc9 	.word	0x0800cfc9
 800cf30:	0800cfc9 	.word	0x0800cfc9
 800cf34:	0800cfc9 	.word	0x0800cfc9
 800cf38:	0800cfc9 	.word	0x0800cfc9
 800cf3c:	0800cfaf 	.word	0x0800cfaf
 800cf40:	0800cfc9 	.word	0x0800cfc9
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cf44:	2306      	movs	r3, #6
 800cf46:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cf48:	f107 030c 	add.w	r3, r7, #12
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f004 fda3 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	4a22      	ldr	r2, [pc, #136]	@ (800cfe0 <MlmeConfirm+0x104>)
 800cf56:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cf58:	4822      	ldr	r0, [pc, #136]	@ (800cfe4 <MlmeConfirm+0x108>)
 800cf5a:	f7ff fee5 	bl	800cd28 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	785b      	ldrb	r3, [r3, #1]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d108      	bne.n	800cf78 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cf66:	4b20      	ldr	r3, [pc, #128]	@ (800cfe8 <MlmeConfirm+0x10c>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cf6c:	4b1f      	ldr	r3, [pc, #124]	@ (800cfec <MlmeConfirm+0x110>)
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff fe31 	bl	800cbd8 <LmHandlerRequestClass>
 800cf76:	e002      	b.n	800cf7e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cf78:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe8 <MlmeConfirm+0x10c>)
 800cf7a:	22ff      	movs	r2, #255	@ 0xff
 800cf7c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cf7e:	4b17      	ldr	r3, [pc, #92]	@ (800cfdc <MlmeConfirm+0x100>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf84:	4818      	ldr	r0, [pc, #96]	@ (800cfe8 <MlmeConfirm+0x10c>)
 800cf86:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	785b      	ldrb	r3, [r3, #1]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d11d      	bne.n	800cfcc <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800cf90:	f7ff f896 	bl	800c0c0 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800cf94:	e01a      	b.n	800cfcc <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800cf96:	4b16      	ldr	r3, [pc, #88]	@ (800cff0 <MlmeConfirm+0x114>)
 800cf98:	2201      	movs	r2, #1
 800cf9a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7a1a      	ldrb	r2, [r3, #8]
 800cfa0:	4b13      	ldr	r3, [pc, #76]	@ (800cff0 <MlmeConfirm+0x114>)
 800cfa2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7a5a      	ldrb	r2, [r3, #9]
 800cfa8:	4b11      	ldr	r3, [pc, #68]	@ (800cff0 <MlmeConfirm+0x114>)
 800cfaa:	74da      	strb	r2, [r3, #19]
        }
        break;
 800cfac:	e00f      	b.n	800cfce <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	785b      	ldrb	r3, [r3, #1]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d105      	bne.n	800cfc2 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cfec <MlmeConfirm+0x110>)
 800cfb8:	7b1b      	ldrb	r3, [r3, #12]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fe00 	bl	800cbc0 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800cfc0:	e005      	b.n	800cfce <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800cfc2:	f7ff fde1 	bl	800cb88 <LmHandlerDeviceTimeReq>
        break;
 800cfc6:	e002      	b.n	800cfce <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cfc8:	bf00      	nop
 800cfca:	e000      	b.n	800cfce <MlmeConfirm+0xf2>
        break;
 800cfcc:	bf00      	nop
    }
}
 800cfce:	bf00      	nop
 800cfd0:	3730      	adds	r7, #48	@ 0x30
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20000098 	.word	0x20000098
 800cfdc:	2000075c 	.word	0x2000075c
 800cfe0:	20000078 	.word	0x20000078
 800cfe4:	20000094 	.word	0x20000094
 800cfe8:	20000090 	.word	0x20000090
 800cfec:	20000748 	.word	0x20000748
 800cff0:	200000b4 	.word	0x200000b4

0800cff4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cffe:	4b24      	ldr	r3, [pc, #144]	@ (800d090 <MlmeIndication+0x9c>)
 800d000:	2200      	movs	r2, #0
 800d002:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	785a      	ldrb	r2, [r3, #1]
 800d008:	4b21      	ldr	r3, [pc, #132]	@ (800d090 <MlmeIndication+0x9c>)
 800d00a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	789b      	ldrb	r3, [r3, #2]
 800d010:	b25a      	sxtb	r2, r3
 800d012:	4b1f      	ldr	r3, [pc, #124]	@ (800d090 <MlmeIndication+0x9c>)
 800d014:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d01c:	b25a      	sxtb	r2, r3
 800d01e:	4b1c      	ldr	r3, [pc, #112]	@ (800d090 <MlmeIndication+0x9c>)
 800d020:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d028:	4b19      	ldr	r3, [pc, #100]	@ (800d090 <MlmeIndication+0x9c>)
 800d02a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	78da      	ldrb	r2, [r3, #3]
 800d030:	4b17      	ldr	r3, [pc, #92]	@ (800d090 <MlmeIndication+0x9c>)
 800d032:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	4a15      	ldr	r2, [pc, #84]	@ (800d090 <MlmeIndication+0x9c>)
 800d03a:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b0a      	cmp	r3, #10
 800d042:	d009      	beq.n	800d058 <MlmeIndication+0x64>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b0e      	cmp	r3, #14
 800d04a:	d005      	beq.n	800d058 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d04c:	4b11      	ldr	r3, [pc, #68]	@ (800d094 <MlmeIndication+0xa0>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d052:	490f      	ldr	r1, [pc, #60]	@ (800d090 <MlmeIndication+0x9c>)
 800d054:	2000      	movs	r0, #0
 800d056:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d058:	6879      	ldr	r1, [r7, #4]
 800d05a:	2003      	movs	r0, #3
 800d05c:	f000 f896 	bl	800d18c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b0e      	cmp	r3, #14
 800d066:	d00a      	beq.n	800d07e <MlmeIndication+0x8a>
 800d068:	2b0e      	cmp	r3, #14
 800d06a:	dc0a      	bgt.n	800d082 <MlmeIndication+0x8e>
 800d06c:	2b06      	cmp	r3, #6
 800d06e:	d002      	beq.n	800d076 <MlmeIndication+0x82>
 800d070:	2b0a      	cmp	r3, #10
 800d072:	d008      	beq.n	800d086 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d074:	e005      	b.n	800d082 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d076:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <MlmeIndication+0xa4>)
 800d078:	2201      	movs	r2, #1
 800d07a:	701a      	strb	r2, [r3, #0]
        break;
 800d07c:	e004      	b.n	800d088 <MlmeIndication+0x94>
        break;
 800d07e:	bf00      	nop
 800d080:	e002      	b.n	800d088 <MlmeIndication+0x94>
        break;
 800d082:	bf00      	nop
 800d084:	e000      	b.n	800d088 <MlmeIndication+0x94>
        break;
 800d086:	bf00      	nop
    }
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	200000b4 	.word	0x200000b4
 800d094:	2000075c 	.word	0x2000075c
 800d098:	20000788 	.word	0x20000788

0800d09c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	6039      	str	r1, [r7, #0]
 800d0a6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d103      	bne.n	800d0ba <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d0b2:	f000 fa1d 	bl	800d4f0 <LmhpCompliancePackageFactory>
 800d0b6:	60f8      	str	r0, [r7, #12]
            break;
 800d0b8:	e000      	b.n	800d0bc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d0ba:	bf00      	nop
        }
    }
    if( package != NULL )
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d035      	beq.n	800d12e <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	491d      	ldr	r1, [pc, #116]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d140 <LmHandlerPackageRegister+0xa4>)
 800d0d6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d144 <LmHandlerPackageRegister+0xa8>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	4917      	ldr	r1, [pc, #92]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d0e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d0e6:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d0e8:	4b16      	ldr	r3, [pc, #88]	@ (800d144 <LmHandlerPackageRegister+0xa8>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	4913      	ldr	r1, [pc, #76]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d0f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d0f6:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	4a10      	ldr	r2, [pc, #64]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	4a11      	ldr	r2, [pc, #68]	@ (800d148 <LmHandlerPackageRegister+0xac>)
 800d102:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d104:	4b0f      	ldr	r3, [pc, #60]	@ (800d144 <LmHandlerPackageRegister+0xa8>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	490c      	ldr	r1, [pc, #48]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d10c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d110:	6992      	ldr	r2, [r2, #24]
 800d112:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	4a09      	ldr	r2, [pc, #36]	@ (800d13c <LmHandlerPackageRegister+0xa0>)
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	4a0b      	ldr	r2, [pc, #44]	@ (800d14c <LmHandlerPackageRegister+0xb0>)
 800d120:	6851      	ldr	r1, [r2, #4]
 800d122:	4a0a      	ldr	r2, [pc, #40]	@ (800d14c <LmHandlerPackageRegister+0xb0>)
 800d124:	7852      	ldrb	r2, [r2, #1]
 800d126:	6838      	ldr	r0, [r7, #0]
 800d128:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d12a:	2300      	movs	r3, #0
 800d12c:	e001      	b.n	800d132 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d12e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20000734 	.word	0x20000734
 800d140:	0800c8c1 	.word	0x0800c8c1
 800d144:	2000075c 	.word	0x2000075c
 800d148:	0800cb89 	.word	0x0800cb89
 800d14c:	200000c8 	.word	0x200000c8

0800d150 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d80e      	bhi.n	800d17e <LmHandlerPackageIsInitialized+0x2e>
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	4a09      	ldr	r2, [pc, #36]	@ (800d188 <LmHandlerPackageIsInitialized+0x38>)
 800d164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	4a05      	ldr	r2, [pc, #20]	@ (800d188 <LmHandlerPackageIsInitialized+0x38>)
 800d172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	4798      	blx	r3
 800d17a:	4603      	mov	r3, r0
 800d17c:	e000      	b.n	800d180 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d17e:	2300      	movs	r3, #0
    }
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000734 	.word	0x20000734

0800d18c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	4603      	mov	r3, r0
 800d194:	6039      	str	r1, [r7, #0]
 800d196:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]
 800d19c:	e067      	b.n	800d26e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1a2:	4a37      	ldr	r2, [pc, #220]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d05a      	beq.n	800d262 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d84e      	bhi.n	800d250 <LmHandlerPackagesNotify+0xc4>
 800d1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b8 <LmHandlerPackagesNotify+0x2c>)
 800d1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b8:	0800d1c9 	.word	0x0800d1c9
 800d1bc:	0800d1eb 	.word	0x0800d1eb
 800d1c0:	0800d20d 	.word	0x0800d20d
 800d1c4:	0800d22f 	.word	0x0800d22f
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1cc:	4a2c      	ldr	r2, [pc, #176]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d2:	699b      	ldr	r3, [r3, #24]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d03d      	beq.n	800d254 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d1d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1dc:	4a28      	ldr	r2, [pc, #160]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	6838      	ldr	r0, [r7, #0]
 800d1e6:	4798      	blx	r3
                    }
                    break;
 800d1e8:	e034      	b.n	800d254 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ee:	4a24      	ldr	r2, [pc, #144]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d02e      	beq.n	800d258 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1fe:	4a20      	ldr	r2, [pc, #128]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	6838      	ldr	r0, [r7, #0]
 800d208:	4798      	blx	r3
                    }
                    break;
 800d20a:	e025      	b.n	800d258 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d210:	4a1b      	ldr	r2, [pc, #108]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d01f      	beq.n	800d25c <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d220:	4a17      	ldr	r2, [pc, #92]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	6838      	ldr	r0, [r7, #0]
 800d22a:	4798      	blx	r3
                    }
                    break;
 800d22c:	e016      	b.n	800d25c <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d232:	4a13      	ldr	r2, [pc, #76]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d242:	4a0f      	ldr	r2, [pc, #60]	@ (800d280 <LmHandlerPackagesNotify+0xf4>)
 800d244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24a:	6838      	ldr	r0, [r7, #0]
 800d24c:	4798      	blx	r3
                    }
                    break;
 800d24e:	e007      	b.n	800d260 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800d250:	bf00      	nop
 800d252:	e006      	b.n	800d262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d254:	bf00      	nop
 800d256:	e004      	b.n	800d262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d258:	bf00      	nop
 800d25a:	e002      	b.n	800d262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d25c:	bf00      	nop
 800d25e:	e000      	b.n	800d262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d260:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	3301      	adds	r3, #1
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	73fb      	strb	r3, [r7, #15]
 800d26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d272:	2b04      	cmp	r3, #4
 800d274:	dd93      	ble.n	800d19e <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800d276:	bf00      	nop
 800d278:	bf00      	nop
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20000734 	.word	0x20000734

0800d284 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d28a:	2300      	movs	r3, #0
 800d28c:	71fb      	strb	r3, [r7, #7]
 800d28e:	e018      	b.n	800d2c2 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d294:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d4 <LmHandlerPackageIsTxPending+0x50>)
 800d296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d2d4 <LmHandlerPackageIsTxPending+0x50>)
 800d2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	4798      	blx	r3
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e00a      	b.n	800d2cc <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	3301      	adds	r3, #1
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	71fb      	strb	r3, [r7, #7]
 800d2c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	dde2      	ble.n	800d290 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	20000734 	.word	0x20000734

0800d2d8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2de:	2300      	movs	r3, #0
 800d2e0:	71fb      	strb	r3, [r7, #7]
 800d2e2:	e022      	b.n	800d32a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d2e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2e8:	4a14      	ldr	r2, [pc, #80]	@ (800d33c <LmHandlerPackagesProcess+0x64>)
 800d2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d015      	beq.n	800d31e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2f6:	4a11      	ldr	r2, [pc, #68]	@ (800d33c <LmHandlerPackagesProcess+0x64>)
 800d2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2fc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00d      	beq.n	800d31e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff ff23 	bl	800d150 <LmHandlerPackageIsInitialized>
 800d30a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d006      	beq.n	800d31e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d314:	4a09      	ldr	r2, [pc, #36]	@ (800d33c <LmHandlerPackagesProcess+0x64>)
 800d316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d31e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	3301      	adds	r3, #1
 800d326:	b2db      	uxtb	r3, r3
 800d328:	71fb      	strb	r3, [r7, #7]
 800d32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d32e:	2b04      	cmp	r3, #4
 800d330:	ddd8      	ble.n	800d2e4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d332:	bf00      	nop
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	20000734 	.word	0x20000734

0800d340 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d352:	f04f 33ff 	mov.w	r3, #4294967295
 800d356:	e00e      	b.n	800d376 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <LmHandlerGetVersion+0x24>
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d004      	beq.n	800d36c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d362:	e007      	b.n	800d374 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	4a06      	ldr	r2, [pc, #24]	@ (800d380 <LmHandlerGetVersion+0x40>)
 800d368:	601a      	str	r2, [r3, #0]
            break;
 800d36a:	e003      	b.n	800d374 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	4a05      	ldr	r2, [pc, #20]	@ (800d384 <LmHandlerGetVersion+0x44>)
 800d370:	601a      	str	r2, [r3, #0]
            break;
 800d372:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bc80      	pop	{r7}
 800d37e:	4770      	bx	lr
 800d380:	01000400 	.word	0x01000400
 800d384:	02010001 	.word	0x02010001

0800d388 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d38c:	f005 fb76 	bl	8012a7c <LoRaMacDeInitialization>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d396:	2300      	movs	r3, #0
 800d398:	e001      	b.n	800d39e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d39a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d3a6:	f004 faaf 	bl	8011908 <LoRaMacHalt>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	e001      	b.n	800d3b8 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d3b4:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08e      	sub	sp, #56	@ 0x38
 800d3c0:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d3cc:	f7ff ffe9 	bl	800d3a2 <LmHandlerHalt>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d3d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d12f      	bne.n	800d43e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d3de:	f000 f859 	bl	800d494 <NvmDataMgmtStoreBegin>
 800d3e2:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	f113 0f02 	cmn.w	r3, #2
 800d3ea:	d103      	bne.n	800d3f4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d3ec:	23f8      	movs	r3, #248	@ 0xf8
 800d3ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d3f2:	e01c      	b.n	800d42e <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d104      	bne.n	800d404 <LmHandlerNvmDataStore+0x48>
 800d3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d468 <LmHandlerNvmDataStore+0xac>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d103      	bne.n	800d40c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d404:	23ff      	movs	r3, #255	@ 0xff
 800d406:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d40a:	e010      	b.n	800d42e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d40c:	2327      	movs	r3, #39	@ 0x27
 800d40e:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d410:	1d3b      	adds	r3, r7, #4
 800d412:	4618      	mov	r0, r3
 800d414:	f004 fb40 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d41c:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800d420:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d422:	4b11      	ldr	r3, [pc, #68]	@ (800d468 <LmHandlerNvmDataStore+0xac>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d42a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d42c:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d42e:	f000 f847 	bl	800d4c0 <NvmDataMgmtStoreEnd>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d438:	23ff      	movs	r3, #255	@ 0xff
 800d43a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d43e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d442:	2b00      	cmp	r3, #0
 800d444:	d109      	bne.n	800d45a <LmHandlerNvmDataStore+0x9e>
 800d446:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <LmHandlerNvmDataStore+0xac>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69db      	ldr	r3, [r3, #28]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d450:	4b05      	ldr	r3, [pc, #20]	@ (800d468 <LmHandlerNvmDataStore+0xac>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	2001      	movs	r0, #1
 800d458:	4798      	blx	r3
    }

    return lmhStatus;
 800d45a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3738      	adds	r7, #56	@ 0x38
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	2000075c 	.word	0x2000075c

0800d46c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d476:	4b06      	ldr	r3, [pc, #24]	@ (800d490 <NvmDataMgmtEvent+0x24>)
 800d478:	881a      	ldrh	r2, [r3, #0]
 800d47a:	88fb      	ldrh	r3, [r7, #6]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	b29a      	uxth	r2, r3
 800d480:	4b03      	ldr	r3, [pc, #12]	@ (800d490 <NvmDataMgmtEvent+0x24>)
 800d482:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	bc80      	pop	{r7}
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	20000880 	.word	0x20000880

0800d494 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d498:	4b08      	ldr	r3, [pc, #32]	@ (800d4bc <NvmDataMgmtStoreBegin+0x28>)
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d4a0:	f06f 0301 	mvn.w	r3, #1
 800d4a4:	e008      	b.n	800d4b8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d4a6:	f004 fa13 	bl	80118d0 <LoRaMacStop>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d4b0:	f06f 0302 	mvn.w	r3, #2
 800d4b4:	e000      	b.n	800d4b8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d4b6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20000880 	.word	0x20000880

0800d4c0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d4c4:	4b03      	ldr	r3, [pc, #12]	@ (800d4d4 <NvmDataMgmtStoreEnd+0x14>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d4ca:	f004 f9f3 	bl	80118b4 <LoRaMacStart>
    return NVM_DATA_OK;
 800d4ce:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20000880 	.word	0x20000880

0800d4d8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d4dc:	2220      	movs	r2, #32
 800d4de:	2100      	movs	r1, #0
 800d4e0:	4802      	ldr	r0, [pc, #8]	@ (800d4ec <ClassBStatusReset+0x14>)
 800d4e2:	f009 fe0f 	bl	8017104 <memset1>
}
 800d4e6:	bf00      	nop
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20000898 	.word	0x20000898

0800d4f0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d4f4:	4b02      	ldr	r3, [pc, #8]	@ (800d500 <LmhpCompliancePackageFactory+0x10>)
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bc80      	pop	{r7}
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	200000d0 	.word	0x200000d0

0800d504 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af02      	add	r7, sp, #8
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d018      	beq.n	800d54a <LmhpComplianceInit+0x46>
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d015      	beq.n	800d54a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d51e:	4a19      	ldr	r2, [pc, #100]	@ (800d584 <LmhpComplianceInit+0x80>)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d524:	4a18      	ldr	r2, [pc, #96]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d52a:	4a17      	ldr	r2, [pc, #92]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d530:	4b15      	ldr	r3, [pc, #84]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d532:	2201      	movs	r2, #1
 800d534:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d536:	2300      	movs	r3, #0
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	4b14      	ldr	r3, [pc, #80]	@ (800d58c <LmhpComplianceInit+0x88>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	f04f 31ff 	mov.w	r1, #4294967295
 800d542:	4813      	ldr	r0, [pc, #76]	@ (800d590 <LmhpComplianceInit+0x8c>)
 800d544:	f00d fe4c 	bl	801b1e0 <UTIL_TIMER_Create>
 800d548:	e005      	b.n	800d556 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d54a:	4b0e      	ldr	r3, [pc, #56]	@ (800d584 <LmhpComplianceInit+0x80>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d550:	4b0d      	ldr	r3, [pc, #52]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d552:	2200      	movs	r2, #0
 800d554:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d556:	4b0c      	ldr	r3, [pc, #48]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d558:	2200      	movs	r2, #0
 800d55a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d55c:	f7ff ffbc 	bl	800d4d8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d560:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d562:	2200      	movs	r2, #0
 800d564:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d566:	4b08      	ldr	r3, [pc, #32]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d568:	2200      	movs	r2, #0
 800d56a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d56c:	4b06      	ldr	r3, [pc, #24]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d574:	4b04      	ldr	r3, [pc, #16]	@ (800d588 <LmhpComplianceInit+0x84>)
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d57c:	bf00      	nop
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	200008bc 	.word	0x200008bc
 800d588:	20000884 	.word	0x20000884
 800d58c:	0800de79 	.word	0x0800de79
 800d590:	200008c0 	.word	0x200008c0

0800d594 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d594:	b480      	push	{r7}
 800d596:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d598:	4b02      	ldr	r3, [pc, #8]	@ (800d5a4 <LmhpComplianceIsInitialized+0x10>)
 800d59a:	781b      	ldrb	r3, [r3, #0]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bc80      	pop	{r7}
 800d5a2:	4770      	bx	lr
 800d5a4:	20000884 	.word	0x20000884

0800d5a8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d5ac:	4b02      	ldr	r3, [pc, #8]	@ (800d5b8 <LmhpComplianceIsTxPending+0x10>)
 800d5ae:	785b      	ldrb	r3, [r3, #1]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bc80      	pop	{r7}
 800d5b6:	4770      	bx	lr
 800d5b8:	20000884 	.word	0x20000884

0800d5bc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d5bc:	b590      	push	{r4, r7, lr}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d5c2:	4b33      	ldr	r3, [pc, #204]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d03f      	beq.n	800d64a <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d5ca:	f00d ffc7 	bl	801b55c <UTIL_TIMER_GetCurrentTime>
 800d5ce:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d5d0:	4b2f      	ldr	r3, [pc, #188]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d5d2:	685c      	ldr	r4, [r3, #4]
 800d5d4:	f7ff f96a 	bl	800c8ac <LmHandlerGetDutyCycleWaitTime>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	4423      	add	r3, r4
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d942      	bls.n	800d668 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d5e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d5e4:	7a9b      	ldrb	r3, [r3, #10]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d03e      	beq.n	800d668 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d5ea:	23e0      	movs	r3, #224	@ 0xe0
 800d5ec:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d5ee:	4b28      	ldr	r3, [pc, #160]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d5f0:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d5f2:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d5f4:	4b26      	ldr	r3, [pc, #152]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d5f6:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d5f8:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d5fa:	23ff      	movs	r3, #255	@ 0xff
 800d5fc:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d5fe:	4b24      	ldr	r3, [pc, #144]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d600:	7a19      	ldrb	r1, [r3, #8]
 800d602:	463b      	mov	r3, r7
 800d604:	2201      	movs	r2, #1
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff f9f8 	bl	800c9fc <LmHandlerSend>
 800d60c:	4603      	mov	r3, r0
 800d60e:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d610:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d614:	f113 0f02 	cmn.w	r3, #2
 800d618:	d004      	beq.n	800d624 <LmhpComplianceProcess+0x68>
 800d61a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d61e:	f113 0f06 	cmn.w	r3, #6
 800d622:	d108      	bne.n	800d636 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d624:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d628:	481a      	ldr	r0, [pc, #104]	@ (800d694 <LmhpComplianceProcess+0xd8>)
 800d62a:	f00d feed 	bl	801b408 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d62e:	4819      	ldr	r0, [pc, #100]	@ (800d694 <LmhpComplianceProcess+0xd8>)
 800d630:	f00d fe0c 	bl	801b24c <UTIL_TIMER_Start>
 800d634:	e005      	b.n	800d642 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d636:	4b16      	ldr	r3, [pc, #88]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d638:	2200      	movs	r2, #0
 800d63a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d63c:	4b14      	ldr	r3, [pc, #80]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d63e:	2200      	movs	r2, #0
 800d640:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d642:	4a13      	ldr	r2, [pc, #76]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6053      	str	r3, [r2, #4]
 800d648:	e00e      	b.n	800d668 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d64a:	4b11      	ldr	r3, [pc, #68]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d64c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d654:	4b0e      	ldr	r3, [pc, #56]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d65c:	4b0c      	ldr	r3, [pc, #48]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d65e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fab8 	bl	800cbd8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d668:	4b09      	ldr	r3, [pc, #36]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d66a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d672:	4b07      	ldr	r3, [pc, #28]	@ (800d690 <LmhpComplianceProcess+0xd4>)
 800d674:	2200      	movs	r2, #0
 800d676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d67a:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <LmhpComplianceProcess+0xdc>)
 800d67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d682:	4b05      	ldr	r3, [pc, #20]	@ (800d698 <LmhpComplianceProcess+0xdc>)
 800d684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d686:	4798      	blx	r3
        }
    }
}
 800d688:	bf00      	nop
 800d68a:	3714      	adds	r7, #20
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd90      	pop	{r4, r7, pc}
 800d690:	20000884 	.word	0x20000884
 800d694:	200008c0 	.word	0x200008c0
 800d698:	200000d0 	.word	0x200000d0

0800d69c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d69c:	b5b0      	push	{r4, r5, r7, lr}
 800d69e:	b0a4      	sub	sp, #144	@ 0x90
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d6aa:	4bce      	ldr	r3, [pc, #824]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	f083 0301 	eor.w	r3, r3, #1
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f040 83b5 	bne.w	800de24 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	78db      	ldrb	r3, [r3, #3]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d103      	bne.n	800d6ca <LmhpComplianceOnMcpsIndication+0x2e>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	7b9b      	ldrb	r3, [r3, #14]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d6ca:	4bc6      	ldr	r3, [pc, #792]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d6cc:	8a1b      	ldrh	r3, [r3, #16]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	4bc4      	ldr	r3, [pc, #784]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d6d4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7b5b      	ldrb	r3, [r3, #13]
 800d6da:	f083 0301 	eor.w	r3, r3, #1
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f040 83a1 	bne.w	800de28 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	78db      	ldrb	r3, [r3, #3]
 800d6ea:	2be0      	cmp	r3, #224	@ 0xe0
 800d6ec:	f040 839e 	bne.w	800de2c <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d6f0:	4bbc      	ldr	r3, [pc, #752]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	689a      	ldr	r2, [r3, #8]
 800d6fa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d6fe:	1c59      	adds	r1, r3, #1
 800d700:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d704:	4413      	add	r3, r2
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b7f      	cmp	r3, #127	@ 0x7f
 800d70a:	f200 836e 	bhi.w	800ddea <LmhpComplianceOnMcpsIndication+0x74e>
 800d70e:	a201      	add	r2, pc, #4	@ (adr r2, 800d714 <LmhpComplianceOnMcpsIndication+0x78>)
 800d710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d714:	0800d915 	.word	0x0800d915
 800d718:	0800d959 	.word	0x0800d959
 800d71c:	0800d963 	.word	0x0800d963
 800d720:	0800d96f 	.word	0x0800d96f
 800d724:	0800d991 	.word	0x0800d991
 800d728:	0800d9bf 	.word	0x0800d9bf
 800d72c:	0800d9ed 	.word	0x0800d9ed
 800d730:	0800da4b 	.word	0x0800da4b
 800d734:	0800daa3 	.word	0x0800daa3
 800d738:	0800db0f 	.word	0x0800db0f
 800d73c:	0800db5f 	.word	0x0800db5f
 800d740:	0800ddeb 	.word	0x0800ddeb
 800d744:	0800ddeb 	.word	0x0800ddeb
 800d748:	0800ddeb 	.word	0x0800ddeb
 800d74c:	0800ddeb 	.word	0x0800ddeb
 800d750:	0800ddeb 	.word	0x0800ddeb
 800d754:	0800ddeb 	.word	0x0800ddeb
 800d758:	0800ddeb 	.word	0x0800ddeb
 800d75c:	0800ddeb 	.word	0x0800ddeb
 800d760:	0800ddeb 	.word	0x0800ddeb
 800d764:	0800ddeb 	.word	0x0800ddeb
 800d768:	0800ddeb 	.word	0x0800ddeb
 800d76c:	0800ddeb 	.word	0x0800ddeb
 800d770:	0800ddeb 	.word	0x0800ddeb
 800d774:	0800ddeb 	.word	0x0800ddeb
 800d778:	0800ddeb 	.word	0x0800ddeb
 800d77c:	0800ddeb 	.word	0x0800ddeb
 800d780:	0800ddeb 	.word	0x0800ddeb
 800d784:	0800ddeb 	.word	0x0800ddeb
 800d788:	0800ddeb 	.word	0x0800ddeb
 800d78c:	0800ddeb 	.word	0x0800ddeb
 800d790:	0800ddeb 	.word	0x0800ddeb
 800d794:	0800db67 	.word	0x0800db67
 800d798:	0800db79 	.word	0x0800db79
 800d79c:	0800db81 	.word	0x0800db81
 800d7a0:	0800ddeb 	.word	0x0800ddeb
 800d7a4:	0800ddeb 	.word	0x0800ddeb
 800d7a8:	0800ddeb 	.word	0x0800ddeb
 800d7ac:	0800ddeb 	.word	0x0800ddeb
 800d7b0:	0800ddeb 	.word	0x0800ddeb
 800d7b4:	0800ddeb 	.word	0x0800ddeb
 800d7b8:	0800ddeb 	.word	0x0800ddeb
 800d7bc:	0800ddeb 	.word	0x0800ddeb
 800d7c0:	0800ddeb 	.word	0x0800ddeb
 800d7c4:	0800ddeb 	.word	0x0800ddeb
 800d7c8:	0800ddeb 	.word	0x0800ddeb
 800d7cc:	0800ddeb 	.word	0x0800ddeb
 800d7d0:	0800ddeb 	.word	0x0800ddeb
 800d7d4:	0800ddeb 	.word	0x0800ddeb
 800d7d8:	0800ddeb 	.word	0x0800ddeb
 800d7dc:	0800ddeb 	.word	0x0800ddeb
 800d7e0:	0800ddeb 	.word	0x0800ddeb
 800d7e4:	0800ddeb 	.word	0x0800ddeb
 800d7e8:	0800ddeb 	.word	0x0800ddeb
 800d7ec:	0800ddeb 	.word	0x0800ddeb
 800d7f0:	0800ddeb 	.word	0x0800ddeb
 800d7f4:	0800ddeb 	.word	0x0800ddeb
 800d7f8:	0800ddeb 	.word	0x0800ddeb
 800d7fc:	0800ddeb 	.word	0x0800ddeb
 800d800:	0800ddeb 	.word	0x0800ddeb
 800d804:	0800ddeb 	.word	0x0800ddeb
 800d808:	0800ddeb 	.word	0x0800ddeb
 800d80c:	0800ddeb 	.word	0x0800ddeb
 800d810:	0800ddeb 	.word	0x0800ddeb
 800d814:	0800ddeb 	.word	0x0800ddeb
 800d818:	0800ddeb 	.word	0x0800ddeb
 800d81c:	0800ddeb 	.word	0x0800ddeb
 800d820:	0800ddeb 	.word	0x0800ddeb
 800d824:	0800ddeb 	.word	0x0800ddeb
 800d828:	0800ddeb 	.word	0x0800ddeb
 800d82c:	0800ddeb 	.word	0x0800ddeb
 800d830:	0800ddeb 	.word	0x0800ddeb
 800d834:	0800ddeb 	.word	0x0800ddeb
 800d838:	0800ddeb 	.word	0x0800ddeb
 800d83c:	0800ddeb 	.word	0x0800ddeb
 800d840:	0800ddeb 	.word	0x0800ddeb
 800d844:	0800ddeb 	.word	0x0800ddeb
 800d848:	0800ddeb 	.word	0x0800ddeb
 800d84c:	0800ddeb 	.word	0x0800ddeb
 800d850:	0800ddeb 	.word	0x0800ddeb
 800d854:	0800ddeb 	.word	0x0800ddeb
 800d858:	0800ddeb 	.word	0x0800ddeb
 800d85c:	0800ddeb 	.word	0x0800ddeb
 800d860:	0800ddeb 	.word	0x0800ddeb
 800d864:	0800ddeb 	.word	0x0800ddeb
 800d868:	0800ddeb 	.word	0x0800ddeb
 800d86c:	0800ddeb 	.word	0x0800ddeb
 800d870:	0800ddeb 	.word	0x0800ddeb
 800d874:	0800ddeb 	.word	0x0800ddeb
 800d878:	0800ddeb 	.word	0x0800ddeb
 800d87c:	0800ddeb 	.word	0x0800ddeb
 800d880:	0800ddeb 	.word	0x0800ddeb
 800d884:	0800ddeb 	.word	0x0800ddeb
 800d888:	0800ddeb 	.word	0x0800ddeb
 800d88c:	0800ddeb 	.word	0x0800ddeb
 800d890:	0800ddeb 	.word	0x0800ddeb
 800d894:	0800ddeb 	.word	0x0800ddeb
 800d898:	0800ddeb 	.word	0x0800ddeb
 800d89c:	0800ddeb 	.word	0x0800ddeb
 800d8a0:	0800ddeb 	.word	0x0800ddeb
 800d8a4:	0800ddeb 	.word	0x0800ddeb
 800d8a8:	0800ddeb 	.word	0x0800ddeb
 800d8ac:	0800ddeb 	.word	0x0800ddeb
 800d8b0:	0800ddeb 	.word	0x0800ddeb
 800d8b4:	0800ddeb 	.word	0x0800ddeb
 800d8b8:	0800ddeb 	.word	0x0800ddeb
 800d8bc:	0800ddeb 	.word	0x0800ddeb
 800d8c0:	0800ddeb 	.word	0x0800ddeb
 800d8c4:	0800ddeb 	.word	0x0800ddeb
 800d8c8:	0800ddeb 	.word	0x0800ddeb
 800d8cc:	0800ddeb 	.word	0x0800ddeb
 800d8d0:	0800ddeb 	.word	0x0800ddeb
 800d8d4:	0800ddeb 	.word	0x0800ddeb
 800d8d8:	0800ddeb 	.word	0x0800ddeb
 800d8dc:	0800ddeb 	.word	0x0800ddeb
 800d8e0:	0800ddeb 	.word	0x0800ddeb
 800d8e4:	0800ddeb 	.word	0x0800ddeb
 800d8e8:	0800ddeb 	.word	0x0800ddeb
 800d8ec:	0800ddeb 	.word	0x0800ddeb
 800d8f0:	0800ddeb 	.word	0x0800ddeb
 800d8f4:	0800ddeb 	.word	0x0800ddeb
 800d8f8:	0800ddeb 	.word	0x0800ddeb
 800d8fc:	0800ddeb 	.word	0x0800ddeb
 800d900:	0800ddeb 	.word	0x0800ddeb
 800d904:	0800ddeb 	.word	0x0800ddeb
 800d908:	0800dbb3 	.word	0x0800dbb3
 800d90c:	0800dc65 	.word	0x0800dc65
 800d910:	0800dc95 	.word	0x0800dc95
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d914:	4b33      	ldr	r3, [pc, #204]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	4b32      	ldr	r3, [pc, #200]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d91a:	7a9b      	ldrb	r3, [r3, #10]
 800d91c:	1c59      	adds	r1, r3, #1
 800d91e:	b2c8      	uxtb	r0, r1
 800d920:	4930      	ldr	r1, [pc, #192]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d922:	7288      	strb	r0, [r1, #10]
 800d924:	4413      	add	r3, r2
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d92a:	4b2e      	ldr	r3, [pc, #184]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	4b2d      	ldr	r3, [pc, #180]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d930:	7a9b      	ldrb	r3, [r3, #10]
 800d932:	1c59      	adds	r1, r3, #1
 800d934:	b2c8      	uxtb	r0, r1
 800d936:	492b      	ldr	r1, [pc, #172]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d938:	7288      	strb	r0, [r1, #10]
 800d93a:	4413      	add	r3, r2
 800d93c:	2206      	movs	r2, #6
 800d93e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d940:	4b28      	ldr	r3, [pc, #160]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d942:	68da      	ldr	r2, [r3, #12]
 800d944:	4b27      	ldr	r3, [pc, #156]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d946:	7a9b      	ldrb	r3, [r3, #10]
 800d948:	1c59      	adds	r1, r3, #1
 800d94a:	b2c8      	uxtb	r0, r1
 800d94c:	4925      	ldr	r1, [pc, #148]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d94e:	7288      	strb	r0, [r1, #10]
 800d950:	4413      	add	r3, r2
 800d952:	2201      	movs	r2, #1
 800d954:	701a      	strb	r2, [r3, #0]
        break;
 800d956:	e251      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d958:	4b22      	ldr	r3, [pc, #136]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d960:	e24c      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d962:	4b21      	ldr	r3, [pc, #132]	@ (800d9e8 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d966:	2101      	movs	r1, #1
 800d968:	2002      	movs	r0, #2
 800d96a:	4798      	blx	r3
        break;
 800d96c:	e246      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	689a      	ldr	r2, [r3, #8]
 800d972:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d976:	1c59      	adds	r1, r3, #1
 800d978:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d97c:	4413      	add	r3, r2
 800d97e:	781a      	ldrb	r2, [r3, #0]
 800d980:	4b18      	ldr	r3, [pc, #96]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d982:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d986:	4b17      	ldr	r3, [pc, #92]	@ (800d9e4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d98e:	e235      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d990:	2304      	movs	r3, #4
 800d992:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	689a      	ldr	r2, [r3, #8]
 800d998:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d99c:	1c59      	adds	r1, r3, #1
 800d99e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d9a2:	4413      	add	r3, r2
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf14      	ite	ne
 800d9aa:	2301      	movne	r3, #1
 800d9ac:	2300      	moveq	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f004 fa14 	bl	8011de4 <LoRaMacMibSetRequestConfirm>
        break;
 800d9bc:	e21e      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689a      	ldr	r2, [r3, #8]
 800d9c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d9c6:	1c59      	adds	r1, r3, #1
 800d9c8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d9cc:	4413      	add	r3, r2
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	bf14      	ite	ne
 800d9d4:	2301      	movne	r3, #1
 800d9d6:	2300      	moveq	r3, #0
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f005 f830 	bl	8012a40 <LoRaMacTestSetDutyCycleOn>
        break;
 800d9e0:	e20c      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
 800d9e2:	bf00      	nop
 800d9e4:	20000884 	.word	0x20000884
 800d9e8:	200000d0 	.word	0x200000d0
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d9ec:	4ba5      	ldr	r3, [pc, #660]	@ (800dc84 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d9ee:	f107 040c 	add.w	r4, r7, #12
 800d9f2:	461d      	mov	r5, r3
 800d9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	689a      	ldr	r2, [r3, #8]
 800da08:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da0c:	1c59      	adds	r1, r3, #1
 800da0e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da12:	4413      	add	r3, r2
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800da1a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800da1e:	2b0a      	cmp	r3, #10
 800da20:	f200 81e5 	bhi.w	800ddee <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800da24:	4b98      	ldr	r3, [pc, #608]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 81df 	beq.w	800ddee <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800da30:	4b95      	ldr	r3, [pc, #596]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	3390      	adds	r3, #144	@ 0x90
 800da3e:	443b      	add	r3, r7
 800da40:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800da44:	4618      	mov	r0, r3
 800da46:	4790      	blx	r2
            }
        }
        break;
 800da48:	e1d1      	b.n	800ddee <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	689a      	ldr	r2, [r3, #8]
 800da4e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da52:	1c59      	adds	r1, r3, #1
 800da54:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da58:	4413      	add	r3, r2
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800da60:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da64:	2b01      	cmp	r3, #1
 800da66:	d004      	beq.n	800da72 <LmhpComplianceOnMcpsIndication+0x3d6>
 800da68:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	f040 81c0 	bne.w	800ddf2 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800da72:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da76:	2b01      	cmp	r3, #1
 800da78:	bf14      	ite	ne
 800da7a:	2301      	movne	r3, #1
 800da7c:	2300      	moveq	r3, #0
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	461a      	mov	r2, r3
 800da82:	4b82      	ldr	r3, [pc, #520]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da84:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800da86:	4b80      	ldr	r3, [pc, #512]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 81b0 	beq.w	800ddf2 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800da92:	4b7d      	ldr	r3, [pc, #500]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	4a7c      	ldr	r2, [pc, #496]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800da9a:	7a12      	ldrb	r2, [r2, #8]
 800da9c:	4610      	mov	r0, r2
 800da9e:	4798      	blx	r3
            }
        }
        break;
 800daa0:	e1a7      	b.n	800ddf2 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800daa2:	4b7a      	ldr	r3, [pc, #488]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	4b79      	ldr	r3, [pc, #484]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800daa8:	7a9b      	ldrb	r3, [r3, #10]
 800daaa:	1c59      	adds	r1, r3, #1
 800daac:	b2c8      	uxtb	r0, r1
 800daae:	4977      	ldr	r1, [pc, #476]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dab0:	7288      	strb	r0, [r1, #10]
 800dab2:	4413      	add	r3, r2
 800dab4:	2208      	movs	r2, #8
 800dab6:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dab8:	2301      	movs	r3, #1
 800daba:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800dabe:	e019      	b.n	800daf4 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dac8:	1c59      	adds	r1, r3, #1
 800daca:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dace:	4413      	add	r3, r2
 800dad0:	781a      	ldrb	r2, [r3, #0]
 800dad2:	4b6e      	ldr	r3, [pc, #440]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dad4:	68d9      	ldr	r1, [r3, #12]
 800dad6:	4b6d      	ldr	r3, [pc, #436]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dad8:	7a9b      	ldrb	r3, [r3, #10]
 800dada:	1c58      	adds	r0, r3, #1
 800dadc:	b2c4      	uxtb	r4, r0
 800dade:	486b      	ldr	r0, [pc, #428]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dae0:	7284      	strb	r4, [r0, #10]
 800dae2:	440b      	add	r3, r1
 800dae4:	3201      	adds	r2, #1
 800dae6:	b2d2      	uxtb	r2, r2
 800dae8:	701a      	strb	r2, [r3, #0]
             i++ )
 800daea:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800daee:	3301      	adds	r3, #1
 800daf0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800daf4:	4b65      	ldr	r3, [pc, #404]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800daf6:	7a5a      	ldrb	r2, [r3, #9]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7b1b      	ldrb	r3, [r3, #12]
 800dafc:	4293      	cmp	r3, r2
 800dafe:	bf28      	it	cs
 800db00:	4613      	movcs	r3, r2
 800db02:	b2db      	uxtb	r3, r3
 800db04:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800db08:	429a      	cmp	r2, r3
 800db0a:	d3d9      	bcc.n	800dac0 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800db0c:	e176      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800db0e:	4b5f      	ldr	r3, [pc, #380]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db10:	68da      	ldr	r2, [r3, #12]
 800db12:	4b5e      	ldr	r3, [pc, #376]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db14:	7a9b      	ldrb	r3, [r3, #10]
 800db16:	1c59      	adds	r1, r3, #1
 800db18:	b2c8      	uxtb	r0, r1
 800db1a:	495c      	ldr	r1, [pc, #368]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db1c:	7288      	strb	r0, [r1, #10]
 800db1e:	4413      	add	r3, r2
 800db20:	2209      	movs	r2, #9
 800db22:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800db24:	4b59      	ldr	r3, [pc, #356]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db26:	8a18      	ldrh	r0, [r3, #16]
 800db28:	4b58      	ldr	r3, [pc, #352]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db2a:	68da      	ldr	r2, [r3, #12]
 800db2c:	4b57      	ldr	r3, [pc, #348]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db2e:	7a9b      	ldrb	r3, [r3, #10]
 800db30:	1c59      	adds	r1, r3, #1
 800db32:	b2cc      	uxtb	r4, r1
 800db34:	4955      	ldr	r1, [pc, #340]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db36:	728c      	strb	r4, [r1, #10]
 800db38:	4413      	add	r3, r2
 800db3a:	b2c2      	uxtb	r2, r0
 800db3c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800db3e:	4b53      	ldr	r3, [pc, #332]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db40:	8a1b      	ldrh	r3, [r3, #16]
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	b298      	uxth	r0, r3
 800db46:	4b51      	ldr	r3, [pc, #324]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	4b50      	ldr	r3, [pc, #320]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db4c:	7a9b      	ldrb	r3, [r3, #10]
 800db4e:	1c59      	adds	r1, r3, #1
 800db50:	b2cc      	uxtb	r4, r1
 800db52:	494e      	ldr	r1, [pc, #312]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db54:	728c      	strb	r4, [r1, #10]
 800db56:	4413      	add	r3, r2
 800db58:	b2c2      	uxtb	r2, r0
 800db5a:	701a      	strb	r2, [r3, #0]
        break;
 800db5c:	e14e      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800db5e:	4b4b      	ldr	r3, [pc, #300]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db60:	2200      	movs	r2, #0
 800db62:	821a      	strh	r2, [r3, #16]
        break;
 800db64:	e14a      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800db66:	2304      	movs	r3, #4
 800db68:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800db6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800db70:	4618      	mov	r0, r3
 800db72:	f004 fca7 	bl	80124c4 <LoRaMacMlmeRequest>
        break;
 800db76:	e141      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800db78:	4b45      	ldr	r3, [pc, #276]	@ (800dc90 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800db7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7c:	4798      	blx	r3
        break;
 800db7e:	e13d      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db88:	1c59      	adds	r1, r3, #1
 800db8a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800db8e:	4413      	add	r3, r2
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	4b3e      	ldr	r3, [pc, #248]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800db94:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800db96:	4b3c      	ldr	r3, [pc, #240]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 812a 	beq.w	800ddf6 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800dba2:	4b39      	ldr	r3, [pc, #228]	@ (800dc88 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4a38      	ldr	r2, [pc, #224]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dbaa:	7d52      	ldrb	r2, [r2, #21]
 800dbac:	4610      	mov	r0, r2
 800dbae:	4798      	blx	r3
        }
        break;
 800dbb0:	e121      	b.n	800ddf6 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	7b1b      	ldrb	r3, [r3, #12]
 800dbb6:	2b07      	cmp	r3, #7
 800dbb8:	f040 811f 	bne.w	800ddfa <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800dbbc:	2305      	movs	r3, #5
 800dbbe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	689a      	ldr	r2, [r3, #8]
 800dbc6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbca:	4413      	add	r3, r2
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b21a      	sxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6899      	ldr	r1, [r3, #8]
 800dbd4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbd8:	3301      	adds	r3, #1
 800dbda:	440b      	add	r3, r1
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	b21b      	sxth	r3, r3
 800dbe0:	021b      	lsls	r3, r3, #8
 800dbe2:	b21b      	sxth	r3, r3
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	b21b      	sxth	r3, r3
 800dbe8:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800dbea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800dbee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbf2:	3302      	adds	r3, #2
 800dbf4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	689a      	ldr	r2, [r3, #8]
 800dbfc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc00:	4413      	add	r3, r2
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	4619      	mov	r1, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	689a      	ldr	r2, [r3, #8]
 800dc0a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc0e:	3301      	adds	r3, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	021b      	lsls	r3, r3, #8
 800dc16:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6899      	ldr	r1, [r3, #8]
 800dc1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc22:	3302      	adds	r3, #2
 800dc24:	440b      	add	r3, r1
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dc2e:	2364      	movs	r3, #100	@ 0x64
 800dc30:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800dc34:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800dc36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc3a:	3303      	adds	r3, #3
 800dc3c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	689a      	ldr	r2, [r3, #8]
 800dc44:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dc48:	1c59      	adds	r1, r3, #1
 800dc4a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dc4e:	4413      	add	r3, r2
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	b25b      	sxtb	r3, r3
 800dc54:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800dc58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f004 fc31 	bl	80124c4 <LoRaMacMlmeRequest>
        }
        break;
 800dc62:	e0ca      	b.n	800ddfa <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800dc64:	2339      	movs	r3, #57	@ 0x39
 800dc66:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dc70:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800dc74:	4618      	mov	r0, r3
 800dc76:	f004 f8b5 	bl	8011de4 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800dc7a:	4b04      	ldr	r3, [pc, #16]	@ (800dc8c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800dc82:	e0bb      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
 800dc84:	0801ee84 	.word	0x0801ee84
 800dc88:	200008bc 	.word	0x200008bc
 800dc8c:	20000884 	.word	0x20000884
 800dc90:	200000d0 	.word	0x200000d0
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800dc94:	232a      	movs	r3, #42	@ 0x2a
 800dc96:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f003 fefb 	bl	8011a98 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800dcaa:	4b62      	ldr	r3, [pc, #392]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	4b61      	ldr	r3, [pc, #388]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcb0:	7a9b      	ldrb	r3, [r3, #10]
 800dcb2:	1c59      	adds	r1, r3, #1
 800dcb4:	b2c8      	uxtb	r0, r1
 800dcb6:	495f      	ldr	r1, [pc, #380]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcb8:	7288      	strb	r0, [r1, #10]
 800dcba:	4413      	add	r3, r2
 800dcbc:	227f      	movs	r2, #127	@ 0x7f
 800dcbe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800dcc0:	4b5d      	ldr	r3, [pc, #372]	@ (800de38 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	4b5b      	ldr	r3, [pc, #364]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcc6:	68d9      	ldr	r1, [r3, #12]
 800dcc8:	4b5a      	ldr	r3, [pc, #360]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcca:	7a9b      	ldrb	r3, [r3, #10]
 800dccc:	1c58      	adds	r0, r3, #1
 800dcce:	b2c4      	uxtb	r4, r0
 800dcd0:	4858      	ldr	r0, [pc, #352]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcd2:	7284      	strb	r4, [r0, #10]
 800dcd4:	440b      	add	r3, r1
 800dcd6:	78d2      	ldrb	r2, [r2, #3]
 800dcd8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800dcda:	4b57      	ldr	r3, [pc, #348]	@ (800de38 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4b55      	ldr	r3, [pc, #340]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dce0:	68d9      	ldr	r1, [r3, #12]
 800dce2:	4b54      	ldr	r3, [pc, #336]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dce4:	7a9b      	ldrb	r3, [r3, #10]
 800dce6:	1c58      	adds	r0, r3, #1
 800dce8:	b2c4      	uxtb	r4, r0
 800dcea:	4852      	ldr	r0, [pc, #328]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcec:	7284      	strb	r4, [r0, #10]
 800dcee:	440b      	add	r3, r1
 800dcf0:	7892      	ldrb	r2, [r2, #2]
 800dcf2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800dcf4:	4b50      	ldr	r3, [pc, #320]	@ (800de38 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	4b4e      	ldr	r3, [pc, #312]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcfa:	68d9      	ldr	r1, [r3, #12]
 800dcfc:	4b4d      	ldr	r3, [pc, #308]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dcfe:	7a9b      	ldrb	r3, [r3, #10]
 800dd00:	1c58      	adds	r0, r3, #1
 800dd02:	b2c4      	uxtb	r4, r0
 800dd04:	484b      	ldr	r0, [pc, #300]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd06:	7284      	strb	r4, [r0, #10]
 800dd08:	440b      	add	r3, r1
 800dd0a:	7852      	ldrb	r2, [r2, #1]
 800dd0c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dd0e:	4b4a      	ldr	r3, [pc, #296]	@ (800de38 <LmhpComplianceOnMcpsIndication+0x79c>)
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b48      	ldr	r3, [pc, #288]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd14:	68d9      	ldr	r1, [r3, #12]
 800dd16:	4b47      	ldr	r3, [pc, #284]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd18:	7a9b      	ldrb	r3, [r3, #10]
 800dd1a:	1c58      	adds	r0, r3, #1
 800dd1c:	b2c4      	uxtb	r4, r0
 800dd1e:	4845      	ldr	r0, [pc, #276]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd20:	7284      	strb	r4, [r0, #10]
 800dd22:	440b      	add	r3, r1
 800dd24:	7812      	ldrb	r2, [r2, #0]
 800dd26:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800dd28:	4b42      	ldr	r3, [pc, #264]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	4b41      	ldr	r3, [pc, #260]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd2e:	7a9b      	ldrb	r3, [r3, #10]
 800dd30:	1c59      	adds	r1, r3, #1
 800dd32:	b2c8      	uxtb	r0, r1
 800dd34:	493f      	ldr	r1, [pc, #252]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd36:	7288      	strb	r0, [r1, #10]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800dd3e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800dd40:	4b3c      	ldr	r3, [pc, #240]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd42:	68da      	ldr	r2, [r3, #12]
 800dd44:	4b3b      	ldr	r3, [pc, #236]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd46:	7a9b      	ldrb	r3, [r3, #10]
 800dd48:	1c59      	adds	r1, r3, #1
 800dd4a:	b2c8      	uxtb	r0, r1
 800dd4c:	4939      	ldr	r1, [pc, #228]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd4e:	7288      	strb	r0, [r1, #10]
 800dd50:	4413      	add	r3, r2
 800dd52:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800dd56:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800dd58:	4b36      	ldr	r3, [pc, #216]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd5a:	68da      	ldr	r2, [r3, #12]
 800dd5c:	4b35      	ldr	r3, [pc, #212]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd5e:	7a9b      	ldrb	r3, [r3, #10]
 800dd60:	1c59      	adds	r1, r3, #1
 800dd62:	b2c8      	uxtb	r0, r1
 800dd64:	4933      	ldr	r1, [pc, #204]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd66:	7288      	strb	r0, [r1, #10]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800dd6e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800dd70:	4b30      	ldr	r3, [pc, #192]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd72:	68da      	ldr	r2, [r3, #12]
 800dd74:	4b2f      	ldr	r3, [pc, #188]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd76:	7a9b      	ldrb	r3, [r3, #10]
 800dd78:	1c59      	adds	r1, r3, #1
 800dd7a:	b2c8      	uxtb	r0, r1
 800dd7c:	492d      	ldr	r1, [pc, #180]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd7e:	7288      	strb	r0, [r1, #10]
 800dd80:	4413      	add	r3, r2
 800dd82:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800dd86:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800dd88:	4b2a      	ldr	r3, [pc, #168]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd8a:	68da      	ldr	r2, [r3, #12]
 800dd8c:	4b29      	ldr	r3, [pc, #164]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd8e:	7a9b      	ldrb	r3, [r3, #10]
 800dd90:	1c59      	adds	r1, r3, #1
 800dd92:	b2c8      	uxtb	r0, r1
 800dd94:	4927      	ldr	r1, [pc, #156]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dd96:	7288      	strb	r0, [r1, #10]
 800dd98:	4413      	add	r3, r2
 800dd9a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800dd9e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800dda0:	4b24      	ldr	r3, [pc, #144]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	4b23      	ldr	r3, [pc, #140]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800dda6:	7a9b      	ldrb	r3, [r3, #10]
 800dda8:	1c59      	adds	r1, r3, #1
 800ddaa:	b2c8      	uxtb	r0, r1
 800ddac:	4921      	ldr	r1, [pc, #132]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddae:	7288      	strb	r0, [r1, #10]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ddb6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ddb8:	4b1e      	ldr	r3, [pc, #120]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddba:	68da      	ldr	r2, [r3, #12]
 800ddbc:	4b1d      	ldr	r3, [pc, #116]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddbe:	7a9b      	ldrb	r3, [r3, #10]
 800ddc0:	1c59      	adds	r1, r3, #1
 800ddc2:	b2c8      	uxtb	r0, r1
 800ddc4:	491b      	ldr	r1, [pc, #108]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddc6:	7288      	strb	r0, [r1, #10]
 800ddc8:	4413      	add	r3, r2
 800ddca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ddce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800ddd0:	4b18      	ldr	r3, [pc, #96]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddd2:	68da      	ldr	r2, [r3, #12]
 800ddd4:	4b17      	ldr	r3, [pc, #92]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddd6:	7a9b      	ldrb	r3, [r3, #10]
 800ddd8:	1c59      	adds	r1, r3, #1
 800ddda:	b2c8      	uxtb	r0, r1
 800dddc:	4915      	ldr	r1, [pc, #84]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddde:	7288      	strb	r0, [r1, #10]
 800dde0:	4413      	add	r3, r2
 800dde2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dde6:	701a      	strb	r2, [r3, #0]
        break;
 800dde8:	e008      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800ddea:	bf00      	nop
 800ddec:	e006      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddee:	bf00      	nop
 800ddf0:	e004      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddf2:	bf00      	nop
 800ddf4:	e002      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddf6:	bf00      	nop
 800ddf8:	e000      	b.n	800ddfc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ddfa:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800ddfc:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800ddfe:	7a9b      	ldrb	r3, [r3, #10]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d008      	beq.n	800de16 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800de04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800de08:	480c      	ldr	r0, [pc, #48]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de0a:	f00d fafd 	bl	801b408 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800de0e:	480b      	ldr	r0, [pc, #44]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de10:	f00d fa1c 	bl	801b24c <UTIL_TIMER_Start>
 800de14:	e00b      	b.n	800de2e <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800de16:	4809      	ldr	r0, [pc, #36]	@ (800de3c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800de18:	f00d fa86 	bl	801b328 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800de1c:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <LmhpComplianceOnMcpsIndication+0x798>)
 800de1e:	2200      	movs	r2, #0
 800de20:	705a      	strb	r2, [r3, #1]
 800de22:	e004      	b.n	800de2e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de24:	bf00      	nop
 800de26:	e002      	b.n	800de2e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de28:	bf00      	nop
 800de2a:	e000      	b.n	800de2e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800de2c:	bf00      	nop
    }
}
 800de2e:	3790      	adds	r7, #144	@ 0x90
 800de30:	46bd      	mov	sp, r7
 800de32:	bdb0      	pop	{r4, r5, r7, pc}
 800de34:	20000884 	.word	0x20000884
 800de38:	200008bc 	.word	0x200008bc
 800de3c:	200008c0 	.word	0x200008c0

0800de40 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800de48:	bf00      	nop
    }
}
 800de4a:	bf00      	nop
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	bc80      	pop	{r7}
 800de52:	4770      	bx	lr

0800de54 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800de5c:	4b05      	ldr	r3, [pc, #20]	@ (800de74 <LmhpComplianceOnMlmeIndication+0x20>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	f083 0301 	eor.w	r3, r3, #1
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b00      	cmp	r3, #0
    {
        return;
 800de68:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bc80      	pop	{r7}
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	20000884 	.word	0x20000884

0800de78 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800de80:	4b04      	ldr	r3, [pc, #16]	@ (800de94 <OnProcessTimer+0x1c>)
 800de82:	2201      	movs	r2, #1
 800de84:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800de86:	4b04      	ldr	r3, [pc, #16]	@ (800de98 <OnProcessTimer+0x20>)
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	4798      	blx	r3
}
 800de8c:	bf00      	nop
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20000884 	.word	0x20000884
 800de98:	200000d0 	.word	0x200000d0

0800de9c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800de9c:	b590      	push	{r4, r7, lr}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dea2:	f00d fb5b 	bl	801b55c <UTIL_TIMER_GetCurrentTime>
 800dea6:	4603      	mov	r3, r0
 800dea8:	4a16      	ldr	r2, [pc, #88]	@ (800df04 <OnRadioTxDone+0x68>)
 800deaa:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800deac:	4c16      	ldr	r4, [pc, #88]	@ (800df08 <OnRadioTxDone+0x6c>)
 800deae:	463b      	mov	r3, r7
 800deb0:	4618      	mov	r0, r3
 800deb2:	f00c fcd3 	bl	801a85c <SysTimeGet>
 800deb6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800deba:	463a      	mov	r2, r7
 800debc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dec0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800dec4:	4a11      	ldr	r2, [pc, #68]	@ (800df0c <OnRadioTxDone+0x70>)
 800dec6:	7813      	ldrb	r3, [r2, #0]
 800dec8:	f043 0320 	orr.w	r3, r3, #32
 800decc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dece:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <OnRadioTxDone+0x6c>)
 800ded0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <OnRadioTxDone+0x52>
 800ded8:	4b0b      	ldr	r3, [pc, #44]	@ (800df08 <OnRadioTxDone+0x6c>)
 800deda:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dee4:	4b08      	ldr	r3, [pc, #32]	@ (800df08 <OnRadioTxDone+0x6c>)
 800dee6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800deee:	4b08      	ldr	r3, [pc, #32]	@ (800df10 <OnRadioTxDone+0x74>)
 800def0:	2201      	movs	r2, #1
 800def2:	2100      	movs	r1, #0
 800def4:	2002      	movs	r0, #2
 800def6:	f00d fc21 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	bd90      	pop	{r4, r7, pc}
 800df02:	bf00      	nop
 800df04:	20001984 	.word	0x20001984
 800df08:	200008d8 	.word	0x200008d8
 800df0c:	20001980 	.word	0x20001980
 800df10:	0801eeb0 	.word	0x0801eeb0

0800df14 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	4608      	mov	r0, r1
 800df1e:	4611      	mov	r1, r2
 800df20:	461a      	mov	r2, r3
 800df22:	4603      	mov	r3, r0
 800df24:	817b      	strh	r3, [r7, #10]
 800df26:	460b      	mov	r3, r1
 800df28:	813b      	strh	r3, [r7, #8]
 800df2a:	4613      	mov	r3, r2
 800df2c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800df2e:	f00d fb15 	bl	801b55c <UTIL_TIMER_GetCurrentTime>
 800df32:	4603      	mov	r3, r0
 800df34:	4a18      	ldr	r2, [pc, #96]	@ (800df98 <OnRadioRxDone+0x84>)
 800df36:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800df38:	4a17      	ldr	r2, [pc, #92]	@ (800df98 <OnRadioRxDone+0x84>)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800df3e:	4a16      	ldr	r2, [pc, #88]	@ (800df98 <OnRadioRxDone+0x84>)
 800df40:	897b      	ldrh	r3, [r7, #10]
 800df42:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800df44:	4a14      	ldr	r2, [pc, #80]	@ (800df98 <OnRadioRxDone+0x84>)
 800df46:	893b      	ldrh	r3, [r7, #8]
 800df48:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800df4a:	4a13      	ldr	r2, [pc, #76]	@ (800df98 <OnRadioRxDone+0x84>)
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800df50:	4a12      	ldr	r2, [pc, #72]	@ (800df9c <OnRadioRxDone+0x88>)
 800df52:	7813      	ldrb	r3, [r2, #0]
 800df54:	f043 0310 	orr.w	r3, r3, #16
 800df58:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800df5a:	4a10      	ldr	r2, [pc, #64]	@ (800df9c <OnRadioRxDone+0x88>)
 800df5c:	7813      	ldrb	r3, [r2, #0]
 800df5e:	f043 0301 	orr.w	r3, r3, #1
 800df62:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800df64:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa0 <OnRadioRxDone+0x8c>)
 800df66:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <OnRadioRxDone+0x70>
 800df6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa0 <OnRadioRxDone+0x8c>)
 800df70:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800df7a:	4b09      	ldr	r3, [pc, #36]	@ (800dfa0 <OnRadioRxDone+0x8c>)
 800df7c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800df84:	4b07      	ldr	r3, [pc, #28]	@ (800dfa4 <OnRadioRxDone+0x90>)
 800df86:	2201      	movs	r2, #1
 800df88:	2100      	movs	r1, #0
 800df8a:	2002      	movs	r0, #2
 800df8c:	f00d fbd6 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800df90:	bf00      	nop
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	20001988 	.word	0x20001988
 800df9c:	20001980 	.word	0x20001980
 800dfa0:	200008d8 	.word	0x200008d8
 800dfa4:	0801eec0 	.word	0x0801eec0

0800dfa8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dfac:	4a0e      	ldr	r2, [pc, #56]	@ (800dfe8 <OnRadioTxTimeout+0x40>)
 800dfae:	7813      	ldrb	r3, [r2, #0]
 800dfb0:	f043 0308 	orr.w	r3, r3, #8
 800dfb4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <OnRadioTxTimeout+0x44>)
 800dfb8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00a      	beq.n	800dfd6 <OnRadioTxTimeout+0x2e>
 800dfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800dfec <OnRadioTxTimeout+0x44>)
 800dfc2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d004      	beq.n	800dfd6 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dfcc:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <OnRadioTxTimeout+0x44>)
 800dfce:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dfd6:	4b06      	ldr	r3, [pc, #24]	@ (800dff0 <OnRadioTxTimeout+0x48>)
 800dfd8:	2201      	movs	r2, #1
 800dfda:	2100      	movs	r1, #0
 800dfdc:	2002      	movs	r0, #2
 800dfde:	f00d fbad 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800dfe2:	bf00      	nop
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20001980 	.word	0x20001980
 800dfec:	200008d8 	.word	0x200008d8
 800dff0:	0801eed0 	.word	0x0801eed0

0800dff4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dff8:	4a0b      	ldr	r2, [pc, #44]	@ (800e028 <OnRadioRxError+0x34>)
 800dffa:	7813      	ldrb	r3, [r2, #0]
 800dffc:	f043 0304 	orr.w	r3, r3, #4
 800e000:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e002:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <OnRadioRxError+0x38>)
 800e004:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00a      	beq.n	800e022 <OnRadioRxError+0x2e>
 800e00c:	4b07      	ldr	r3, [pc, #28]	@ (800e02c <OnRadioRxError+0x38>)
 800e00e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d004      	beq.n	800e022 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e018:	4b04      	ldr	r3, [pc, #16]	@ (800e02c <OnRadioRxError+0x38>)
 800e01a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	4798      	blx	r3
    }
}
 800e022:	bf00      	nop
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20001980 	.word	0x20001980
 800e02c:	200008d8 	.word	0x200008d8

0800e030 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e034:	4a0e      	ldr	r2, [pc, #56]	@ (800e070 <OnRadioRxTimeout+0x40>)
 800e036:	7813      	ldrb	r3, [r2, #0]
 800e038:	f043 0302 	orr.w	r3, r3, #2
 800e03c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e03e:	4b0d      	ldr	r3, [pc, #52]	@ (800e074 <OnRadioRxTimeout+0x44>)
 800e040:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00a      	beq.n	800e05e <OnRadioRxTimeout+0x2e>
 800e048:	4b0a      	ldr	r3, [pc, #40]	@ (800e074 <OnRadioRxTimeout+0x44>)
 800e04a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d004      	beq.n	800e05e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e054:	4b07      	ldr	r3, [pc, #28]	@ (800e074 <OnRadioRxTimeout+0x44>)
 800e056:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e05e:	4b06      	ldr	r3, [pc, #24]	@ (800e078 <OnRadioRxTimeout+0x48>)
 800e060:	2201      	movs	r2, #1
 800e062:	2100      	movs	r1, #0
 800e064:	2002      	movs	r0, #2
 800e066:	f00d fb69 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 800e06a:	bf00      	nop
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20001980 	.word	0x20001980
 800e074:	200008d8 	.word	0x200008d8
 800e078:	0801eee0 	.word	0x0801eee0

0800e07c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e07c:	b480      	push	{r7}
 800e07e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e080:	4b08      	ldr	r3, [pc, #32]	@ (800e0a4 <UpdateRxSlotIdleState+0x28>)
 800e082:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e086:	2b02      	cmp	r3, #2
 800e088:	d004      	beq.n	800e094 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e08a:	4b07      	ldr	r3, [pc, #28]	@ (800e0a8 <UpdateRxSlotIdleState+0x2c>)
 800e08c:	2206      	movs	r2, #6
 800e08e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e092:	e003      	b.n	800e09c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e094:	4b04      	ldr	r3, [pc, #16]	@ (800e0a8 <UpdateRxSlotIdleState+0x2c>)
 800e096:	2202      	movs	r2, #2
 800e098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800e09c:	bf00      	nop
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bc80      	pop	{r7}
 800e0a2:	4770      	bx	lr
 800e0a4:	20000df8 	.word	0x20000df8
 800e0a8:	200008d8 	.word	0x200008d8

0800e0ac <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08e      	sub	sp, #56	@ 0x38
 800e0b0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0b2:	4b3e      	ldr	r3, [pc, #248]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e0b4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d002      	beq.n	800e0c2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e0bc:	4b3c      	ldr	r3, [pc, #240]	@ (800e1b0 <ProcessRadioTxDone+0x104>)
 800e0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c0:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e0c2:	4b3c      	ldr	r3, [pc, #240]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e0c4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	483b      	ldr	r0, [pc, #236]	@ (800e1b8 <ProcessRadioTxDone+0x10c>)
 800e0cc:	f00d f99c 	bl	801b408 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e0d0:	4839      	ldr	r0, [pc, #228]	@ (800e1b8 <ProcessRadioTxDone+0x10c>)
 800e0d2:	f00d f8bb 	bl	801b24c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e0d6:	4b37      	ldr	r3, [pc, #220]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e0d8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4837      	ldr	r0, [pc, #220]	@ (800e1bc <ProcessRadioTxDone+0x110>)
 800e0e0:	f00d f992 	bl	801b408 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e0e4:	4835      	ldr	r0, [pc, #212]	@ (800e1bc <ProcessRadioTxDone+0x110>)
 800e0e6:	f00d f8b1 	bl	801b24c <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e0ea:	4b32      	ldr	r3, [pc, #200]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e0ec:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d01a      	beq.n	800e12a <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e0f4:	2315      	movs	r3, #21
 800e0f6:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e0fa:	4b2c      	ldr	r3, [pc, #176]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e0fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e100:	f107 0220 	add.w	r2, r7, #32
 800e104:	4611      	mov	r1, r2
 800e106:	4618      	mov	r0, r3
 800e108:	f006 fd20 	bl	8014b4c <RegionGetPhyParam>
 800e10c:	4603      	mov	r3, r0
 800e10e:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e110:	4b28      	ldr	r3, [pc, #160]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e112:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	4413      	add	r3, r2
 800e11a:	4619      	mov	r1, r3
 800e11c:	4828      	ldr	r0, [pc, #160]	@ (800e1c0 <ProcessRadioTxDone+0x114>)
 800e11e:	f00d f973 	bl	801b408 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e122:	4827      	ldr	r0, [pc, #156]	@ (800e1c0 <ProcessRadioTxDone+0x114>)
 800e124:	f00d f892 	bl	801b24c <UTIL_TIMER_Start>
 800e128:	e003      	b.n	800e132 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e12a:	4b22      	ldr	r3, [pc, #136]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e132:	4b24      	ldr	r3, [pc, #144]	@ (800e1c4 <ProcessRadioTxDone+0x118>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a1d      	ldr	r2, [pc, #116]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e13a:	4b1e      	ldr	r3, [pc, #120]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e13c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e140:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e142:	4b20      	ldr	r3, [pc, #128]	@ (800e1c4 <ProcessRadioTxDone+0x118>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e14c:	4618      	mov	r0, r3
 800e14e:	f00c fbbd 	bl	801a8cc <SysTimeGetMcuTime>
 800e152:	4638      	mov	r0, r7
 800e154:	4b15      	ldr	r3, [pc, #84]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e156:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e15a:	9200      	str	r2, [sp, #0]
 800e15c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e160:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e164:	ca06      	ldmia	r2, {r1, r2}
 800e166:	f00c fb12 	bl	801a78e <SysTimeSub>
 800e16a:	f107 0314 	add.w	r3, r7, #20
 800e16e:	463a      	mov	r2, r7
 800e170:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e174:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e178:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b4 <ProcessRadioTxDone+0x108>)
 800e17a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800e17e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e180:	2301      	movs	r3, #1
 800e182:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e184:	4b09      	ldr	r3, [pc, #36]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e186:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e18e:	2300      	movs	r3, #0
 800e190:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e192:	4b06      	ldr	r3, [pc, #24]	@ (800e1ac <ProcessRadioTxDone+0x100>)
 800e194:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e198:	f107 0208 	add.w	r2, r7, #8
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f006 fcec 	bl	8014b7c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e1a4:	bf00      	nop
 800e1a6:	3730      	adds	r7, #48	@ 0x30
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20000df8 	.word	0x20000df8
 800e1b0:	0801f574 	.word	0x0801f574
 800e1b4:	200008d8 	.word	0x200008d8
 800e1b8:	20000c58 	.word	0x20000c58
 800e1bc:	20000c70 	.word	0x20000c70
 800e1c0:	20000cdc 	.word	0x20000cdc
 800e1c4:	20001984 	.word	0x20001984

0800e1c8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e1cc:	4b10      	ldr	r3, [pc, #64]	@ (800e210 <PrepareRxDoneAbort+0x48>)
 800e1ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d6:	4a0e      	ldr	r2, [pc, #56]	@ (800e210 <PrepareRxDoneAbort+0x48>)
 800e1d8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e210 <PrepareRxDoneAbort+0x48>)
 800e1de:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d002      	beq.n	800e1ec <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f001 f99c 	bl	800f524 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e1ec:	4a08      	ldr	r2, [pc, #32]	@ (800e210 <PrepareRxDoneAbort+0x48>)
 800e1ee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e1f2:	f043 0302 	orr.w	r3, r3, #2
 800e1f6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e1fa:	4a05      	ldr	r2, [pc, #20]	@ (800e210 <PrepareRxDoneAbort+0x48>)
 800e1fc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e200:	f043 0320 	orr.w	r3, r3, #32
 800e204:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800e208:	f7ff ff38 	bl	800e07c <UpdateRxSlotIdleState>
}
 800e20c:	bf00      	nop
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	200008d8 	.word	0x200008d8

0800e214 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e214:	b590      	push	{r4, r7, lr}
 800e216:	b0a7      	sub	sp, #156	@ 0x9c
 800e218:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e21a:	2312      	movs	r3, #18
 800e21c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e220:	4bbd      	ldr	r3, [pc, #756]	@ (800e518 <ProcessRadioRxDone+0x304>)
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800e228:	4bbb      	ldr	r3, [pc, #748]	@ (800e518 <ProcessRadioRxDone+0x304>)
 800e22a:	891b      	ldrh	r3, [r3, #8]
 800e22c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e230:	4bb9      	ldr	r3, [pc, #740]	@ (800e518 <ProcessRadioRxDone+0x304>)
 800e232:	895b      	ldrh	r3, [r3, #10]
 800e234:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800e238:	4bb7      	ldr	r3, [pc, #732]	@ (800e518 <ProcessRadioRxDone+0x304>)
 800e23a:	7b1b      	ldrb	r3, [r3, #12]
 800e23c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e24a:	4bb4      	ldr	r3, [pc, #720]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e24c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e260:	4aaf      	ldr	r2, [pc, #700]	@ (800e520 <ProcessRadioRxDone+0x30c>)
 800e262:	7813      	ldrb	r3, [r2, #0]
 800e264:	f023 0301 	bic.w	r3, r3, #1
 800e268:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e26a:	4bae      	ldr	r3, [pc, #696]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e272:	4aac      	ldr	r2, [pc, #688]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e274:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e278:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800e27c:	4aa9      	ldr	r2, [pc, #676]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e27e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e282:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e286:	4ba7      	ldr	r3, [pc, #668]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e288:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800e28c:	4ba5      	ldr	r3, [pc, #660]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e28e:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800e292:	4ba4      	ldr	r3, [pc, #656]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e29a:	4ba2      	ldr	r3, [pc, #648]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e2a2:	4ba0      	ldr	r3, [pc, #640]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e2aa:	4b9e      	ldr	r3, [pc, #632]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e2b2:	4b9c      	ldr	r3, [pc, #624]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800e2ba:	4b9a      	ldr	r3, [pc, #616]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e2c2:	4b98      	ldr	r3, [pc, #608]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e2ca:	4b96      	ldr	r3, [pc, #600]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e2d2:	4b94      	ldr	r3, [pc, #592]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e2da:	4b92      	ldr	r3, [pc, #584]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e2e2:	4b90      	ldr	r3, [pc, #576]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e2ea:	4b8e      	ldr	r3, [pc, #568]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e2f2:	4b8d      	ldr	r3, [pc, #564]	@ (800e528 <ProcessRadioRxDone+0x314>)
 800e2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f6:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e2f8:	4b8a      	ldr	r3, [pc, #552]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e2fa:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d102      	bne.n	800e308 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e302:	488a      	ldr	r0, [pc, #552]	@ (800e52c <ProcessRadioRxDone+0x318>)
 800e304:	f00d f810 	bl	801b328 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e308:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e30c:	4619      	mov	r1, r3
 800e30e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800e312:	f004 fcdb 	bl	8012ccc <LoRaMacClassBRxBeacon>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e31c:	4a81      	ldr	r2, [pc, #516]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e31e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e322:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e326:	4a7f      	ldr	r2, [pc, #508]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e328:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e32c:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800e330:	f000 bc22 	b.w	800eb78 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e334:	4b79      	ldr	r3, [pc, #484]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e336:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d11e      	bne.n	800e37c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e33e:	f004 fcd8 	bl	8012cf2 <LoRaMacClassBIsPingExpected>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e348:	2000      	movs	r0, #0
 800e34a:	f004 fc89 	bl	8012c60 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e34e:	2000      	movs	r0, #0
 800e350:	f004 fcaa 	bl	8012ca8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e354:	4b73      	ldr	r3, [pc, #460]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e356:	2204      	movs	r2, #4
 800e358:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800e35c:	e00e      	b.n	800e37c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e35e:	f004 fccf 	bl	8012d00 <LoRaMacClassBIsMulticastExpected>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d009      	beq.n	800e37c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e368:	2000      	movs	r0, #0
 800e36a:	f004 fc83 	bl	8012c74 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e36e:	2000      	movs	r0, #0
 800e370:	f004 fca3 	bl	8012cba <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e374:	4b6b      	ldr	r3, [pc, #428]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e376:	2205      	movs	r2, #5
 800e378:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e37c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800e386:	461a      	mov	r2, r3
 800e388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e38c:	4413      	add	r3, r2
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800e394:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e398:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	2b06      	cmp	r3, #6
 800e3a2:	f200 83bd 	bhi.w	800eb20 <ProcessRadioRxDone+0x90c>
 800e3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ac <ProcessRadioRxDone+0x198>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e3c9 	.word	0x0800e3c9
 800e3b0:	0800eb21 	.word	0x0800eb21
 800e3b4:	0800e55d 	.word	0x0800e55d
 800e3b8:	0800eb21 	.word	0x0800eb21
 800e3bc:	0800e555 	.word	0x0800e555
 800e3c0:	0800eb21 	.word	0x0800eb21
 800e3c4:	0800eab3 	.word	0x0800eab3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e3c8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e3cc:	2b10      	cmp	r3, #16
 800e3ce:	d806      	bhi.n	800e3de <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3d0:	4b54      	ldr	r3, [pc, #336]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e3d8:	f7ff fef6 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e3dc:	e3cc      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e3de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e3e2:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e3e4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e3ec:	4b4b      	ldr	r3, [pc, #300]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e3ee:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d006      	beq.n	800e404 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3f6:	4b4b      	ldr	r3, [pc, #300]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e3fe:	f7ff fee3 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e402:	e3b9      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e404:	f7fe f876 	bl	800c4f4 <SecureElementGetJoinEui>
 800e408:	4601      	mov	r1, r0
 800e40a:	f107 030c 	add.w	r3, r7, #12
 800e40e:	461a      	mov	r2, r3
 800e410:	20ff      	movs	r0, #255	@ 0xff
 800e412:	f005 fe29 	bl	8014068 <LoRaMacCryptoHandleJoinAccept>
 800e416:	4603      	mov	r3, r0
 800e418:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e41c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e420:	2b00      	cmp	r3, #0
 800e422:	f040 8085 	bne.w	800e530 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e426:	7d7b      	ldrb	r3, [r7, #21]
 800e428:	461a      	mov	r2, r3
 800e42a:	4b3c      	ldr	r3, [pc, #240]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e42c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e430:	4b3a      	ldr	r3, [pc, #232]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e432:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e436:	7dbb      	ldrb	r3, [r7, #22]
 800e438:	021b      	lsls	r3, r3, #8
 800e43a:	4313      	orrs	r3, r2
 800e43c:	4a37      	ldr	r2, [pc, #220]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e43e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e442:	4b36      	ldr	r3, [pc, #216]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e444:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e448:	7dfb      	ldrb	r3, [r7, #23]
 800e44a:	041b      	lsls	r3, r3, #16
 800e44c:	4313      	orrs	r3, r2
 800e44e:	4a33      	ldr	r2, [pc, #204]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e450:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	4a31      	ldr	r2, [pc, #196]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e458:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e45c:	7f3b      	ldrb	r3, [r7, #28]
 800e45e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e462:	b2db      	uxtb	r3, r3
 800e464:	461a      	mov	r2, r3
 800e466:	4b2d      	ldr	r3, [pc, #180]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e468:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e46c:	7f3b      	ldrb	r3, [r7, #28]
 800e46e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e472:	b2db      	uxtb	r3, r3
 800e474:	461a      	mov	r2, r3
 800e476:	4b29      	ldr	r3, [pc, #164]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e478:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e47c:	7f3b      	ldrb	r3, [r7, #28]
 800e47e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e482:	b2db      	uxtb	r3, r3
 800e484:	461a      	mov	r2, r3
 800e486:	4b25      	ldr	r3, [pc, #148]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e488:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e48c:	7f7b      	ldrb	r3, [r7, #29]
 800e48e:	461a      	mov	r2, r3
 800e490:	4b22      	ldr	r3, [pc, #136]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e492:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e494:	4b21      	ldr	r3, [pc, #132]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e49c:	4b1f      	ldr	r3, [pc, #124]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e4a2:	4b1e      	ldr	r3, [pc, #120]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e4aa:	fb02 f303 	mul.w	r3, r2, r3
 800e4ae:	4a1b      	ldr	r2, [pc, #108]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4b0:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e4b2:	4b1a      	ldr	r3, [pc, #104]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4b6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e4ba:	4a18      	ldr	r2, [pc, #96]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4bc:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e4be:	4b17      	ldr	r3, [pc, #92]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e4c6:	f107 030c 	add.w	r3, r7, #12
 800e4ca:	3312      	adds	r3, #18
 800e4cc:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e4ce:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	3b11      	subs	r3, #17
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e4dc:	4b11      	ldr	r3, [pc, #68]	@ (800e524 <ProcessRadioRxDone+0x310>)
 800e4de:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e4e2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4ec:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e4f0:	4611      	mov	r1, r2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f006 fb7c 	bl	8014bf0 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e4f8:	4b08      	ldr	r3, [pc, #32]	@ (800e51c <ProcessRadioRxDone+0x308>)
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e500:	2001      	movs	r0, #1
 800e502:	f005 f8dd 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01b      	beq.n	800e544 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e50c:	2101      	movs	r1, #1
 800e50e:	2000      	movs	r0, #0
 800e510:	f005 f84a 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>
 800e514:	e016      	b.n	800e544 <ProcessRadioRxDone+0x330>
 800e516:	bf00      	nop
 800e518:	20001988 	.word	0x20001988
 800e51c:	20000df8 	.word	0x20000df8
 800e520:	20001980 	.word	0x20001980
 800e524:	200008d8 	.word	0x200008d8
 800e528:	0801f574 	.word	0x0801f574
 800e52c:	20000c70 	.word	0x20000c70
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e530:	2001      	movs	r0, #1
 800e532:	f005 f8c5 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d003      	beq.n	800e544 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e53c:	2101      	movs	r1, #1
 800e53e:	2007      	movs	r0, #7
 800e540:	f005 f832 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e544:	4ab9      	ldr	r2, [pc, #740]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e546:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e54a:	f043 0308 	orr.w	r3, r3, #8
 800e54e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e552:	e2ec      	b.n	800eb2e <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e554:	4bb5      	ldr	r3, [pc, #724]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e55c:	4bb4      	ldr	r3, [pc, #720]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e55e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e562:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e566:	4bb1      	ldr	r3, [pc, #708]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e568:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800e56c:	b25b      	sxtb	r3, r3
 800e56e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e572:	230d      	movs	r3, #13
 800e574:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e578:	4bad      	ldr	r3, [pc, #692]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e57a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e582:	230e      	movs	r3, #14
 800e584:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e588:	4ba9      	ldr	r3, [pc, #676]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e58a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e58e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e592:	4611      	mov	r1, r2
 800e594:	4618      	mov	r0, r3
 800e596:	f006 fad9 	bl	8014b4c <RegionGetPhyParam>
 800e59a:	4603      	mov	r3, r0
 800e59c:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e59e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5a2:	3b0d      	subs	r3, #13
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	b21b      	sxth	r3, r3
 800e5a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e5ac:	b21a      	sxth	r2, r3
 800e5ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5b0:	b21b      	sxth	r3, r3
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	dc03      	bgt.n	800e5be <ProcessRadioRxDone+0x3aa>
 800e5b6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5ba:	2b0b      	cmp	r3, #11
 800e5bc:	d806      	bhi.n	800e5cc <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5be:	4b9b      	ldr	r3, [pc, #620]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e5c6:	f7ff fdff 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e5ca:	e2d5      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e5cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e5d0:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800e5d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e5dc:	4b95      	ldr	r3, [pc, #596]	@ (800e834 <ProcessRadioRxDone+0x620>)
 800e5de:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e5e0:	23ff      	movs	r3, #255	@ 0xff
 800e5e2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e5e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f006 f835 	bl	801465a <LoRaMacParserData>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d006      	beq.n	800e604 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5f6:	4b8d      	ldr	r3, [pc, #564]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e5fe:	f7ff fde3 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e602:	e2b9      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e604:	4b8a      	ldr	r3, [pc, #552]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e606:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d132      	bne.n	800e674 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e60e:	f004 fb70 	bl	8012cf2 <LoRaMacClassBIsPingExpected>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d014      	beq.n	800e642 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e618:	2000      	movs	r0, #0
 800e61a:	f004 fb21 	bl	8012c60 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e61e:	2000      	movs	r0, #0
 800e620:	f004 fb42 	bl	8012ca8 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e624:	4b81      	ldr	r3, [pc, #516]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e626:	2204      	movs	r2, #4
 800e628:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e62c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e62e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e632:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f004 fbe2 	bl	8012e04 <LoRaMacClassBSetFPendingBit>
 800e640:	e018      	b.n	800e674 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e642:	f004 fb5d 	bl	8012d00 <LoRaMacClassBIsMulticastExpected>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d013      	beq.n	800e674 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e64c:	2000      	movs	r0, #0
 800e64e:	f004 fb11 	bl	8012c74 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e652:	2000      	movs	r0, #0
 800e654:	f004 fb31 	bl	8012cba <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e658:	4b74      	ldr	r3, [pc, #464]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e65a:	2205      	movs	r2, #5
 800e65c:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e662:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e666:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	4619      	mov	r1, r3
 800e66e:	4610      	mov	r0, r2
 800e670:	f004 fbc8 	bl	8012e04 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e676:	4a6d      	ldr	r2, [pc, #436]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e678:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e67c:	1dba      	adds	r2, r7, #6
 800e67e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e682:	4611      	mov	r1, r2
 800e684:	4618      	mov	r0, r3
 800e686:	f002 fd1f 	bl	80110c8 <DetermineFrameType>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d006      	beq.n	800e69e <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e690:	4b66      	ldr	r3, [pc, #408]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e692:	2201      	movs	r2, #1
 800e694:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e698:	f7ff fd96 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e69c:	e26c      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e6ae:	e049      	b.n	800e744 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e6b0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6b4:	4a5e      	ldr	r2, [pc, #376]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e6b6:	212c      	movs	r1, #44	@ 0x2c
 800e6b8:	fb01 f303 	mul.w	r3, r1, r3
 800e6bc:	4413      	add	r3, r2
 800e6be:	33dc      	adds	r3, #220	@ 0xdc
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d138      	bne.n	800e73a <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e6c8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6cc:	4a58      	ldr	r2, [pc, #352]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e6ce:	212c      	movs	r1, #44	@ 0x2c
 800e6d0:	fb01 f303 	mul.w	r3, r1, r3
 800e6d4:	4413      	add	r3, r2
 800e6d6:	33da      	adds	r3, #218	@ 0xda
 800e6d8:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d02d      	beq.n	800e73a <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e6e4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6e8:	4a51      	ldr	r2, [pc, #324]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e6ea:	212c      	movs	r1, #44	@ 0x2c
 800e6ec:	fb01 f303 	mul.w	r3, r1, r3
 800e6f0:	4413      	add	r3, r2
 800e6f2:	33db      	adds	r3, #219	@ 0xdb
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e6fa:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e6fe:	4a4c      	ldr	r2, [pc, #304]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e700:	212c      	movs	r1, #44	@ 0x2c
 800e702:	fb01 f303 	mul.w	r3, r1, r3
 800e706:	4413      	add	r3, r2
 800e708:	33f8      	adds	r3, #248	@ 0xf8
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e710:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e714:	4a46      	ldr	r2, [pc, #280]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e716:	212c      	movs	r1, #44	@ 0x2c
 800e718:	fb01 f303 	mul.w	r3, r1, r3
 800e71c:	4413      	add	r3, r2
 800e71e:	33dc      	adds	r3, #220	@ 0xdc
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e726:	4b42      	ldr	r3, [pc, #264]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e728:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d10e      	bne.n	800e74e <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e730:	4b3e      	ldr	r3, [pc, #248]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e732:	2203      	movs	r2, #3
 800e734:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e738:	e009      	b.n	800e74e <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e73a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e73e:	3301      	adds	r3, #1
 800e740:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e744:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0b1      	beq.n	800e6b0 <ProcessRadioRxDone+0x49c>
 800e74c:	e000      	b.n	800e750 <ProcessRadioRxDone+0x53c>
                    break;
 800e74e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e750:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e754:	2b01      	cmp	r3, #1
 800e756:	d117      	bne.n	800e788 <ProcessRadioRxDone+0x574>
 800e758:	79bb      	ldrb	r3, [r7, #6]
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d10d      	bne.n	800e77a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e75e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e76c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e774:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e776:	2b00      	cmp	r3, #0
 800e778:	d006      	beq.n	800e788 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e77a:	4b2c      	ldr	r3, [pc, #176]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e782:	f7ff fd21 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e786:	e1f7      	b.n	800eb78 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e788:	79b9      	ldrb	r1, [r7, #6]
 800e78a:	4c29      	ldr	r4, [pc, #164]	@ (800e830 <ProcessRadioRxDone+0x61c>)
 800e78c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e790:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e794:	f107 0308 	add.w	r3, r7, #8
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	1dfb      	adds	r3, r7, #7
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e7a2:	f000 fee7 	bl	800f574 <GetFCntDown>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e7ac:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d017      	beq.n	800e7e4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e7b4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e7b8:	2b07      	cmp	r3, #7
 800e7ba:	d104      	bne.n	800e7c6 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e7bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e7be:	2208      	movs	r2, #8
 800e7c0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e7c4:	e003      	b.n	800e7ce <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7c6:	4b19      	ldr	r3, [pc, #100]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	4a16      	ldr	r2, [pc, #88]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e7d2:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	4a14      	ldr	r2, [pc, #80]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e7da:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e7de:	f7ff fcf3 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e7e2:	e1c9      	b.n	800eb78 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e7e4:	79fa      	ldrb	r2, [r7, #7]
 800e7e6:	68b9      	ldr	r1, [r7, #8]
 800e7e8:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e7ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e7f8:	f005 fd80 	bl	80142fc <LoRaMacCryptoUnsecureMessage>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e802:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e806:	2b00      	cmp	r3, #0
 800e808:	d016      	beq.n	800e838 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e80a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e80e:	2b02      	cmp	r3, #2
 800e810:	d104      	bne.n	800e81c <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e812:	4b06      	ldr	r3, [pc, #24]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e814:	220a      	movs	r2, #10
 800e816:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e81a:	e003      	b.n	800e824 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e81c:	4b03      	ldr	r3, [pc, #12]	@ (800e82c <ProcessRadioRxDone+0x618>)
 800e81e:	220b      	movs	r2, #11
 800e820:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e824:	f7ff fcd0 	bl	800e1c8 <PrepareRxDoneAbort>
                return;
 800e828:	e1a6      	b.n	800eb78 <ProcessRadioRxDone+0x964>
 800e82a:	bf00      	nop
 800e82c:	200008d8 	.word	0x200008d8
 800e830:	20000df8 	.word	0x20000df8
 800e834:	20000b10 	.word	0x20000b10
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e838:	4bb5      	ldr	r3, [pc, #724]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e840:	4ab3      	ldr	r2, [pc, #716]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e842:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e846:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e84a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e84e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	4bae      	ldr	r3, [pc, #696]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e858:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e85c:	4bac      	ldr	r3, [pc, #688]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e85e:	2200      	movs	r2, #0
 800e860:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e864:	4baa      	ldr	r3, [pc, #680]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	4aa8      	ldr	r2, [pc, #672]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e870:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4aa6      	ldr	r2, [pc, #664]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e878:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e87c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e880:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	bf14      	ite	ne
 800e88a:	2301      	movne	r3, #1
 800e88c:	2300      	moveq	r3, #0
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	4b9f      	ldr	r3, [pc, #636]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e892:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e896:	4b9e      	ldr	r3, [pc, #632]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e89e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e8a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bf14      	ite	ne
 800e8ac:	2301      	movne	r3, #1
 800e8ae:	2300      	moveq	r3, #0
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	4b97      	ldr	r3, [pc, #604]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e8b4:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8b8:	4b95      	ldr	r3, [pc, #596]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e8ba:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d004      	beq.n	800e8cc <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e8c2:	4b93      	ldr	r3, [pc, #588]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e8c4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d106      	bne.n	800e8da <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e8cc:	4b91      	ldr	r3, [pc, #580]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e8d2:	4b90      	ldr	r3, [pc, #576]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e8da:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d104      	bne.n	800e8ec <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e8e2:	4b8b      	ldr	r3, [pc, #556]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e8ea:	e034      	b.n	800e956 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e8ec:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e8f0:	f023 031f 	bic.w	r3, r3, #31
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2ba0      	cmp	r3, #160	@ 0xa0
 800e8f8:	d125      	bne.n	800e946 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e8fa:	4b86      	ldr	r3, [pc, #536]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e902:	4b84      	ldr	r3, [pc, #528]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e904:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e90c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e90e:	4a81      	ldr	r2, [pc, #516]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e910:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e912:	4b7f      	ldr	r3, [pc, #508]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e91a:	4b7d      	ldr	r3, [pc, #500]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e91c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e920:	2b00      	cmp	r3, #0
 800e922:	d018      	beq.n	800e956 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e924:	4b7a      	ldr	r3, [pc, #488]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e926:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d013      	beq.n	800e956 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e92e:	4b79      	ldr	r3, [pc, #484]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e934:	4a76      	ldr	r2, [pc, #472]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e936:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e93a:	4b77      	ldr	r3, [pc, #476]	@ (800eb18 <ProcessRadioRxDone+0x904>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a74      	ldr	r2, [pc, #464]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e940:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e944:	e007      	b.n	800e956 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e946:	4b73      	ldr	r3, [pc, #460]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e94e:	4b70      	ldr	r3, [pc, #448]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e956:	4b6e      	ldr	r3, [pc, #440]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e958:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e95c:	4a6c      	ldr	r2, [pc, #432]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e95e:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e962:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e966:	4618      	mov	r0, r3
 800e968:	f001 ff96 	bl	8010898 <RemoveMacCommands>

            switch( fType )
 800e96c:	79bb      	ldrb	r3, [r7, #6]
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d873      	bhi.n	800ea5a <ProcessRadioRxDone+0x846>
 800e972:	a201      	add	r2, pc, #4	@ (adr r2, 800e978 <ProcessRadioRxDone+0x764>)
 800e974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e978:	0800e989 	.word	0x0800e989
 800e97c:	0800e9d9 	.word	0x0800e9d9
 800e980:	0800ea0f 	.word	0x0800ea0f
 800e984:	0800ea35 	.word	0x0800ea35
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e988:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e98c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e990:	b2db      	uxtb	r3, r3
 800e992:	461c      	mov	r4, r3
 800e994:	4b5e      	ldr	r3, [pc, #376]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e996:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e99a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e99e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e9a2:	f102 0010 	add.w	r0, r2, #16
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	f000 ff45 	bl	800f83c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e9b2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e9b6:	4b56      	ldr	r3, [pc, #344]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e9b8:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e9bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9be:	4a54      	ldr	r2, [pc, #336]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e9c0:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e9c4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e9c8:	4b51      	ldr	r3, [pc, #324]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e9ca:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e9ce:	4b50      	ldr	r3, [pc, #320]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e9d6:	e047      	b.n	800ea68 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e9d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e9dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	461c      	mov	r4, r3
 800e9e4:	4b4a      	ldr	r3, [pc, #296]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800e9e6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e9ea:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e9ee:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e9f2:	f102 0010 	add.w	r0, r2, #16
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4622      	mov	r2, r4
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	f000 ff1d 	bl	800f83c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea02:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea06:	4b42      	ldr	r3, [pc, #264]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea08:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800ea0c:	e02c      	b.n	800ea68 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ea0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea10:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea14:	4b3e      	ldr	r3, [pc, #248]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea16:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ea1a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	460b      	mov	r3, r1
 800ea22:	2100      	movs	r1, #0
 800ea24:	f000 ff0a 	bl	800f83c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea28:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea2c:	4b38      	ldr	r3, [pc, #224]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea2e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800ea32:	e019      	b.n	800ea68 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea34:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea38:	4b35      	ldr	r3, [pc, #212]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea3a:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ea3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea40:	4a33      	ldr	r2, [pc, #204]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea42:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ea46:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea4a:	4b31      	ldr	r3, [pc, #196]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea4c:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800ea50:	4b2f      	ldr	r3, [pc, #188]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800ea58:	e006      	b.n	800ea68 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea5a:	4b2d      	ldr	r3, [pc, #180]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800ea62:	f7ff fbb1 	bl	800e1c8 <PrepareRxDoneAbort>
                    break;
 800ea66:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ea68:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ea6c:	2be0      	cmp	r3, #224	@ 0xe0
 800ea6e:	d118      	bne.n	800eaa2 <ProcessRadioRxDone+0x88e>
 800ea70:	4b28      	ldr	r3, [pc, #160]	@ (800eb14 <ProcessRadioRxDone+0x900>)
 800ea72:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800ea76:	f083 0301 	eor.w	r3, r3, #1
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d010      	beq.n	800eaa2 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea80:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ea84:	4b22      	ldr	r3, [pc, #136]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea86:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800ea8a:	4b21      	ldr	r3, [pc, #132]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800ea92:	4b1f      	ldr	r3, [pc, #124]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eaa2:	4a1b      	ldr	r2, [pc, #108]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800eaa4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eaa8:	f043 0302 	orr.w	r3, r3, #2
 800eaac:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800eab0:	e03d      	b.n	800eb2e <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800eab2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eab6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eaba:	18d1      	adds	r1, r2, r3
 800eabc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	461a      	mov	r2, r3
 800eacc:	4813      	ldr	r0, [pc, #76]	@ (800eb1c <ProcessRadioRxDone+0x908>)
 800eace:	f008 fade 	bl	801708e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ead2:	4b0f      	ldr	r3, [pc, #60]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800ead4:	2203      	movs	r2, #3
 800ead6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eada:	4b0d      	ldr	r3, [pc, #52]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800eae4:	4a0d      	ldr	r2, [pc, #52]	@ (800eb1c <ProcessRadioRxDone+0x908>)
 800eae6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800eaea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	4b05      	ldr	r3, [pc, #20]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800eafa:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eafe:	4a04      	ldr	r2, [pc, #16]	@ (800eb10 <ProcessRadioRxDone+0x8fc>)
 800eb00:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb04:	f043 0302 	orr.w	r3, r3, #2
 800eb08:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800eb0c:	e00f      	b.n	800eb2e <ProcessRadioRxDone+0x91a>
 800eb0e:	bf00      	nop
 800eb10:	200008d8 	.word	0x200008d8
 800eb14:	20000df8 	.word	0x20000df8
 800eb18:	20001988 	.word	0x20001988
 800eb1c:	20000b10 	.word	0x20000b10
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb20:	4b17      	ldr	r3, [pc, #92]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800eb28:	f7ff fb4e 	bl	800e1c8 <PrepareRxDoneAbort>
            break;
 800eb2c:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eb2e:	4b14      	ldr	r3, [pc, #80]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb30:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d004      	beq.n	800eb42 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800eb38:	4b11      	ldr	r3, [pc, #68]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb3a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d10c      	bne.n	800eb5c <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800eb42:	4b0f      	ldr	r3, [pc, #60]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb44:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d007      	beq.n	800eb5c <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800eb4c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb4e:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800eb56:	2000      	movs	r0, #0
 800eb58:	f000 fce4 	bl	800f524 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800eb5c:	4b08      	ldr	r3, [pc, #32]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb5e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d006      	beq.n	800eb74 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eb66:	4a06      	ldr	r2, [pc, #24]	@ (800eb80 <ProcessRadioRxDone+0x96c>)
 800eb68:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb6c:	f043 0320 	orr.w	r3, r3, #32
 800eb70:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800eb74:	f7ff fa82 	bl	800e07c <UpdateRxSlotIdleState>
}
 800eb78:	3794      	adds	r7, #148	@ 0x94
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd90      	pop	{r4, r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	200008d8 	.word	0x200008d8

0800eb84 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb88:	4b11      	ldr	r3, [pc, #68]	@ (800ebd0 <ProcessRadioTxTimeout+0x4c>)
 800eb8a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d002      	beq.n	800eb98 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800eb92:	4b10      	ldr	r3, [pc, #64]	@ (800ebd4 <ProcessRadioTxTimeout+0x50>)
 800eb94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb96:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800eb98:	f7ff fa70 	bl	800e07c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800eb9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd8 <ProcessRadioTxTimeout+0x54>)
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800eba4:	2002      	movs	r0, #2
 800eba6:	f004 fd57 	bl	8013658 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd8 <ProcessRadioTxTimeout+0x54>)
 800ebac:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d003      	beq.n	800ebbc <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ebb4:	4b08      	ldr	r3, [pc, #32]	@ (800ebd8 <ProcessRadioTxTimeout+0x54>)
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ebbc:	4a06      	ldr	r2, [pc, #24]	@ (800ebd8 <ProcessRadioTxTimeout+0x54>)
 800ebbe:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ebc2:	f043 0320 	orr.w	r3, r3, #32
 800ebc6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800ebca:	bf00      	nop
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20000df8 	.word	0x20000df8
 800ebd4:	0801f574 	.word	0x0801f574
 800ebd8:	200008d8 	.word	0x200008d8

0800ebdc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	460a      	mov	r2, r1
 800ebe6:	71fb      	strb	r3, [r7, #7]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ebf0:	4b3d      	ldr	r3, [pc, #244]	@ (800ece8 <HandleRadioRxErrorTimeout+0x10c>)
 800ebf2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d002      	beq.n	800ec00 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ebfa:	4b3c      	ldr	r3, [pc, #240]	@ (800ecec <HandleRadioRxErrorTimeout+0x110>)
 800ebfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebfe:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ec00:	f004 f870 	bl	8012ce4 <LoRaMacClassBIsBeaconExpected>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d007      	beq.n	800ec1a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f004 f81e 	bl	8012c4c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ec10:	2000      	movs	r0, #0
 800ec12:	f004 f840 	bl	8012c96 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ec16:	2301      	movs	r3, #1
 800ec18:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec1a:	4b33      	ldr	r3, [pc, #204]	@ (800ece8 <HandleRadioRxErrorTimeout+0x10c>)
 800ec1c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d119      	bne.n	800ec58 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec24:	f004 f865 	bl	8012cf2 <LoRaMacClassBIsPingExpected>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d007      	beq.n	800ec3e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec2e:	2000      	movs	r0, #0
 800ec30:	f004 f816 	bl	8012c60 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec34:	2000      	movs	r0, #0
 800ec36:	f004 f837 	bl	8012ca8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec3e:	f004 f85f 	bl	8012d00 <LoRaMacClassBIsMulticastExpected>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d007      	beq.n	800ec58 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec48:	2000      	movs	r0, #0
 800ec4a:	f004 f813 	bl	8012c74 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f004 f833 	bl	8012cba <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ec54:	2301      	movs	r3, #1
 800ec56:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	f083 0301 	eor.w	r3, r3, #1
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d03b      	beq.n	800ecdc <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec64:	4b22      	ldr	r3, [pc, #136]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ec66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d122      	bne.n	800ecb4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800ec6e:	4b20      	ldr	r3, [pc, #128]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ec70:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d003      	beq.n	800ec80 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ec78:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ec80:	79fb      	ldrb	r3, [r7, #7]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f004 fce8 	bl	8013658 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ec88:	4b17      	ldr	r3, [pc, #92]	@ (800ece8 <HandleRadioRxErrorTimeout+0x10c>)
 800ec8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f00c fc77 	bl	801b580 <UTIL_TIMER_GetElapsedTime>
 800ec92:	4602      	mov	r2, r0
 800ec94:	4b16      	ldr	r3, [pc, #88]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ec96:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d31e      	bcc.n	800ecdc <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ec9e:	4815      	ldr	r0, [pc, #84]	@ (800ecf4 <HandleRadioRxErrorTimeout+0x118>)
 800eca0:	f00c fb42 	bl	801b328 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800eca4:	4a12      	ldr	r2, [pc, #72]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800eca6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecaa:	f043 0320 	orr.w	r3, r3, #32
 800ecae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800ecb2:	e013      	b.n	800ecdc <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ecb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ecb6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ecbe:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ecc0:	79bb      	ldrb	r3, [r7, #6]
 800ecc2:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ecc6:	79bb      	ldrb	r3, [r7, #6]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f004 fcc5 	bl	8013658 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ecce:	4a08      	ldr	r2, [pc, #32]	@ (800ecf0 <HandleRadioRxErrorTimeout+0x114>)
 800ecd0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecd4:	f043 0320 	orr.w	r3, r3, #32
 800ecd8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800ecdc:	f7ff f9ce 	bl	800e07c <UpdateRxSlotIdleState>
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	20000df8 	.word	0x20000df8
 800ecec:	0801f574 	.word	0x0801f574
 800ecf0:	200008d8 	.word	0x200008d8
 800ecf4:	20000c70 	.word	0x20000c70

0800ecf8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ecfc:	2106      	movs	r1, #6
 800ecfe:	2005      	movs	r0, #5
 800ed00:	f7ff ff6c 	bl	800ebdc <HandleRadioRxErrorTimeout>
}
 800ed04:	bf00      	nop
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ed0c:	2104      	movs	r1, #4
 800ed0e:	2003      	movs	r0, #3
 800ed10:	f7ff ff64 	bl	800ebdc <HandleRadioRxErrorTimeout>
}
 800ed14:	bf00      	nop
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ed22:	607b      	str	r3, [r7, #4]
  return(result);
 800ed24:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ed26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed28:	b672      	cpsid	i
}
 800ed2a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ed2c:	4b1d      	ldr	r3, [pc, #116]	@ (800eda4 <LoRaMacHandleIrqEvents+0x8c>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ed32:	4b1c      	ldr	r3, [pc, #112]	@ (800eda4 <LoRaMacHandleIrqEvents+0x8c>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	f383 8810 	msr	PRIMASK, r3
}
 800ed42:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d027      	beq.n	800ed9a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ed4a:	783b      	ldrb	r3, [r7, #0]
 800ed4c:	f003 0320 	and.w	r3, r3, #32
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ed56:	f7ff f9a9 	bl	800e0ac <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ed5a:	783b      	ldrb	r3, [r7, #0]
 800ed5c:	f003 0310 	and.w	r3, r3, #16
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ed66:	f7ff fa55 	bl	800e214 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ed6a:	783b      	ldrb	r3, [r7, #0]
 800ed6c:	f003 0308 	and.w	r3, r3, #8
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ed76:	f7ff ff05 	bl	800eb84 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ed7a:	783b      	ldrb	r3, [r7, #0]
 800ed7c:	f003 0304 	and.w	r3, r3, #4
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ed86:	f7ff ffb7 	bl	800ecf8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ed8a:	783b      	ldrb	r3, [r7, #0]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ed96:	f7ff ffb7 	bl	800ed08 <ProcessRadioRxTimeout>
        }
    }
}
 800ed9a:	bf00      	nop
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20001980 	.word	0x20001980

0800eda8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800eda8:	b480      	push	{r7}
 800edaa:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800edac:	4b0c      	ldr	r3, [pc, #48]	@ (800ede0 <LoRaMacIsBusy+0x38>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	f003 0301 	and.w	r3, r3, #1
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d001      	beq.n	800edbe <LoRaMacIsBusy+0x16>
    {
        return true;
 800edba:	2301      	movs	r3, #1
 800edbc:	e00c      	b.n	800edd8 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800edbe:	4b09      	ldr	r3, [pc, #36]	@ (800ede4 <LoRaMacIsBusy+0x3c>)
 800edc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d106      	bne.n	800edd6 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800edc8:	4b06      	ldr	r3, [pc, #24]	@ (800ede4 <LoRaMacIsBusy+0x3c>)
 800edca:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d101      	bne.n	800edd6 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800edd2:	2300      	movs	r3, #0
 800edd4:	e000      	b.n	800edd8 <LoRaMacIsBusy+0x30>
    }
    return true;
 800edd6:	2301      	movs	r3, #1
}
 800edd8:	4618      	mov	r0, r3
 800edda:	46bd      	mov	sp, r7
 800eddc:	bc80      	pop	{r7}
 800edde:	4770      	bx	lr
 800ede0:	20001980 	.word	0x20001980
 800ede4:	200008d8 	.word	0x200008d8

0800ede8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800edf2:	4a04      	ldr	r2, [pc, #16]	@ (800ee04 <LoRaMacEnableRequests+0x1c>)
 800edf4:	79fb      	ldrb	r3, [r7, #7]
 800edf6:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bc80      	pop	{r7}
 800ee02:	4770      	bx	lr
 800ee04:	200008d8 	.word	0x200008d8

0800ee08 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ee0e:	4b2c      	ldr	r3, [pc, #176]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee14:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ee16:	4b2a      	ldr	r3, [pc, #168]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee18:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d14a      	bne.n	800eeb6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ee20:	4b27      	ldr	r3, [pc, #156]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d006      	beq.n	800ee3e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ee30:	4a23      	ldr	r2, [pc, #140]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee32:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee36:	f023 0301 	bic.w	r3, r3, #1
 800ee3a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ee3e:	4b20      	ldr	r3, [pc, #128]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee40:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ee44:	f003 0304 	and.w	r3, r3, #4
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d006      	beq.n	800ee5c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ee4e:	4a1c      	ldr	r2, [pc, #112]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee50:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee54:	f023 0304 	bic.w	r3, r3, #4
 800ee58:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ee5c:	2001      	movs	r0, #1
 800ee5e:	f7ff ffc3 	bl	800ede8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ee62:	793b      	ldrb	r3, [r7, #4]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d005      	beq.n	800ee7a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ee6e:	4b14      	ldr	r3, [pc, #80]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee70:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4813      	ldr	r0, [pc, #76]	@ (800eec4 <LoRaMacHandleRequestEvents+0xbc>)
 800ee78:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ee7a:	793b      	ldrb	r3, [r7, #4]
 800ee7c:	f003 0304 	and.w	r3, r3, #4
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00e      	beq.n	800eea4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ee86:	4810      	ldr	r0, [pc, #64]	@ (800eec8 <LoRaMacHandleRequestEvents+0xc0>)
 800ee88:	f004 fc34 	bl	80136f4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ee8c:	f004 fc7e 	bl	801378c <LoRaMacConfirmQueueGetCnt>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d006      	beq.n	800eea4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ee96:	4a0a      	ldr	r2, [pc, #40]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800ee98:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee9c:	f043 0304 	orr.w	r3, r3, #4
 800eea0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800eea4:	f003 ff4a 	bl	8012d3c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800eea8:	4a05      	ldr	r2, [pc, #20]	@ (800eec0 <LoRaMacHandleRequestEvents+0xb8>)
 800eeaa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eeae:	f023 0320 	bic.w	r3, r3, #32
 800eeb2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800eeb6:	bf00      	nop
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	200008d8 	.word	0x200008d8
 800eec4:	20000d1c 	.word	0x20000d1c
 800eec8:	20000d30 	.word	0x20000d30

0800eecc <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800eed2:	4b07      	ldr	r3, [pc, #28]	@ (800eef0 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800eed4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d105      	bne.n	800eee8 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800eedc:	2300      	movs	r3, #0
 800eede:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800eee0:	1dfb      	adds	r3, r7, #7
 800eee2:	4618      	mov	r0, r3
 800eee4:	f004 f9ec 	bl	80132c0 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	200008d8 	.word	0x200008d8

0800eef4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800eef8:	4b16      	ldr	r3, [pc, #88]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800eefa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eefe:	f003 0308 	and.w	r3, r3, #8
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00d      	beq.n	800ef24 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ef08:	4a12      	ldr	r2, [pc, #72]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800ef0a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef0e:	f023 0308 	bic.w	r3, r3, #8
 800ef12:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ef16:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800ef18:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	490e      	ldr	r1, [pc, #56]	@ (800ef58 <LoRaMacHandleIndicationEvents+0x64>)
 800ef20:	480e      	ldr	r0, [pc, #56]	@ (800ef5c <LoRaMacHandleIndicationEvents+0x68>)
 800ef22:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ef24:	4b0b      	ldr	r3, [pc, #44]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800ef26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef2a:	f003 0302 	and.w	r3, r3, #2
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00d      	beq.n	800ef50 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ef34:	4a07      	ldr	r2, [pc, #28]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800ef36:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef3a:	f023 0302 	bic.w	r3, r3, #2
 800ef3e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ef42:	4b04      	ldr	r3, [pc, #16]	@ (800ef54 <LoRaMacHandleIndicationEvents+0x60>)
 800ef44:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	4903      	ldr	r1, [pc, #12]	@ (800ef58 <LoRaMacHandleIndicationEvents+0x64>)
 800ef4c:	4804      	ldr	r0, [pc, #16]	@ (800ef60 <LoRaMacHandleIndicationEvents+0x6c>)
 800ef4e:	4798      	blx	r3
    }
}
 800ef50:	bf00      	nop
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	200008d8 	.word	0x200008d8
 800ef58:	20000d68 	.word	0x20000d68
 800ef5c:	20000d44 	.word	0x20000d44
 800ef60:	20000cfc 	.word	0x20000cfc

0800ef64 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ef6a:	4b2a      	ldr	r3, [pc, #168]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d048      	beq.n	800f00c <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef82:	4b24      	ldr	r3, [pc, #144]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef84:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d004      	beq.n	800ef96 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ef8c:	4b21      	ldr	r3, [pc, #132]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef8e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d104      	bne.n	800efa0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ef96:	f002 f8f9 	bl	801118c <CheckRetransUnconfirmedUplink>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	71fb      	strb	r3, [r7, #7]
 800ef9e:	e010      	b.n	800efc2 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800efa0:	4b1c      	ldr	r3, [pc, #112]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800efa2:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d10b      	bne.n	800efc2 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800efaa:	4b1a      	ldr	r3, [pc, #104]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800efac:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d004      	beq.n	800efbe <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800efb4:	f002 f916 	bl	80111e4 <CheckRetransConfirmedUplink>
 800efb8:	4603      	mov	r3, r0
 800efba:	71fb      	strb	r3, [r7, #7]
 800efbc:	e001      	b.n	800efc2 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800efbe:	2301      	movs	r3, #1
 800efc0:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00d      	beq.n	800efe4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800efc8:	4813      	ldr	r0, [pc, #76]	@ (800f018 <LoRaMacHandleMcpsRequest+0xb4>)
 800efca:	f00c f9ad 	bl	801b328 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800efce:	4b11      	ldr	r3, [pc, #68]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800efd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efd4:	f023 0320 	bic.w	r3, r3, #32
 800efd8:	4a0e      	ldr	r2, [pc, #56]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800efda:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800efde:	f002 f93b 	bl	8011258 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800efe2:	e013      	b.n	800f00c <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800efe4:	79bb      	ldrb	r3, [r7, #6]
 800efe6:	f083 0301 	eor.w	r3, r3, #1
 800efea:	b2db      	uxtb	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00d      	beq.n	800f00c <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800eff0:	4a08      	ldr	r2, [pc, #32]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800eff2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eff6:	f023 0320 	bic.w	r3, r3, #32
 800effa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800effe:	4b05      	ldr	r3, [pc, #20]	@ (800f014 <LoRaMacHandleMcpsRequest+0xb0>)
 800f000:	2200      	movs	r2, #0
 800f002:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f006:	2000      	movs	r0, #0
 800f008:	f000 f9c8 	bl	800f39c <OnTxDelayedTimerEvent>
}
 800f00c:	bf00      	nop
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	200008d8 	.word	0x200008d8
 800f018:	20000c40 	.word	0x20000c40

0800f01c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f020:	4b18      	ldr	r3, [pc, #96]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f022:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f026:	f003 0304 	and.w	r3, r3, #4
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d026      	beq.n	800f07e <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f030:	2001      	movs	r0, #1
 800f032:	f004 fb45 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d012      	beq.n	800f062 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f03c:	2001      	movs	r0, #1
 800f03e:	f004 fae1 	bl	8013604 <LoRaMacConfirmQueueGetStatus>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d103      	bne.n	800f050 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f048:	4b0e      	ldr	r3, [pc, #56]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f050:	4b0c      	ldr	r3, [pc, #48]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f052:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f056:	f023 0302 	bic.w	r3, r3, #2
 800f05a:	4a0a      	ldr	r2, [pc, #40]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f05c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f060:	e00d      	b.n	800f07e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f062:	2005      	movs	r0, #5
 800f064:	f004 fb2c 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d007      	beq.n	800f07e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f06e:	4b05      	ldr	r3, [pc, #20]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f070:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f074:	f023 0302 	bic.w	r3, r3, #2
 800f078:	4a02      	ldr	r2, [pc, #8]	@ (800f084 <LoRaMacHandleMlmeRequest+0x68>)
 800f07a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f07e:	bf00      	nop
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	200008d8 	.word	0x200008d8

0800f088 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f08c:	200b      	movs	r0, #11
 800f08e:	f004 fb17 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d019      	beq.n	800f0cc <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f098:	4b0e      	ldr	r3, [pc, #56]	@ (800f0d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f09a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d111      	bne.n	800f0cc <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f0ae:	f003 0304 	and.w	r3, r3, #4
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d009      	beq.n	800f0cc <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0b8:	4b06      	ldr	r3, [pc, #24]	@ (800f0d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0be:	f023 0302 	bic.w	r3, r3, #2
 800f0c2:	4a04      	ldr	r2, [pc, #16]	@ (800f0d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0c4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e000      	b.n	800f0ce <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	200008d8 	.word	0x200008d8

0800f0d8 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	71fb      	strb	r3, [r7, #7]
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	71bb      	strb	r3, [r7, #6]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f0ea:	79fb      	ldrb	r3, [r7, #7]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00a      	beq.n	800f106 <CheckForMinimumAbpDatarate+0x2e>
 800f0f0:	79bb      	ldrb	r3, [r7, #6]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d107      	bne.n	800f106 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f0f6:	797b      	ldrb	r3, [r7, #5]
 800f0f8:	f083 0301 	eor.w	r3, r3, #1
 800f0fc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f102:	2301      	movs	r3, #1
 800f104:	e000      	b.n	800f108 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bc80      	pop	{r7}
 800f110:	4770      	bx	lr
	...

0800f114 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f114:	b480      	push	{r7}
 800f116:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f118:	4b0d      	ldr	r3, [pc, #52]	@ (800f150 <LoRaMacCheckForRxAbort+0x3c>)
 800f11a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00f      	beq.n	800f146 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f126:	4b0a      	ldr	r3, [pc, #40]	@ (800f150 <LoRaMacCheckForRxAbort+0x3c>)
 800f128:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f12c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f130:	4a07      	ldr	r2, [pc, #28]	@ (800f150 <LoRaMacCheckForRxAbort+0x3c>)
 800f132:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f136:	4b06      	ldr	r3, [pc, #24]	@ (800f150 <LoRaMacCheckForRxAbort+0x3c>)
 800f138:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f13c:	f023 0302 	bic.w	r3, r3, #2
 800f140:	4a03      	ldr	r2, [pc, #12]	@ (800f150 <LoRaMacCheckForRxAbort+0x3c>)
 800f142:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f146:	bf00      	nop
 800f148:	46bd      	mov	sp, r7
 800f14a:	bc80      	pop	{r7}
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	200008d8 	.word	0x200008d8

0800f154 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f160:	2300      	movs	r3, #0
 800f162:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f164:	4b50      	ldr	r3, [pc, #320]	@ (800f2a8 <LoRaMacHandleNvm+0x154>)
 800f166:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f040 8098 	bne.w	800f2a0 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2124      	movs	r1, #36	@ 0x24
 800f174:	4618      	mov	r0, r3
 800f176:	f007 ffdf 	bl	8017138 <Crc32>
 800f17a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	429a      	cmp	r2, r3
 800f184:	d006      	beq.n	800f194 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f18c:	89fb      	ldrh	r3, [r7, #14]
 800f18e:	f043 0301 	orr.w	r3, r3, #1
 800f192:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3328      	adds	r3, #40	@ 0x28
 800f198:	2114      	movs	r1, #20
 800f19a:	4618      	mov	r0, r3
 800f19c:	f007 ffcc 	bl	8017138 <Crc32>
 800f1a0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1a6:	68ba      	ldr	r2, [r7, #8]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d006      	beq.n	800f1ba <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f1b2:	89fb      	ldrh	r3, [r7, #14]
 800f1b4:	f043 0302 	orr.w	r3, r3, #2
 800f1b8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3340      	adds	r3, #64	@ 0x40
 800f1be:	21e0      	movs	r1, #224	@ 0xe0
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f007 ffb9 	bl	8017138 <Crc32>
 800f1c6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d007      	beq.n	800f1e4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f1dc:	89fb      	ldrh	r3, [r7, #14]
 800f1de:	f043 0304 	orr.w	r3, r3, #4
 800f1e2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f1ea:	21bc      	movs	r1, #188	@ 0xbc
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f007 ffa3 	bl	8017138 <Crc32>
 800f1f2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d007      	beq.n	800f210 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f208:	89fb      	ldrh	r3, [r7, #14]
 800f20a:	f043 0308 	orr.w	r3, r3, #8
 800f20e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f216:	2100      	movs	r1, #0
 800f218:	4618      	mov	r0, r3
 800f21a:	f007 ff8d 	bl	8017138 <Crc32>
 800f21e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d007      	beq.n	800f23c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f234:	89fb      	ldrh	r3, [r7, #14]
 800f236:	f043 0310 	orr.w	r3, r3, #16
 800f23a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f242:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f246:	4618      	mov	r0, r3
 800f248:	f007 ff76 	bl	8017138 <Crc32>
 800f24c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	429a      	cmp	r2, r3
 800f258:	d007      	beq.n	800f26a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f262:	89fb      	ldrh	r3, [r7, #14]
 800f264:	f043 0320 	orr.w	r3, r3, #32
 800f268:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800f270:	2114      	movs	r1, #20
 800f272:	4618      	mov	r0, r3
 800f274:	f007 ff60 	bl	8017138 <Crc32>
 800f278:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	429a      	cmp	r2, r3
 800f284:	d007      	beq.n	800f296 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f28e:	89fb      	ldrh	r3, [r7, #14]
 800f290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f294:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f296:	89fb      	ldrh	r3, [r7, #14]
 800f298:	4618      	mov	r0, r3
 800f29a:	f002 f819 	bl	80112d0 <CallNvmDataChangeCallback>
 800f29e:	e000      	b.n	800f2a2 <LoRaMacHandleNvm+0x14e>
        return;
 800f2a0:	bf00      	nop
}
 800f2a2:	3710      	adds	r7, #16
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	200008d8 	.word	0x200008d8

0800f2ac <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00d      	beq.n	800f2d8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f2bc:	6838      	ldr	r0, [r7, #0]
 800f2be:	f00c f95f 	bl	801b580 <UTIL_TIMER_GetElapsedTime>
 800f2c2:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f2c4:	68fa      	ldr	r2, [r7, #12]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d905      	bls.n	800f2d8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f2cc:	4b05      	ldr	r3, [pc, #20]	@ (800f2e4 <LoRaMacHandleResponseTimeout+0x38>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e000      	b.n	800f2da <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20000df8 	.word	0x20000df8

0800f2e8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f2f2:	f7ff fd11 	bl	800ed18 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f2f6:	f003 fd90 	bl	8012e1a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f2fa:	4b26      	ldr	r3, [pc, #152]	@ (800f394 <LoRaMacProcess+0xac>)
 800f2fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f300:	f003 0320 	and.w	r3, r3, #32
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d025      	beq.n	800f356 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7ff fd6c 	bl	800ede8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f310:	f7ff ff00 	bl	800f114 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f314:	f001 fffa 	bl	801130c <IsRequestPending>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d006      	beq.n	800f32c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f31e:	f7ff feb3 	bl	800f088 <LoRaMacCheckForBeaconAcquisition>
 800f322:	4603      	mov	r3, r0
 800f324:	461a      	mov	r2, r3
 800f326:	79fb      	ldrb	r3, [r7, #7]
 800f328:	4313      	orrs	r3, r2
 800f32a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d103      	bne.n	800f33a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f332:	f7ff fe73 	bl	800f01c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f336:	f7ff fe15 	bl	800ef64 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f33a:	f7ff fd65 	bl	800ee08 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f33e:	f7ff fdc5 	bl	800eecc <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f342:	2001      	movs	r0, #1
 800f344:	f7ff fd50 	bl	800ede8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f348:	4a12      	ldr	r2, [pc, #72]	@ (800f394 <LoRaMacProcess+0xac>)
 800f34a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f352:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f356:	f7ff fdcd 	bl	800eef4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f35a:	4b0e      	ldr	r3, [pc, #56]	@ (800f394 <LoRaMacProcess+0xac>)
 800f35c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f360:	2b02      	cmp	r3, #2
 800f362:	d101      	bne.n	800f368 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f364:	f001 fbee 	bl	8010b44 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f368:	4b0a      	ldr	r3, [pc, #40]	@ (800f394 <LoRaMacProcess+0xac>)
 800f36a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f36e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f372:	b2db      	uxtb	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d009      	beq.n	800f38c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f378:	4a06      	ldr	r2, [pc, #24]	@ (800f394 <LoRaMacProcess+0xac>)
 800f37a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f37e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f382:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800f386:	4804      	ldr	r0, [pc, #16]	@ (800f398 <LoRaMacProcess+0xb0>)
 800f388:	f7ff fee4 	bl	800f154 <LoRaMacHandleNvm>
    }
}
 800f38c:	bf00      	nop
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	200008d8 	.word	0x200008d8
 800f398:	20000df8 	.word	0x20000df8

0800f39c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f3a4:	481e      	ldr	r0, [pc, #120]	@ (800f420 <OnTxDelayedTimerEvent+0x84>)
 800f3a6:	f00b ffbf 	bl	801b328 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f3aa:	4b1e      	ldr	r3, [pc, #120]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3b0:	f023 0320 	bic.w	r3, r3, #32
 800f3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3b6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f3ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f428 <OnTxDelayedTimerEvent+0x8c>)
 800f3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3c0:	4a18      	ldr	r2, [pc, #96]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3c2:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff ff6f 	bl	800f2ac <LoRaMacHandleResponseTimeout>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d11e      	bne.n	800f412 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	f001 f93b 	bl	8010650 <ScheduleTx>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d01a      	beq.n	800f416 <OnTxDelayedTimerEvent+0x7a>
 800f3e0:	2b0b      	cmp	r3, #11
 800f3e2:	d018      	beq.n	800f416 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3e4:	4b10      	ldr	r3, [pc, #64]	@ (800f428 <OnTxDelayedTimerEvent+0x8c>)
 800f3e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3ee:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3f4:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f3fa:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f3fe:	4b09      	ldr	r3, [pc, #36]	@ (800f424 <OnTxDelayedTimerEvent+0x88>)
 800f400:	2209      	movs	r2, #9
 800f402:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f406:	2009      	movs	r0, #9
 800f408:	f004 f926 	bl	8013658 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f40c:	f001 ff24 	bl	8011258 <StopRetransmission>
            break;
 800f410:	e002      	b.n	800f418 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f412:	bf00      	nop
 800f414:	e000      	b.n	800f418 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f416:	bf00      	nop
        }
    }
}
 800f418:	3708      	adds	r7, #8
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20000c40 	.word	0x20000c40
 800f424:	200008d8 	.word	0x200008d8
 800f428:	20000df8 	.word	0x20000df8

0800f42c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f434:	4b17      	ldr	r3, [pc, #92]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f436:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f43a:	4b16      	ldr	r3, [pc, #88]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f43c:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f440:	4b15      	ldr	r3, [pc, #84]	@ (800f498 <OnRxWindow1TimerEvent+0x6c>)
 800f442:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f446:	b25a      	sxtb	r2, r3
 800f448:	4b12      	ldr	r3, [pc, #72]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f44a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f44e:	4b12      	ldr	r3, [pc, #72]	@ (800f498 <OnRxWindow1TimerEvent+0x6c>)
 800f450:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f454:	4b0f      	ldr	r3, [pc, #60]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f456:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f45a:	4b0f      	ldr	r3, [pc, #60]	@ (800f498 <OnRxWindow1TimerEvent+0x6c>)
 800f45c:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f460:	4b0c      	ldr	r3, [pc, #48]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f462:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f466:	4b0b      	ldr	r3, [pc, #44]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f46e:	4b09      	ldr	r3, [pc, #36]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f470:	2200      	movs	r2, #0
 800f472:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f476:	4b08      	ldr	r3, [pc, #32]	@ (800f498 <OnRxWindow1TimerEvent+0x6c>)
 800f478:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <OnRxWindow1TimerEvent+0x68>)
 800f47e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f482:	4906      	ldr	r1, [pc, #24]	@ (800f49c <OnRxWindow1TimerEvent+0x70>)
 800f484:	4806      	ldr	r0, [pc, #24]	@ (800f4a0 <OnRxWindow1TimerEvent+0x74>)
 800f486:	f001 fb29 	bl	8010adc <RxWindowSetup>
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	200008d8 	.word	0x200008d8
 800f498:	20000df8 	.word	0x20000df8
 800f49c:	20000c90 	.word	0x20000c90
 800f4a0:	20000c58 	.word	0x20000c58

0800f4a4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f4ac:	4b19      	ldr	r3, [pc, #100]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d029      	beq.n	800f50a <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f4b6:	4b17      	ldr	r3, [pc, #92]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4b8:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f4bc:	4b15      	ldr	r3, [pc, #84]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4be:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f4c2:	4b15      	ldr	r3, [pc, #84]	@ (800f518 <OnRxWindow2TimerEvent+0x74>)
 800f4c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4c6:	4a13      	ldr	r2, [pc, #76]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4c8:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f4cc:	4b12      	ldr	r3, [pc, #72]	@ (800f518 <OnRxWindow2TimerEvent+0x74>)
 800f4ce:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f4d2:	4b10      	ldr	r3, [pc, #64]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4d4:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f4d8:	4b0f      	ldr	r3, [pc, #60]	@ (800f518 <OnRxWindow2TimerEvent+0x74>)
 800f4da:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f4de:	4b0d      	ldr	r3, [pc, #52]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4e0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f4ec:	4b09      	ldr	r3, [pc, #36]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f4f4:	4b08      	ldr	r3, [pc, #32]	@ (800f518 <OnRxWindow2TimerEvent+0x74>)
 800f4f6:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f4fa:	4b06      	ldr	r3, [pc, #24]	@ (800f514 <OnRxWindow2TimerEvent+0x70>)
 800f4fc:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f500:	4906      	ldr	r1, [pc, #24]	@ (800f51c <OnRxWindow2TimerEvent+0x78>)
 800f502:	4807      	ldr	r0, [pc, #28]	@ (800f520 <OnRxWindow2TimerEvent+0x7c>)
 800f504:	f001 faea 	bl	8010adc <RxWindowSetup>
 800f508:	e000      	b.n	800f50c <OnRxWindow2TimerEvent+0x68>
        return;
 800f50a:	bf00      	nop
}
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	200008d8 	.word	0x200008d8
 800f518:	20000df8 	.word	0x20000df8
 800f51c:	20000ca8 	.word	0x20000ca8
 800f520:	20000c70 	.word	0x20000c70

0800f524 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f52c:	480f      	ldr	r0, [pc, #60]	@ (800f56c <OnRetransmitTimeoutTimerEvent+0x48>)
 800f52e:	f00b fefb 	bl	801b328 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f532:	4b0f      	ldr	r3, [pc, #60]	@ (800f570 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f534:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f53c:	4b0c      	ldr	r3, [pc, #48]	@ (800f570 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f544:	4b0a      	ldr	r3, [pc, #40]	@ (800f570 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f546:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <OnRetransmitTimeoutTimerEvent+0x40>
 800f54e:	4b08      	ldr	r3, [pc, #32]	@ (800f570 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f550:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d004      	beq.n	800f564 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f55a:	4b05      	ldr	r3, [pc, #20]	@ (800f570 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f55c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	4798      	blx	r3
    }
}
 800f564:	bf00      	nop
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	20000cdc 	.word	0x20000cdc
 800f570:	200008d8 	.word	0x200008d8

0800f574 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60ba      	str	r2, [r7, #8]
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	4603      	mov	r3, r0
 800f580:	73fb      	strb	r3, [r7, #15]
 800f582:	460b      	mov	r3, r1
 800f584:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <GetFCntDown+0x24>
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <GetFCntDown+0x24>
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d101      	bne.n	800f59c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f598:	2309      	movs	r3, #9
 800f59a:	e028      	b.n	800f5ee <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d016      	beq.n	800f5d0 <GetFCntDown+0x5c>
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d118      	bne.n	800f5d8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f5a6:	79bb      	ldrb	r3, [r7, #6]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d10d      	bne.n	800f5c8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <GetFCntDown+0x44>
 800f5b2:	7bbb      	ldrb	r3, [r7, #14]
 800f5b4:	2b03      	cmp	r3, #3
 800f5b6:	d103      	bne.n	800f5c0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f5be:	e00d      	b.n	800f5dc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	701a      	strb	r2, [r3, #0]
            break;
 800f5c6:	e009      	b.n	800f5dc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	2203      	movs	r2, #3
 800f5cc:	701a      	strb	r2, [r3, #0]
            break;
 800f5ce:	e005      	b.n	800f5dc <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	2204      	movs	r2, #4
 800f5d4:	701a      	strb	r2, [r3, #0]
            break;
 800f5d6:	e001      	b.n	800f5dc <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f5d8:	2305      	movs	r3, #5
 800f5da:	e008      	b.n	800f5ee <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	7818      	ldrb	r0, [r3, #0]
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	89db      	ldrh	r3, [r3, #14]
 800f5e4:	69fa      	ldr	r2, [r7, #28]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f004 fc5c 	bl	8013ea4 <LoRaMacCryptoGetFCntDown>
 800f5ec:	4603      	mov	r3, r0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f5f8:	b5b0      	push	{r4, r5, r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	4603      	mov	r3, r0
 800f600:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f602:	2303      	movs	r3, #3
 800f604:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f606:	4b62      	ldr	r3, [pc, #392]	@ (800f790 <SwitchClass+0x198>)
 800f608:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	f000 80a7 	beq.w	800f760 <SwitchClass+0x168>
 800f612:	2b02      	cmp	r3, #2
 800f614:	f300 80b6 	bgt.w	800f784 <SwitchClass+0x18c>
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d003      	beq.n	800f624 <SwitchClass+0x2c>
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	f000 8091 	beq.w	800f744 <SwitchClass+0x14c>
 800f622:	e0af      	b.n	800f784 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d107      	bne.n	800f63a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f62a:	4b59      	ldr	r3, [pc, #356]	@ (800f790 <SwitchClass+0x198>)
 800f62c:	4a58      	ldr	r2, [pc, #352]	@ (800f790 <SwitchClass+0x198>)
 800f62e:	336c      	adds	r3, #108	@ 0x6c
 800f630:	3264      	adds	r2, #100	@ 0x64
 800f632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f636:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d10c      	bne.n	800f65a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f640:	79fb      	ldrb	r3, [r7, #7]
 800f642:	4618      	mov	r0, r3
 800f644:	f003 fb80 	bl	8012d48 <LoRaMacClassBSwitchClass>
 800f648:	4603      	mov	r3, r0
 800f64a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f64c:	7bfb      	ldrb	r3, [r7, #15]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d103      	bne.n	800f65a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f652:	4a4f      	ldr	r2, [pc, #316]	@ (800f790 <SwitchClass+0x198>)
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f65a:	79fb      	ldrb	r3, [r7, #7]
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	f040 808c 	bne.w	800f77a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f662:	4a4b      	ldr	r2, [pc, #300]	@ (800f790 <SwitchClass+0x198>)
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f66a:	4a4a      	ldr	r2, [pc, #296]	@ (800f794 <SwitchClass+0x19c>)
 800f66c:	4b49      	ldr	r3, [pc, #292]	@ (800f794 <SwitchClass+0x19c>)
 800f66e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f672:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f67a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f67e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f682:	4b44      	ldr	r3, [pc, #272]	@ (800f794 <SwitchClass+0x19c>)
 800f684:	2202      	movs	r2, #2
 800f686:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f68a:	2300      	movs	r3, #0
 800f68c:	73bb      	strb	r3, [r7, #14]
 800f68e:	e049      	b.n	800f724 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f694:	4a3e      	ldr	r2, [pc, #248]	@ (800f790 <SwitchClass+0x198>)
 800f696:	212c      	movs	r1, #44	@ 0x2c
 800f698:	fb01 f303 	mul.w	r3, r1, r3
 800f69c:	4413      	add	r3, r2
 800f69e:	33da      	adds	r3, #218	@ 0xda
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d038      	beq.n	800f718 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6aa:	4a39      	ldr	r2, [pc, #228]	@ (800f790 <SwitchClass+0x198>)
 800f6ac:	212c      	movs	r1, #44	@ 0x2c
 800f6ae:	fb01 f303 	mul.w	r3, r1, r3
 800f6b2:	4413      	add	r3, r2
 800f6b4:	33f0      	adds	r3, #240	@ 0xf0
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a35      	ldr	r2, [pc, #212]	@ (800f790 <SwitchClass+0x198>)
 800f6ba:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f6bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6c0:	4a33      	ldr	r2, [pc, #204]	@ (800f790 <SwitchClass+0x198>)
 800f6c2:	212c      	movs	r1, #44	@ 0x2c
 800f6c4:	fb01 f303 	mul.w	r3, r1, r3
 800f6c8:	4413      	add	r3, r2
 800f6ca:	33f4      	adds	r3, #244	@ 0xf4
 800f6cc:	f993 3000 	ldrsb.w	r3, [r3]
 800f6d0:	b2da      	uxtb	r2, r3
 800f6d2:	4b2f      	ldr	r3, [pc, #188]	@ (800f790 <SwitchClass+0x198>)
 800f6d4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f6d8:	4b2e      	ldr	r3, [pc, #184]	@ (800f794 <SwitchClass+0x19c>)
 800f6da:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f6de:	4b2d      	ldr	r3, [pc, #180]	@ (800f794 <SwitchClass+0x19c>)
 800f6e0:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f6e4:	4b2a      	ldr	r3, [pc, #168]	@ (800f790 <SwitchClass+0x198>)
 800f6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6e8:	4a2a      	ldr	r2, [pc, #168]	@ (800f794 <SwitchClass+0x19c>)
 800f6ea:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f6ee:	4b28      	ldr	r3, [pc, #160]	@ (800f790 <SwitchClass+0x198>)
 800f6f0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f6f4:	4b27      	ldr	r3, [pc, #156]	@ (800f794 <SwitchClass+0x19c>)
 800f6f6:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f6fa:	4b25      	ldr	r3, [pc, #148]	@ (800f790 <SwitchClass+0x198>)
 800f6fc:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f700:	4b24      	ldr	r3, [pc, #144]	@ (800f794 <SwitchClass+0x19c>)
 800f702:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f706:	4b23      	ldr	r3, [pc, #140]	@ (800f794 <SwitchClass+0x19c>)
 800f708:	2203      	movs	r2, #3
 800f70a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f70e:	4b21      	ldr	r3, [pc, #132]	@ (800f794 <SwitchClass+0x19c>)
 800f710:	2201      	movs	r2, #1
 800f712:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f716:	e009      	b.n	800f72c <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	3301      	adds	r3, #1
 800f720:	b2db      	uxtb	r3, r3
 800f722:	73bb      	strb	r3, [r7, #14]
 800f724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	ddb1      	ble.n	800f690 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f72c:	4b19      	ldr	r3, [pc, #100]	@ (800f794 <SwitchClass+0x19c>)
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f734:	4b18      	ldr	r3, [pc, #96]	@ (800f798 <SwitchClass+0x1a0>)
 800f736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f738:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f73a:	f001 fa03 	bl	8010b44 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f742:	e01a      	b.n	800f77a <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	4618      	mov	r0, r3
 800f748:	f003 fafe 	bl	8012d48 <LoRaMacClassBSwitchClass>
 800f74c:	4603      	mov	r3, r0
 800f74e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f750:	7bfb      	ldrb	r3, [r7, #15]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d113      	bne.n	800f77e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f756:	4a0e      	ldr	r2, [pc, #56]	@ (800f790 <SwitchClass+0x198>)
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f75e:	e00e      	b.n	800f77e <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10d      	bne.n	800f782 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f766:	4a0a      	ldr	r2, [pc, #40]	@ (800f790 <SwitchClass+0x198>)
 800f768:	79fb      	ldrb	r3, [r7, #7]
 800f76a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f76e:	4b0a      	ldr	r3, [pc, #40]	@ (800f798 <SwitchClass+0x1a0>)
 800f770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f772:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f778:	e003      	b.n	800f782 <SwitchClass+0x18a>
            break;
 800f77a:	bf00      	nop
 800f77c:	e002      	b.n	800f784 <SwitchClass+0x18c>
            break;
 800f77e:	bf00      	nop
 800f780:	e000      	b.n	800f784 <SwitchClass+0x18c>
            break;
 800f782:	bf00      	nop
        }
    }

    return status;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bdb0      	pop	{r4, r5, r7, pc}
 800f78e:	bf00      	nop
 800f790:	20000df8 	.word	0x20000df8
 800f794:	200008d8 	.word	0x200008d8
 800f798:	0801f574 	.word	0x0801f574

0800f79c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7a6:	4b10      	ldr	r3, [pc, #64]	@ (800f7e8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7a8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f7ac:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f7b2:	230d      	movs	r3, #13
 800f7b4:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f7e8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f7c0:	230e      	movs	r3, #14
 800f7c2:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7c4:	4b08      	ldr	r3, [pc, #32]	@ (800f7e8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f7c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7ca:	f107 0210 	add.w	r2, r7, #16
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f005 f9bb 	bl	8014b4c <RegionGetPhyParam>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	b2db      	uxtb	r3, r3
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20000df8 	.word	0x20000df8

0800f7ec <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	71fb      	strb	r3, [r7, #7]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	71bb      	strb	r3, [r7, #6]
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f806:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff ffc6 	bl	800f79c <GetMaxAppPayloadWithoutFOptsLength>
 800f810:	4603      	mov	r3, r0
 800f812:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f814:	79fb      	ldrb	r3, [r7, #7]
 800f816:	b29a      	uxth	r2, r3
 800f818:	797b      	ldrb	r3, [r7, #5]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4413      	add	r3, r2
 800f81e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f820:	89ba      	ldrh	r2, [r7, #12]
 800f822:	89fb      	ldrh	r3, [r7, #14]
 800f824:	429a      	cmp	r2, r3
 800f826:	d804      	bhi.n	800f832 <ValidatePayloadLength+0x46>
 800f828:	89bb      	ldrh	r3, [r7, #12]
 800f82a:	2bff      	cmp	r3, #255	@ 0xff
 800f82c:	d801      	bhi.n	800f832 <ValidatePayloadLength+0x46>
    {
        return true;
 800f82e:	2301      	movs	r3, #1
 800f830:	e000      	b.n	800f834 <ValidatePayloadLength+0x48>
    }
    return false;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f83c:	b590      	push	{r4, r7, lr}
 800f83e:	b0a5      	sub	sp, #148	@ 0x94
 800f840:	af02      	add	r7, sp, #8
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	4608      	mov	r0, r1
 800f846:	4611      	mov	r1, r2
 800f848:	461a      	mov	r2, r3
 800f84a:	4603      	mov	r3, r0
 800f84c:	70fb      	strb	r3, [r7, #3]
 800f84e:	460b      	mov	r3, r1
 800f850:	70bb      	strb	r3, [r7, #2]
 800f852:	4613      	mov	r3, r2
 800f854:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f856:	2300      	movs	r3, #0
 800f858:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f85c:	2300      	movs	r3, #0
 800f85e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f862:	2300      	movs	r3, #0
 800f864:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f868:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 84b9 	beq.w	80101e4 <ProcessMacCommands+0x9a8>
 800f872:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f876:	2b01      	cmp	r3, #1
 800f878:	f040 84ba 	bne.w	80101f0 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f87c:	f000 bcb2 	b.w	80101e4 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f880:	78fb      	ldrb	r3, [r7, #3]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	4413      	add	r3, r2
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	4618      	mov	r0, r3
 800f88a:	f003 fd41 	bl	8013310 <LoRaMacCommandsGetCmdSize>
 800f88e:	4603      	mov	r3, r0
 800f890:	461a      	mov	r2, r3
 800f892:	78fb      	ldrb	r3, [r7, #3]
 800f894:	441a      	add	r2, r3
 800f896:	78bb      	ldrb	r3, [r7, #2]
 800f898:	429a      	cmp	r2, r3
 800f89a:	f300 84ab 	bgt.w	80101f4 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f89e:	78fb      	ldrb	r3, [r7, #3]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	70fa      	strb	r2, [r7, #3]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	3b02      	subs	r3, #2
 800f8ae:	2b11      	cmp	r3, #17
 800f8b0:	f200 84a2 	bhi.w	80101f8 <ProcessMacCommands+0x9bc>
 800f8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f8bc <ProcessMacCommands+0x80>)
 800f8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ba:	bf00      	nop
 800f8bc:	0800f905 	.word	0x0800f905
 800f8c0:	0800f947 	.word	0x0800f947
 800f8c4:	0800fac3 	.word	0x0800fac3
 800f8c8:	0800fb01 	.word	0x0800fb01
 800f8cc:	0800fbf9 	.word	0x0800fbf9
 800f8d0:	0800fc49 	.word	0x0800fc49
 800f8d4:	0800fd05 	.word	0x0800fd05
 800f8d8:	0800fd5b 	.word	0x0800fd5b
 800f8dc:	0800fe3f 	.word	0x0800fe3f
 800f8e0:	080101f9 	.word	0x080101f9
 800f8e4:	080101f9 	.word	0x080101f9
 800f8e8:	0800fee9 	.word	0x0800fee9
 800f8ec:	080101f9 	.word	0x080101f9
 800f8f0:	080101f9 	.word	0x080101f9
 800f8f4:	08010009 	.word	0x08010009
 800f8f8:	0801003d 	.word	0x0801003d
 800f8fc:	080100cd 	.word	0x080100cd
 800f900:	08010145 	.word	0x08010145
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f904:	2004      	movs	r0, #4
 800f906:	f003 fedb 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 845c 	beq.w	80101ca <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f912:	2104      	movs	r1, #4
 800f914:	2000      	movs	r0, #0
 800f916:	f003 fe47 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f91a:	78fb      	ldrb	r3, [r7, #3]
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	70fa      	strb	r2, [r7, #3]
 800f920:	461a      	mov	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4413      	add	r3, r2
 800f926:	781a      	ldrb	r2, [r3, #0]
 800f928:	4bb0      	ldr	r3, [pc, #704]	@ (800fbec <ProcessMacCommands+0x3b0>)
 800f92a:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	70fa      	strb	r2, [r7, #3]
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4413      	add	r3, r2
 800f93a:	781a      	ldrb	r2, [r3, #0]
 800f93c:	4bab      	ldr	r3, [pc, #684]	@ (800fbec <ProcessMacCommands+0x3b0>)
 800f93e:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f942:	f000 bc42 	b.w	80101ca <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f946:	2300      	movs	r3, #0
 800f948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f94c:	2300      	movs	r3, #0
 800f94e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f95e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f962:	f083 0301 	eor.w	r3, r3, #1
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 80a6 	beq.w	800faba <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f96e:	2301      	movs	r3, #1
 800f970:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f974:	78fb      	ldrb	r3, [r7, #3]
 800f976:	3b01      	subs	r3, #1
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	4413      	add	r3, r2
 800f97c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f97e:	4b9c      	ldr	r3, [pc, #624]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f980:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f984:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f988:	4b99      	ldr	r3, [pc, #612]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f98a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f98e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f992:	4b97      	ldr	r3, [pc, #604]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f994:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f998:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f99c:	4b94      	ldr	r3, [pc, #592]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f99e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f9a2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f9a6:	4b92      	ldr	r3, [pc, #584]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f9a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f9ac:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f9b2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f9b6:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f9b8:	4b8d      	ldr	r3, [pc, #564]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f9ba:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d008      	beq.n	800f9d4 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f9c2:	78ba      	ldrb	r2, [r7, #2]
 800f9c4:	78fb      	ldrb	r3, [r7, #3]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f9d2:	e002      	b.n	800f9da <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f9d4:	2305      	movs	r3, #5
 800f9d6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f9da:	4b85      	ldr	r3, [pc, #532]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800f9dc:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f9e0:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f9e4:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f9e8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f9ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	4623      	mov	r3, r4
 800f9fa:	f005 f964 	bl	8014cc6 <RegionLinkAdrReq>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fa04:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fa08:	f003 0307 	and.w	r3, r3, #7
 800fa0c:	2b07      	cmp	r3, #7
 800fa0e:	d119      	bne.n	800fa44 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800fa10:	4b77      	ldr	r3, [pc, #476]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fa12:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800fa16:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	da03      	bge.n	800fa26 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fa1e:	4b74      	ldr	r3, [pc, #464]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fa20:	2201      	movs	r2, #1
 800fa22:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fa26:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800fa2a:	4b71      	ldr	r3, [pc, #452]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fa2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fa30:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800fa34:	4b6e      	ldr	r3, [pc, #440]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fa36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fa3a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800fa3e:	4b6c      	ldr	r3, [pc, #432]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fa40:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fa44:	2300      	movs	r3, #0
 800fa46:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fa4a:	e00b      	b.n	800fa64 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800fa4c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800fa50:	2201      	movs	r2, #1
 800fa52:	4619      	mov	r1, r3
 800fa54:	2003      	movs	r0, #3
 800fa56:	f003 fb0b 	bl	8013070 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fa5a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fa5e:	3301      	adds	r3, #1
 800fa60:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fa64:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fa68:	4a62      	ldr	r2, [pc, #392]	@ (800fbf4 <ProcessMacCommands+0x3b8>)
 800fa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa6e:	089b      	lsrs	r3, r3, #2
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d3e8      	bcc.n	800fa4c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800fa7a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fa7e:	78fb      	ldrb	r3, [r7, #3]
 800fa80:	4413      	add	r3, r2
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	3b01      	subs	r3, #1
 800fa86:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800fa88:	78fa      	ldrb	r2, [r7, #3]
 800fa8a:	78bb      	ldrb	r3, [r7, #2]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d20a      	bcs.n	800faa6 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	1c5a      	adds	r2, r3, #1
 800fa94:	70fa      	strb	r2, [r7, #3]
 800fa96:	461a      	mov	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	f43f af68 	beq.w	800f974 <ProcessMacCommands+0x138>
 800faa4:	e000      	b.n	800faa8 <ProcessMacCommands+0x26c>
                            break;
 800faa6:	bf00      	nop

                    if( macIndex < commandsSize )
 800faa8:	78fa      	ldrb	r2, [r7, #3]
 800faaa:	78bb      	ldrb	r3, [r7, #2]
 800faac:	429a      	cmp	r2, r3
 800faae:	f080 838e 	bcs.w	80101ce <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800fab2:	78fb      	ldrb	r3, [r7, #3]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800fab8:	e389      	b.n	80101ce <ProcessMacCommands+0x992>
                    macIndex += 4;
 800faba:	78fb      	ldrb	r3, [r7, #3]
 800fabc:	3304      	adds	r3, #4
 800fabe:	70fb      	strb	r3, [r7, #3]
                break;
 800fac0:	e385      	b.n	80101ce <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800fac2:	78fb      	ldrb	r3, [r7, #3]
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	70fa      	strb	r2, [r7, #3]
 800fac8:	461a      	mov	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4413      	add	r3, r2
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	f003 030f 	and.w	r3, r3, #15
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	4b46      	ldr	r3, [pc, #280]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fad8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fadc:	4b44      	ldr	r3, [pc, #272]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fade:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800fae2:	461a      	mov	r2, r3
 800fae4:	2301      	movs	r3, #1
 800fae6:	4093      	lsls	r3, r2
 800fae8:	b29a      	uxth	r2, r3
 800faea:	4b41      	ldr	r3, [pc, #260]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800faec:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800faf0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800faf4:	2200      	movs	r2, #0
 800faf6:	4619      	mov	r1, r3
 800faf8:	2004      	movs	r0, #4
 800fafa:	f003 fab9 	bl	8013070 <LoRaMacCommandsAddCmd>
                break;
 800fafe:	e371      	b.n	80101e4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fb00:	2307      	movs	r3, #7
 800fb02:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fb06:	78fb      	ldrb	r3, [r7, #3]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	091b      	lsrs	r3, r3, #4
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	b25b      	sxtb	r3, r3
 800fb14:	f003 0307 	and.w	r3, r3, #7
 800fb18:	b25b      	sxtb	r3, r3
 800fb1a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fb1e:	78fb      	ldrb	r3, [r7, #3]
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	4413      	add	r3, r2
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	b25b      	sxtb	r3, r3
 800fb28:	f003 030f 	and.w	r3, r3, #15
 800fb2c:	b25b      	sxtb	r3, r3
 800fb2e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fb32:	78fb      	ldrb	r3, [r7, #3]
 800fb34:	3301      	adds	r3, #1
 800fb36:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fb38:	78fb      	ldrb	r3, [r7, #3]
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	70fa      	strb	r2, [r7, #3]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4413      	add	r3, r2
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb48:	78fb      	ldrb	r3, [r7, #3]
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	70fa      	strb	r2, [r7, #3]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4413      	add	r3, r2
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	021a      	lsls	r2, r3, #8
 800fb58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fb5e:	78fb      	ldrb	r3, [r7, #3]
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	70fa      	strb	r2, [r7, #3]
 800fb64:	461a      	mov	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4413      	add	r3, r2
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	041a      	lsls	r2, r3, #16
 800fb6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb70:	4313      	orrs	r3, r2
 800fb72:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fb74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb76:	2264      	movs	r2, #100	@ 0x64
 800fb78:	fb02 f303 	mul.w	r3, r2, r3
 800fb7c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fb7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fb80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb84:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f005 f8b5 	bl	8014cfa <RegionRxParamSetupReq>
 800fb90:	4603      	mov	r3, r0
 800fb92:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fb96:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fb9a:	f003 0307 	and.w	r3, r3, #7
 800fb9e:	2b07      	cmp	r3, #7
 800fba0:	d117      	bne.n	800fbd2 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fba2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	4b11      	ldr	r3, [pc, #68]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fbaa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fbae:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fbb2:	b2da      	uxtb	r2, r3
 800fbb4:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fbb6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fbba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fbbe:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbc2:	4a0b      	ldr	r2, [pc, #44]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fbc4:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fbc6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b08      	ldr	r3, [pc, #32]	@ (800fbf0 <ProcessMacCommands+0x3b4>)
 800fbce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800fbd2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fbd6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fbda:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	2005      	movs	r0, #5
 800fbe4:	f003 fa44 	bl	8013070 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fbe8:	e2fc      	b.n	80101e4 <ProcessMacCommands+0x9a8>
 800fbea:	bf00      	nop
 800fbec:	200008d8 	.word	0x200008d8
 800fbf0:	20000df8 	.word	0x20000df8
 800fbf4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fbf8:	23ff      	movs	r3, #255	@ 0xff
 800fbfa:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fbfe:	4bb7      	ldr	r3, [pc, #732]	@ (800fedc <ProcessMacCommands+0x6a0>)
 800fc00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00d      	beq.n	800fc24 <ProcessMacCommands+0x3e8>
 800fc08:	4bb4      	ldr	r3, [pc, #720]	@ (800fedc <ProcessMacCommands+0x6a0>)
 800fc0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fc14:	4bb1      	ldr	r3, [pc, #708]	@ (800fedc <ProcessMacCommands+0x6a0>)
 800fc16:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4798      	blx	r3
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fc24:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fc28:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fc2c:	787b      	ldrb	r3, [r7, #1]
 800fc2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fc38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	4619      	mov	r1, r3
 800fc40:	2006      	movs	r0, #6
 800fc42:	f003 fa15 	bl	8013070 <LoRaMacCommandsAddCmd>
                break;
 800fc46:	e2cd      	b.n	80101e4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fc4e:	78fb      	ldrb	r3, [r7, #3]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	70fa      	strb	r2, [r7, #3]
 800fc54:	461a      	mov	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4413      	add	r3, r2
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fc62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fc66:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	70fa      	strb	r2, [r7, #3]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4413      	add	r3, r2
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fc78:	78fb      	ldrb	r3, [r7, #3]
 800fc7a:	1c5a      	adds	r2, r3, #1
 800fc7c:	70fa      	strb	r2, [r7, #3]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4413      	add	r3, r2
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	021a      	lsls	r2, r3, #8
 800fc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fc8e:	78fb      	ldrb	r3, [r7, #3]
 800fc90:	1c5a      	adds	r2, r3, #1
 800fc92:	70fa      	strb	r2, [r7, #3]
 800fc94:	461a      	mov	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4413      	add	r3, r2
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	041a      	lsls	r2, r3, #16
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca0:	4313      	orrs	r3, r2
 800fca2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca6:	2264      	movs	r2, #100	@ 0x64
 800fca8:	fb02 f303 	mul.w	r3, r2, r3
 800fcac:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fcb2:	78fb      	ldrb	r3, [r7, #3]
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	70fa      	strb	r2, [r7, #3]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	b25b      	sxtb	r3, r3
 800fcc2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fcc6:	4b86      	ldr	r3, [pc, #536]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fcc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fccc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f005 f824 	bl	8014d20 <RegionNewChannelReq>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fce0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fce4:	b25b      	sxtb	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f2c0 8273 	blt.w	80101d2 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800fcec:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fcf0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fcf4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	2007      	movs	r0, #7
 800fcfe:	f003 f9b7 	bl	8013070 <LoRaMacCommandsAddCmd>
                }
                break;
 800fd02:	e266      	b.n	80101d2 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fd04:	78fb      	ldrb	r3, [r7, #3]
 800fd06:	1c5a      	adds	r2, r3, #1
 800fd08:	70fa      	strb	r2, [r7, #3]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4413      	add	r3, r2
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 030f 	and.w	r3, r3, #15
 800fd16:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fd1a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d104      	bne.n	800fd2c <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800fd22:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd26:	3301      	adds	r3, #1
 800fd28:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fd2c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fd30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fd34:	fb02 f303 	mul.w	r3, r2, r3
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4b69      	ldr	r3, [pc, #420]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fd3c:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fd3e:	4b68      	ldr	r3, [pc, #416]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd42:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fd46:	4a66      	ldr	r2, [pc, #408]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fd48:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fd4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd4e:	2200      	movs	r2, #0
 800fd50:	4619      	mov	r1, r3
 800fd52:	2008      	movs	r0, #8
 800fd54:	f003 f98c 	bl	8013070 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fd58:	e244      	b.n	80101e4 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fd5a:	78fb      	ldrb	r3, [r7, #3]
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	70fa      	strb	r2, [r7, #3]
 800fd60:	461a      	mov	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4413      	add	r3, r2
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fd78:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd7c:	f003 0320 	and.w	r3, r3, #32
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fd84:	2301      	movs	r3, #1
 800fd86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fd8a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd8e:	f003 0310 	and.w	r3, r3, #16
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fd9c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fda0:	f003 030f 	and.w	r3, r3, #15
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fdaa:	4b4d      	ldr	r3, [pc, #308]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fdac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fdb0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f004 ffc5 	bl	8014d46 <RegionTxParamSetupReq>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc2:	f000 8208 	beq.w	80101d6 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fdc6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fdca:	4b45      	ldr	r3, [pc, #276]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fdcc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fdd0:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fdd4:	4b42      	ldr	r3, [pc, #264]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fdd6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fdda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fdde:	461a      	mov	r2, r3
 800fde0:	4b40      	ldr	r3, [pc, #256]	@ (800fee4 <ProcessMacCommands+0x6a8>)
 800fde2:	5c9b      	ldrb	r3, [r3, r2]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f0 ff6d 	bl	8000cc4 <__aeabi_ui2f>
 800fdea:	4603      	mov	r3, r0
 800fdec:	4a3c      	ldr	r2, [pc, #240]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fdee:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fdf6:	4b3a      	ldr	r3, [pc, #232]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fdf8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fdfc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe00:	4b37      	ldr	r3, [pc, #220]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fe02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fe06:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f004 fe9d 	bl	8014b4c <RegionGetPhyParam>
 800fe12:	4603      	mov	r3, r0
 800fe14:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fe16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe18:	b25a      	sxtb	r2, r3
 800fe1a:	4b31      	ldr	r3, [pc, #196]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fe1c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fe20:	4293      	cmp	r3, r2
 800fe22:	bfb8      	it	lt
 800fe24:	4613      	movlt	r3, r2
 800fe26:	b25a      	sxtb	r2, r3
 800fe28:	4b2d      	ldr	r3, [pc, #180]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fe2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fe2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fe32:	2200      	movs	r2, #0
 800fe34:	4619      	mov	r1, r3
 800fe36:	2009      	movs	r0, #9
 800fe38:	f003 f91a 	bl	8013070 <LoRaMacCommandsAddCmd>
                }
                break;
 800fe3c:	e1cb      	b.n	80101d6 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fe44:	78fb      	ldrb	r3, [r7, #3]
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	70fa      	strb	r2, [r7, #3]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4413      	add	r3, r2
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fe56:	78fb      	ldrb	r3, [r7, #3]
 800fe58:	1c5a      	adds	r2, r3, #1
 800fe5a:	70fa      	strb	r2, [r7, #3]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4413      	add	r3, r2
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fe66:	78fb      	ldrb	r3, [r7, #3]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	70fa      	strb	r2, [r7, #3]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4413      	add	r3, r2
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	021a      	lsls	r2, r3, #8
 800fe76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fe7c:	78fb      	ldrb	r3, [r7, #3]
 800fe7e:	1c5a      	adds	r2, r3, #1
 800fe80:	70fa      	strb	r2, [r7, #3]
 800fe82:	461a      	mov	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4413      	add	r3, r2
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	041a      	lsls	r2, r3, #16
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fe92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe94:	2264      	movs	r2, #100	@ 0x64
 800fe96:	fb02 f303 	mul.w	r3, r2, r3
 800fe9a:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fe9c:	4b10      	ldr	r3, [pc, #64]	@ (800fee0 <ProcessMacCommands+0x6a4>)
 800fe9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fea2:	f107 0220 	add.w	r2, r7, #32
 800fea6:	4611      	mov	r1, r2
 800fea8:	4618      	mov	r0, r3
 800feaa:	f004 ff5f 	bl	8014d6c <RegionDlChannelReq>
 800feae:	4603      	mov	r3, r0
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800feb6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800feba:	b25b      	sxtb	r3, r3
 800febc:	2b00      	cmp	r3, #0
 800febe:	f2c0 818c 	blt.w	80101da <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800fec2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fec6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800feca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fece:	2201      	movs	r2, #1
 800fed0:	4619      	mov	r1, r3
 800fed2:	200a      	movs	r0, #10
 800fed4:	f003 f8cc 	bl	8013070 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800fed8:	e17f      	b.n	80101da <ProcessMacCommands+0x99e>
 800feda:	bf00      	nop
 800fedc:	200008d8 	.word	0x200008d8
 800fee0:	20000df8 	.word	0x20000df8
 800fee4:	0801f4a4 	.word	0x0801f4a4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fee8:	2009      	movs	r0, #9
 800feea:	f003 fbe9 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8084 	beq.w	800fffe <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fef6:	2109      	movs	r1, #9
 800fef8:	2000      	movs	r0, #0
 800fefa:	f003 fb55 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fefe:	f107 0318 	add.w	r3, r7, #24
 800ff02:	2200      	movs	r2, #0
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ff08:	f107 0310 	add.w	r3, r7, #16
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ff12:	f107 0308 	add.w	r3, r7, #8
 800ff16:	2200      	movs	r2, #0
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ff1c:	78fb      	ldrb	r3, [r7, #3]
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	70fa      	strb	r2, [r7, #3]
 800ff22:	461a      	mov	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4413      	add	r3, r2
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ff2c:	78fb      	ldrb	r3, [r7, #3]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	70fa      	strb	r2, [r7, #3]
 800ff32:	461a      	mov	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4413      	add	r3, r2
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	021a      	lsls	r2, r3, #8
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ff42:	78fb      	ldrb	r3, [r7, #3]
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	70fa      	strb	r2, [r7, #3]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	041a      	lsls	r2, r3, #16
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ff58:	78fb      	ldrb	r3, [r7, #3]
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	70fa      	strb	r2, [r7, #3]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	4413      	add	r3, r2
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	061a      	lsls	r2, r3, #24
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	70fa      	strb	r2, [r7, #3]
 800ff74:	461a      	mov	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4413      	add	r3, r2
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	b21b      	sxth	r3, r3
 800ff7e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ff80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ff84:	461a      	mov	r2, r3
 800ff86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff8a:	fb02 f303 	mul.w	r3, r2, r3
 800ff8e:	121b      	asrs	r3, r3, #8
 800ff90:	b21b      	sxth	r3, r3
 800ff92:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800ff94:	f107 0310 	add.w	r3, r7, #16
 800ff98:	f107 0218 	add.w	r2, r7, #24
 800ff9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffa0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ffa4:	693a      	ldr	r2, [r7, #16]
 800ffa6:	4b96      	ldr	r3, [pc, #600]	@ (8010200 <ProcessMacCommands+0x9c4>)
 800ffa8:	4413      	add	r3, r2
 800ffaa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800ffac:	f107 0308 	add.w	r3, r7, #8
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f00a fc53 	bl	801a85c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ffb6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800ffba:	4b92      	ldr	r3, [pc, #584]	@ (8010204 <ProcessMacCommands+0x9c8>)
 800ffbc:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800ffc0:	9200      	str	r2, [sp, #0]
 800ffc2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800ffc6:	f107 0210 	add.w	r2, r7, #16
 800ffca:	ca06      	ldmia	r2, {r1, r2}
 800ffcc:	f00a fbdf 	bl	801a78e <SysTimeSub>
 800ffd0:	f107 0010 	add.w	r0, r7, #16
 800ffd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ffda:	f107 0208 	add.w	r2, r7, #8
 800ffde:	ca06      	ldmia	r2, {r1, r2}
 800ffe0:	f00a fb9c 	bl	801a71c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ffe4:	f107 0310 	add.w	r3, r7, #16
 800ffe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffec:	f00a fc08 	bl	801a800 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fff0:	f002 fee8 	bl	8012dc4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fff4:	4b83      	ldr	r3, [pc, #524]	@ (8010204 <ProcessMacCommands+0x9c8>)
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800fffc:	e0f2      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fffe:	4b81      	ldr	r3, [pc, #516]	@ (8010204 <ProcessMacCommands+0x9c8>)
 8010000:	2200      	movs	r2, #0
 8010002:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 8010006:	e0ed      	b.n	80101e4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010008:	200c      	movs	r0, #12
 801000a:	f003 fb59 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	f000 80e4 	beq.w	80101de <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010016:	210c      	movs	r1, #12
 8010018:	2000      	movs	r0, #0
 801001a:	f003 fac5 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801001e:	4b79      	ldr	r3, [pc, #484]	@ (8010204 <ProcessMacCommands+0x9c8>)
 8010020:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010024:	2b04      	cmp	r3, #4
 8010026:	f000 80da 	beq.w	80101de <ProcessMacCommands+0x9a2>
 801002a:	4b76      	ldr	r3, [pc, #472]	@ (8010204 <ProcessMacCommands+0x9c8>)
 801002c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010030:	2b05      	cmp	r3, #5
 8010032:	f000 80d4 	beq.w	80101de <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010036:	f002 fea6 	bl	8012d86 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801003a:	e0d0      	b.n	80101de <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801003c:	2303      	movs	r3, #3
 801003e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010042:	2300      	movs	r3, #0
 8010044:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010046:	78fb      	ldrb	r3, [r7, #3]
 8010048:	1c5a      	adds	r2, r3, #1
 801004a:	70fa      	strb	r2, [r7, #3]
 801004c:	461a      	mov	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4413      	add	r3, r2
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010056:	78fb      	ldrb	r3, [r7, #3]
 8010058:	1c5a      	adds	r2, r3, #1
 801005a:	70fa      	strb	r2, [r7, #3]
 801005c:	461a      	mov	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4413      	add	r3, r2
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	021b      	lsls	r3, r3, #8
 8010066:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010068:	4313      	orrs	r3, r2
 801006a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801006c:	78fb      	ldrb	r3, [r7, #3]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	70fa      	strb	r2, [r7, #3]
 8010072:	461a      	mov	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4413      	add	r3, r2
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	041b      	lsls	r3, r3, #16
 801007c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801007e:	4313      	orrs	r3, r2
 8010080:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010084:	2264      	movs	r2, #100	@ 0x64
 8010086:	fb02 f303 	mul.w	r3, r2, r3
 801008a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 801008c:	78fb      	ldrb	r3, [r7, #3]
 801008e:	1c5a      	adds	r2, r3, #1
 8010090:	70fa      	strb	r2, [r7, #3]
 8010092:	461a      	mov	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4413      	add	r3, r2
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f003 030f 	and.w	r3, r3, #15
 801009e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80100a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80100a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80100a8:	4618      	mov	r0, r3
 80100aa:	f002 fe72 	bl	8012d92 <LoRaMacClassBPingSlotChannelReq>
 80100ae:	4603      	mov	r3, r0
 80100b0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80100b4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80100b8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80100bc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100c0:	2201      	movs	r2, #1
 80100c2:	4619      	mov	r1, r3
 80100c4:	2011      	movs	r0, #17
 80100c6:	f002 ffd3 	bl	8013070 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80100ca:	e08b      	b.n	80101e4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80100cc:	200d      	movs	r0, #13
 80100ce:	f003 faf7 	bl	80136c0 <LoRaMacConfirmQueueIsCmdActive>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f000 8084 	beq.w	80101e2 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80100da:	210d      	movs	r1, #13
 80100dc:	2000      	movs	r0, #0
 80100de:	f003 fa63 	bl	80135a8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80100ee:	78fb      	ldrb	r3, [r7, #3]
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	70fa      	strb	r2, [r7, #3]
 80100f4:	461a      	mov	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4413      	add	r3, r2
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010100:	78fb      	ldrb	r3, [r7, #3]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	70fa      	strb	r2, [r7, #3]
 8010106:	461a      	mov	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4413      	add	r3, r2
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	021b      	lsls	r3, r3, #8
 8010110:	b21a      	sxth	r2, r3
 8010112:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8010116:	4313      	orrs	r3, r2
 8010118:	b21b      	sxth	r3, r3
 801011a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801011e:	78fb      	ldrb	r3, [r7, #3]
 8010120:	1c5a      	adds	r2, r3, #1
 8010122:	70fa      	strb	r2, [r7, #3]
 8010124:	461a      	mov	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4413      	add	r3, r2
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010130:	4b35      	ldr	r3, [pc, #212]	@ (8010208 <ProcessMacCommands+0x9cc>)
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8010138:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 801013c:	4618      	mov	r0, r3
 801013e:	f002 fe34 	bl	8012daa <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010142:	e04e      	b.n	80101e2 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010144:	2300      	movs	r3, #0
 8010146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801014a:	78fb      	ldrb	r3, [r7, #3]
 801014c:	1c5a      	adds	r2, r3, #1
 801014e:	70fa      	strb	r2, [r7, #3]
 8010150:	461a      	mov	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4413      	add	r3, r2
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801015c:	78fb      	ldrb	r3, [r7, #3]
 801015e:	1c5a      	adds	r2, r3, #1
 8010160:	70fa      	strb	r2, [r7, #3]
 8010162:	461a      	mov	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4413      	add	r3, r2
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	021b      	lsls	r3, r3, #8
 801016c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010170:	4313      	orrs	r3, r2
 8010172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010176:	78fb      	ldrb	r3, [r7, #3]
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	70fa      	strb	r2, [r7, #3]
 801017c:	461a      	mov	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4413      	add	r3, r2
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	041b      	lsls	r3, r3, #16
 8010186:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801018a:	4313      	orrs	r3, r2
 801018c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010190:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010194:	2264      	movs	r2, #100	@ 0x64
 8010196:	fb02 f303 	mul.w	r3, r2, r3
 801019a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801019e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80101a2:	f002 fe15 	bl	8012dd0 <LoRaMacClassBBeaconFreqReq>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d003      	beq.n	80101b4 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 80101ac:	2301      	movs	r3, #1
 80101ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80101b2:	e002      	b.n	80101ba <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80101ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80101be:	2201      	movs	r2, #1
 80101c0:	4619      	mov	r1, r3
 80101c2:	2013      	movs	r0, #19
 80101c4:	f002 ff54 	bl	8013070 <LoRaMacCommandsAddCmd>
                }
                break;
 80101c8:	e00c      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101ca:	bf00      	nop
 80101cc:	e00a      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101ce:	bf00      	nop
 80101d0:	e008      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101d2:	bf00      	nop
 80101d4:	e006      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101d6:	bf00      	nop
 80101d8:	e004      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101da:	bf00      	nop
 80101dc:	e002      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101de:	bf00      	nop
 80101e0:	e000      	b.n	80101e4 <ProcessMacCommands+0x9a8>
                break;
 80101e2:	bf00      	nop
    while( macIndex < commandsSize )
 80101e4:	78fa      	ldrb	r2, [r7, #3]
 80101e6:	78bb      	ldrb	r3, [r7, #2]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	f4ff ab49 	bcc.w	800f880 <ProcessMacCommands+0x44>
 80101ee:	e004      	b.n	80101fa <ProcessMacCommands+0x9be>
        return;
 80101f0:	bf00      	nop
 80101f2:	e002      	b.n	80101fa <ProcessMacCommands+0x9be>
            return;
 80101f4:	bf00      	nop
 80101f6:	e000      	b.n	80101fa <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80101f8:	bf00      	nop
        }
    }
}
 80101fa:	378c      	adds	r7, #140	@ 0x8c
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd90      	pop	{r4, r7, pc}
 8010200:	12d53d80 	.word	0x12d53d80
 8010204:	200008d8 	.word	0x200008d8
 8010208:	20001988 	.word	0x20001988

0801020c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08e      	sub	sp, #56	@ 0x38
 8010210:	af02      	add	r7, sp, #8
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	607a      	str	r2, [r7, #4]
 8010216:	461a      	mov	r2, r3
 8010218:	460b      	mov	r3, r1
 801021a:	72fb      	strb	r3, [r7, #11]
 801021c:	4613      	mov	r3, r2
 801021e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010220:	2303      	movs	r3, #3
 8010222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010226:	4b66      	ldr	r3, [pc, #408]	@ (80103c0 <Send+0x1b4>)
 8010228:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801022c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010230:	4b63      	ldr	r3, [pc, #396]	@ (80103c0 <Send+0x1b4>)
 8010232:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010236:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801023a:	4b61      	ldr	r3, [pc, #388]	@ (80103c0 <Send+0x1b4>)
 801023c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801023e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010240:	4b5f      	ldr	r3, [pc, #380]	@ (80103c0 <Send+0x1b4>)
 8010242:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d101      	bne.n	801024e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801024a:	2307      	movs	r3, #7
 801024c:	e0b4      	b.n	80103b8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801024e:	4b5c      	ldr	r3, [pc, #368]	@ (80103c0 <Send+0x1b4>)
 8010250:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8010254:	2b00      	cmp	r3, #0
 8010256:	d102      	bne.n	801025e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010258:	4b59      	ldr	r3, [pc, #356]	@ (80103c0 <Send+0x1b4>)
 801025a:	2200      	movs	r2, #0
 801025c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010264:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010268:	f023 030f 	bic.w	r3, r3, #15
 801026c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010270:	4b53      	ldr	r3, [pc, #332]	@ (80103c0 <Send+0x1b4>)
 8010272:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8010276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801027a:	f362 13c7 	bfi	r3, r2, #7, #1
 801027e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010282:	4b4f      	ldr	r3, [pc, #316]	@ (80103c0 <Send+0x1b4>)
 8010284:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010288:	2b01      	cmp	r3, #1
 801028a:	d106      	bne.n	801029a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801028c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010290:	f043 0310 	orr.w	r3, r3, #16
 8010294:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010298:	e005      	b.n	80102a6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801029a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801029e:	f023 0310 	bic.w	r3, r3, #16
 80102a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80102a6:	4b46      	ldr	r3, [pc, #280]	@ (80103c0 <Send+0x1b4>)
 80102a8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80102b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102b4:	f043 0320 	orr.w	r3, r3, #32
 80102b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 80102bc:	2301      	movs	r3, #1
 80102be:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80102c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	bf14      	ite	ne
 80102ce:	2301      	movne	r3, #1
 80102d0:	2300      	moveq	r3, #0
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80102d6:	4b3a      	ldr	r3, [pc, #232]	@ (80103c0 <Send+0x1b4>)
 80102d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102da:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80102dc:	4b39      	ldr	r3, [pc, #228]	@ (80103c4 <Send+0x1b8>)
 80102de:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80102e2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80102e4:	4b37      	ldr	r3, [pc, #220]	@ (80103c4 <Send+0x1b8>)
 80102e6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80102ea:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102ec:	4b34      	ldr	r3, [pc, #208]	@ (80103c0 <Send+0x1b4>)
 80102ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80102f2:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102f6:	4b32      	ldr	r3, [pc, #200]	@ (80103c0 <Send+0x1b4>)
 80102f8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80102fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010300:	4b2f      	ldr	r3, [pc, #188]	@ (80103c0 <Send+0x1b4>)
 8010302:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8010306:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801030a:	4b2d      	ldr	r3, [pc, #180]	@ (80103c0 <Send+0x1b4>)
 801030c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8010314:	4b2a      	ldr	r3, [pc, #168]	@ (80103c0 <Send+0x1b4>)
 8010316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801031a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801031e:	f107 0014 	add.w	r0, r7, #20
 8010322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	4b27      	ldr	r3, [pc, #156]	@ (80103c8 <Send+0x1bc>)
 801032a:	4a28      	ldr	r2, [pc, #160]	@ (80103cc <Send+0x1c0>)
 801032c:	4928      	ldr	r1, [pc, #160]	@ (80103d0 <Send+0x1c4>)
 801032e:	f002 fbc9 	bl	8012ac4 <LoRaMacAdrCalcNext>
 8010332:	4603      	mov	r3, r0
 8010334:	461a      	mov	r2, r3
 8010336:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801033a:	f362 1386 	bfi	r3, r2, #6, #1
 801033e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010342:	7afa      	ldrb	r2, [r7, #11]
 8010344:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010348:	893b      	ldrh	r3, [r7, #8]
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f000 fc42 	bl	8010bd8 <PrepareFrame>
 8010354:	4603      	mov	r3, r0
 8010356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801035a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801035e:	2b00      	cmp	r3, #0
 8010360:	d003      	beq.n	801036a <Send+0x15e>
 8010362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010366:	2b0a      	cmp	r3, #10
 8010368:	d107      	bne.n	801037a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801036a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801036e:	4618      	mov	r0, r3
 8010370:	f000 f96e 	bl	8010650 <ScheduleTx>
 8010374:	4603      	mov	r3, r0
 8010376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801037a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00a      	beq.n	8010398 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010382:	4a0f      	ldr	r2, [pc, #60]	@ (80103c0 <Send+0x1b4>)
 8010384:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010388:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801038c:	4a0c      	ldr	r2, [pc, #48]	@ (80103c0 <Send+0x1b4>)
 801038e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010392:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010396:	e00d      	b.n	80103b4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010398:	4b09      	ldr	r3, [pc, #36]	@ (80103c0 <Send+0x1b4>)
 801039a:	2200      	movs	r2, #0
 801039c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80103a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a2:	4a07      	ldr	r2, [pc, #28]	@ (80103c0 <Send+0x1b4>)
 80103a4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80103a6:	f002 fedb 	bl	8013160 <LoRaMacCommandsRemoveNoneStickyCmds>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103b0:	2313      	movs	r3, #19
 80103b2:	e001      	b.n	80103b8 <Send+0x1ac>
        }
    }
    return status;
 80103b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3730      	adds	r7, #48	@ 0x30
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20000df8 	.word	0x20000df8
 80103c4:	200008d8 	.word	0x200008d8
 80103c8:	20000e58 	.word	0x20000e58
 80103cc:	20000e30 	.word	0x20000e30
 80103d0:	20000e31 	.word	0x20000e31

080103d4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	4603      	mov	r3, r0
 80103dc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80103e6:	2301      	movs	r3, #1
 80103e8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80103ea:	79fb      	ldrb	r3, [r7, #7]
 80103ec:	2bff      	cmp	r3, #255	@ 0xff
 80103ee:	d129      	bne.n	8010444 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80103f0:	2000      	movs	r0, #0
 80103f2:	f7ff f901 	bl	800f5f8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80103f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010460 <SendReJoinReq+0x8c>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80103fe:	4b18      	ldr	r3, [pc, #96]	@ (8010460 <SendReJoinReq+0x8c>)
 8010400:	4a18      	ldr	r2, [pc, #96]	@ (8010464 <SendReJoinReq+0x90>)
 8010402:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010406:	4b16      	ldr	r3, [pc, #88]	@ (8010460 <SendReJoinReq+0x8c>)
 8010408:	22ff      	movs	r2, #255	@ 0xff
 801040a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801040e:	7b3b      	ldrb	r3, [r7, #12]
 8010410:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8010414:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010416:	7b3a      	ldrb	r2, [r7, #12]
 8010418:	4b11      	ldr	r3, [pc, #68]	@ (8010460 <SendReJoinReq+0x8c>)
 801041a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 801041e:	f7fc f869 	bl	800c4f4 <SecureElementGetJoinEui>
 8010422:	4603      	mov	r3, r0
 8010424:	2208      	movs	r2, #8
 8010426:	4619      	mov	r1, r3
 8010428:	480f      	ldr	r0, [pc, #60]	@ (8010468 <SendReJoinReq+0x94>)
 801042a:	f006 fe30 	bl	801708e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 801042e:	f7fc f83f 	bl	800c4b0 <SecureElementGetDevEui>
 8010432:	4603      	mov	r3, r0
 8010434:	2208      	movs	r2, #8
 8010436:	4619      	mov	r1, r3
 8010438:	480c      	ldr	r0, [pc, #48]	@ (801046c <SendReJoinReq+0x98>)
 801043a:	f006 fe28 	bl	801708e <memcpy1>

            allowDelayedTx = false;
 801043e:	2300      	movs	r3, #0
 8010440:	73fb      	strb	r3, [r7, #15]

            break;
 8010442:	e002      	b.n	801044a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010444:	2302      	movs	r3, #2
 8010446:	73bb      	strb	r3, [r7, #14]
            break;
 8010448:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f8ff 	bl	8010650 <ScheduleTx>
 8010452:	4603      	mov	r3, r0
 8010454:	73bb      	strb	r3, [r7, #14]
    return status;
 8010456:	7bbb      	ldrb	r3, [r7, #14]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	200008d8 	.word	0x200008d8
 8010464:	200008da 	.word	0x200008da
 8010468:	200009e6 	.word	0x200009e6
 801046c:	200009ee 	.word	0x200009ee

08010470 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010474:	f002 fc36 	bl	8012ce4 <LoRaMacClassBIsBeaconExpected>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801047e:	230e      	movs	r3, #14
 8010480:	e013      	b.n	80104aa <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010482:	4b0b      	ldr	r3, [pc, #44]	@ (80104b0 <CheckForClassBCollision+0x40>)
 8010484:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010488:	2b01      	cmp	r3, #1
 801048a:	d10d      	bne.n	80104a8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801048c:	f002 fc31 	bl	8012cf2 <LoRaMacClassBIsPingExpected>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d001      	beq.n	801049a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010496:	230f      	movs	r3, #15
 8010498:	e007      	b.n	80104aa <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801049a:	f002 fc31 	bl	8012d00 <LoRaMacClassBIsMulticastExpected>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80104a4:	230f      	movs	r3, #15
 80104a6:	e000      	b.n	80104aa <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	20000df8 	.word	0x20000df8

080104b4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80104b4:	b590      	push	{r4, r7, lr}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104ba:	4b2d      	ldr	r3, [pc, #180]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104bc:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80104c0:	4b2b      	ldr	r3, [pc, #172]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104c2:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80104c6:	4b2a      	ldr	r3, [pc, #168]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104c8:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 80104cc:	4b28      	ldr	r3, [pc, #160]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104ce:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80104d2:	4b27      	ldr	r3, [pc, #156]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104d4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80104d8:	b25b      	sxtb	r3, r3
 80104da:	f004 fc8c 	bl	8014df6 <RegionApplyDrOffset>
 80104de:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104e0:	b259      	sxtb	r1, r3
 80104e2:	4b23      	ldr	r3, [pc, #140]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104e4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80104e8:	4b21      	ldr	r3, [pc, #132]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ec:	4821      	ldr	r0, [pc, #132]	@ (8010574 <ComputeRxWindowParameters+0xc0>)
 80104ee:	9000      	str	r0, [sp, #0]
 80104f0:	4620      	mov	r0, r4
 80104f2:	f004 fba2 	bl	8014c3a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104f6:	4b1e      	ldr	r3, [pc, #120]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104f8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80104fc:	4b1c      	ldr	r3, [pc, #112]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 80104fe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010502:	b259      	sxtb	r1, r3
 8010504:	4b1a      	ldr	r3, [pc, #104]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 8010506:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801050a:	4b19      	ldr	r3, [pc, #100]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 801050c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801050e:	4c1a      	ldr	r4, [pc, #104]	@ (8010578 <ComputeRxWindowParameters+0xc4>)
 8010510:	9400      	str	r4, [sp, #0]
 8010512:	f004 fb92 	bl	8014c3a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010516:	4b16      	ldr	r3, [pc, #88]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 8010518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801051a:	4a18      	ldr	r2, [pc, #96]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 801051c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010520:	4413      	add	r3, r2
 8010522:	4a16      	ldr	r2, [pc, #88]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 8010524:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010528:	4b11      	ldr	r3, [pc, #68]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 801052a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801052c:	4a13      	ldr	r2, [pc, #76]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 801052e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010532:	4413      	add	r3, r2
 8010534:	4a11      	ldr	r2, [pc, #68]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 8010536:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801053a:	4b0d      	ldr	r3, [pc, #52]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 801053c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d111      	bne.n	8010568 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010544:	4b0a      	ldr	r3, [pc, #40]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 8010546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010548:	4a0c      	ldr	r2, [pc, #48]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 801054a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 801054e:	4413      	add	r3, r2
 8010550:	4a0a      	ldr	r2, [pc, #40]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 8010552:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010556:	4b06      	ldr	r3, [pc, #24]	@ (8010570 <ComputeRxWindowParameters+0xbc>)
 8010558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801055a:	4a08      	ldr	r2, [pc, #32]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 801055c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010560:	4413      	add	r3, r2
 8010562:	4a06      	ldr	r2, [pc, #24]	@ (801057c <ComputeRxWindowParameters+0xc8>)
 8010564:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010568:	bf00      	nop
 801056a:	3704      	adds	r7, #4
 801056c:	46bd      	mov	sp, r7
 801056e:	bd90      	pop	{r4, r7, pc}
 8010570:	20000df8 	.word	0x20000df8
 8010574:	20000c90 	.word	0x20000c90
 8010578:	20000ca8 	.word	0x20000ca8
 801057c:	200008d8 	.word	0x200008d8

08010580 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010586:	2300      	movs	r3, #0
 8010588:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801058a:	4b13      	ldr	r3, [pc, #76]	@ (80105d8 <VerifyTxFrame+0x58>)
 801058c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010590:	2b00      	cmp	r3, #0
 8010592:	d01b      	beq.n	80105cc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010594:	1d3b      	adds	r3, r7, #4
 8010596:	4618      	mov	r0, r3
 8010598:	f002 fe28 	bl	80131ec <LoRaMacCommandsGetSizeSerializedCmds>
 801059c:	4603      	mov	r3, r0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80105a2:	2313      	movs	r3, #19
 80105a4:	e013      	b.n	80105ce <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80105a6:	4b0d      	ldr	r3, [pc, #52]	@ (80105dc <VerifyTxFrame+0x5c>)
 80105a8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80105ac:	4a0a      	ldr	r2, [pc, #40]	@ (80105d8 <VerifyTxFrame+0x58>)
 80105ae:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	b2d2      	uxtb	r2, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff f918 	bl	800f7ec <ValidatePayloadLength>
 80105bc:	4603      	mov	r3, r0
 80105be:	f083 0301 	eor.w	r3, r3, #1
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80105c8:	2308      	movs	r3, #8
 80105ca:	e000      	b.n	80105ce <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	20000df8 	.word	0x20000df8
 80105dc:	200008d8 	.word	0x200008d8

080105e0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80105e6:	4b18      	ldr	r3, [pc, #96]	@ (8010648 <SerializeTxFrame+0x68>)
 80105e8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <SerializeTxFrame+0x16>
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d011      	beq.n	8010618 <SerializeTxFrame+0x38>
 80105f4:	e021      	b.n	801063a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80105f6:	4815      	ldr	r0, [pc, #84]	@ (801064c <SerializeTxFrame+0x6c>)
 80105f8:	f004 f921 	bl	801483e <LoRaMacSerializerJoinRequest>
 80105fc:	4603      	mov	r3, r0
 80105fe:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d001      	beq.n	801060a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010606:	2311      	movs	r3, #17
 8010608:	e01a      	b.n	8010640 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801060a:	4b0f      	ldr	r3, [pc, #60]	@ (8010648 <SerializeTxFrame+0x68>)
 801060c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010610:	461a      	mov	r2, r3
 8010612:	4b0d      	ldr	r3, [pc, #52]	@ (8010648 <SerializeTxFrame+0x68>)
 8010614:	801a      	strh	r2, [r3, #0]
            break;
 8010616:	e012      	b.n	801063e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010618:	480c      	ldr	r0, [pc, #48]	@ (801064c <SerializeTxFrame+0x6c>)
 801061a:	f004 f992 	bl	8014942 <LoRaMacSerializerData>
 801061e:	4603      	mov	r3, r0
 8010620:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d001      	beq.n	801062c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010628:	2311      	movs	r3, #17
 801062a:	e009      	b.n	8010640 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801062c:	4b06      	ldr	r3, [pc, #24]	@ (8010648 <SerializeTxFrame+0x68>)
 801062e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010632:	461a      	mov	r2, r3
 8010634:	4b04      	ldr	r3, [pc, #16]	@ (8010648 <SerializeTxFrame+0x68>)
 8010636:	801a      	strh	r2, [r3, #0]
            break;
 8010638:	e001      	b.n	801063e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801063a:	2303      	movs	r3, #3
 801063c:	e000      	b.n	8010640 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	200008d8 	.word	0x200008d8
 801064c:	200009e0 	.word	0x200009e0

08010650 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b090      	sub	sp, #64	@ 0x40
 8010654:	af02      	add	r7, sp, #8
 8010656:	4603      	mov	r3, r0
 8010658:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801065a:	2303      	movs	r3, #3
 801065c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010660:	f7ff ff06 	bl	8010470 <CheckForClassBCollision>
 8010664:	4603      	mov	r3, r0
 8010666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801066a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801066e:	2b00      	cmp	r3, #0
 8010670:	d002      	beq.n	8010678 <ScheduleTx+0x28>
    {
        return status;
 8010672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010676:	e08f      	b.n	8010798 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010678:	f000 f8f4 	bl	8010864 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801067c:	f7ff ffb0 	bl	80105e0 <SerializeTxFrame>
 8010680:	4603      	mov	r3, r0
 8010682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010686:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <ScheduleTx+0x44>
    {
        return status;
 801068e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010692:	e081      	b.n	8010798 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010694:	4b42      	ldr	r3, [pc, #264]	@ (80107a0 <ScheduleTx+0x150>)
 8010696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010698:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801069a:	4b41      	ldr	r3, [pc, #260]	@ (80107a0 <ScheduleTx+0x150>)
 801069c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80106a0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80106a2:	4b3f      	ldr	r3, [pc, #252]	@ (80107a0 <ScheduleTx+0x150>)
 80106a4:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80106a8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80106aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106ae:	4618      	mov	r0, r3
 80106b0:	f00a f90c 	bl	801a8cc <SysTimeGetMcuTime>
 80106b4:	4638      	mov	r0, r7
 80106b6:	4b3a      	ldr	r3, [pc, #232]	@ (80107a0 <ScheduleTx+0x150>)
 80106b8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 80106bc:	9200      	str	r2, [sp, #0]
 80106be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80106c2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80106c6:	ca06      	ldmia	r2, {r1, r2}
 80106c8:	f00a f861 	bl	801a78e <SysTimeSub>
 80106cc:	f107 0320 	add.w	r3, r7, #32
 80106d0:	463a      	mov	r2, r7
 80106d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80106da:	4b31      	ldr	r3, [pc, #196]	@ (80107a0 <ScheduleTx+0x150>)
 80106dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106de:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80106e0:	2300      	movs	r3, #0
 80106e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80106e6:	2301      	movs	r3, #1
 80106e8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80106ea:	4b2e      	ldr	r3, [pc, #184]	@ (80107a4 <ScheduleTx+0x154>)
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80106f0:	4b2b      	ldr	r3, [pc, #172]	@ (80107a0 <ScheduleTx+0x150>)
 80106f2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d104      	bne.n	8010704 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80106fa:	2301      	movs	r3, #1
 80106fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010700:	2300      	movs	r3, #0
 8010702:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010704:	4b26      	ldr	r3, [pc, #152]	@ (80107a0 <ScheduleTx+0x150>)
 8010706:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801070a:	f107 0114 	add.w	r1, r7, #20
 801070e:	4b26      	ldr	r3, [pc, #152]	@ (80107a8 <ScheduleTx+0x158>)
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	4b26      	ldr	r3, [pc, #152]	@ (80107ac <ScheduleTx+0x15c>)
 8010714:	4a26      	ldr	r2, [pc, #152]	@ (80107b0 <ScheduleTx+0x160>)
 8010716:	f004 fb56 	bl	8014dc6 <RegionNextChannel>
 801071a:	4603      	mov	r3, r0
 801071c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8010720:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010724:	2b00      	cmp	r3, #0
 8010726:	d022      	beq.n	801076e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801072c:	2b0b      	cmp	r3, #11
 801072e:	d11b      	bne.n	8010768 <ScheduleTx+0x118>
 8010730:	7bfb      	ldrb	r3, [r7, #15]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d018      	beq.n	8010768 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010736:	4b1b      	ldr	r3, [pc, #108]	@ (80107a4 <ScheduleTx+0x154>)
 8010738:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 801073c:	2b00      	cmp	r3, #0
 801073e:	d011      	beq.n	8010764 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010740:	4b18      	ldr	r3, [pc, #96]	@ (80107a4 <ScheduleTx+0x154>)
 8010742:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010746:	f043 0320 	orr.w	r3, r3, #32
 801074a:	4a16      	ldr	r2, [pc, #88]	@ (80107a4 <ScheduleTx+0x154>)
 801074c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010750:	4b14      	ldr	r3, [pc, #80]	@ (80107a4 <ScheduleTx+0x154>)
 8010752:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8010756:	4619      	mov	r1, r3
 8010758:	4816      	ldr	r0, [pc, #88]	@ (80107b4 <ScheduleTx+0x164>)
 801075a:	f00a fe55 	bl	801b408 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801075e:	4815      	ldr	r0, [pc, #84]	@ (80107b4 <ScheduleTx+0x164>)
 8010760:	f00a fd74 	bl	801b24c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010764:	2300      	movs	r3, #0
 8010766:	e017      	b.n	8010798 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801076c:	e014      	b.n	8010798 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801076e:	f7ff fea1 	bl	80104b4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010772:	f7ff ff05 	bl	8010580 <VerifyTxFrame>
 8010776:	4603      	mov	r3, r0
 8010778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801077c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <ScheduleTx+0x13a>
    {
        return status;
 8010784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010788:	e006      	b.n	8010798 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801078a:	4b06      	ldr	r3, [pc, #24]	@ (80107a4 <ScheduleTx+0x154>)
 801078c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010790:	4618      	mov	r0, r3
 8010792:	f000 fb3b 	bl	8010e0c <SendFrameOnChannel>
 8010796:	4603      	mov	r3, r0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3738      	adds	r7, #56	@ 0x38
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	20000df8 	.word	0x20000df8
 80107a4:	200008d8 	.word	0x200008d8
 80107a8:	20000e28 	.word	0x20000e28
 80107ac:	20000d70 	.word	0x20000d70
 80107b0:	20000cf7 	.word	0x20000cf7
 80107b4:	20000c40 	.word	0x20000c40

080107b8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	4603      	mov	r3, r0
 80107c0:	460a      	mov	r2, r1
 80107c2:	71fb      	strb	r3, [r7, #7]
 80107c4:	4613      	mov	r3, r2
 80107c6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80107c8:	2312      	movs	r3, #18
 80107ca:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80107d0:	4b22      	ldr	r3, [pc, #136]	@ (801085c <SecureFrame+0xa4>)
 80107d2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d002      	beq.n	80107e0 <SecureFrame+0x28>
 80107da:	2b04      	cmp	r3, #4
 80107dc:	d011      	beq.n	8010802 <SecureFrame+0x4a>
 80107de:	e036      	b.n	801084e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80107e0:	481f      	ldr	r0, [pc, #124]	@ (8010860 <SecureFrame+0xa8>)
 80107e2:	f003 fc03 	bl	8013fec <LoRaMacCryptoPrepareJoinRequest>
 80107e6:	4603      	mov	r3, r0
 80107e8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80107f0:	2311      	movs	r3, #17
 80107f2:	e02f      	b.n	8010854 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80107f4:	4b19      	ldr	r3, [pc, #100]	@ (801085c <SecureFrame+0xa4>)
 80107f6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80107fa:	461a      	mov	r2, r3
 80107fc:	4b17      	ldr	r3, [pc, #92]	@ (801085c <SecureFrame+0xa4>)
 80107fe:	801a      	strh	r2, [r3, #0]
            break;
 8010800:	e027      	b.n	8010852 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010802:	f107 0308 	add.w	r3, r7, #8
 8010806:	4618      	mov	r0, r3
 8010808:	f003 fb34 	bl	8013e74 <LoRaMacCryptoGetFCntUp>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010812:	2312      	movs	r3, #18
 8010814:	e01e      	b.n	8010854 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010816:	4b11      	ldr	r3, [pc, #68]	@ (801085c <SecureFrame+0xa4>)
 8010818:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	3b01      	subs	r3, #1
 8010824:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010826:	68b8      	ldr	r0, [r7, #8]
 8010828:	79ba      	ldrb	r2, [r7, #6]
 801082a:	79f9      	ldrb	r1, [r7, #7]
 801082c:	4b0c      	ldr	r3, [pc, #48]	@ (8010860 <SecureFrame+0xa8>)
 801082e:	f003 fced 	bl	801420c <LoRaMacCryptoSecureMessage>
 8010832:	4603      	mov	r3, r0
 8010834:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010836:	7bfb      	ldrb	r3, [r7, #15]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801083c:	2311      	movs	r3, #17
 801083e:	e009      	b.n	8010854 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010840:	4b06      	ldr	r3, [pc, #24]	@ (801085c <SecureFrame+0xa4>)
 8010842:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010846:	461a      	mov	r2, r3
 8010848:	4b04      	ldr	r3, [pc, #16]	@ (801085c <SecureFrame+0xa4>)
 801084a:	801a      	strh	r2, [r3, #0]
            break;
 801084c:	e001      	b.n	8010852 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801084e:	2303      	movs	r3, #3
 8010850:	e000      	b.n	8010854 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	200008d8 	.word	0x200008d8
 8010860:	200009e0 	.word	0x200009e0

08010864 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010864:	b480      	push	{r7}
 8010866:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010868:	4b09      	ldr	r3, [pc, #36]	@ (8010890 <CalculateBackOff+0x2c>)
 801086a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10a      	bne.n	8010886 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010870:	4b07      	ldr	r3, [pc, #28]	@ (8010890 <CalculateBackOff+0x2c>)
 8010872:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8010876:	3b01      	subs	r3, #1
 8010878:	4a06      	ldr	r2, [pc, #24]	@ (8010894 <CalculateBackOff+0x30>)
 801087a:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 801087e:	fb02 f303 	mul.w	r3, r2, r3
 8010882:	4a03      	ldr	r2, [pc, #12]	@ (8010890 <CalculateBackOff+0x2c>)
 8010884:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010886:	bf00      	nop
 8010888:	46bd      	mov	sp, r7
 801088a:	bc80      	pop	{r7}
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	20000df8 	.word	0x20000df8
 8010894:	200008d8 	.word	0x200008d8

08010898 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	4603      	mov	r3, r0
 80108a0:	7139      	strb	r1, [r7, #4]
 80108a2:	71fb      	strb	r3, [r7, #7]
 80108a4:	4613      	mov	r3, r2
 80108a6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80108a8:	79fb      	ldrb	r3, [r7, #7]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d002      	beq.n	80108b4 <RemoveMacCommands+0x1c>
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d10d      	bne.n	80108d0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80108b4:	79bb      	ldrb	r3, [r7, #6]
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d108      	bne.n	80108cc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80108ba:	793b      	ldrb	r3, [r7, #4]
 80108bc:	f003 0320 	and.w	r3, r3, #32
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d004      	beq.n	80108d0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80108c6:	f002 fc6f 	bl	80131a8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80108ca:	e001      	b.n	80108d0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80108cc:	f002 fc6c 	bl	80131a8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80108d8:	b5b0      	push	{r4, r5, r7, lr}
 80108da:	b090      	sub	sp, #64	@ 0x40
 80108dc:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80108de:	4b70      	ldr	r3, [pc, #448]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80108e6:	4b6e      	ldr	r3, [pc, #440]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80108e8:	2200      	movs	r2, #0
 80108ea:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80108ec:	4b6d      	ldr	r3, [pc, #436]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80108f4:	4b6b      	ldr	r3, [pc, #428]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80108fc:	4b69      	ldr	r3, [pc, #420]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80108fe:	2200      	movs	r2, #0
 8010900:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010904:	4b66      	ldr	r3, [pc, #408]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010906:	2200      	movs	r2, #0
 8010908:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801090c:	4b64      	ldr	r3, [pc, #400]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801090e:	2201      	movs	r2, #1
 8010910:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010914:	4b62      	ldr	r3, [pc, #392]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010916:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 801091a:	4b61      	ldr	r3, [pc, #388]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801091c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010920:	4b5f      	ldr	r3, [pc, #380]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010922:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8010926:	4b5e      	ldr	r3, [pc, #376]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010928:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801092c:	4b5c      	ldr	r3, [pc, #368]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801092e:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8010932:	4b5b      	ldr	r3, [pc, #364]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010934:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010938:	4b59      	ldr	r3, [pc, #356]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801093a:	4a59      	ldr	r2, [pc, #356]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801093c:	3364      	adds	r3, #100	@ 0x64
 801093e:	32a8      	adds	r2, #168	@ 0xa8
 8010940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010944:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010948:	4b55      	ldr	r3, [pc, #340]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801094a:	4a55      	ldr	r2, [pc, #340]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801094c:	336c      	adds	r3, #108	@ 0x6c
 801094e:	32b0      	adds	r2, #176	@ 0xb0
 8010950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010954:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010958:	4b51      	ldr	r3, [pc, #324]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801095a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 801095e:	4b50      	ldr	r3, [pc, #320]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010960:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010964:	4b4e      	ldr	r3, [pc, #312]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010966:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801096a:	4b4d      	ldr	r3, [pc, #308]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801096c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010970:	4b4b      	ldr	r3, [pc, #300]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010976:	4a4a      	ldr	r2, [pc, #296]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010978:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801097a:	4b49      	ldr	r3, [pc, #292]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801097c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010980:	4a47      	ldr	r2, [pc, #284]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010982:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010984:	4b47      	ldr	r3, [pc, #284]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010986:	2200      	movs	r2, #0
 8010988:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 801098c:	4b44      	ldr	r3, [pc, #272]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801098e:	2200      	movs	r2, #0
 8010990:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010994:	4b42      	ldr	r3, [pc, #264]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 801099c:	4b40      	ldr	r3, [pc, #256]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80109a4:	2301      	movs	r3, #1
 80109a6:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80109a8:	4b3f      	ldr	r3, [pc, #252]	@ (8010aa8 <ResetMacParameters+0x1d0>)
 80109aa:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80109ac:	4b3f      	ldr	r3, [pc, #252]	@ (8010aac <ResetMacParameters+0x1d4>)
 80109ae:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80109b0:	4b3f      	ldr	r3, [pc, #252]	@ (8010ab0 <ResetMacParameters+0x1d8>)
 80109b2:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80109b4:	4b3a      	ldr	r3, [pc, #232]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80109b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80109ba:	1d3a      	adds	r2, r7, #4
 80109bc:	4611      	mov	r1, r2
 80109be:	4618      	mov	r0, r3
 80109c0:	f004 f8ed 	bl	8014b9e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80109c4:	4b37      	ldr	r3, [pc, #220]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80109cc:	4b35      	ldr	r3, [pc, #212]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109ce:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80109d2:	4b34      	ldr	r3, [pc, #208]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109d4:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80109d8:	4b31      	ldr	r3, [pc, #196]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80109da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109dc:	4a31      	ldr	r2, [pc, #196]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109de:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80109e2:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80109e4:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80109e8:	4b2e      	ldr	r3, [pc, #184]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109ea:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80109ee:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 80109f0:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80109f4:	4b2b      	ldr	r3, [pc, #172]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109f6:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80109fa:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010a02:	4b28      	ldr	r3, [pc, #160]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010a0a:	4b25      	ldr	r3, [pc, #148]	@ (8010aa0 <ResetMacParameters+0x1c8>)
 8010a0c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010a10:	4b24      	ldr	r3, [pc, #144]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a12:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010a16:	4a23      	ldr	r2, [pc, #140]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a18:	4b22      	ldr	r3, [pc, #136]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a1a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010a1e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a2a:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a30:	2201      	movs	r2, #1
 8010a32:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a36:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a38:	2202      	movs	r2, #2
 8010a3a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010a46:	4b17      	ldr	r3, [pc, #92]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a48:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d009      	beq.n	8010a64 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010a50:	4b14      	ldr	r3, [pc, #80]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a52:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010a5a:	4b12      	ldr	r3, [pc, #72]	@ (8010aa4 <ResetMacParameters+0x1cc>)
 8010a5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010a64:	4b13      	ldr	r3, [pc, #76]	@ (8010ab4 <ResetMacParameters+0x1dc>)
 8010a66:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010a68:	4b13      	ldr	r3, [pc, #76]	@ (8010ab8 <ResetMacParameters+0x1e0>)
 8010a6a:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010a6c:	4b13      	ldr	r3, [pc, #76]	@ (8010abc <ResetMacParameters+0x1e4>)
 8010a6e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010a70:	4b13      	ldr	r3, [pc, #76]	@ (8010ac0 <ResetMacParameters+0x1e8>)
 8010a72:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010a74:	4b13      	ldr	r3, [pc, #76]	@ (8010ac4 <ResetMacParameters+0x1ec>)
 8010a76:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010a78:	4b13      	ldr	r3, [pc, #76]	@ (8010ac8 <ResetMacParameters+0x1f0>)
 8010a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010a7c:	4b13      	ldr	r3, [pc, #76]	@ (8010acc <ResetMacParameters+0x1f4>)
 8010a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010a80:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <ResetMacParameters+0x1f8>)
 8010a82:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010a84:	4b13      	ldr	r3, [pc, #76]	@ (8010ad4 <ResetMacParameters+0x1fc>)
 8010a86:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010a88:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010a8c:	f107 0314 	add.w	r3, r7, #20
 8010a90:	4a11      	ldr	r2, [pc, #68]	@ (8010ad8 <ResetMacParameters+0x200>)
 8010a92:	4618      	mov	r0, r3
 8010a94:	f002 f8cf 	bl	8012c36 <LoRaMacClassBInit>
}
 8010a98:	bf00      	nop
 8010a9a:	3740      	adds	r7, #64	@ 0x40
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8010aa0:	20000df8 	.word	0x20000df8
 8010aa4:	200008d8 	.word	0x200008d8
 8010aa8:	20000fdc 	.word	0x20000fdc
 8010aac:	20000fe0 	.word	0x20000fe0
 8010ab0:	200018f0 	.word	0x200018f0
 8010ab4:	20000d44 	.word	0x20000d44
 8010ab8:	20000cfc 	.word	0x20000cfc
 8010abc:	20000d30 	.word	0x20000d30
 8010ac0:	20000d6d 	.word	0x20000d6d
 8010ac4:	20000ecc 	.word	0x20000ecc
 8010ac8:	20000e38 	.word	0x20000e38
 8010acc:	20000e3c 	.word	0x20000e3c
 8010ad0:	20000ed0 	.word	0x20000ed0
 8010ad4:	20000f14 	.word	0x20000f14
 8010ad8:	2000135c 	.word	0x2000135c

08010adc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f00a fc1e 	bl	801b328 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010aec:	4b11      	ldr	r3, [pc, #68]	@ (8010b34 <RxWindowSetup+0x58>)
 8010aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010af0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010af2:	4b11      	ldr	r3, [pc, #68]	@ (8010b38 <RxWindowSetup+0x5c>)
 8010af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010af8:	4a10      	ldr	r2, [pc, #64]	@ (8010b3c <RxWindowSetup+0x60>)
 8010afa:	6839      	ldr	r1, [r7, #0]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f004 f8b6 	bl	8014c6e <RegionRxConfig>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d010      	beq.n	8010b2a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010b08:	4b0d      	ldr	r3, [pc, #52]	@ (8010b40 <RxWindowSetup+0x64>)
 8010b0a:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8010b40 <RxWindowSetup+0x64>)
 8010b10:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010b14:	4b07      	ldr	r3, [pc, #28]	@ (8010b34 <RxWindowSetup+0x58>)
 8010b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b18:	4a07      	ldr	r2, [pc, #28]	@ (8010b38 <RxWindowSetup+0x5c>)
 8010b1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	7cda      	ldrb	r2, [r3, #19]
 8010b24:	4b06      	ldr	r3, [pc, #24]	@ (8010b40 <RxWindowSetup+0x64>)
 8010b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010b2a:	bf00      	nop
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	0801f574 	.word	0x0801f574
 8010b38:	20000df8 	.word	0x20000df8
 8010b3c:	20000d00 	.word	0x20000d00
 8010b40:	200008d8 	.word	0x200008d8

08010b44 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010b44:	b590      	push	{r4, r7, lr}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b4c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010b50:	4b1c      	ldr	r3, [pc, #112]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b52:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b56:	b259      	sxtb	r1, r3
 8010b58:	4b1a      	ldr	r3, [pc, #104]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b5a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010b5e:	4b19      	ldr	r3, [pc, #100]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b62:	4c19      	ldr	r4, [pc, #100]	@ (8010bc8 <OpenContinuousRxCWindow+0x84>)
 8010b64:	9400      	str	r4, [sp, #0]
 8010b66:	f004 f868 	bl	8014c3a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010b6a:	4b18      	ldr	r3, [pc, #96]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010b6c:	2202      	movs	r2, #2
 8010b6e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b72:	4b14      	ldr	r3, [pc, #80]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b74:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010b78:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010b7a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010b7e:	4b13      	ldr	r3, [pc, #76]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010b80:	2201      	movs	r2, #1
 8010b82:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010b86:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc4 <OpenContinuousRxCWindow+0x80>)
 8010b88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b8c:	4a10      	ldr	r2, [pc, #64]	@ (8010bd0 <OpenContinuousRxCWindow+0x8c>)
 8010b8e:	490e      	ldr	r1, [pc, #56]	@ (8010bc8 <OpenContinuousRxCWindow+0x84>)
 8010b90:	4618      	mov	r0, r3
 8010b92:	f004 f86c 	bl	8014c6e <RegionRxConfig>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00f      	beq.n	8010bbc <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010b9e:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010ba4:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd4 <OpenContinuousRxCWindow+0x90>)
 8010baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bac:	2000      	movs	r0, #0
 8010bae:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010bb0:	4b06      	ldr	r3, [pc, #24]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010bb2:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010bb6:	4b05      	ldr	r3, [pc, #20]	@ (8010bcc <OpenContinuousRxCWindow+0x88>)
 8010bb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010bbc:	bf00      	nop
 8010bbe:	3704      	adds	r7, #4
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd90      	pop	{r4, r7, pc}
 8010bc4:	20000df8 	.word	0x20000df8
 8010bc8:	20000cc0 	.word	0x20000cc0
 8010bcc:	200008d8 	.word	0x200008d8
 8010bd0:	20000d00 	.word	0x20000d00
 8010bd4:	0801f574 	.word	0x0801f574

08010bd8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b088      	sub	sp, #32
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	4613      	mov	r3, r2
 8010be6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010be8:	4b81      	ldr	r3, [pc, #516]	@ (8010df0 <PrepareFrame+0x218>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010bee:	4b80      	ldr	r3, [pc, #512]	@ (8010df0 <PrepareFrame+0x218>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d101      	bne.n	8010c0c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010c0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	4878      	ldr	r0, [pc, #480]	@ (8010df4 <PrepareFrame+0x21c>)
 8010c14:	f006 fa3b 	bl	801708e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010c18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	4b74      	ldr	r3, [pc, #464]	@ (8010df0 <PrepareFrame+0x218>)
 8010c1e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	781a      	ldrb	r2, [r3, #0]
 8010c26:	4b72      	ldr	r3, [pc, #456]	@ (8010df0 <PrepareFrame+0x218>)
 8010c28:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b07      	cmp	r3, #7
 8010c36:	f000 80b9 	beq.w	8010dac <PrepareFrame+0x1d4>
 8010c3a:	2b07      	cmp	r3, #7
 8010c3c:	f300 80ce 	bgt.w	8010ddc <PrepareFrame+0x204>
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d006      	beq.n	8010c52 <PrepareFrame+0x7a>
 8010c44:	2b04      	cmp	r3, #4
 8010c46:	f040 80c9 	bne.w	8010ddc <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010c4a:	4b69      	ldr	r3, [pc, #420]	@ (8010df0 <PrepareFrame+0x218>)
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010c52:	4b67      	ldr	r3, [pc, #412]	@ (8010df0 <PrepareFrame+0x218>)
 8010c54:	2204      	movs	r2, #4
 8010c56:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010c5a:	4b65      	ldr	r3, [pc, #404]	@ (8010df0 <PrepareFrame+0x218>)
 8010c5c:	4a66      	ldr	r2, [pc, #408]	@ (8010df8 <PrepareFrame+0x220>)
 8010c5e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010c62:	4b63      	ldr	r3, [pc, #396]	@ (8010df0 <PrepareFrame+0x218>)
 8010c64:	22ff      	movs	r2, #255	@ 0xff
 8010c66:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	781a      	ldrb	r2, [r3, #0]
 8010c6e:	4b60      	ldr	r3, [pc, #384]	@ (8010df0 <PrepareFrame+0x218>)
 8010c70:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010c74:	4a5e      	ldr	r2, [pc, #376]	@ (8010df0 <PrepareFrame+0x218>)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8010dfc <PrepareFrame+0x224>)
 8010c7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010c82:	4a5b      	ldr	r2, [pc, #364]	@ (8010df0 <PrepareFrame+0x218>)
 8010c84:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	781a      	ldrb	r2, [r3, #0]
 8010c8c:	4b58      	ldr	r3, [pc, #352]	@ (8010df0 <PrepareFrame+0x218>)
 8010c8e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010c92:	4b57      	ldr	r3, [pc, #348]	@ (8010df0 <PrepareFrame+0x218>)
 8010c94:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010c98:	4b55      	ldr	r3, [pc, #340]	@ (8010df0 <PrepareFrame+0x218>)
 8010c9a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010c9e:	4b54      	ldr	r3, [pc, #336]	@ (8010df0 <PrepareFrame+0x218>)
 8010ca0:	4a54      	ldr	r2, [pc, #336]	@ (8010df4 <PrepareFrame+0x21c>)
 8010ca2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010ca6:	f107 0318 	add.w	r3, r7, #24
 8010caa:	4618      	mov	r0, r3
 8010cac:	f003 f8e2 	bl	8013e74 <LoRaMacCryptoGetFCntUp>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010cb6:	2312      	movs	r3, #18
 8010cb8:	e096      	b.n	8010de8 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8010df0 <PrepareFrame+0x218>)
 8010cc0:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8010df0 <PrepareFrame+0x218>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010ccc:	4b48      	ldr	r3, [pc, #288]	@ (8010df0 <PrepareFrame+0x218>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	4a46      	ldr	r2, [pc, #280]	@ (8010df0 <PrepareFrame+0x218>)
 8010cd8:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010cdc:	f107 0314 	add.w	r3, r7, #20
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f002 fa83 	bl	80131ec <LoRaMacCommandsGetSizeSerializedCmds>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cec:	2313      	movs	r3, #19
 8010cee:	e07b      	b.n	8010de8 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d074      	beq.n	8010de0 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010cf6:	4b41      	ldr	r3, [pc, #260]	@ (8010dfc <PrepareFrame+0x224>)
 8010cf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe fd4d 	bl	800f79c <GetMaxAppPayloadWithoutFOptsLength>
 8010d02:	4603      	mov	r3, r0
 8010d04:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d06:	4b3a      	ldr	r3, [pc, #232]	@ (8010df0 <PrepareFrame+0x218>)
 8010d08:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d01d      	beq.n	8010d4c <PrepareFrame+0x174>
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b0f      	cmp	r3, #15
 8010d14:	d81a      	bhi.n	8010d4c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010d16:	f107 0314 	add.w	r3, r7, #20
 8010d1a:	4a39      	ldr	r2, [pc, #228]	@ (8010e00 <PrepareFrame+0x228>)
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	200f      	movs	r0, #15
 8010d20:	f002 fa7a 	bl	8013218 <LoRaMacCommandsSerializeCmds>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d001      	beq.n	8010d2e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d2a:	2313      	movs	r3, #19
 8010d2c:	e05c      	b.n	8010de8 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	f003 030f 	and.w	r3, r3, #15
 8010d34:	b2d9      	uxtb	r1, r3
 8010d36:	68ba      	ldr	r2, [r7, #8]
 8010d38:	7813      	ldrb	r3, [r2, #0]
 8010d3a:	f361 0303 	bfi	r3, r1, #0, #4
 8010d3e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	4b2a      	ldr	r3, [pc, #168]	@ (8010df0 <PrepareFrame+0x218>)
 8010d46:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010d4a:	e049      	b.n	8010de0 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d4c:	4b28      	ldr	r3, [pc, #160]	@ (8010df0 <PrepareFrame+0x218>)
 8010d4e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d010      	beq.n	8010d78 <PrepareFrame+0x1a0>
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	2b0f      	cmp	r3, #15
 8010d5a:	d90d      	bls.n	8010d78 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d5c:	7ffb      	ldrb	r3, [r7, #31]
 8010d5e:	f107 0114 	add.w	r1, r7, #20
 8010d62:	4a28      	ldr	r2, [pc, #160]	@ (8010e04 <PrepareFrame+0x22c>)
 8010d64:	4618      	mov	r0, r3
 8010d66:	f002 fa57 	bl	8013218 <LoRaMacCommandsSerializeCmds>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d001      	beq.n	8010d74 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d70:	2313      	movs	r3, #19
 8010d72:	e039      	b.n	8010de8 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010d74:	230a      	movs	r3, #10
 8010d76:	e037      	b.n	8010de8 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d78:	7ffb      	ldrb	r3, [r7, #31]
 8010d7a:	f107 0114 	add.w	r1, r7, #20
 8010d7e:	4a21      	ldr	r2, [pc, #132]	@ (8010e04 <PrepareFrame+0x22c>)
 8010d80:	4618      	mov	r0, r3
 8010d82:	f002 fa49 	bl	8013218 <LoRaMacCommandsSerializeCmds>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d8c:	2313      	movs	r3, #19
 8010d8e:	e02b      	b.n	8010de8 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010d90:	4b17      	ldr	r3, [pc, #92]	@ (8010df0 <PrepareFrame+0x218>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010d98:	4b15      	ldr	r3, [pc, #84]	@ (8010df0 <PrepareFrame+0x218>)
 8010d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8010e04 <PrepareFrame+0x22c>)
 8010d9c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	b2da      	uxtb	r2, r3
 8010da4:	4b12      	ldr	r3, [pc, #72]	@ (8010df0 <PrepareFrame+0x218>)
 8010da6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010daa:	e019      	b.n	8010de0 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d018      	beq.n	8010de4 <PrepareFrame+0x20c>
 8010db2:	4b0f      	ldr	r3, [pc, #60]	@ (8010df0 <PrepareFrame+0x218>)
 8010db4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d013      	beq.n	8010de4 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010dbc:	4812      	ldr	r0, [pc, #72]	@ (8010e08 <PrepareFrame+0x230>)
 8010dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8010df0 <PrepareFrame+0x218>)
 8010dc0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	f006 f961 	bl	801708e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010dcc:	4b08      	ldr	r3, [pc, #32]	@ (8010df0 <PrepareFrame+0x218>)
 8010dce:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	4b06      	ldr	r3, [pc, #24]	@ (8010df0 <PrepareFrame+0x218>)
 8010dd8:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010dda:	e003      	b.n	8010de4 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ddc:	2302      	movs	r3, #2
 8010dde:	e003      	b.n	8010de8 <PrepareFrame+0x210>
            break;
 8010de0:	bf00      	nop
 8010de2:	e000      	b.n	8010de6 <PrepareFrame+0x20e>
            break;
 8010de4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3720      	adds	r7, #32
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	200008d8 	.word	0x200008d8
 8010df4:	20000a10 	.word	0x20000a10
 8010df8:	200008da 	.word	0x200008da
 8010dfc:	20000df8 	.word	0x20000df8
 8010e00:	200009f0 	.word	0x200009f0
 8010e04:	20000d78 	.word	0x20000d78
 8010e08:	200008db 	.word	0x200008db

08010e0c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08a      	sub	sp, #40	@ 0x28
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e16:	2303      	movs	r3, #3
 8010e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010e20:	79fb      	ldrb	r3, [r7, #7]
 8010e22:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e24:	4b4a      	ldr	r3, [pc, #296]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e26:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e2a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e2c:	4b48      	ldr	r3, [pc, #288]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e2e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010e32:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010e34:	4b46      	ldr	r3, [pc, #280]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e38:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010e3a:	4b45      	ldr	r3, [pc, #276]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e3e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010e40:	4b44      	ldr	r3, [pc, #272]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010e46:	4b42      	ldr	r3, [pc, #264]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e48:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010e4c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010e4e:	4b40      	ldr	r3, [pc, #256]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e50:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010e54:	f107 020f 	add.w	r2, r7, #15
 8010e58:	f107 0110 	add.w	r1, r7, #16
 8010e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8010f58 <SendFrameOnChannel+0x14c>)
 8010e5e:	f003 ff1b 	bl	8014c98 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e62:	4b3c      	ldr	r3, [pc, #240]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e64:	2201      	movs	r2, #1
 8010e66:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e6a:	4b39      	ldr	r3, [pc, #228]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010e6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b38      	ldr	r3, [pc, #224]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e74:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010e78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010e7c:	4b35      	ldr	r3, [pc, #212]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e7e:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	4a33      	ldr	r2, [pc, #204]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e86:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e8a:	4b32      	ldr	r3, [pc, #200]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e8c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010e90:	4a30      	ldr	r2, [pc, #192]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e92:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e96:	4b2f      	ldr	r3, [pc, #188]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e98:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010e9e:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010ea2:	f001 ff34 	bl	8012d0e <LoRaMacClassBIsBeaconModeActive>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00b      	beq.n	8010ec4 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010eac:	4b29      	ldr	r3, [pc, #164]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010eae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f001 ff96 	bl	8012de4 <LoRaMacClassBIsUplinkCollision>
 8010eb8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010ec0:	2310      	movs	r3, #16
 8010ec2:	e040      	b.n	8010f46 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010ec4:	4b22      	ldr	r3, [pc, #136]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010ec6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d101      	bne.n	8010ed2 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010ece:	f001 ff93 	bl	8012df8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010ed2:	f001 ff2d 	bl	8012d30 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8010f50 <SendFrameOnChannel+0x144>)
 8010ed8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	4a1d      	ldr	r2, [pc, #116]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010ee0:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff fc66 	bl	80107b8 <SecureFrame>
 8010eec:	4603      	mov	r3, r0
 8010eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d002      	beq.n	8010f00 <SendFrameOnChannel+0xf4>
    {
        return status;
 8010efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010efe:	e022      	b.n	8010f46 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f00:	4b14      	ldr	r3, [pc, #80]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f02:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f06:	f043 0302 	orr.w	r3, r3, #2
 8010f0a:	4a12      	ldr	r2, [pc, #72]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f0c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8010f10:	4b10      	ldr	r3, [pc, #64]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f12:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010f16:	3301      	adds	r3, #1
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f1c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010f20:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f22:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010f26:	4b0b      	ldr	r3, [pc, #44]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f28:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010f2c:	4b09      	ldr	r3, [pc, #36]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010f34:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <SendFrameOnChannel+0x150>)
 8010f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f38:	4a06      	ldr	r2, [pc, #24]	@ (8010f54 <SendFrameOnChannel+0x148>)
 8010f3a:	8812      	ldrh	r2, [r2, #0]
 8010f3c:	b2d2      	uxtb	r2, r2
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4807      	ldr	r0, [pc, #28]	@ (8010f60 <SendFrameOnChannel+0x154>)
 8010f42:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3728      	adds	r7, #40	@ 0x28
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20000df8 	.word	0x20000df8
 8010f54:	200008d8 	.word	0x200008d8
 8010f58:	20000cf8 	.word	0x20000cf8
 8010f5c:	0801f574 	.word	0x0801f574
 8010f60:	200008da 	.word	0x200008da

08010f64 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	6039      	str	r1, [r7, #0]
 8010f6e:	80fb      	strh	r3, [r7, #6]
 8010f70:	4613      	mov	r3, r2
 8010f72:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010f74:	4b09      	ldr	r3, [pc, #36]	@ (8010f9c <SetTxContinuousWave+0x38>)
 8010f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f78:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	6838      	ldr	r0, [r7, #0]
 8010f80:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f82:	4b07      	ldr	r3, [pc, #28]	@ (8010fa0 <SetTxContinuousWave+0x3c>)
 8010f84:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f88:	f043 0302 	orr.w	r3, r3, #2
 8010f8c:	4a04      	ldr	r2, [pc, #16]	@ (8010fa0 <SetTxContinuousWave+0x3c>)
 8010f8e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	0801f574 	.word	0x0801f574
 8010fa0:	200008d8 	.word	0x200008d8

08010fa4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010fae:	4b3e      	ldr	r3, [pc, #248]	@ (80110a8 <RestoreNvmData+0x104>)
 8010fb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d001      	beq.n	8010fbc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e071      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010fbc:	2124      	movs	r1, #36	@ 0x24
 8010fbe:	483b      	ldr	r0, [pc, #236]	@ (80110ac <RestoreNvmData+0x108>)
 8010fc0:	f006 f8ba 	bl	8017138 <Crc32>
 8010fc4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010fc6:	4b39      	ldr	r3, [pc, #228]	@ (80110ac <RestoreNvmData+0x108>)
 8010fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d001      	beq.n	8010fd4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fd0:	2317      	movs	r3, #23
 8010fd2:	e065      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010fd4:	2114      	movs	r1, #20
 8010fd6:	4836      	ldr	r0, [pc, #216]	@ (80110b0 <RestoreNvmData+0x10c>)
 8010fd8:	f006 f8ae 	bl	8017138 <Crc32>
 8010fdc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010fde:	4b33      	ldr	r3, [pc, #204]	@ (80110ac <RestoreNvmData+0x108>)
 8010fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d001      	beq.n	8010fec <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fe8:	2317      	movs	r3, #23
 8010fea:	e059      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010fec:	21e0      	movs	r1, #224	@ 0xe0
 8010fee:	4831      	ldr	r0, [pc, #196]	@ (80110b4 <RestoreNvmData+0x110>)
 8010ff0:	f006 f8a2 	bl	8017138 <Crc32>
 8010ff4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80110ac <RestoreNvmData+0x108>)
 8010ff8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d001      	beq.n	8011006 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011002:	2317      	movs	r3, #23
 8011004:	e04c      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011006:	21bc      	movs	r1, #188	@ 0xbc
 8011008:	482b      	ldr	r0, [pc, #172]	@ (80110b8 <RestoreNvmData+0x114>)
 801100a:	f006 f895 	bl	8017138 <Crc32>
 801100e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011010:	4b26      	ldr	r3, [pc, #152]	@ (80110ac <RestoreNvmData+0x108>)
 8011012:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	429a      	cmp	r2, r3
 801101a:	d001      	beq.n	8011020 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801101c:	2317      	movs	r3, #23
 801101e:	e03f      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011020:	2100      	movs	r1, #0
 8011022:	4826      	ldr	r0, [pc, #152]	@ (80110bc <RestoreNvmData+0x118>)
 8011024:	f006 f888 	bl	8017138 <Crc32>
 8011028:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801102a:	4b20      	ldr	r3, [pc, #128]	@ (80110ac <RestoreNvmData+0x108>)
 801102c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	429a      	cmp	r2, r3
 8011034:	d001      	beq.n	801103a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011036:	2317      	movs	r3, #23
 8011038:	e032      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801103a:	2114      	movs	r1, #20
 801103c:	4820      	ldr	r0, [pc, #128]	@ (80110c0 <RestoreNvmData+0x11c>)
 801103e:	f006 f87b 	bl	8017138 <Crc32>
 8011042:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011044:	4b19      	ldr	r3, [pc, #100]	@ (80110ac <RestoreNvmData+0x108>)
 8011046:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	429a      	cmp	r2, r3
 801104e:	d001      	beq.n	8011054 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011050:	2317      	movs	r3, #23
 8011052:	e025      	b.n	80110a0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011054:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011058:	4914      	ldr	r1, [pc, #80]	@ (80110ac <RestoreNvmData+0x108>)
 801105a:	481a      	ldr	r0, [pc, #104]	@ (80110c4 <RestoreNvmData+0x120>)
 801105c:	f006 f817 	bl	801708e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011060:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011064:	2100      	movs	r1, #0
 8011066:	4811      	ldr	r0, [pc, #68]	@ (80110ac <RestoreNvmData+0x108>)
 8011068:	f006 f84c 	bl	8017104 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801106c:	4b0e      	ldr	r3, [pc, #56]	@ (80110a8 <RestoreNvmData+0x104>)
 801106e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8011072:	4b0d      	ldr	r3, [pc, #52]	@ (80110a8 <RestoreNvmData+0x104>)
 8011074:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011078:	4b12      	ldr	r3, [pc, #72]	@ (80110c4 <RestoreNvmData+0x120>)
 801107a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801107c:	4a0a      	ldr	r2, [pc, #40]	@ (80110a8 <RestoreNvmData+0x104>)
 801107e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011082:	4b10      	ldr	r3, [pc, #64]	@ (80110c4 <RestoreNvmData+0x120>)
 8011084:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011088:	4b07      	ldr	r3, [pc, #28]	@ (80110a8 <RestoreNvmData+0x104>)
 801108a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801108e:	4b06      	ldr	r3, [pc, #24]	@ (80110a8 <RestoreNvmData+0x104>)
 8011090:	2201      	movs	r2, #1
 8011092:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011096:	4b04      	ldr	r3, [pc, #16]	@ (80110a8 <RestoreNvmData+0x104>)
 8011098:	2202      	movs	r2, #2
 801109a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	200008d8 	.word	0x200008d8
 80110ac:	20001374 	.word	0x20001374
 80110b0:	2000139c 	.word	0x2000139c
 80110b4:	200013b4 	.word	0x200013b4
 80110b8:	20001498 	.word	0x20001498
 80110bc:	20001558 	.word	0x20001558
 80110c0:	200018d8 	.word	0x200018d8
 80110c4:	20000df8 	.word	0x20000df8

080110c8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <DetermineFrameType+0x16>
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d101      	bne.n	80110e2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110de:	2303      	movs	r3, #3
 80110e0:	e03b      	b.n	801115a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	7b1b      	ldrb	r3, [r3, #12]
 80110e6:	f003 030f 	and.w	r3, r3, #15
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d008      	beq.n	8011102 <DetermineFrameType+0x3a>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d003      	beq.n	8011102 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2200      	movs	r2, #0
 80110fe:	701a      	strb	r2, [r3, #0]
 8011100:	e02a      	b.n	8011158 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011108:	2b00      	cmp	r3, #0
 801110a:	d103      	bne.n	8011114 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2201      	movs	r2, #1
 8011110:	701a      	strb	r2, [r3, #0]
 8011112:	e021      	b.n	8011158 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	7b1b      	ldrb	r3, [r3, #12]
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	d108      	bne.n	8011134 <DetermineFrameType+0x6c>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d103      	bne.n	8011134 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	2202      	movs	r2, #2
 8011130:	701a      	strb	r2, [r3, #0]
 8011132:	e011      	b.n	8011158 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	7b1b      	ldrb	r3, [r3, #12]
 8011138:	f003 030f 	and.w	r3, r3, #15
 801113c:	b2db      	uxtb	r3, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	d108      	bne.n	8011154 <DetermineFrameType+0x8c>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d003      	beq.n	8011154 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	2203      	movs	r2, #3
 8011150:	701a      	strb	r2, [r3, #0]
 8011152:	e001      	b.n	8011158 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011154:	2318      	movs	r3, #24
 8011156:	e000      	b.n	801115a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	370c      	adds	r7, #12
 801115e:	46bd      	mov	sp, r7
 8011160:	bc80      	pop	{r7}
 8011162:	4770      	bx	lr

08011164 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	4603      	mov	r3, r0
 801116c:	460a      	mov	r2, r1
 801116e:	71fb      	strb	r3, [r7, #7]
 8011170:	4613      	mov	r3, r2
 8011172:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011174:	79fa      	ldrb	r2, [r7, #7]
 8011176:	79bb      	ldrb	r3, [r7, #6]
 8011178:	429a      	cmp	r2, r3
 801117a:	d301      	bcc.n	8011180 <CheckRetrans+0x1c>
    {
        return true;
 801117c:	2301      	movs	r3, #1
 801117e:	e000      	b.n	8011182 <CheckRetrans+0x1e>
    }
    return false;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	bc80      	pop	{r7}
 801118a:	4770      	bx	lr

0801118c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011190:	4b12      	ldr	r3, [pc, #72]	@ (80111dc <CheckRetransUnconfirmedUplink+0x50>)
 8011192:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011196:	4a12      	ldr	r2, [pc, #72]	@ (80111e0 <CheckRetransUnconfirmedUplink+0x54>)
 8011198:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff ffe0 	bl	8011164 <CheckRetrans>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80111aa:	2301      	movs	r3, #1
 80111ac:	e014      	b.n	80111d8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80111ae:	4b0b      	ldr	r3, [pc, #44]	@ (80111dc <CheckRetransUnconfirmedUplink+0x50>)
 80111b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80111b4:	f003 0302 	and.w	r3, r3, #2
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d00b      	beq.n	80111d6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80111be:	4b07      	ldr	r3, [pc, #28]	@ (80111dc <CheckRetransUnconfirmedUplink+0x50>)
 80111c0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d004      	beq.n	80111d2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80111c8:	4b04      	ldr	r3, [pc, #16]	@ (80111dc <CheckRetransUnconfirmedUplink+0x50>)
 80111ca:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d101      	bne.n	80111d6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80111d2:	2301      	movs	r3, #1
 80111d4:	e000      	b.n	80111d8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	200008d8 	.word	0x200008d8
 80111e0:	20000df8 	.word	0x20000df8

080111e4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80111e8:	4b10      	ldr	r3, [pc, #64]	@ (801122c <CheckRetransConfirmedUplink+0x48>)
 80111ea:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80111ee:	4a10      	ldr	r2, [pc, #64]	@ (8011230 <CheckRetransConfirmedUplink+0x4c>)
 80111f0:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80111f4:	4611      	mov	r1, r2
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff ffb4 	bl	8011164 <CheckRetrans>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011202:	2301      	movs	r3, #1
 8011204:	e00f      	b.n	8011226 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011206:	4b09      	ldr	r3, [pc, #36]	@ (801122c <CheckRetransConfirmedUplink+0x48>)
 8011208:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801120c:	f003 0302 	and.w	r3, r3, #2
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d006      	beq.n	8011224 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011216:	4b05      	ldr	r3, [pc, #20]	@ (801122c <CheckRetransConfirmedUplink+0x48>)
 8011218:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011220:	2301      	movs	r3, #1
 8011222:	e000      	b.n	8011226 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	200008d8 	.word	0x200008d8
 8011230:	20000df8 	.word	0x20000df8

08011234 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011242:	d002      	beq.n	801124a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	3301      	adds	r3, #1
 8011248:	607b      	str	r3, [r7, #4]
    }
    return counter;
 801124a:	687b      	ldr	r3, [r7, #4]
}
 801124c:	4618      	mov	r0, r3
 801124e:	370c      	adds	r7, #12
 8011250:	46bd      	mov	sp, r7
 8011252:	bc80      	pop	{r7}
 8011254:	4770      	bx	lr
	...

08011258 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801125c:	4b1a      	ldr	r3, [pc, #104]	@ (80112c8 <StopRetransmission+0x70>)
 801125e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011262:	f003 0302 	and.w	r3, r3, #2
 8011266:	b2db      	uxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d009      	beq.n	8011280 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801126c:	4b16      	ldr	r3, [pc, #88]	@ (80112c8 <StopRetransmission+0x70>)
 801126e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011272:	2b00      	cmp	r3, #0
 8011274:	d011      	beq.n	801129a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011276:	4b14      	ldr	r3, [pc, #80]	@ (80112c8 <StopRetransmission+0x70>)
 8011278:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801127c:	2b01      	cmp	r3, #1
 801127e:	d00c      	beq.n	801129a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011280:	4b12      	ldr	r3, [pc, #72]	@ (80112cc <StopRetransmission+0x74>)
 8011282:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011286:	2b00      	cmp	r3, #0
 8011288:	d007      	beq.n	801129a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801128a:	4b10      	ldr	r3, [pc, #64]	@ (80112cc <StopRetransmission+0x74>)
 801128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801128e:	4618      	mov	r0, r3
 8011290:	f7ff ffd0 	bl	8011234 <IncreaseAdrAckCounter>
 8011294:	4603      	mov	r3, r0
 8011296:	4a0d      	ldr	r2, [pc, #52]	@ (80112cc <StopRetransmission+0x74>)
 8011298:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801129a:	4b0b      	ldr	r3, [pc, #44]	@ (80112c8 <StopRetransmission+0x70>)
 801129c:	2200      	movs	r2, #0
 801129e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 80112a2:	4b09      	ldr	r3, [pc, #36]	@ (80112c8 <StopRetransmission+0x70>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80112aa:	4b07      	ldr	r3, [pc, #28]	@ (80112c8 <StopRetransmission+0x70>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80112b2:	4b05      	ldr	r3, [pc, #20]	@ (80112c8 <StopRetransmission+0x70>)
 80112b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80112b8:	f023 0302 	bic.w	r3, r3, #2
 80112bc:	4a02      	ldr	r2, [pc, #8]	@ (80112c8 <StopRetransmission+0x70>)
 80112be:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80112c2:	2301      	movs	r3, #1
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	200008d8 	.word	0x200008d8
 80112cc:	20000df8 	.word	0x20000df8

080112d0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	4603      	mov	r3, r0
 80112d8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80112da:	4b0b      	ldr	r3, [pc, #44]	@ (8011308 <CallNvmDataChangeCallback+0x38>)
 80112dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00c      	beq.n	80112fe <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80112e4:	4b08      	ldr	r3, [pc, #32]	@ (8011308 <CallNvmDataChangeCallback+0x38>)
 80112e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112ea:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80112f0:	4b05      	ldr	r3, [pc, #20]	@ (8011308 <CallNvmDataChangeCallback+0x38>)
 80112f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	88fa      	ldrh	r2, [r7, #6]
 80112fa:	4610      	mov	r0, r2
 80112fc:	4798      	blx	r3
    }
}
 80112fe:	bf00      	nop
 8011300:	3708      	adds	r7, #8
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	200008d8 	.word	0x200008d8

0801130c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801130c:	b480      	push	{r7}
 801130e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011310:	4b0b      	ldr	r3, [pc, #44]	@ (8011340 <IsRequestPending+0x34>)
 8011312:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011316:	f003 0304 	and.w	r3, r3, #4
 801131a:	b2db      	uxtb	r3, r3
 801131c:	2b00      	cmp	r3, #0
 801131e:	d107      	bne.n	8011330 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011320:	4b07      	ldr	r3, [pc, #28]	@ (8011340 <IsRequestPending+0x34>)
 8011322:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011326:	f003 0301 	and.w	r3, r3, #1
 801132a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801132c:	2b00      	cmp	r3, #0
 801132e:	d001      	beq.n	8011334 <IsRequestPending+0x28>
    {
        return 1;
 8011330:	2301      	movs	r3, #1
 8011332:	e000      	b.n	8011336 <IsRequestPending+0x2a>
    }
    return 0;
 8011334:	2300      	movs	r3, #0
}
 8011336:	4618      	mov	r0, r3
 8011338:	46bd      	mov	sp, r7
 801133a:	bc80      	pop	{r7}
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	200008d8 	.word	0x200008d8

08011344 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b091      	sub	sp, #68	@ 0x44
 8011348:	af02      	add	r7, sp, #8
 801134a:	6178      	str	r0, [r7, #20]
 801134c:	6139      	str	r1, [r7, #16]
 801134e:	4613      	mov	r3, r2
 8011350:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <LoRaMacInitialization+0x1a>
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d101      	bne.n	8011362 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801135e:	2303      	movs	r3, #3
 8011360:	e27c      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00b      	beq.n	8011382 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801136e:	2b00      	cmp	r3, #0
 8011370:	d007      	beq.n	8011382 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011376:	2b00      	cmp	r3, #0
 8011378:	d003      	beq.n	8011382 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011382:	2303      	movs	r3, #3
 8011384:	e26a      	b.n	801185c <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011386:	7bfb      	ldrb	r3, [r7, #15]
 8011388:	4618      	mov	r0, r3
 801138a:	f003 fbcf 	bl	8014b2c <RegionIsActive>
 801138e:	4603      	mov	r3, r0
 8011390:	f083 0301 	eor.w	r3, r3, #1
 8011394:	b2db      	uxtb	r3, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801139a:	2309      	movs	r3, #9
 801139c:	e25e      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801139e:	6978      	ldr	r0, [r7, #20]
 80113a0:	f002 f884 	bl	80134ac <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80113a4:	f240 527c 	movw	r2, #1404	@ 0x57c
 80113a8:	2100      	movs	r1, #0
 80113aa:	48c7      	ldr	r0, [pc, #796]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113ac:	f005 feaa 	bl	8017104 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80113b0:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80113b4:	2100      	movs	r1, #0
 80113b6:	48c5      	ldr	r0, [pc, #788]	@ (80116cc <LoRaMacInitialization+0x388>)
 80113b8:	f005 fea4 	bl	8017104 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80113bc:	4ac2      	ldr	r2, [pc, #776]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113be:	7bfb      	ldrb	r3, [r7, #15]
 80113c0:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80113c4:	4bc0      	ldr	r3, [pc, #768]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80113cc:	4bbe      	ldr	r3, [pc, #760]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80113d4:	4bbc      	ldr	r3, [pc, #752]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113d6:	4abe      	ldr	r2, [pc, #760]	@ (80116d0 <LoRaMacInitialization+0x38c>)
 80113d8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80113dc:	2300      	movs	r3, #0
 80113de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80113e2:	4bbc      	ldr	r3, [pc, #752]	@ (80116d4 <LoRaMacInitialization+0x390>)
 80113e4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80113e6:	4bbc      	ldr	r3, [pc, #752]	@ (80116d8 <LoRaMacInitialization+0x394>)
 80113e8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80113ea:	4bbc      	ldr	r3, [pc, #752]	@ (80116dc <LoRaMacInitialization+0x398>)
 80113ec:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80113ee:	4bb6      	ldr	r3, [pc, #728]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80113f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113f4:	f107 021c 	add.w	r2, r7, #28
 80113f8:	4611      	mov	r1, r2
 80113fa:	4618      	mov	r0, r3
 80113fc:	f003 fbcf 	bl	8014b9e <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011400:	230f      	movs	r3, #15
 8011402:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011406:	4bb0      	ldr	r3, [pc, #704]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801140c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011410:	4611      	mov	r1, r2
 8011412:	4618      	mov	r0, r3
 8011414:	f003 fb9a 	bl	8014b4c <RegionGetPhyParam>
 8011418:	4603      	mov	r3, r0
 801141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141e:	2b00      	cmp	r3, #0
 8011420:	bf14      	ite	ne
 8011422:	2301      	movne	r3, #1
 8011424:	2300      	moveq	r3, #0
 8011426:	b2da      	uxtb	r2, r3
 8011428:	4ba7      	ldr	r3, [pc, #668]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801142a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801142e:	230a      	movs	r3, #10
 8011430:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011434:	4ba4      	ldr	r3, [pc, #656]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801143a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801143e:	4611      	mov	r1, r2
 8011440:	4618      	mov	r0, r3
 8011442:	f003 fb83 	bl	8014b4c <RegionGetPhyParam>
 8011446:	4603      	mov	r3, r0
 8011448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144c:	b25a      	sxtb	r2, r3
 801144e:	4b9e      	ldr	r3, [pc, #632]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011450:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011454:	2306      	movs	r3, #6
 8011456:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801145a:	4b9b      	ldr	r3, [pc, #620]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801145c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011460:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f003 fb70 	bl	8014b4c <RegionGetPhyParam>
 801146c:	4603      	mov	r3, r0
 801146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011472:	b25a      	sxtb	r2, r3
 8011474:	4b94      	ldr	r3, [pc, #592]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011476:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801147a:	2310      	movs	r3, #16
 801147c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011480:	4b91      	ldr	r3, [pc, #580]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011486:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f003 fb5d 	bl	8014b4c <RegionGetPhyParam>
 8011492:	4603      	mov	r3, r0
 8011494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011498:	4a8b      	ldr	r2, [pc, #556]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801149a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801149e:	2311      	movs	r3, #17
 80114a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114a4:	4b88      	ldr	r3, [pc, #544]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80114a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114ae:	4611      	mov	r1, r2
 80114b0:	4618      	mov	r0, r3
 80114b2:	f003 fb4b 	bl	8014b4c <RegionGetPhyParam>
 80114b6:	4603      	mov	r3, r0
 80114b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80114ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114bc:	4a82      	ldr	r2, [pc, #520]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80114be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80114c2:	2312      	movs	r3, #18
 80114c4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114c8:	4b7f      	ldr	r3, [pc, #508]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80114ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114d2:	4611      	mov	r1, r2
 80114d4:	4618      	mov	r0, r3
 80114d6:	f003 fb39 	bl	8014b4c <RegionGetPhyParam>
 80114da:	4603      	mov	r3, r0
 80114dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80114de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e0:	4a79      	ldr	r2, [pc, #484]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80114e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80114e6:	2313      	movs	r3, #19
 80114e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ec:	4b76      	ldr	r3, [pc, #472]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80114ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114f6:	4611      	mov	r1, r2
 80114f8:	4618      	mov	r0, r3
 80114fa:	f003 fb27 	bl	8014b4c <RegionGetPhyParam>
 80114fe:	4603      	mov	r3, r0
 8011500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011504:	4a70      	ldr	r2, [pc, #448]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011506:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801150a:	2314      	movs	r3, #20
 801150c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011510:	4b6d      	ldr	r3, [pc, #436]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011516:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801151a:	4611      	mov	r1, r2
 801151c:	4618      	mov	r0, r3
 801151e:	f003 fb15 	bl	8014b4c <RegionGetPhyParam>
 8011522:	4603      	mov	r3, r0
 8011524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011528:	4a67      	ldr	r2, [pc, #412]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801152a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801152e:	2316      	movs	r3, #22
 8011530:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011534:	4b64      	ldr	r3, [pc, #400]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801153a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801153e:	4611      	mov	r1, r2
 8011540:	4618      	mov	r0, r3
 8011542:	f003 fb03 	bl	8014b4c <RegionGetPhyParam>
 8011546:	4603      	mov	r3, r0
 8011548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b5e      	ldr	r3, [pc, #376]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011550:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011554:	2317      	movs	r3, #23
 8011556:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801155a:	4b5b      	ldr	r3, [pc, #364]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801155c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011560:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011564:	4611      	mov	r1, r2
 8011566:	4618      	mov	r0, r3
 8011568:	f003 faf0 	bl	8014b4c <RegionGetPhyParam>
 801156c:	4603      	mov	r3, r0
 801156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011572:	4a55      	ldr	r2, [pc, #340]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011574:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	4a53      	ldr	r2, [pc, #332]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801157c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011580:	2318      	movs	r3, #24
 8011582:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011586:	4b50      	ldr	r3, [pc, #320]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011588:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801158c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011590:	4611      	mov	r1, r2
 8011592:	4618      	mov	r0, r3
 8011594:	f003 fada 	bl	8014b4c <RegionGetPhyParam>
 8011598:	4603      	mov	r3, r0
 801159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	4b49      	ldr	r3, [pc, #292]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115a2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80115a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a8:	b2da      	uxtb	r2, r3
 80115aa:	4b47      	ldr	r3, [pc, #284]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115ac:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80115b0:	231d      	movs	r3, #29
 80115b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115b6:	4b44      	ldr	r3, [pc, #272]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115bc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115c0:	4611      	mov	r1, r2
 80115c2:	4618      	mov	r0, r3
 80115c4:	f003 fac2 	bl	8014b4c <RegionGetPhyParam>
 80115c8:	4603      	mov	r3, r0
 80115ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80115cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	4b3d      	ldr	r3, [pc, #244]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115d2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80115d6:	231e      	movs	r3, #30
 80115d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115dc:	4b3a      	ldr	r3, [pc, #232]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115e2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115e6:	4611      	mov	r1, r2
 80115e8:	4618      	mov	r0, r3
 80115ea:	f003 faaf 	bl	8014b4c <RegionGetPhyParam>
 80115ee:	4603      	mov	r3, r0
 80115f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	4b34      	ldr	r3, [pc, #208]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80115f8:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80115fc:	231f      	movs	r3, #31
 80115fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011602:	4b31      	ldr	r3, [pc, #196]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011608:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801160c:	4611      	mov	r1, r2
 801160e:	4618      	mov	r0, r3
 8011610:	f003 fa9c 	bl	8014b4c <RegionGetPhyParam>
 8011614:	4603      	mov	r3, r0
 8011616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161a:	4a2b      	ldr	r2, [pc, #172]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801161c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011620:	2320      	movs	r3, #32
 8011622:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011626:	4b28      	ldr	r3, [pc, #160]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801162c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011630:	4611      	mov	r1, r2
 8011632:	4618      	mov	r0, r3
 8011634:	f003 fa8a 	bl	8014b4c <RegionGetPhyParam>
 8011638:	4603      	mov	r3, r0
 801163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801163c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801163e:	4a22      	ldr	r2, [pc, #136]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011640:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011644:	230b      	movs	r3, #11
 8011646:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801164a:	4b1f      	ldr	r3, [pc, #124]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801164c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011650:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011654:	4611      	mov	r1, r2
 8011656:	4618      	mov	r0, r3
 8011658:	f003 fa78 	bl	8014b4c <RegionGetPhyParam>
 801165c:	4603      	mov	r3, r0
 801165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011662:	b29a      	uxth	r2, r3
 8011664:	4b19      	ldr	r3, [pc, #100]	@ (80116cc <LoRaMacInitialization+0x388>)
 8011666:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801166a:	230c      	movs	r3, #12
 801166c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011670:	4b15      	ldr	r3, [pc, #84]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011672:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011676:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801167a:	4611      	mov	r1, r2
 801167c:	4618      	mov	r0, r3
 801167e:	f003 fa65 	bl	8014b4c <RegionGetPhyParam>
 8011682:	4603      	mov	r3, r0
 8011684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011688:	b29a      	uxth	r2, r3
 801168a:	4b10      	ldr	r3, [pc, #64]	@ (80116cc <LoRaMacInitialization+0x388>)
 801168c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011690:	4b0d      	ldr	r3, [pc, #52]	@ (80116c8 <LoRaMacInitialization+0x384>)
 8011692:	2201      	movs	r2, #1
 8011694:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011698:	4b0b      	ldr	r3, [pc, #44]	@ (80116c8 <LoRaMacInitialization+0x384>)
 801169a:	220a      	movs	r2, #10
 801169c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80116a0:	4b09      	ldr	r3, [pc, #36]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116a2:	2206      	movs	r2, #6
 80116a4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80116a8:	4b07      	ldr	r3, [pc, #28]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116ae:	4a06      	ldr	r2, [pc, #24]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116b0:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80116b2:	4b05      	ldr	r3, [pc, #20]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116b4:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80116b8:	4b03      	ldr	r3, [pc, #12]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80116be:	4b02      	ldr	r3, [pc, #8]	@ (80116c8 <LoRaMacInitialization+0x384>)
 80116c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116c4:	e00c      	b.n	80116e0 <LoRaMacInitialization+0x39c>
 80116c6:	bf00      	nop
 80116c8:	20000df8 	.word	0x20000df8
 80116cc:	200008d8 	.word	0x200008d8
 80116d0:	01000400 	.word	0x01000400
 80116d4:	20000fdc 	.word	0x20000fdc
 80116d8:	20000fe0 	.word	0x20000fe0
 80116dc:	200018f0 	.word	0x200018f0
 80116e0:	4a60      	ldr	r2, [pc, #384]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80116e4:	4b5f      	ldr	r3, [pc, #380]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80116ea:	4a5e      	ldr	r2, [pc, #376]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116ec:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80116ee:	4b5d      	ldr	r3, [pc, #372]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80116f4:	4a5b      	ldr	r2, [pc, #364]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116f6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80116f8:	4b5a      	ldr	r3, [pc, #360]	@ (8011864 <LoRaMacInitialization+0x520>)
 80116fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80116fe:	4a59      	ldr	r2, [pc, #356]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011700:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011702:	4b58      	ldr	r3, [pc, #352]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011704:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011708:	4a56      	ldr	r2, [pc, #344]	@ (8011864 <LoRaMacInitialization+0x520>)
 801170a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801170c:	4b55      	ldr	r3, [pc, #340]	@ (8011864 <LoRaMacInitialization+0x520>)
 801170e:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8011712:	4b54      	ldr	r3, [pc, #336]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011714:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011718:	4b52      	ldr	r3, [pc, #328]	@ (8011864 <LoRaMacInitialization+0x520>)
 801171a:	2201      	movs	r2, #1
 801171c:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011720:	4a51      	ldr	r2, [pc, #324]	@ (8011868 <LoRaMacInitialization+0x524>)
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8011728:	f7ff f8d6 	bl	80108d8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801172c:	4b4d      	ldr	r3, [pc, #308]	@ (8011864 <LoRaMacInitialization+0x520>)
 801172e:	2201      	movs	r2, #1
 8011730:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 8011734:	4a4c      	ldr	r2, [pc, #304]	@ (8011868 <LoRaMacInitialization+0x524>)
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801173c:	4b4a      	ldr	r3, [pc, #296]	@ (8011868 <LoRaMacInitialization+0x524>)
 801173e:	2200      	movs	r2, #0
 8011740:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8011744:	4b48      	ldr	r3, [pc, #288]	@ (8011868 <LoRaMacInitialization+0x524>)
 8011746:	2201      	movs	r2, #1
 8011748:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801174c:	4b45      	ldr	r3, [pc, #276]	@ (8011864 <LoRaMacInitialization+0x520>)
 801174e:	2200      	movs	r2, #0
 8011750:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011752:	4b44      	ldr	r3, [pc, #272]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011754:	2200      	movs	r2, #0
 8011756:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011758:	2300      	movs	r3, #0
 801175a:	9300      	str	r3, [sp, #0]
 801175c:	4b43      	ldr	r3, [pc, #268]	@ (801186c <LoRaMacInitialization+0x528>)
 801175e:	2200      	movs	r2, #0
 8011760:	f04f 31ff 	mov.w	r1, #4294967295
 8011764:	4842      	ldr	r0, [pc, #264]	@ (8011870 <LoRaMacInitialization+0x52c>)
 8011766:	f009 fd3b 	bl	801b1e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801176a:	2300      	movs	r3, #0
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	4b41      	ldr	r3, [pc, #260]	@ (8011874 <LoRaMacInitialization+0x530>)
 8011770:	2200      	movs	r2, #0
 8011772:	f04f 31ff 	mov.w	r1, #4294967295
 8011776:	4840      	ldr	r0, [pc, #256]	@ (8011878 <LoRaMacInitialization+0x534>)
 8011778:	f009 fd32 	bl	801b1e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801177c:	2300      	movs	r3, #0
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	4b3e      	ldr	r3, [pc, #248]	@ (801187c <LoRaMacInitialization+0x538>)
 8011782:	2200      	movs	r2, #0
 8011784:	f04f 31ff 	mov.w	r1, #4294967295
 8011788:	483d      	ldr	r0, [pc, #244]	@ (8011880 <LoRaMacInitialization+0x53c>)
 801178a:	f009 fd29 	bl	801b1e0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801178e:	2300      	movs	r3, #0
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	4b3c      	ldr	r3, [pc, #240]	@ (8011884 <LoRaMacInitialization+0x540>)
 8011794:	2200      	movs	r2, #0
 8011796:	f04f 31ff 	mov.w	r1, #4294967295
 801179a:	483b      	ldr	r0, [pc, #236]	@ (8011888 <LoRaMacInitialization+0x544>)
 801179c:	f009 fd20 	bl	801b1e0 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80117a0:	4c30      	ldr	r4, [pc, #192]	@ (8011864 <LoRaMacInitialization+0x520>)
 80117a2:	463b      	mov	r3, r7
 80117a4:	4618      	mov	r0, r3
 80117a6:	f009 f891 	bl	801a8cc <SysTimeGetMcuTime>
 80117aa:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 80117ae:	463a      	mov	r2, r7
 80117b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117b4:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80117b8:	4b34      	ldr	r3, [pc, #208]	@ (801188c <LoRaMacInitialization+0x548>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80117be:	4b2a      	ldr	r3, [pc, #168]	@ (8011868 <LoRaMacInitialization+0x524>)
 80117c0:	4a33      	ldr	r2, [pc, #204]	@ (8011890 <LoRaMacInitialization+0x54c>)
 80117c2:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80117c6:	4b28      	ldr	r3, [pc, #160]	@ (8011868 <LoRaMacInitialization+0x524>)
 80117c8:	4a32      	ldr	r2, [pc, #200]	@ (8011894 <LoRaMacInitialization+0x550>)
 80117ca:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80117ce:	4b26      	ldr	r3, [pc, #152]	@ (8011868 <LoRaMacInitialization+0x524>)
 80117d0:	4a31      	ldr	r2, [pc, #196]	@ (8011898 <LoRaMacInitialization+0x554>)
 80117d2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80117d6:	4b24      	ldr	r3, [pc, #144]	@ (8011868 <LoRaMacInitialization+0x524>)
 80117d8:	4a30      	ldr	r2, [pc, #192]	@ (801189c <LoRaMacInitialization+0x558>)
 80117da:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80117de:	4b22      	ldr	r3, [pc, #136]	@ (8011868 <LoRaMacInitialization+0x524>)
 80117e0:	4a2f      	ldr	r2, [pc, #188]	@ (80118a0 <LoRaMacInitialization+0x55c>)
 80117e2:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80117e6:	4b2f      	ldr	r3, [pc, #188]	@ (80118a4 <LoRaMacInitialization+0x560>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	482f      	ldr	r0, [pc, #188]	@ (80118a8 <LoRaMacInitialization+0x564>)
 80117ec:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	4619      	mov	r1, r3
 80117f4:	482d      	ldr	r0, [pc, #180]	@ (80118ac <LoRaMacInitialization+0x568>)
 80117f6:	f7fa fb87 	bl	800bf08 <SecureElementInit>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d001      	beq.n	8011804 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011800:	2311      	movs	r3, #17
 8011802:	e02b      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011804:	4817      	ldr	r0, [pc, #92]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011806:	f002 faf9 	bl	8013dfc <LoRaMacCryptoInit>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011810:	2311      	movs	r3, #17
 8011812:	e023      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011814:	f001 fc1c 	bl	8013050 <LoRaMacCommandsInit>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d001      	beq.n	8011822 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801181e:	2313      	movs	r3, #19
 8011820:	e01c      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011822:	4823      	ldr	r0, [pc, #140]	@ (80118b0 <LoRaMacInitialization+0x56c>)
 8011824:	f002 fb8a 	bl	8013f3c <LoRaMacCryptoSetMulticastReference>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	d001      	beq.n	8011832 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801182e:	2311      	movs	r3, #17
 8011830:	e014      	b.n	801185c <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011832:	4b1c      	ldr	r3, [pc, #112]	@ (80118a4 <LoRaMacInitialization+0x560>)
 8011834:	695b      	ldr	r3, [r3, #20]
 8011836:	4798      	blx	r3
 8011838:	4603      	mov	r3, r0
 801183a:	4618      	mov	r0, r3
 801183c:	f005 fc02 	bl	8017044 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011840:	4b18      	ldr	r3, [pc, #96]	@ (80118a4 <LoRaMacInitialization+0x560>)
 8011842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011844:	4a07      	ldr	r2, [pc, #28]	@ (8011864 <LoRaMacInitialization+0x520>)
 8011846:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 801184a:	4610      	mov	r0, r2
 801184c:	4798      	blx	r3
    Radio.Sleep( );
 801184e:	4b15      	ldr	r3, [pc, #84]	@ (80118a4 <LoRaMacInitialization+0x560>)
 8011850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011852:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011854:	2001      	movs	r0, #1
 8011856:	f7fd fac7 	bl	800ede8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801185a:	2300      	movs	r3, #0
}
 801185c:	4618      	mov	r0, r3
 801185e:	373c      	adds	r7, #60	@ 0x3c
 8011860:	46bd      	mov	sp, r7
 8011862:	bd90      	pop	{r4, r7, pc}
 8011864:	20000df8 	.word	0x20000df8
 8011868:	200008d8 	.word	0x200008d8
 801186c:	0800f39d 	.word	0x0800f39d
 8011870:	20000c40 	.word	0x20000c40
 8011874:	0800f42d 	.word	0x0800f42d
 8011878:	20000c58 	.word	0x20000c58
 801187c:	0800f4a5 	.word	0x0800f4a5
 8011880:	20000c70 	.word	0x20000c70
 8011884:	0800f525 	.word	0x0800f525
 8011888:	20000cdc 	.word	0x20000cdc
 801188c:	20001980 	.word	0x20001980
 8011890:	0800de9d 	.word	0x0800de9d
 8011894:	0800df15 	.word	0x0800df15
 8011898:	0800dff5 	.word	0x0800dff5
 801189c:	0800dfa9 	.word	0x0800dfa9
 80118a0:	0800e031 	.word	0x0800e031
 80118a4:	0801f574 	.word	0x0801f574
 80118a8:	20000c24 	.word	0x20000c24
 80118ac:	20000f1c 	.word	0x20000f1c
 80118b0:	20000ed0 	.word	0x20000ed0

080118b4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80118b8:	4b04      	ldr	r3, [pc, #16]	@ (80118cc <LoRaMacStart+0x18>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bc80      	pop	{r7}
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	200008d8 	.word	0x200008d8

080118d0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80118d4:	f7fd fa68 	bl	800eda8 <LoRaMacIsBusy>
 80118d8:	4603      	mov	r3, r0
 80118da:	f083 0301 	eor.w	r3, r3, #1
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d005      	beq.n	80118f0 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80118e4:	4b07      	ldr	r3, [pc, #28]	@ (8011904 <LoRaMacStop+0x34>)
 80118e6:	2201      	movs	r2, #1
 80118e8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	e007      	b.n	8011900 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80118f0:	4b04      	ldr	r3, [pc, #16]	@ (8011904 <LoRaMacStop+0x34>)
 80118f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d101      	bne.n	80118fe <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	e000      	b.n	8011900 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80118fe:	2301      	movs	r3, #1
}
 8011900:	4618      	mov	r0, r3
 8011902:	bd80      	pop	{r7, pc}
 8011904:	200008d8 	.word	0x200008d8

08011908 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801190c:	4812      	ldr	r0, [pc, #72]	@ (8011958 <LoRaMacHalt+0x50>)
 801190e:	f009 fd0b 	bl	801b328 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011912:	4812      	ldr	r0, [pc, #72]	@ (801195c <LoRaMacHalt+0x54>)
 8011914:	f009 fd08 	bl	801b328 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011918:	4811      	ldr	r0, [pc, #68]	@ (8011960 <LoRaMacHalt+0x58>)
 801191a:	f009 fd05 	bl	801b328 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801191e:	4811      	ldr	r0, [pc, #68]	@ (8011964 <LoRaMacHalt+0x5c>)
 8011920:	f009 fd02 	bl	801b328 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011924:	f001 fa04 	bl	8012d30 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011928:	4b0f      	ldr	r3, [pc, #60]	@ (8011968 <LoRaMacHalt+0x60>)
 801192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801192c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801192e:	4b0f      	ldr	r3, [pc, #60]	@ (801196c <LoRaMacHalt+0x64>)
 8011930:	2200      	movs	r2, #0
 8011932:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 8011936:	480e      	ldr	r0, [pc, #56]	@ (8011970 <LoRaMacHalt+0x68>)
 8011938:	f7fd fc0c 	bl	800f154 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 801193c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011940:	490b      	ldr	r1, [pc, #44]	@ (8011970 <LoRaMacHalt+0x68>)
 8011942:	480c      	ldr	r0, [pc, #48]	@ (8011974 <LoRaMacHalt+0x6c>)
 8011944:	f005 fba3 	bl	801708e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011948:	4b08      	ldr	r3, [pc, #32]	@ (801196c <LoRaMacHalt+0x64>)
 801194a:	2201      	movs	r2, #1
 801194c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20000c40 	.word	0x20000c40
 801195c:	20000c58 	.word	0x20000c58
 8011960:	20000c70 	.word	0x20000c70
 8011964:	20000cdc 	.word	0x20000cdc
 8011968:	0801f574 	.word	0x0801f574
 801196c:	200008d8 	.word	0x200008d8
 8011970:	20000df8 	.word	0x20000df8
 8011974:	20001374 	.word	0x20001374

08011978 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011978:	b590      	push	{r4, r7, lr}
 801197a:	b08d      	sub	sp, #52	@ 0x34
 801197c:	af02      	add	r7, sp, #8
 801197e:	4603      	mov	r3, r0
 8011980:	6039      	str	r1, [r7, #0]
 8011982:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011984:	4b42      	ldr	r3, [pc, #264]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 8011986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011988:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801198a:	4b41      	ldr	r3, [pc, #260]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 801198c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011990:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011992:	4b3f      	ldr	r3, [pc, #252]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 8011994:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011998:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801199a:	4b3e      	ldr	r3, [pc, #248]	@ (8011a94 <LoRaMacQueryTxPossible+0x11c>)
 801199c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80119a0:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80119a2:	2300      	movs	r3, #0
 80119a4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d101      	bne.n	80119b0 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119ac:	2303      	movs	r3, #3
 80119ae:	e06b      	b.n	8011a88 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80119b0:	2300      	movs	r3, #0
 80119b2:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80119b4:	4b36      	ldr	r3, [pc, #216]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119b6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80119ba:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119bc:	4b34      	ldr	r3, [pc, #208]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119c0:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80119c2:	4b34      	ldr	r3, [pc, #208]	@ (8011a94 <LoRaMacQueryTxPossible+0x11c>)
 80119c4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80119c8:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80119ca:	4b32      	ldr	r3, [pc, #200]	@ (8011a94 <LoRaMacQueryTxPossible+0x11c>)
 80119cc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80119d0:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80119d2:	4b2f      	ldr	r3, [pc, #188]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80119d8:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80119dc:	4b2c      	ldr	r3, [pc, #176]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119de:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80119e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80119e6:	4b2b      	ldr	r3, [pc, #172]	@ (8011a94 <LoRaMacQueryTxPossible+0x11c>)
 80119e8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80119ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119f0:	4b27      	ldr	r3, [pc, #156]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119f2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80119f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80119fa:	4b25      	ldr	r3, [pc, #148]	@ (8011a90 <LoRaMacQueryTxPossible+0x118>)
 80119fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011a04:	f107 040d 	add.w	r4, r7, #13
 8011a08:	f107 020e 	add.w	r2, r7, #14
 8011a0c:	f107 010f 	add.w	r1, r7, #15
 8011a10:	f107 0014 	add.w	r0, r7, #20
 8011a14:	f107 0310 	add.w	r3, r7, #16
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	4623      	mov	r3, r4
 8011a1c:	f001 f852 	bl	8012ac4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fd feb9 	bl	800f79c <GetMaxAppPayloadWithoutFOptsLength>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011a32:	f107 0308 	add.w	r3, r7, #8
 8011a36:	4618      	mov	r0, r3
 8011a38:	f001 fbd8 	bl	80131ec <LoRaMacCommandsGetSizeSerializedCmds>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a42:	2313      	movs	r3, #19
 8011a44:	e020      	b.n	8011a88 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	2b0f      	cmp	r3, #15
 8011a4a:	d819      	bhi.n	8011a80 <LoRaMacQueryTxPossible+0x108>
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	461a      	mov	r2, r3
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d313      	bcc.n	8011a80 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	785a      	ldrb	r2, [r3, #1]
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	b2da      	uxtb	r2, r3
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	785b      	ldrb	r3, [r3, #1]
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	79fa      	ldrb	r2, [r7, #7]
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	4413      	add	r3, r2
 8011a74:	4299      	cmp	r1, r3
 8011a76:	d301      	bcc.n	8011a7c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	e005      	b.n	8011a88 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011a7c:	2308      	movs	r3, #8
 8011a7e:	e003      	b.n	8011a88 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	2200      	movs	r2, #0
 8011a84:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011a86:	2308      	movs	r3, #8
    }
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	372c      	adds	r7, #44	@ 0x2c
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd90      	pop	{r4, r7, pc}
 8011a90:	20000df8 	.word	0x20000df8
 8011a94:	200008d8 	.word	0x200008d8

08011a98 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011a98:	b590      	push	{r4, r7, lr}
 8011a9a:	b087      	sub	sp, #28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	e191      	b.n	8011dd2 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	2b39      	cmp	r3, #57	@ 0x39
 8011ab4:	f200 8186 	bhi.w	8011dc4 <LoRaMacMibGetRequestConfirm+0x32c>
 8011ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac0 <LoRaMacMibGetRequestConfirm+0x28>)
 8011aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011abe:	bf00      	nop
 8011ac0:	08011ba9 	.word	0x08011ba9
 8011ac4:	08011bb5 	.word	0x08011bb5
 8011ac8:	08011bc1 	.word	0x08011bc1
 8011acc:	08011bcd 	.word	0x08011bcd
 8011ad0:	08011bd9 	.word	0x08011bd9
 8011ad4:	08011be5 	.word	0x08011be5
 8011ad8:	08011bf1 	.word	0x08011bf1
 8011adc:	08011dc5 	.word	0x08011dc5
 8011ae0:	08011dc5 	.word	0x08011dc5
 8011ae4:	08011dc5 	.word	0x08011dc5
 8011ae8:	08011dc5 	.word	0x08011dc5
 8011aec:	08011dc5 	.word	0x08011dc5
 8011af0:	08011dc5 	.word	0x08011dc5
 8011af4:	08011dc5 	.word	0x08011dc5
 8011af8:	08011dc5 	.word	0x08011dc5
 8011afc:	08011bfd 	.word	0x08011bfd
 8011b00:	08011c09 	.word	0x08011c09
 8011b04:	08011c15 	.word	0x08011c15
 8011b08:	08011c37 	.word	0x08011c37
 8011b0c:	08011c49 	.word	0x08011c49
 8011b10:	08011c5b 	.word	0x08011c5b
 8011b14:	08011c6d 	.word	0x08011c6d
 8011b18:	08011ca1 	.word	0x08011ca1
 8011b1c:	08011c7f 	.word	0x08011c7f
 8011b20:	08011cc3 	.word	0x08011cc3
 8011b24:	08011ccf 	.word	0x08011ccf
 8011b28:	08011cd9 	.word	0x08011cd9
 8011b2c:	08011ce3 	.word	0x08011ce3
 8011b30:	08011ced 	.word	0x08011ced
 8011b34:	08011cf7 	.word	0x08011cf7
 8011b38:	08011d01 	.word	0x08011d01
 8011b3c:	08011d2d 	.word	0x08011d2d
 8011b40:	08011d39 	.word	0x08011d39
 8011b44:	08011d51 	.word	0x08011d51
 8011b48:	08011d45 	.word	0x08011d45
 8011b4c:	08011d5d 	.word	0x08011d5d
 8011b50:	08011d67 	.word	0x08011d67
 8011b54:	08011d73 	.word	0x08011d73
 8011b58:	08011d8d 	.word	0x08011d8d
 8011b5c:	08011d7d 	.word	0x08011d7d
 8011b60:	08011d85 	.word	0x08011d85
 8011b64:	08011dc5 	.word	0x08011dc5
 8011b68:	08011d99 	.word	0x08011d99
 8011b6c:	08011dc5 	.word	0x08011dc5
 8011b70:	08011dc5 	.word	0x08011dc5
 8011b74:	08011dc5 	.word	0x08011dc5
 8011b78:	08011dc5 	.word	0x08011dc5
 8011b7c:	08011dc5 	.word	0x08011dc5
 8011b80:	08011dc5 	.word	0x08011dc5
 8011b84:	08011dc5 	.word	0x08011dc5
 8011b88:	08011dc5 	.word	0x08011dc5
 8011b8c:	08011dc5 	.word	0x08011dc5
 8011b90:	08011dc5 	.word	0x08011dc5
 8011b94:	08011dc5 	.word	0x08011dc5
 8011b98:	08011dc5 	.word	0x08011dc5
 8011b9c:	08011dc5 	.word	0x08011dc5
 8011ba0:	08011dad 	.word	0x08011dad
 8011ba4:	08011db9 	.word	0x08011db9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011baa:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	711a      	strb	r2, [r3, #4]
            break;
 8011bb2:	e10d      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011bb4:	4b89      	ldr	r3, [pc, #548]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011bb6:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	711a      	strb	r2, [r3, #4]
            break;
 8011bbe:	e107      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011bc0:	f7fa fc76 	bl	800c4b0 <SecureElementGetDevEui>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	605a      	str	r2, [r3, #4]
            break;
 8011bca:	e101      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011bcc:	f7fa fc92 	bl	800c4f4 <SecureElementGetJoinEui>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	605a      	str	r2, [r3, #4]
            break;
 8011bd6:	e0fb      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011bd8:	4b80      	ldr	r3, [pc, #512]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011bda:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	711a      	strb	r2, [r3, #4]
            break;
 8011be2:	e0f5      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011be4:	4b7d      	ldr	r3, [pc, #500]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011be6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	605a      	str	r2, [r3, #4]
            break;
 8011bee:	e0ef      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011bf0:	4b7a      	ldr	r3, [pc, #488]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011bf2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	605a      	str	r2, [r3, #4]
            break;
 8011bfa:	e0e9      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011bfc:	4b77      	ldr	r3, [pc, #476]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011bfe:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	711a      	strb	r2, [r3, #4]
            break;
 8011c06:	e0e3      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011c08:	4b74      	ldr	r3, [pc, #464]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c0a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	711a      	strb	r2, [r3, #4]
            break;
 8011c12:	e0dd      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011c14:	231c      	movs	r3, #28
 8011c16:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c18:	4b70      	ldr	r3, [pc, #448]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c1e:	f107 0210 	add.w	r2, r7, #16
 8011c22:	4611      	mov	r1, r2
 8011c24:	4618      	mov	r0, r3
 8011c26:	f002 ff91 	bl	8014b4c <RegionGetPhyParam>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	605a      	str	r2, [r3, #4]
            break;
 8011c34:	e0cc      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	4a68      	ldr	r2, [pc, #416]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	3264      	adds	r2, #100	@ 0x64
 8011c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c42:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c46:	e0c3      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4a64      	ldr	r2, [pc, #400]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	32a8      	adds	r2, #168	@ 0xa8
 8011c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c54:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c58:	e0ba      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c5e:	3304      	adds	r3, #4
 8011c60:	326c      	adds	r2, #108	@ 0x6c
 8011c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c66:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c6a:	e0b1      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c70:	3304      	adds	r3, #4
 8011c72:	32b0      	adds	r2, #176	@ 0xb0
 8011c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c78:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c7c:	e0a8      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011c7e:	231a      	movs	r3, #26
 8011c80:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c82:	4b56      	ldr	r3, [pc, #344]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011c84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c88:	f107 0210 	add.w	r2, r7, #16
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f002 ff5c 	bl	8014b4c <RegionGetPhyParam>
 8011c94:	4603      	mov	r3, r0
 8011c96:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011c98:	68fa      	ldr	r2, [r7, #12]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	605a      	str	r2, [r3, #4]
            break;
 8011c9e:	e097      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011ca0:	2319      	movs	r3, #25
 8011ca2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011caa:	f107 0210 	add.w	r2, r7, #16
 8011cae:	4611      	mov	r1, r2
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f002 ff4b 	bl	8014b4c <RegionGetPhyParam>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011cba:	68fa      	ldr	r2, [r7, #12]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	605a      	str	r2, [r3, #4]
            break;
 8011cc0:	e086      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011cc2:	4b46      	ldr	r3, [pc, #280]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011cc4:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	711a      	strb	r2, [r3, #4]
            break;
 8011ccc:	e080      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011cce:	4b43      	ldr	r3, [pc, #268]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011cd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	605a      	str	r2, [r3, #4]
            break;
 8011cd6:	e07b      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011cd8:	4b40      	ldr	r3, [pc, #256]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011cda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	605a      	str	r2, [r3, #4]
            break;
 8011ce0:	e076      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	605a      	str	r2, [r3, #4]
            break;
 8011cea:	e071      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011cec:	4b3b      	ldr	r3, [pc, #236]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011cee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	605a      	str	r2, [r3, #4]
            break;
 8011cf4:	e06c      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011cf6:	4b39      	ldr	r3, [pc, #228]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011cf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	605a      	str	r2, [r3, #4]
            break;
 8011cfe:	e067      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011d00:	2302      	movs	r3, #2
 8011d02:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d04:	4b35      	ldr	r3, [pc, #212]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d06:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011d0a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d0c:	4b33      	ldr	r3, [pc, #204]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d12:	f107 0210 	add.w	r2, r7, #16
 8011d16:	4611      	mov	r1, r2
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f002 ff17 	bl	8014b4c <RegionGetPhyParam>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	b25a      	sxtb	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	711a      	strb	r2, [r3, #4]
            break;
 8011d2a:	e051      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d2e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	711a      	strb	r2, [r3, #4]
            break;
 8011d36:	e04b      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d38:	4b28      	ldr	r3, [pc, #160]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d3a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	711a      	strb	r2, [r3, #4]
            break;
 8011d42:	e045      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011d44:	4b25      	ldr	r3, [pc, #148]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d46:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	711a      	strb	r2, [r3, #4]
            break;
 8011d4e:	e03f      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011d50:	4b22      	ldr	r3, [pc, #136]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d52:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	711a      	strb	r2, [r3, #4]
            break;
 8011d5a:	e039      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	605a      	str	r2, [r3, #4]
            break;
 8011d64:	e034      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011d66:	4b1d      	ldr	r3, [pc, #116]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d68:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	711a      	strb	r2, [r3, #4]
            break;
 8011d70:	e02e      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011d72:	4b1a      	ldr	r3, [pc, #104]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	605a      	str	r2, [r3, #4]
            break;
 8011d7a:	e029      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	4a17      	ldr	r2, [pc, #92]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d80:	605a      	str	r2, [r3, #4]
            break;
 8011d82:	e025      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	4a16      	ldr	r2, [pc, #88]	@ (8011de0 <LoRaMacMibGetRequestConfirm+0x348>)
 8011d88:	605a      	str	r2, [r3, #4]
            break;
 8011d8a:	e021      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011d8c:	4b13      	ldr	r3, [pc, #76]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	605a      	str	r2, [r3, #4]
            break;
 8011d96:	e01b      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4a10      	ldr	r2, [pc, #64]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011d9c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011da0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011da2:	687c      	ldr	r4, [r7, #4]
 8011da4:	f003 f848 	bl	8014e38 <RegionGetVersion>
 8011da8:	60a0      	str	r0, [r4, #8]
            break;
 8011daa:	e011      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011dac:	4b0b      	ldr	r3, [pc, #44]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011dae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	605a      	str	r2, [r3, #4]
            break;
 8011db6:	e00b      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011db8:	4b08      	ldr	r3, [pc, #32]	@ (8011ddc <LoRaMacMibGetRequestConfirm+0x344>)
 8011dba:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	711a      	strb	r2, [r3, #4]
            break;
 8011dc2:	e005      	b.n	8011dd0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 ffca 	bl	8012d5e <LoRaMacClassBMibGetRequestConfirm>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	75fb      	strb	r3, [r7, #23]
            break;
 8011dce:	bf00      	nop
        }
    }
    return status;
 8011dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	371c      	adds	r7, #28
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd90      	pop	{r4, r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	20000df8 	.word	0x20000df8
 8011de0:	20001374 	.word	0x20001374

08011de4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011dec:	2300      	movs	r3, #0
 8011dee:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d101      	bne.n	8011dfa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011df6:	2303      	movs	r3, #3
 8011df8:	e35c      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011dfa:	4bb9      	ldr	r3, [pc, #740]	@ (80120e0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011dfc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e00:	f003 0302 	and.w	r3, r3, #2
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e353      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	2b39      	cmp	r3, #57	@ 0x39
 8011e12:	f200 8323 	bhi.w	801245c <LoRaMacMibSetRequestConfirm+0x678>
 8011e16:	a201      	add	r2, pc, #4	@ (adr r2, 8011e1c <LoRaMacMibSetRequestConfirm+0x38>)
 8011e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e1c:	08011f05 	.word	0x08011f05
 8011e20:	08011f15 	.word	0x08011f15
 8011e24:	08011f2f 	.word	0x08011f2f
 8011e28:	08011f47 	.word	0x08011f47
 8011e2c:	08011f5f 	.word	0x08011f5f
 8011e30:	08011f6b 	.word	0x08011f6b
 8011e34:	08011f77 	.word	0x08011f77
 8011e38:	08011f83 	.word	0x08011f83
 8011e3c:	08011fa9 	.word	0x08011fa9
 8011e40:	08011fcf 	.word	0x08011fcf
 8011e44:	08011ff5 	.word	0x08011ff5
 8011e48:	0801201b 	.word	0x0801201b
 8011e4c:	08012041 	.word	0x08012041
 8011e50:	08012067 	.word	0x08012067
 8011e54:	0801208d 	.word	0x0801208d
 8011e58:	080120b3 	.word	0x080120b3
 8011e5c:	080120d3 	.word	0x080120d3
 8011e60:	0801245d 	.word	0x0801245d
 8011e64:	080120ed 	.word	0x080120ed
 8011e68:	0801215d 	.word	0x0801215d
 8011e6c:	0801219d 	.word	0x0801219d
 8011e70:	080121ff 	.word	0x080121ff
 8011e74:	0801226f 	.word	0x0801226f
 8011e78:	0801223f 	.word	0x0801223f
 8011e7c:	0801229f 	.word	0x0801229f
 8011e80:	080122c1 	.word	0x080122c1
 8011e84:	080122cb 	.word	0x080122cb
 8011e88:	080122d5 	.word	0x080122d5
 8011e8c:	080122df 	.word	0x080122df
 8011e90:	080122e9 	.word	0x080122e9
 8011e94:	0801245d 	.word	0x0801245d
 8011e98:	080122f3 	.word	0x080122f3
 8011e9c:	08012325 	.word	0x08012325
 8011ea0:	08012391 	.word	0x08012391
 8011ea4:	0801235f 	.word	0x0801235f
 8011ea8:	080123cd 	.word	0x080123cd
 8011eac:	080123e3 	.word	0x080123e3
 8011eb0:	080123fb 	.word	0x080123fb
 8011eb4:	08012405 	.word	0x08012405
 8011eb8:	08012411 	.word	0x08012411
 8011ebc:	0801245d 	.word	0x0801245d
 8011ec0:	0801241b 	.word	0x0801241b
 8011ec4:	0801245d 	.word	0x0801245d
 8011ec8:	0801245d 	.word	0x0801245d
 8011ecc:	0801245d 	.word	0x0801245d
 8011ed0:	0801245d 	.word	0x0801245d
 8011ed4:	0801245d 	.word	0x0801245d
 8011ed8:	0801245d 	.word	0x0801245d
 8011edc:	0801245d 	.word	0x0801245d
 8011ee0:	0801245d 	.word	0x0801245d
 8011ee4:	0801245d 	.word	0x0801245d
 8011ee8:	0801245d 	.word	0x0801245d
 8011eec:	0801245d 	.word	0x0801245d
 8011ef0:	0801245d 	.word	0x0801245d
 8011ef4:	0801245d 	.word	0x0801245d
 8011ef8:	0801245d 	.word	0x0801245d
 8011efc:	08012445 	.word	0x08012445
 8011f00:	08012451 	.word	0x08012451
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	791b      	ldrb	r3, [r3, #4]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fd fb75 	bl	800f5f8 <SwitchClass>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	75fb      	strb	r3, [r7, #23]
            break;
 8011f12:	e2c4      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	791b      	ldrb	r3, [r3, #4]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d005      	beq.n	8011f28 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	791a      	ldrb	r2, [r3, #4]
 8011f20:	4b70      	ldr	r3, [pc, #448]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f22:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011f26:	e2ba      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8011f2c:	e2b7      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fa faa4 	bl	800c480 <SecureElementSetDevEui>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f000 8294 	beq.w	8012468 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f40:	2303      	movs	r3, #3
 8011f42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f44:	e290      	b.n	8012468 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fa faba 	bl	800c4c4 <SecureElementSetJoinEui>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f000 828a 	beq.w	801246c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f5c:	e286      	b.n	801246c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	791a      	ldrb	r2, [r3, #4]
 8011f62:	4b60      	ldr	r3, [pc, #384]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f64:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011f68:	e299      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f70:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8011f74:	e293      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8011f80:	e28d      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00b      	beq.n	8011fa2 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	2000      	movs	r0, #0
 8011f92:	f001 fffb 	bl	8013f8c <LoRaMacCryptoSetKey>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f000 8269 	beq.w	8012470 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f9e:	2311      	movs	r3, #17
 8011fa0:	e288      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fa2:	2303      	movs	r3, #3
 8011fa4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011fa6:	e263      	b.n	8012470 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00b      	beq.n	8011fc8 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	2001      	movs	r0, #1
 8011fb8:	f001 ffe8 	bl	8013f8c <LoRaMacCryptoSetKey>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	f000 8258 	beq.w	8012474 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011fc4:	2311      	movs	r3, #17
 8011fc6:	e275      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011fcc:	e252      	b.n	8012474 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d00b      	beq.n	8011fee <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	4619      	mov	r1, r3
 8011fdc:	2002      	movs	r0, #2
 8011fde:	f001 ffd5 	bl	8013f8c <LoRaMacCryptoSetKey>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f000 8247 	beq.w	8012478 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011fea:	2311      	movs	r3, #17
 8011fec:	e262      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fee:	2303      	movs	r3, #3
 8011ff0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ff2:	e241      	b.n	8012478 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d00b      	beq.n	8012014 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	4619      	mov	r1, r3
 8012002:	2003      	movs	r0, #3
 8012004:	f001 ffc2 	bl	8013f8c <LoRaMacCryptoSetKey>
 8012008:	4603      	mov	r3, r0
 801200a:	2b00      	cmp	r3, #0
 801200c:	f000 8236 	beq.w	801247c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012010:	2311      	movs	r3, #17
 8012012:	e24f      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012014:	2303      	movs	r3, #3
 8012016:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012018:	e230      	b.n	801247c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00b      	beq.n	801203a <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	4619      	mov	r1, r3
 8012028:	207f      	movs	r0, #127	@ 0x7f
 801202a:	f001 ffaf 	bl	8013f8c <LoRaMacCryptoSetKey>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 8225 	beq.w	8012480 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012036:	2311      	movs	r3, #17
 8012038:	e23c      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801203a:	2303      	movs	r3, #3
 801203c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801203e:	e21f      	b.n	8012480 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00b      	beq.n	8012060 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	4619      	mov	r1, r3
 801204e:	2080      	movs	r0, #128	@ 0x80
 8012050:	f001 ff9c 	bl	8013f8c <LoRaMacCryptoSetKey>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	f000 8214 	beq.w	8012484 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801205c:	2311      	movs	r3, #17
 801205e:	e229      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012060:	2303      	movs	r3, #3
 8012062:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012064:	e20e      	b.n	8012484 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00b      	beq.n	8012086 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	4619      	mov	r1, r3
 8012074:	2081      	movs	r0, #129	@ 0x81
 8012076:	f001 ff89 	bl	8013f8c <LoRaMacCryptoSetKey>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 8203 	beq.w	8012488 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012082:	2311      	movs	r3, #17
 8012084:	e216      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012086:	2303      	movs	r3, #3
 8012088:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801208a:	e1fd      	b.n	8012488 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d00b      	beq.n	80120ac <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	4619      	mov	r1, r3
 801209a:	2082      	movs	r0, #130	@ 0x82
 801209c:	f001 ff76 	bl	8013f8c <LoRaMacCryptoSetKey>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 81f2 	beq.w	801248c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120a8:	2311      	movs	r3, #17
 80120aa:	e203      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120ac:	2303      	movs	r3, #3
 80120ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120b0:	e1ec      	b.n	801248c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	791a      	ldrb	r2, [r3, #4]
 80120b6:	4b0b      	ldr	r3, [pc, #44]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 80120b8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80120bc:	4b0a      	ldr	r3, [pc, #40]	@ (80120e8 <LoRaMacMibSetRequestConfirm+0x304>)
 80120be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120c0:	4a08      	ldr	r2, [pc, #32]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 80120c2:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80120c6:	4610      	mov	r0, r2
 80120c8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80120ca:	4b07      	ldr	r3, [pc, #28]	@ (80120e8 <LoRaMacMibSetRequestConfirm+0x304>)
 80120cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ce:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80120d0:	e1e5      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	791a      	ldrb	r2, [r3, #4]
 80120d6:	4b03      	ldr	r3, [pc, #12]	@ (80120e4 <LoRaMacMibSetRequestConfirm+0x300>)
 80120d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80120dc:	e1df      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
 80120de:	bf00      	nop
 80120e0:	200008d8 	.word	0x200008d8
 80120e4:	20000df8 	.word	0x20000df8
 80120e8:	0801f574 	.word	0x0801f574
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	7a1b      	ldrb	r3, [r3, #8]
 80120f0:	b25b      	sxtb	r3, r3
 80120f2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120f4:	4bb3      	ldr	r3, [pc, #716]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120f6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80120fa:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80120fc:	4bb1      	ldr	r3, [pc, #708]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012102:	f107 0108 	add.w	r1, r7, #8
 8012106:	2207      	movs	r2, #7
 8012108:	4618      	mov	r0, r3
 801210a:	f002 fd5a 	bl	8014bc2 <RegionVerify>
 801210e:	4603      	mov	r3, r0
 8012110:	f083 0301 	eor.w	r3, r3, #1
 8012114:	b2db      	uxtb	r3, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	d002      	beq.n	8012120 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801211a:	2303      	movs	r3, #3
 801211c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801211e:	e1be      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012126:	4ba7      	ldr	r3, [pc, #668]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801212c:	f107 0108 	add.w	r1, r7, #8
 8012130:	2200      	movs	r2, #0
 8012132:	4618      	mov	r0, r3
 8012134:	f002 fd45 	bl	8014bc2 <RegionVerify>
 8012138:	4603      	mov	r3, r0
 801213a:	f083 0301 	eor.w	r3, r3, #1
 801213e:	b2db      	uxtb	r3, r3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d002      	beq.n	801214a <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012144:	2303      	movs	r3, #3
 8012146:	75fb      	strb	r3, [r7, #23]
            break;
 8012148:	e1a9      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801214a:	4b9e      	ldr	r3, [pc, #632]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	3364      	adds	r3, #100	@ 0x64
 8012150:	3204      	adds	r2, #4
 8012152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012156:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801215a:	e1a0      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	7a1b      	ldrb	r3, [r3, #8]
 8012160:	b25b      	sxtb	r3, r3
 8012162:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012164:	4b97      	ldr	r3, [pc, #604]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012166:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801216a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801216c:	4b95      	ldr	r3, [pc, #596]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801216e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012172:	f107 0108 	add.w	r1, r7, #8
 8012176:	2207      	movs	r2, #7
 8012178:	4618      	mov	r0, r3
 801217a:	f002 fd22 	bl	8014bc2 <RegionVerify>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d008      	beq.n	8012196 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012184:	4b8f      	ldr	r3, [pc, #572]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	33a8      	adds	r3, #168	@ 0xa8
 801218a:	3204      	adds	r2, #4
 801218c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012190:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012194:	e183      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012196:	2303      	movs	r3, #3
 8012198:	75fb      	strb	r3, [r7, #23]
            break;
 801219a:	e180      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	7a1b      	ldrb	r3, [r3, #8]
 80121a0:	b25b      	sxtb	r3, r3
 80121a2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80121a4:	4b87      	ldr	r3, [pc, #540]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121a6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80121aa:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80121ac:	4b85      	ldr	r3, [pc, #532]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121b2:	f107 0108 	add.w	r1, r7, #8
 80121b6:	2207      	movs	r2, #7
 80121b8:	4618      	mov	r0, r3
 80121ba:	f002 fd02 	bl	8014bc2 <RegionVerify>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d019      	beq.n	80121f8 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80121c4:	4b7f      	ldr	r3, [pc, #508]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	336c      	adds	r3, #108	@ 0x6c
 80121ca:	3204      	adds	r2, #4
 80121cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80121d4:	4b7b      	ldr	r3, [pc, #492]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121d6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80121da:	2b02      	cmp	r3, #2
 80121dc:	f040 8158 	bne.w	8012490 <LoRaMacMibSetRequestConfirm+0x6ac>
 80121e0:	4b78      	ldr	r3, [pc, #480]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121e2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f000 8152 	beq.w	8012490 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80121ec:	4b76      	ldr	r3, [pc, #472]	@ (80123c8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80121ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121f0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80121f2:	f7fe fca7 	bl	8010b44 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121f6:	e14b      	b.n	8012490 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121f8:	2303      	movs	r3, #3
 80121fa:	75fb      	strb	r3, [r7, #23]
            break;
 80121fc:	e148      	b.n	8012490 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	7a1b      	ldrb	r3, [r3, #8]
 8012202:	b25b      	sxtb	r3, r3
 8012204:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012206:	4b6f      	ldr	r3, [pc, #444]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012208:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801220c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801220e:	4b6d      	ldr	r3, [pc, #436]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012210:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012214:	f107 0108 	add.w	r1, r7, #8
 8012218:	2207      	movs	r2, #7
 801221a:	4618      	mov	r0, r3
 801221c:	f002 fcd1 	bl	8014bc2 <RegionVerify>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d008      	beq.n	8012238 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012226:	4b67      	ldr	r3, [pc, #412]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	33b0      	adds	r3, #176	@ 0xb0
 801222c:	3204      	adds	r2, #4
 801222e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012232:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012236:	e132      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012238:	2303      	movs	r3, #3
 801223a:	75fb      	strb	r3, [r7, #23]
            break;
 801223c:	e12f      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012244:	2301      	movs	r3, #1
 8012246:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012248:	4b5e      	ldr	r3, [pc, #376]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801224a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801224e:	f107 020c 	add.w	r2, r7, #12
 8012252:	4611      	mov	r1, r2
 8012254:	4618      	mov	r0, r3
 8012256:	f002 fcdd 	bl	8014c14 <RegionChanMaskSet>
 801225a:	4603      	mov	r3, r0
 801225c:	f083 0301 	eor.w	r3, r3, #1
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b00      	cmp	r3, #0
 8012264:	f000 8116 	beq.w	8012494 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012268:	2303      	movs	r3, #3
 801226a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801226c:	e112      	b.n	8012494 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012274:	2300      	movs	r3, #0
 8012276:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012278:	4b52      	ldr	r3, [pc, #328]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801227e:	f107 020c 	add.w	r2, r7, #12
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f002 fcc5 	bl	8014c14 <RegionChanMaskSet>
 801228a:	4603      	mov	r3, r0
 801228c:	f083 0301 	eor.w	r3, r3, #1
 8012290:	b2db      	uxtb	r3, r3
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 8100 	beq.w	8012498 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012298:	2303      	movs	r3, #3
 801229a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801229c:	e0fc      	b.n	8012498 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	791b      	ldrb	r3, [r3, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d009      	beq.n	80122ba <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80122aa:	2b0f      	cmp	r3, #15
 80122ac:	d805      	bhi.n	80122ba <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	791a      	ldrb	r2, [r3, #4]
 80122b2:	4b44      	ldr	r3, [pc, #272]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122b4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122b8:	e0f1      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122ba:	2303      	movs	r3, #3
 80122bc:	75fb      	strb	r3, [r7, #23]
            break;
 80122be:	e0ee      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	4a3f      	ldr	r2, [pc, #252]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 80122c8:	e0e9      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	4a3d      	ldr	r2, [pc, #244]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122d0:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 80122d2:	e0e4      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	4a3a      	ldr	r2, [pc, #232]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122da:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80122dc:	e0df      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	4a38      	ldr	r2, [pc, #224]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122e4:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80122e6:	e0da      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	4a35      	ldr	r2, [pc, #212]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80122f0:	e0d5      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80122f8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80122fa:	4b32      	ldr	r3, [pc, #200]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012300:	f107 0108 	add.w	r1, r7, #8
 8012304:	2206      	movs	r2, #6
 8012306:	4618      	mov	r0, r3
 8012308:	f002 fc5b 	bl	8014bc2 <RegionVerify>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d005      	beq.n	801231e <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012312:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012316:	4b2b      	ldr	r3, [pc, #172]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012318:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801231c:	e0bf      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801231e:	2303      	movs	r3, #3
 8012320:	75fb      	strb	r3, [r7, #23]
            break;
 8012322:	e0bc      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801232a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801232c:	4b25      	ldr	r3, [pc, #148]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801232e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012332:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012334:	4b23      	ldr	r3, [pc, #140]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012336:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801233a:	f107 0108 	add.w	r1, r7, #8
 801233e:	2205      	movs	r2, #5
 8012340:	4618      	mov	r0, r3
 8012342:	f002 fc3e 	bl	8014bc2 <RegionVerify>
 8012346:	4603      	mov	r3, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d005      	beq.n	8012358 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801234c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012350:	4b1c      	ldr	r3, [pc, #112]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012352:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012356:	e0a2      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012358:	2303      	movs	r3, #3
 801235a:	75fb      	strb	r3, [r7, #23]
            break;
 801235c:	e09f      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012364:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012366:	4b17      	ldr	r3, [pc, #92]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801236c:	f107 0108 	add.w	r1, r7, #8
 8012370:	220a      	movs	r2, #10
 8012372:	4618      	mov	r0, r3
 8012374:	f002 fc25 	bl	8014bc2 <RegionVerify>
 8012378:	4603      	mov	r3, r0
 801237a:	2b00      	cmp	r3, #0
 801237c:	d005      	beq.n	801238a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801237e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012382:	4b10      	ldr	r3, [pc, #64]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012384:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012388:	e089      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801238a:	2303      	movs	r3, #3
 801238c:	75fb      	strb	r3, [r7, #23]
            break;
 801238e:	e086      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012396:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012398:	4b0a      	ldr	r3, [pc, #40]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801239a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801239e:	f107 0108 	add.w	r1, r7, #8
 80123a2:	2209      	movs	r2, #9
 80123a4:	4618      	mov	r0, r3
 80123a6:	f002 fc0c 	bl	8014bc2 <RegionVerify>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d005      	beq.n	80123bc <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80123b0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80123b4:	4b03      	ldr	r3, [pc, #12]	@ (80123c4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80123b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123ba:	e070      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123bc:	2303      	movs	r3, #3
 80123be:	75fb      	strb	r3, [r7, #23]
            break;
 80123c0:	e06d      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
 80123c2:	bf00      	nop
 80123c4:	20000df8 	.word	0x20000df8
 80123c8:	0801f574 	.word	0x0801f574
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	4a3a      	ldr	r2, [pc, #232]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80123d6:	4b39      	ldr	r3, [pc, #228]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80123dc:	4a37      	ldr	r2, [pc, #220]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123de:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 80123e0:	e05d      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	791a      	ldrb	r2, [r3, #4]
 80123e6:	4b35      	ldr	r3, [pc, #212]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123e8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80123ec:	4b33      	ldr	r3, [pc, #204]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123ee:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80123f2:	4b32      	ldr	r3, [pc, #200]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 80123f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80123f8:	e051      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	4a2f      	ldr	r2, [pc, #188]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012400:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8012402:	e04c      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	4a2c      	ldr	r2, [pc, #176]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 801240a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 801240e:	e046      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012410:	f7fe fdc8 	bl	8010fa4 <RestoreNvmData>
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
            break;
 8012418:	e041      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	799b      	ldrb	r3, [r3, #6]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d80d      	bhi.n	801243e <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012422:	4a26      	ldr	r2, [pc, #152]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6858      	ldr	r0, [r3, #4]
 8012430:	f001 fd10 	bl	8013e54 <LoRaMacCryptoSetLrWanVersion>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d030      	beq.n	801249c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801243a:	2311      	movs	r3, #17
 801243c:	e03a      	b.n	80124b4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801243e:	2303      	movs	r3, #3
 8012440:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012442:	e02b      	b.n	801249c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	4a1c      	ldr	r2, [pc, #112]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 801244a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 801244e:	e026      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	791a      	ldrb	r2, [r3, #4]
 8012454:	4b19      	ldr	r3, [pc, #100]	@ (80124bc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012456:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 801245a:	e020      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 fc88 	bl	8012d72 <LoRaMacMibClassBSetRequestConfirm>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]
            break;
 8012466:	e01a      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012468:	bf00      	nop
 801246a:	e018      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801246c:	bf00      	nop
 801246e:	e016      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012470:	bf00      	nop
 8012472:	e014      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012474:	bf00      	nop
 8012476:	e012      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012478:	bf00      	nop
 801247a:	e010      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801247c:	bf00      	nop
 801247e:	e00e      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012480:	bf00      	nop
 8012482:	e00c      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012484:	bf00      	nop
 8012486:	e00a      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012488:	bf00      	nop
 801248a:	e008      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801248c:	bf00      	nop
 801248e:	e006      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012490:	bf00      	nop
 8012492:	e004      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012494:	bf00      	nop
 8012496:	e002      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012498:	bf00      	nop
 801249a:	e000      	b.n	801249e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801249c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 801249e:	7dfb      	ldrb	r3, [r7, #23]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d106      	bne.n	80124b2 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80124a4:	4a06      	ldr	r2, [pc, #24]	@ (80124c0 <LoRaMacMibSetRequestConfirm+0x6dc>)
 80124a6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80124aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 80124b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3718      	adds	r7, #24
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	20000df8 	.word	0x20000df8
 80124c0:	200008d8 	.word	0x200008d8

080124c4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b08a      	sub	sp, #40	@ 0x28
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80124cc:	2302      	movs	r3, #2
 80124ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80124d2:	2300      	movs	r3, #0
 80124d4:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d101      	bne.n	80124e0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124dc:	2303      	movs	r3, #3
 80124de:	e16c      	b.n	80127ba <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80124e6:	f7fc fc5f 	bl	800eda8 <LoRaMacIsBusy>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80124f0:	2301      	movs	r3, #1
 80124f2:	e162      	b.n	80127ba <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80124f4:	f001 f956 	bl	80137a4 <LoRaMacConfirmQueueIsFull>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d001      	beq.n	8012502 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80124fe:	2301      	movs	r3, #1
 8012500:	e15b      	b.n	80127ba <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012502:	f001 f943 	bl	801378c <LoRaMacConfirmQueueGetCnt>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d104      	bne.n	8012516 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801250c:	2214      	movs	r2, #20
 801250e:	2100      	movs	r1, #0
 8012510:	48ac      	ldr	r0, [pc, #688]	@ (80127c4 <LoRaMacMlmeRequest+0x300>)
 8012512:	f004 fdf7 	bl	8017104 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012516:	4bac      	ldr	r3, [pc, #688]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 8012518:	2201      	movs	r2, #1
 801251a:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801251e:	4aaa      	ldr	r2, [pc, #680]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 8012520:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012524:	f043 0304 	orr.w	r3, r3, #4
 8012528:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012534:	2301      	movs	r3, #1
 8012536:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801253a:	2300      	movs	r3, #0
 801253c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8012540:	2300      	movs	r3, #0
 8012542:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	3b01      	subs	r3, #1
 801254c:	2b0c      	cmp	r3, #12
 801254e:	f200 8108 	bhi.w	8012762 <LoRaMacMlmeRequest+0x29e>
 8012552:	a201      	add	r2, pc, #4	@ (adr r2, 8012558 <LoRaMacMlmeRequest+0x94>)
 8012554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012558:	0801258d 	.word	0x0801258d
 801255c:	08012763 	.word	0x08012763
 8012560:	08012763 	.word	0x08012763
 8012564:	08012663 	.word	0x08012663
 8012568:	08012685 	.word	0x08012685
 801256c:	08012763 	.word	0x08012763
 8012570:	08012763 	.word	0x08012763
 8012574:	08012763 	.word	0x08012763
 8012578:	080126a3 	.word	0x080126a3
 801257c:	08012763 	.word	0x08012763
 8012580:	08012731 	.word	0x08012731
 8012584:	080126c5 	.word	0x080126c5
 8012588:	0801270f 	.word	0x0801270f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801258c:	4b8e      	ldr	r3, [pc, #568]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 801258e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012592:	f003 0320 	and.w	r3, r3, #32
 8012596:	2b00      	cmp	r3, #0
 8012598:	d001      	beq.n	801259e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801259a:	2301      	movs	r3, #1
 801259c:	e10d      	b.n	80127ba <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	791b      	ldrb	r3, [r3, #4]
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d12e      	bne.n	8012604 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 80125a6:	f7fe f997 	bl	80108d8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80125aa:	4b88      	ldr	r3, [pc, #544]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 80125ac:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	795b      	ldrb	r3, [r3, #5]
 80125b4:	b25b      	sxtb	r3, r3
 80125b6:	2200      	movs	r2, #0
 80125b8:	4619      	mov	r1, r3
 80125ba:	f002 fbea 	bl	8014d92 <RegionAlternateDr>
 80125be:	4603      	mov	r3, r0
 80125c0:	461a      	mov	r2, r3
 80125c2:	4b82      	ldr	r3, [pc, #520]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 80125c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80125c8:	2307      	movs	r3, #7
 80125ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 80125ce:	20ff      	movs	r0, #255	@ 0xff
 80125d0:	f7fd ff00 	bl	80103d4 <SendReJoinReq>
 80125d4:	4603      	mov	r3, r0
 80125d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 80125da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f000 80c1 	beq.w	8012766 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80125e4:	4b79      	ldr	r3, [pc, #484]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 80125e6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	795b      	ldrb	r3, [r3, #5]
 80125ee:	b25b      	sxtb	r3, r3
 80125f0:	2201      	movs	r2, #1
 80125f2:	4619      	mov	r1, r3
 80125f4:	f002 fbcd 	bl	8014d92 <RegionAlternateDr>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461a      	mov	r2, r3
 80125fc:	4b73      	ldr	r3, [pc, #460]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 80125fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012602:	e0b0      	b.n	8012766 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	791b      	ldrb	r3, [r3, #4]
 8012608:	2b01      	cmp	r3, #1
 801260a:	f040 80ac 	bne.w	8012766 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801260e:	4b6f      	ldr	r3, [pc, #444]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 8012610:	2200      	movs	r2, #0
 8012612:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012616:	2302      	movs	r3, #2
 8012618:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801261a:	4b6c      	ldr	r3, [pc, #432]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 801261c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012620:	f107 020c 	add.w	r2, r7, #12
 8012624:	4611      	mov	r1, r2
 8012626:	4618      	mov	r0, r3
 8012628:	f002 fab9 	bl	8014b9e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	791a      	ldrb	r2, [r3, #4]
 8012630:	4b66      	ldr	r3, [pc, #408]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 8012632:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012636:	2300      	movs	r3, #0
 8012638:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 801263c:	2301      	movs	r3, #1
 801263e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8012642:	4b61      	ldr	r3, [pc, #388]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 8012644:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012648:	691b      	ldr	r3, [r3, #16]
 801264a:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 801264c:	4a5e      	ldr	r2, [pc, #376]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 801264e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012652:	f043 0320 	orr.w	r3, r3, #32
 8012656:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012660:	e081      	b.n	8012766 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012662:	2300      	movs	r3, #0
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012668:	f107 031c 	add.w	r3, r7, #28
 801266c:	2200      	movs	r2, #0
 801266e:	4619      	mov	r1, r3
 8012670:	2002      	movs	r0, #2
 8012672:	f000 fcfd 	bl	8013070 <LoRaMacCommandsAddCmd>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d076      	beq.n	801276a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801267c:	2313      	movs	r3, #19
 801267e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012682:	e072      	b.n	801276a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8898      	ldrh	r0, [r3, #4]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6899      	ldr	r1, [r3, #8]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012692:	b2db      	uxtb	r3, r3
 8012694:	461a      	mov	r2, r3
 8012696:	f7fe fc65 	bl	8010f64 <SetTxContinuousWave>
 801269a:	4603      	mov	r3, r0
 801269c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80126a0:	e06a      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80126a8:	f107 031c 	add.w	r3, r7, #28
 80126ac:	2200      	movs	r2, #0
 80126ae:	4619      	mov	r1, r3
 80126b0:	200d      	movs	r0, #13
 80126b2:	f000 fcdd 	bl	8013070 <LoRaMacCommandsAddCmd>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d058      	beq.n	801276e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80126bc:	2313      	movs	r3, #19
 80126be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80126c2:	e054      	b.n	801276e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80126c4:	4b41      	ldr	r3, [pc, #260]	@ (80127cc <LoRaMacMlmeRequest+0x308>)
 80126c6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d151      	bne.n	8012772 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	791b      	ldrb	r3, [r3, #4]
 80126d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	791b      	ldrb	r3, [r3, #4]
 80126da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	4618      	mov	r0, r3
 80126e2:	f000 fb1b 	bl	8012d1c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80126e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80126ea:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80126ec:	2300      	movs	r3, #0
 80126ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80126f2:	f107 031c 	add.w	r3, r7, #28
 80126f6:	2201      	movs	r2, #1
 80126f8:	4619      	mov	r1, r3
 80126fa:	2010      	movs	r0, #16
 80126fc:	f000 fcb8 	bl	8013070 <LoRaMacCommandsAddCmd>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d035      	beq.n	8012772 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012706:	2313      	movs	r3, #19
 8012708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 801270c:	e031      	b.n	8012772 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012714:	f107 031c 	add.w	r3, r7, #28
 8012718:	2200      	movs	r2, #0
 801271a:	4619      	mov	r1, r3
 801271c:	2012      	movs	r0, #18
 801271e:	f000 fca7 	bl	8013070 <LoRaMacCommandsAddCmd>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d026      	beq.n	8012776 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012728:	2313      	movs	r3, #19
 801272a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801272e:	e022      	b.n	8012776 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012730:	2301      	movs	r3, #1
 8012732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012736:	f000 faa7 	bl	8012c88 <LoRaMacClassBIsAcquisitionInProgress>
 801273a:	4603      	mov	r3, r0
 801273c:	f083 0301 	eor.w	r3, r3, #1
 8012740:	b2db      	uxtb	r3, r3
 8012742:	2b00      	cmp	r3, #0
 8012744:	d009      	beq.n	801275a <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012746:	2000      	movs	r0, #0
 8012748:	f000 fa80 	bl	8012c4c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801274c:	2000      	movs	r0, #0
 801274e:	f000 faa2 	bl	8012c96 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012752:	2300      	movs	r3, #0
 8012754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012758:	e00e      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 801275a:	2301      	movs	r3, #1
 801275c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012760:	e00a      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012762:	bf00      	nop
 8012764:	e008      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012766:	bf00      	nop
 8012768:	e006      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
            break;
 801276a:	bf00      	nop
 801276c:	e004      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
            break;
 801276e:	bf00      	nop
 8012770:	e002      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012772:	bf00      	nop
 8012774:	e000      	b.n	8012778 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012776:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012778:	4b13      	ldr	r3, [pc, #76]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 801277a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012786:	2b00      	cmp	r3, #0
 8012788:	d010      	beq.n	80127ac <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801278a:	f000 ffff 	bl	801378c <LoRaMacConfirmQueueGetCnt>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d110      	bne.n	80127b6 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012794:	4b0c      	ldr	r3, [pc, #48]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 8012796:	2200      	movs	r2, #0
 8012798:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801279c:	4a0a      	ldr	r2, [pc, #40]	@ (80127c8 <LoRaMacMlmeRequest+0x304>)
 801279e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80127a2:	f023 0304 	bic.w	r3, r3, #4
 80127a6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80127aa:	e004      	b.n	80127b6 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80127ac:	f107 0320 	add.w	r3, r7, #32
 80127b0:	4618      	mov	r0, r3
 80127b2:	f000 fe9d 	bl	80134f0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80127b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3728      	adds	r7, #40	@ 0x28
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	20000d30 	.word	0x20000d30
 80127c8:	200008d8 	.word	0x200008d8
 80127cc:	20000df8 	.word	0x20000df8

080127d0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80127d0:	b5b0      	push	{r4, r5, r7, lr}
 80127d2:	b092      	sub	sp, #72	@ 0x48
 80127d4:	af02      	add	r7, sp, #8
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80127dc:	2302      	movs	r3, #2
 80127de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80127e8:	2300      	movs	r3, #0
 80127ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80127f2:	2300      	movs	r3, #0
 80127f4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d101      	bne.n	8012802 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127fe:	2303      	movs	r3, #3
 8012800:	e113      	b.n	8012a2a <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012808:	f7fc face 	bl	800eda8 <LoRaMacIsBusy>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d001      	beq.n	8012816 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012812:	2301      	movs	r3, #1
 8012814:	e109      	b.n	8012a2a <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f107 040c 	add.w	r4, r7, #12
 801281c:	461d      	mov	r5, r3
 801281e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012822:	682b      	ldr	r3, [r5, #0]
 8012824:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012826:	2300      	movs	r3, #0
 8012828:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801282c:	2214      	movs	r2, #20
 801282e:	2100      	movs	r1, #0
 8012830:	4880      	ldr	r0, [pc, #512]	@ (8012a34 <LoRaMacMcpsRequest+0x264>)
 8012832:	f004 fc67 	bl	8017104 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012836:	4b80      	ldr	r3, [pc, #512]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 8012838:	2201      	movs	r2, #1
 801283a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801283e:	4b7f      	ldr	r3, [pc, #508]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012840:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012844:	2b02      	cmp	r3, #2
 8012846:	d111      	bne.n	801286c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012848:	4b7c      	ldr	r3, [pc, #496]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801284a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801284e:	2b02      	cmp	r3, #2
 8012850:	d10c      	bne.n	801286c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012852:	4b7a      	ldr	r3, [pc, #488]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012854:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8012858:	f083 0301 	eor.w	r3, r3, #1
 801285c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801285e:	2b00      	cmp	r3, #0
 8012860:	d004      	beq.n	801286c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012862:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012864:	2b00      	cmp	r3, #0
 8012866:	d101      	bne.n	801286c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012868:	2301      	movs	r3, #1
 801286a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801286c:	7b3b      	ldrb	r3, [r7, #12]
 801286e:	2b03      	cmp	r3, #3
 8012870:	d030      	beq.n	80128d4 <LoRaMacMcpsRequest+0x104>
 8012872:	2b03      	cmp	r3, #3
 8012874:	dc3f      	bgt.n	80128f6 <LoRaMacMcpsRequest+0x126>
 8012876:	2b00      	cmp	r3, #0
 8012878:	d002      	beq.n	8012880 <LoRaMacMcpsRequest+0xb0>
 801287a:	2b01      	cmp	r3, #1
 801287c:	d015      	beq.n	80128aa <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801287e:	e03a      	b.n	80128f6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012880:	2301      	movs	r3, #1
 8012882:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012886:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801288a:	2202      	movs	r2, #2
 801288c:	f362 1347 	bfi	r3, r2, #5, #3
 8012890:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012894:	7c3b      	ldrb	r3, [r7, #16]
 8012896:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801289e:	8b3b      	ldrh	r3, [r7, #24]
 80128a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80128a2:	7ebb      	ldrb	r3, [r7, #26]
 80128a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128a8:	e026      	b.n	80128f8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80128aa:	2301      	movs	r3, #1
 80128ac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80128b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80128b4:	2204      	movs	r2, #4
 80128b6:	f362 1347 	bfi	r3, r2, #5, #3
 80128ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 80128be:	7c3b      	ldrb	r3, [r7, #16]
 80128c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80128c8:	8b3b      	ldrh	r3, [r7, #24]
 80128ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 80128cc:	7ebb      	ldrb	r3, [r7, #26]
 80128ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128d2:	e011      	b.n	80128f8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80128d4:	2301      	movs	r3, #1
 80128d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80128da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80128de:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80128e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80128ea:	8abb      	ldrh	r3, [r7, #20]
 80128ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80128ee:	7dbb      	ldrb	r3, [r7, #22]
 80128f0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80128f4:	e000      	b.n	80128f8 <LoRaMacMcpsRequest+0x128>
            break;
 80128f6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80128f8:	2302      	movs	r3, #2
 80128fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80128fe:	4b4f      	ldr	r3, [pc, #316]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012900:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012904:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012908:	4b4c      	ldr	r3, [pc, #304]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801290a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801290e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012912:	4611      	mov	r1, r2
 8012914:	4618      	mov	r0, r3
 8012916:	f002 f919 	bl	8014b4c <RegionGetPhyParam>
 801291a:	4603      	mov	r3, r0
 801291c:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012920:	b25b      	sxtb	r3, r3
 8012922:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8012926:	4293      	cmp	r3, r2
 8012928:	bfb8      	it	lt
 801292a:	4613      	movlt	r3, r2
 801292c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012930:	4b42      	ldr	r3, [pc, #264]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012932:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012936:	4a41      	ldr	r2, [pc, #260]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012938:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 801293c:	4a3f      	ldr	r2, [pc, #252]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801293e:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012942:	4618      	mov	r0, r3
 8012944:	f7fc fbc8 	bl	800f0d8 <CheckForMinimumAbpDatarate>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d002      	beq.n	8012954 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012950:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012954:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012958:	2b00      	cmp	r3, #0
 801295a:	d05f      	beq.n	8012a1c <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801295c:	4b37      	ldr	r3, [pc, #220]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801295e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012962:	f083 0301 	eor.w	r3, r3, #1
 8012966:	b2db      	uxtb	r3, r3
 8012968:	2b00      	cmp	r3, #0
 801296a:	d10e      	bne.n	801298a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801296c:	4b33      	ldr	r3, [pc, #204]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801296e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012972:	4a32      	ldr	r2, [pc, #200]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012974:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012978:	4a30      	ldr	r2, [pc, #192]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801297a:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801297e:	4618      	mov	r0, r3
 8012980:	f7fc fbaa 	bl	800f0d8 <CheckForMinimumAbpDatarate>
 8012984:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012986:	2b00      	cmp	r3, #0
 8012988:	d01c      	beq.n	80129c4 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801298a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801298e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012992:	4b2a      	ldr	r3, [pc, #168]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 8012994:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801299c:	4b27      	ldr	r3, [pc, #156]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 801299e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129a2:	f107 0120 	add.w	r1, r7, #32
 80129a6:	2205      	movs	r2, #5
 80129a8:	4618      	mov	r0, r3
 80129aa:	f002 f90a 	bl	8014bc2 <RegionVerify>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d005      	beq.n	80129c0 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80129b4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80129b8:	4b20      	ldr	r3, [pc, #128]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 80129ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80129be:	e001      	b.n	80129c4 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e032      	b.n	8012a2a <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80129c4:	4b1d      	ldr	r3, [pc, #116]	@ (8012a3c <LoRaMacMcpsRequest+0x26c>)
 80129c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80129ca:	4a1b      	ldr	r2, [pc, #108]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 80129cc:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 80129d0:	4611      	mov	r1, r2
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7fc fc6a 	bl	800f2ac <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80129d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80129da:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80129de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80129e2:	78fb      	ldrb	r3, [r7, #3]
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	4613      	mov	r3, r2
 80129e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129ea:	f7fd fc0f 	bl	801020c <Send>
 80129ee:	4603      	mov	r3, r0
 80129f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80129f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10b      	bne.n	8012a14 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80129fc:	7b3a      	ldrb	r2, [r7, #12]
 80129fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 8012a00:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012a04:	4a0c      	ldr	r2, [pc, #48]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 8012a06:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012a0a:	f043 0301 	orr.w	r3, r3, #1
 8012a0e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012a12:	e003      	b.n	8012a1c <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012a14:	4b08      	ldr	r3, [pc, #32]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 8012a16:	2200      	movs	r2, #0
 8012a18:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012a1c:	4b06      	ldr	r3, [pc, #24]	@ (8012a38 <LoRaMacMcpsRequest+0x268>)
 8012a1e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	611a      	str	r2, [r3, #16]

    return status;
 8012a26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3740      	adds	r7, #64	@ 0x40
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bdb0      	pop	{r4, r5, r7, pc}
 8012a32:	bf00      	nop
 8012a34:	20000d1c 	.word	0x20000d1c
 8012a38:	200008d8 	.word	0x200008d8
 8012a3c:	20000df8 	.word	0x20000df8

08012a40 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8012a78 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a54:	f107 010c 	add.w	r1, r7, #12
 8012a58:	220f      	movs	r2, #15
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f002 f8b1 	bl	8014bc2 <RegionVerify>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d003      	beq.n	8012a6e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012a66:	4a04      	ldr	r2, [pc, #16]	@ (8012a78 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012a6e:	bf00      	nop
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	20000df8 	.word	0x20000df8

08012a7c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012a80:	f7fe ff26 	bl	80118d0 <LoRaMacStop>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d111      	bne.n	8012aae <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012a8a:	480a      	ldr	r0, [pc, #40]	@ (8012ab4 <LoRaMacDeInitialization+0x38>)
 8012a8c:	f008 fc4c 	bl	801b328 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012a90:	4809      	ldr	r0, [pc, #36]	@ (8012ab8 <LoRaMacDeInitialization+0x3c>)
 8012a92:	f008 fc49 	bl	801b328 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012a96:	4809      	ldr	r0, [pc, #36]	@ (8012abc <LoRaMacDeInitialization+0x40>)
 8012a98:	f008 fc46 	bl	801b328 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012a9c:	f000 f948 	bl	8012d30 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012aa0:	f7fd ff1a 	bl	80108d8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012aa4:	4b06      	ldr	r3, [pc, #24]	@ (8012ac0 <LoRaMacDeInitialization+0x44>)
 8012aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aa8:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e000      	b.n	8012ab0 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012aae:	2301      	movs	r3, #1
    }
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	20000c40 	.word	0x20000c40
 8012ab8:	20000c58 	.word	0x20000c58
 8012abc:	20000c70 	.word	0x20000c70
 8012ac0:	0801f574 	.word	0x0801f574

08012ac4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b08c      	sub	sp, #48	@ 0x30
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	7b1b      	ldrb	r3, [r3, #12]
 8012adc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	7b5b      	ldrb	r3, [r3, #13]
 8012ae4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	7b9b      	ldrb	r3, [r3, #14]
 8012aec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	685a      	ldr	r2, [r3, #4]
 8012af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	785b      	ldrb	r3, [r3, #1]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f000 8088 	beq.w	8012c12 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012b02:	2302      	movs	r3, #2
 8012b04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	7bdb      	ldrb	r3, [r3, #15]
 8012b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	7c1b      	ldrb	r3, [r3, #16]
 8012b14:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b18:	4611      	mov	r1, r2
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f002 f816 	bl	8014b4c <RegionGetPhyParam>
 8012b20:	4603      	mov	r3, r0
 8012b22:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012b24:	6a3b      	ldr	r3, [r7, #32]
 8012b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012b2a:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8012b2e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012b32:	4293      	cmp	r3, r2
 8012b34:	bfb8      	it	lt
 8012b36:	4613      	movlt	r3, r2
 8012b38:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	8912      	ldrh	r2, [r2, #8]
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d302      	bcc.n	8012b4e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	68fa      	ldr	r2, [r7, #12]
 8012b54:	8912      	ldrh	r2, [r2, #8]
 8012b56:	4611      	mov	r1, r2
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	8952      	ldrh	r2, [r2, #10]
 8012b5c:	440a      	add	r2, r1
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d30f      	bcc.n	8012b82 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012b62:	230a      	movs	r3, #10
 8012b64:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	7c1b      	ldrb	r3, [r3, #16]
 8012b6c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b70:	4611      	mov	r1, r2
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 ffea 	bl	8014b4c <RegionGetPhyParam>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012b7c:	6a3b      	ldr	r3, [r7, #32]
 8012b7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	8912      	ldrh	r2, [r2, #8]
 8012b8a:	4611      	mov	r1, r2
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	8952      	ldrh	r2, [r2, #10]
 8012b90:	0052      	lsls	r2, r2, #1
 8012b92:	440a      	add	r2, r1
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d33c      	bcc.n	8012c12 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	8912      	ldrh	r2, [r2, #8]
 8012ba0:	1a9b      	subs	r3, r3, r2
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	8952      	ldrh	r2, [r2, #10]
 8012ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8012baa:	fb01 f202 	mul.w	r2, r1, r2
 8012bae:	1a9b      	subs	r3, r3, r2
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d12e      	bne.n	8012c12 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012bb4:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012bb8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d110      	bne.n	8012be2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d009      	beq.n	8012bdc <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012bc8:	2302      	movs	r3, #2
 8012bca:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	7c1b      	ldrb	r3, [r3, #16]
 8012bd0:	f107 0210 	add.w	r2, r7, #16
 8012bd4:	4611      	mov	r1, r2
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f001 ffe1 	bl	8014b9e <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012be2:	2321      	movs	r3, #33	@ 0x21
 8012be4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012be8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012bec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	7bdb      	ldrb	r3, [r3, #15]
 8012bf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	7c1b      	ldrb	r3, [r3, #16]
 8012bfc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012c00:	4611      	mov	r1, r2
 8012c02:	4618      	mov	r0, r3
 8012c04:	f001 ffa2 	bl	8014b4c <RegionGetPhyParam>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012c0c:	6a3b      	ldr	r3, [r7, #32]
 8012c0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012c18:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012c20:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012c28:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3730      	adds	r7, #48	@ 0x30
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012c36:	b480      	push	{r7}
 8012c38:	b085      	sub	sp, #20
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c42:	bf00      	nop
 8012c44:	3714      	adds	r7, #20
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bc80      	pop	{r7}
 8012c4a:	4770      	bx	lr

08012c4c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	4603      	mov	r3, r0
 8012c54:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c56:	bf00      	nop
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bc80      	pop	{r7}
 8012c5e:	4770      	bx	lr

08012c60 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c6a:	bf00      	nop
 8012c6c:	370c      	adds	r7, #12
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bc80      	pop	{r7}
 8012c72:	4770      	bx	lr

08012c74 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c7e:	bf00      	nop
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bc80      	pop	{r7}
 8012c86:	4770      	bx	lr

08012c88 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012c8c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bc80      	pop	{r7}
 8012c94:	4770      	bx	lr

08012c96 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012c96:	b480      	push	{r7}
 8012c98:	b083      	sub	sp, #12
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c9e:	bf00      	nop
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bc80      	pop	{r7}
 8012ca6:	4770      	bx	lr

08012ca8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bc80      	pop	{r7}
 8012cb8:	4770      	bx	lr

08012cba <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012cba:	b480      	push	{r7}
 8012cbc:	b083      	sub	sp, #12
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cc2:	bf00      	nop
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bc80      	pop	{r7}
 8012cca:	4770      	bx	lr

08012ccc <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012cd8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	370c      	adds	r7, #12
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bc80      	pop	{r7}
 8012ce2:	4770      	bx	lr

08012ce4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012ce8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bc80      	pop	{r7}
 8012cf0:	4770      	bx	lr

08012cf2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012cf2:	b480      	push	{r7}
 8012cf4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012cf6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bc80      	pop	{r7}
 8012cfe:	4770      	bx	lr

08012d00 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d04:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bc80      	pop	{r7}
 8012d0c:	4770      	bx	lr

08012d0e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012d0e:	b480      	push	{r7}
 8012d10:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d12:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bc80      	pop	{r7}
 8012d1a:	4770      	bx	lr

08012d1c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d26:	bf00      	nop
 8012d28:	370c      	adds	r7, #12
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bc80      	pop	{r7}
 8012d2e:	4770      	bx	lr

08012d30 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012d30:	b480      	push	{r7}
 8012d32:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d34:	bf00      	nop
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bc80      	pop	{r7}
 8012d3a:	4770      	bx	lr

08012d3c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d40:	bf00      	nop
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bc80      	pop	{r7}
 8012d46:	4770      	bx	lr

08012d48 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	4603      	mov	r3, r0
 8012d50:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d52:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	370c      	adds	r7, #12
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bc80      	pop	{r7}
 8012d5c:	4770      	bx	lr

08012d5e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012d5e:	b480      	push	{r7}
 8012d60:	b083      	sub	sp, #12
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d66:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bc80      	pop	{r7}
 8012d70:	4770      	bx	lr

08012d72 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012d72:	b480      	push	{r7}
 8012d74:	b083      	sub	sp, #12
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d7a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bc80      	pop	{r7}
 8012d84:	4770      	bx	lr

08012d86 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012d86:	b480      	push	{r7}
 8012d88:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d8a:	bf00      	nop
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bc80      	pop	{r7}
 8012d90:	4770      	bx	lr

08012d92 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012d92:	b480      	push	{r7}
 8012d94:	b083      	sub	sp, #12
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	4603      	mov	r3, r0
 8012d9a:	6039      	str	r1, [r7, #0]
 8012d9c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012d9e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bc80      	pop	{r7}
 8012da8:	4770      	bx	lr

08012daa <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012daa:	b480      	push	{r7}
 8012dac:	b083      	sub	sp, #12
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	4603      	mov	r3, r0
 8012db2:	603a      	str	r2, [r7, #0]
 8012db4:	80fb      	strh	r3, [r7, #6]
 8012db6:	460b      	mov	r3, r1
 8012db8:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dba:	bf00      	nop
 8012dbc:	370c      	adds	r7, #12
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bc80      	pop	{r7}
 8012dc2:	4770      	bx	lr

08012dc4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dc8:	bf00      	nop
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bc80      	pop	{r7}
 8012dce:	4770      	bx	lr

08012dd0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012dd8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	370c      	adds	r7, #12
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bc80      	pop	{r7}
 8012de2:	4770      	bx	lr

08012de4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012dec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	370c      	adds	r7, #12
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bc80      	pop	{r7}
 8012df6:	4770      	bx	lr

08012df8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012df8:	b480      	push	{r7}
 8012dfa:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dfc:	bf00      	nop
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bc80      	pop	{r7}
 8012e02:	4770      	bx	lr

08012e04 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e10:	bf00      	nop
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bc80      	pop	{r7}
 8012e18:	4770      	bx	lr

08012e1a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012e1a:	b480      	push	{r7}
 8012e1c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e1e:	bf00      	nop
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bc80      	pop	{r7}
 8012e24:	4770      	bx	lr

08012e26 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012e26:	b480      	push	{r7}
 8012e28:	b085      	sub	sp, #20
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e32:	2300      	movs	r3, #0
 8012e34:	81fb      	strh	r3, [r7, #14]
 8012e36:	e00a      	b.n	8012e4e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012e38:	89fb      	ldrh	r3, [r7, #14]
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d001      	beq.n	8012e48 <IsSlotFree+0x22>
        {
            return false;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e006      	b.n	8012e56 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e48:	89fb      	ldrh	r3, [r7, #14]
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	81fb      	strh	r3, [r7, #14]
 8012e4e:	89fb      	ldrh	r3, [r7, #14]
 8012e50:	2b0f      	cmp	r3, #15
 8012e52:	d9f1      	bls.n	8012e38 <IsSlotFree+0x12>
        }
    }
    return true;
 8012e54:	2301      	movs	r3, #1
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3714      	adds	r7, #20
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bc80      	pop	{r7}
 8012e5e:	4770      	bx	lr

08012e60 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e6a:	e007      	b.n	8012e7c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012e6c:	79fb      	ldrb	r3, [r7, #7]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012e72:	79fb      	ldrb	r3, [r7, #7]
 8012e74:	2b20      	cmp	r3, #32
 8012e76:	d101      	bne.n	8012e7c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	e012      	b.n	8012ea2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e7c:	79fb      	ldrb	r3, [r7, #7]
 8012e7e:	011b      	lsls	r3, r3, #4
 8012e80:	3308      	adds	r3, #8
 8012e82:	4a0a      	ldr	r2, [pc, #40]	@ (8012eac <MallocNewMacCommandSlot+0x4c>)
 8012e84:	4413      	add	r3, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff ffcd 	bl	8012e26 <IsSlotFree>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	f083 0301 	eor.w	r3, r3, #1
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d1e9      	bne.n	8012e6c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	011b      	lsls	r3, r3, #4
 8012e9c:	3308      	adds	r3, #8
 8012e9e:	4a03      	ldr	r2, [pc, #12]	@ (8012eac <MallocNewMacCommandSlot+0x4c>)
 8012ea0:	4413      	add	r3, r2
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3708      	adds	r7, #8
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	20001998 	.word	0x20001998

08012eb0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d101      	bne.n	8012ec2 <FreeMacCommandSlot+0x12>
    {
        return false;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	e005      	b.n	8012ece <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012ec2:	2210      	movs	r2, #16
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f004 f91c 	bl	8017104 <memset1>

    return true;
 8012ecc:	2301      	movs	r3, #1
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012ed6:	b480      	push	{r7}
 8012ed8:	b083      	sub	sp, #12
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <LinkedListInit+0x12>
    {
        return false;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	e006      	b.n	8012ef6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2200      	movs	r2, #0
 8012eec:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	605a      	str	r2, [r3, #4]

    return true;
 8012ef4:	2301      	movs	r3, #1
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	370c      	adds	r7, #12
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bc80      	pop	{r7}
 8012efe:	4770      	bx	lr

08012f00 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d002      	beq.n	8012f16 <LinkedListAdd+0x16>
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d101      	bne.n	8012f1a <LinkedListAdd+0x1a>
    {
        return false;
 8012f16:	2300      	movs	r3, #0
 8012f18:	e015      	b.n	8012f46 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d102      	bne.n	8012f28 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d003      	beq.n	8012f38 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	683a      	ldr	r2, [r7, #0]
 8012f36:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	683a      	ldr	r2, [r7, #0]
 8012f42:	605a      	str	r2, [r3, #4]

    return true;
 8012f44:	2301      	movs	r3, #1
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	370c      	adds	r7, #12
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bc80      	pop	{r7}
 8012f4e:	4770      	bx	lr

08012f50 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f50:	b480      	push	{r7}
 8012f52:	b085      	sub	sp, #20
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <LinkedListGetPrevious+0x16>
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e016      	b.n	8012f98 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012f70:	683a      	ldr	r2, [r7, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d00c      	beq.n	8012f92 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f78:	e002      	b.n	8012f80 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d007      	beq.n	8012f96 <LinkedListGetPrevious+0x46>
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	683a      	ldr	r2, [r7, #0]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d1f4      	bne.n	8012f7a <LinkedListGetPrevious+0x2a>
 8012f90:	e001      	b.n	8012f96 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012f92:	2300      	movs	r3, #0
 8012f94:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012f96:	68fb      	ldr	r3, [r7, #12]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3714      	adds	r7, #20
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bc80      	pop	{r7}
 8012fa0:	4770      	bx	lr

08012fa2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b084      	sub	sp, #16
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
 8012faa:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d002      	beq.n	8012fb8 <LinkedListRemove+0x16>
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d101      	bne.n	8012fbc <LinkedListRemove+0x1a>
    {
        return false;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	e020      	b.n	8012ffe <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012fbc:	6839      	ldr	r1, [r7, #0]
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7ff ffc6 	bl	8012f50 <LinkedListGetPrevious>
 8012fc4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	683a      	ldr	r2, [r7, #0]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d103      	bne.n	8012fd8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	683a      	ldr	r2, [r7, #0]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d102      	bne.n	8012fe8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d003      	beq.n	8012ff6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	601a      	str	r2, [r3, #0]

    return true;
 8012ffc:	2301      	movs	r3, #1
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
	...

08013008 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013008:	b480      	push	{r7}
 801300a:	b083      	sub	sp, #12
 801300c:	af00      	add	r7, sp, #0
 801300e:	4603      	mov	r3, r0
 8013010:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013012:	79fb      	ldrb	r3, [r7, #7]
 8013014:	2b11      	cmp	r3, #17
 8013016:	bf8c      	ite	hi
 8013018:	2201      	movhi	r2, #1
 801301a:	2200      	movls	r2, #0
 801301c:	b2d2      	uxtb	r2, r2
 801301e:	2a00      	cmp	r2, #0
 8013020:	d10d      	bne.n	801303e <IsSticky+0x36>
 8013022:	4a0a      	ldr	r2, [pc, #40]	@ (801304c <IsSticky+0x44>)
 8013024:	fa22 f303 	lsr.w	r3, r2, r3
 8013028:	f003 0301 	and.w	r3, r3, #1
 801302c:	2b00      	cmp	r3, #0
 801302e:	bf14      	ite	ne
 8013030:	2301      	movne	r3, #1
 8013032:	2300      	moveq	r3, #0
 8013034:	b2db      	uxtb	r3, r3
 8013036:	2b00      	cmp	r3, #0
 8013038:	d001      	beq.n	801303e <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801303a:	2301      	movs	r3, #1
 801303c:	e000      	b.n	8013040 <IsSticky+0x38>
        default:
            return false;
 801303e:	2300      	movs	r3, #0
    }
}
 8013040:	4618      	mov	r0, r3
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	bc80      	pop	{r7}
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	00020720 	.word	0x00020720

08013050 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013054:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8013058:	2100      	movs	r1, #0
 801305a:	4804      	ldr	r0, [pc, #16]	@ (801306c <LoRaMacCommandsInit+0x1c>)
 801305c:	f004 f852 	bl	8017104 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013060:	4802      	ldr	r0, [pc, #8]	@ (801306c <LoRaMacCommandsInit+0x1c>)
 8013062:	f7ff ff38 	bl	8012ed6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	bd80      	pop	{r7, pc}
 801306c:	20001998 	.word	0x20001998

08013070 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b086      	sub	sp, #24
 8013074:	af00      	add	r7, sp, #0
 8013076:	4603      	mov	r3, r0
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
 801307c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013084:	2301      	movs	r3, #1
 8013086:	e033      	b.n	80130f0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013088:	f7ff feea 	bl	8012e60 <MallocNewMacCommandSlot>
 801308c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d101      	bne.n	8013098 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013094:	2302      	movs	r3, #2
 8013096:	e02b      	b.n	80130f0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013098:	6979      	ldr	r1, [r7, #20]
 801309a:	4817      	ldr	r0, [pc, #92]	@ (80130f8 <LoRaMacCommandsAddCmd+0x88>)
 801309c:	f7ff ff30 	bl	8012f00 <LinkedListAdd>
 80130a0:	4603      	mov	r3, r0
 80130a2:	f083 0301 	eor.w	r3, r3, #1
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d001      	beq.n	80130b0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80130ac:	2305      	movs	r3, #5
 80130ae:	e01f      	b.n	80130f0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	7bfa      	ldrb	r2, [r7, #15]
 80130b4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	3305      	adds	r3, #5
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	b292      	uxth	r2, r2
 80130c4:	68b9      	ldr	r1, [r7, #8]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f003 ffe1 	bl	801708e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80130cc:	7bfb      	ldrb	r3, [r7, #15]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff ff9a 	bl	8013008 <IsSticky>
 80130d4:	4603      	mov	r3, r0
 80130d6:	461a      	mov	r2, r3
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80130dc:	4b06      	ldr	r3, [pc, #24]	@ (80130f8 <LoRaMacCommandsAddCmd+0x88>)
 80130de:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4413      	add	r3, r2
 80130e6:	3301      	adds	r3, #1
 80130e8:	4a03      	ldr	r2, [pc, #12]	@ (80130f8 <LoRaMacCommandsAddCmd+0x88>)
 80130ea:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80130ee:	2300      	movs	r3, #0
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3718      	adds	r7, #24
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	20001998 	.word	0x20001998

080130fc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801310a:	2301      	movs	r3, #1
 801310c:	e021      	b.n	8013152 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801310e:	6879      	ldr	r1, [r7, #4]
 8013110:	4812      	ldr	r0, [pc, #72]	@ (801315c <LoRaMacCommandsRemoveCmd+0x60>)
 8013112:	f7ff ff46 	bl	8012fa2 <LinkedListRemove>
 8013116:	4603      	mov	r3, r0
 8013118:	f083 0301 	eor.w	r3, r3, #1
 801311c:	b2db      	uxtb	r3, r3
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013122:	2303      	movs	r3, #3
 8013124:	e015      	b.n	8013152 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013126:	4b0d      	ldr	r3, [pc, #52]	@ (801315c <LoRaMacCommandsRemoveCmd+0x60>)
 8013128:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	3b01      	subs	r3, #1
 8013134:	4a09      	ldr	r2, [pc, #36]	@ (801315c <LoRaMacCommandsRemoveCmd+0x60>)
 8013136:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff feb8 	bl	8012eb0 <FreeMacCommandSlot>
 8013140:	4603      	mov	r3, r0
 8013142:	f083 0301 	eor.w	r3, r3, #1
 8013146:	b2db      	uxtb	r3, r3
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801314c:	2305      	movs	r3, #5
 801314e:	e000      	b.n	8013152 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20001998 	.word	0x20001998

08013160 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013166:	4b0f      	ldr	r3, [pc, #60]	@ (80131a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801316c:	e012      	b.n	8013194 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	7b1b      	ldrb	r3, [r3, #12]
 8013172:	f083 0301 	eor.w	r3, r3, #1
 8013176:	b2db      	uxtb	r3, r3
 8013178:	2b00      	cmp	r3, #0
 801317a:	d008      	beq.n	801318e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff ffba 	bl	80130fc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	607b      	str	r3, [r7, #4]
 801318c:	e002      	b.n	8013194 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1e9      	bne.n	801316e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	20001998 	.word	0x20001998

080131a8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80131ae:	4b0e      	ldr	r3, [pc, #56]	@ (80131e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80131b4:	e00f      	b.n	80131d6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	791b      	ldrb	r3, [r3, #4]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7ff ff21 	bl	8013008 <IsSticky>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7ff ff95 	bl	80130fc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d1ec      	bne.n	80131b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3708      	adds	r7, #8
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	20001998 	.word	0x20001998

080131ec <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d101      	bne.n	80131fe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80131fa:	2301      	movs	r3, #1
 80131fc:	e005      	b.n	801320a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80131fe:	4b05      	ldr	r3, [pc, #20]	@ (8013214 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013200:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	bc80      	pop	{r7}
 8013212:	4770      	bx	lr
 8013214:	20001998 	.word	0x20001998

08013218 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013224:	4b25      	ldr	r3, [pc, #148]	@ (80132bc <LoRaMacCommandsSerializeCmds+0xa4>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801322a:	2300      	movs	r3, #0
 801322c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d002      	beq.n	801323a <LoRaMacCommandsSerializeCmds+0x22>
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d126      	bne.n	8013288 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801323a:	2301      	movs	r3, #1
 801323c:	e039      	b.n	80132b2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801323e:	7efb      	ldrb	r3, [r7, #27]
 8013240:	68fa      	ldr	r2, [r7, #12]
 8013242:	1ad2      	subs	r2, r2, r3
 8013244:	69fb      	ldr	r3, [r7, #28]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	3301      	adds	r3, #1
 801324a:	429a      	cmp	r2, r3
 801324c:	d320      	bcc.n	8013290 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801324e:	7efb      	ldrb	r3, [r7, #27]
 8013250:	1c5a      	adds	r2, r3, #1
 8013252:	76fa      	strb	r2, [r7, #27]
 8013254:	461a      	mov	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4413      	add	r3, r2
 801325a:	69fa      	ldr	r2, [r7, #28]
 801325c:	7912      	ldrb	r2, [r2, #4]
 801325e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013260:	7efb      	ldrb	r3, [r7, #27]
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	18d0      	adds	r0, r2, r3
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	1d59      	adds	r1, r3, #5
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	689b      	ldr	r3, [r3, #8]
 801326e:	b29b      	uxth	r3, r3
 8013270:	461a      	mov	r2, r3
 8013272:	f003 ff0c 	bl	801708e <memcpy1>
            itr += curElement->PayloadSize;
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	689b      	ldr	r3, [r3, #8]
 801327a:	b2da      	uxtb	r2, r3
 801327c:	7efb      	ldrb	r3, [r7, #27]
 801327e:	4413      	add	r3, r2
 8013280:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d1d7      	bne.n	801323e <LoRaMacCommandsSerializeCmds+0x26>
 801328e:	e009      	b.n	80132a4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013290:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013292:	e007      	b.n	80132a4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801329a:	69f8      	ldr	r0, [r7, #28]
 801329c:	f7ff ff2e 	bl	80130fc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1f4      	bne.n	8013294 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80132aa:	68b8      	ldr	r0, [r7, #8]
 80132ac:	f7ff ff9e 	bl	80131ec <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3720      	adds	r7, #32
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20001998 	.word	0x20001998

080132c0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80132c0:	b480      	push	{r7}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80132ce:	2301      	movs	r3, #1
 80132d0:	e016      	b.n	8013300 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80132d2:	4b0e      	ldr	r3, [pc, #56]	@ (801330c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80132de:	e00b      	b.n	80132f8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	7b1b      	ldrb	r3, [r3, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d004      	beq.n	80132f2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2201      	movs	r2, #1
 80132ec:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80132ee:	2300      	movs	r3, #0
 80132f0:	e006      	b.n	8013300 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1f0      	bne.n	80132e0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3714      	adds	r7, #20
 8013304:	46bd      	mov	sp, r7
 8013306:	bc80      	pop	{r7}
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop
 801330c:	20001998 	.word	0x20001998

08013310 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013310:	b480      	push	{r7}
 8013312:	b085      	sub	sp, #20
 8013314:	af00      	add	r7, sp, #0
 8013316:	4603      	mov	r3, r0
 8013318:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801331e:	79fb      	ldrb	r3, [r7, #7]
 8013320:	3b02      	subs	r3, #2
 8013322:	2b11      	cmp	r3, #17
 8013324:	d850      	bhi.n	80133c8 <LoRaMacCommandsGetCmdSize+0xb8>
 8013326:	a201      	add	r2, pc, #4	@ (adr r2, 801332c <LoRaMacCommandsGetCmdSize+0x1c>)
 8013328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801332c:	08013375 	.word	0x08013375
 8013330:	0801337b 	.word	0x0801337b
 8013334:	08013381 	.word	0x08013381
 8013338:	08013387 	.word	0x08013387
 801333c:	0801338d 	.word	0x0801338d
 8013340:	08013393 	.word	0x08013393
 8013344:	08013399 	.word	0x08013399
 8013348:	0801339f 	.word	0x0801339f
 801334c:	080133a5 	.word	0x080133a5
 8013350:	080133c9 	.word	0x080133c9
 8013354:	080133c9 	.word	0x080133c9
 8013358:	080133ab 	.word	0x080133ab
 801335c:	080133c9 	.word	0x080133c9
 8013360:	080133c9 	.word	0x080133c9
 8013364:	080133b1 	.word	0x080133b1
 8013368:	080133b7 	.word	0x080133b7
 801336c:	080133bd 	.word	0x080133bd
 8013370:	080133c3 	.word	0x080133c3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013374:	2303      	movs	r3, #3
 8013376:	73fb      	strb	r3, [r7, #15]
            break;
 8013378:	e027      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801337a:	2305      	movs	r3, #5
 801337c:	73fb      	strb	r3, [r7, #15]
            break;
 801337e:	e024      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013380:	2302      	movs	r3, #2
 8013382:	73fb      	strb	r3, [r7, #15]
            break;
 8013384:	e021      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013386:	2305      	movs	r3, #5
 8013388:	73fb      	strb	r3, [r7, #15]
            break;
 801338a:	e01e      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801338c:	2301      	movs	r3, #1
 801338e:	73fb      	strb	r3, [r7, #15]
            break;
 8013390:	e01b      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013392:	2306      	movs	r3, #6
 8013394:	73fb      	strb	r3, [r7, #15]
            break;
 8013396:	e018      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013398:	2302      	movs	r3, #2
 801339a:	73fb      	strb	r3, [r7, #15]
            break;
 801339c:	e015      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801339e:	2302      	movs	r3, #2
 80133a0:	73fb      	strb	r3, [r7, #15]
            break;
 80133a2:	e012      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80133a4:	2305      	movs	r3, #5
 80133a6:	73fb      	strb	r3, [r7, #15]
            break;
 80133a8:	e00f      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80133aa:	2306      	movs	r3, #6
 80133ac:	73fb      	strb	r3, [r7, #15]
            break;
 80133ae:	e00c      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80133b0:	2301      	movs	r3, #1
 80133b2:	73fb      	strb	r3, [r7, #15]
            break;
 80133b4:	e009      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80133b6:	2305      	movs	r3, #5
 80133b8:	73fb      	strb	r3, [r7, #15]
            break;
 80133ba:	e006      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80133bc:	2304      	movs	r3, #4
 80133be:	73fb      	strb	r3, [r7, #15]
            break;
 80133c0:	e003      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80133c2:	2304      	movs	r3, #4
 80133c4:	73fb      	strb	r3, [r7, #15]
            break;
 80133c6:	e000      	b.n	80133ca <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80133c8:	bf00      	nop
        }
    }
    return cidSize;
 80133ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3714      	adds	r7, #20
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bc80      	pop	{r7}
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop

080133d8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4a07      	ldr	r2, [pc, #28]	@ (8013400 <IncreaseBufferPointer+0x28>)
 80133e4:	4293      	cmp	r3, r2
 80133e6:	d102      	bne.n	80133ee <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80133e8:	4b06      	ldr	r3, [pc, #24]	@ (8013404 <IncreaseBufferPointer+0x2c>)
 80133ea:	607b      	str	r3, [r7, #4]
 80133ec:	e002      	b.n	80133f4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3304      	adds	r3, #4
 80133f2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80133f4:	687b      	ldr	r3, [r7, #4]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	370c      	adds	r7, #12
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bc80      	pop	{r7}
 80133fe:	4770      	bx	lr
 8013400:	20001bc0 	.word	0x20001bc0
 8013404:	20001bb0 	.word	0x20001bb0

08013408 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	4603      	mov	r3, r0
 8013410:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013412:	79fb      	ldrb	r3, [r7, #7]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d101      	bne.n	801341c <IsListEmpty+0x14>
    {
        return true;
 8013418:	2301      	movs	r3, #1
 801341a:	e000      	b.n	801341e <IsListEmpty+0x16>
    }
    return false;
 801341c:	2300      	movs	r3, #0
}
 801341e:	4618      	mov	r0, r3
 8013420:	370c      	adds	r7, #12
 8013422:	46bd      	mov	sp, r7
 8013424:	bc80      	pop	{r7}
 8013426:	4770      	bx	lr

08013428 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	4603      	mov	r3, r0
 8013430:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013432:	79fb      	ldrb	r3, [r7, #7]
 8013434:	2b04      	cmp	r3, #4
 8013436:	d901      	bls.n	801343c <IsListFull+0x14>
    {
        return true;
 8013438:	2301      	movs	r3, #1
 801343a:	e000      	b.n	801343e <IsListFull+0x16>
    }
    return false;
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	370c      	adds	r7, #12
 8013442:	46bd      	mov	sp, r7
 8013444:	bc80      	pop	{r7}
 8013446:	4770      	bx	lr

08013448 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af00      	add	r7, sp, #0
 801344e:	4603      	mov	r3, r0
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
 8013454:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801345a:	4b13      	ldr	r3, [pc, #76]	@ (80134a8 <GetElement+0x60>)
 801345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff ffd1 	bl	8013408 <IsListEmpty>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d001      	beq.n	8013470 <GetElement+0x28>
    {
        return NULL;
 801346c:	2300      	movs	r3, #0
 801346e:	e017      	b.n	80134a0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013470:	2300      	movs	r3, #0
 8013472:	74fb      	strb	r3, [r7, #19]
 8013474:	e00d      	b.n	8013492 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	7bfa      	ldrb	r2, [r7, #15]
 801347c:	429a      	cmp	r2, r3
 801347e:	d101      	bne.n	8013484 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	e00d      	b.n	80134a0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013484:	6978      	ldr	r0, [r7, #20]
 8013486:	f7ff ffa7 	bl	80133d8 <IncreaseBufferPointer>
 801348a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801348c:	7cfb      	ldrb	r3, [r7, #19]
 801348e:	3301      	adds	r3, #1
 8013490:	74fb      	strb	r3, [r7, #19]
 8013492:	4b05      	ldr	r3, [pc, #20]	@ (80134a8 <GetElement+0x60>)
 8013494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013498:	7cfa      	ldrb	r2, [r7, #19]
 801349a:	429a      	cmp	r2, r3
 801349c:	d3eb      	bcc.n	8013476 <GetElement+0x2e>
    }

    return NULL;
 801349e:	2300      	movs	r3, #0
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3718      	adds	r7, #24
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	20001ba4 	.word	0x20001ba4

080134ac <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80134b4:	4a0c      	ldr	r2, [pc, #48]	@ (80134e8 <LoRaMacConfirmQueueInit+0x3c>)
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80134ba:	4b0b      	ldr	r3, [pc, #44]	@ (80134e8 <LoRaMacConfirmQueueInit+0x3c>)
 80134bc:	2200      	movs	r2, #0
 80134be:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134c2:	4b09      	ldr	r3, [pc, #36]	@ (80134e8 <LoRaMacConfirmQueueInit+0x3c>)
 80134c4:	4a09      	ldr	r2, [pc, #36]	@ (80134ec <LoRaMacConfirmQueueInit+0x40>)
 80134c6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134c8:	4b07      	ldr	r3, [pc, #28]	@ (80134e8 <LoRaMacConfirmQueueInit+0x3c>)
 80134ca:	4a08      	ldr	r2, [pc, #32]	@ (80134ec <LoRaMacConfirmQueueInit+0x40>)
 80134cc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80134ce:	2214      	movs	r2, #20
 80134d0:	21ff      	movs	r1, #255	@ 0xff
 80134d2:	4806      	ldr	r0, [pc, #24]	@ (80134ec <LoRaMacConfirmQueueInit+0x40>)
 80134d4:	f003 fe16 	bl	8017104 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80134d8:	4b03      	ldr	r3, [pc, #12]	@ (80134e8 <LoRaMacConfirmQueueInit+0x3c>)
 80134da:	2201      	movs	r2, #1
 80134dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80134e0:	bf00      	nop
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	20001ba4 	.word	0x20001ba4
 80134ec:	20001bb0 	.word	0x20001bb0

080134f0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80134f8:	4b19      	ldr	r3, [pc, #100]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 80134fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134fe:	4618      	mov	r0, r3
 8013500:	f7ff ff92 	bl	8013428 <IsListFull>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801350a:	2300      	movs	r3, #0
 801350c:	e024      	b.n	8013558 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801350e:	4b14      	ldr	r3, [pc, #80]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	7812      	ldrb	r2, [r2, #0]
 8013516:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013518:	4b11      	ldr	r3, [pc, #68]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	7852      	ldrb	r2, [r2, #1]
 8013520:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013522:	4b0f      	ldr	r3, [pc, #60]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	78d2      	ldrb	r2, [r2, #3]
 801352a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 801352c:	4b0c      	ldr	r3, [pc, #48]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 801352e:	689b      	ldr	r3, [r3, #8]
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	7892      	ldrb	r2, [r2, #2]
 8013534:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013536:	4b0a      	ldr	r3, [pc, #40]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013538:	f893 3020 	ldrb.w	r3, [r3, #32]
 801353c:	3301      	adds	r3, #1
 801353e:	b2da      	uxtb	r2, r3
 8013540:	4b07      	ldr	r3, [pc, #28]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013542:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013546:	4b06      	ldr	r3, [pc, #24]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	4618      	mov	r0, r3
 801354c:	f7ff ff44 	bl	80133d8 <IncreaseBufferPointer>
 8013550:	4603      	mov	r3, r0
 8013552:	4a03      	ldr	r2, [pc, #12]	@ (8013560 <LoRaMacConfirmQueueAdd+0x70>)
 8013554:	6093      	str	r3, [r2, #8]

    return true;
 8013556:	2301      	movs	r3, #1
}
 8013558:	4618      	mov	r0, r3
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	20001ba4 	.word	0x20001ba4

08013564 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013568:	4b0e      	ldr	r3, [pc, #56]	@ (80135a4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801356a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff ff4a 	bl	8013408 <IsListEmpty>
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801357a:	2300      	movs	r3, #0
 801357c:	e010      	b.n	80135a0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801357e:	4b09      	ldr	r3, [pc, #36]	@ (80135a4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013584:	3b01      	subs	r3, #1
 8013586:	b2da      	uxtb	r2, r3
 8013588:	4b06      	ldr	r3, [pc, #24]	@ (80135a4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801358a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801358e:	4b05      	ldr	r3, [pc, #20]	@ (80135a4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	4618      	mov	r0, r3
 8013594:	f7ff ff20 	bl	80133d8 <IncreaseBufferPointer>
 8013598:	4603      	mov	r3, r0
 801359a:	4a02      	ldr	r2, [pc, #8]	@ (80135a4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801359c:	6053      	str	r3, [r2, #4]

    return true;
 801359e:	2301      	movs	r3, #1
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	20001ba4 	.word	0x20001ba4

080135a8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	4603      	mov	r3, r0
 80135b0:	460a      	mov	r2, r1
 80135b2:	71fb      	strb	r3, [r7, #7]
 80135b4:	4613      	mov	r3, r2
 80135b6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80135b8:	2300      	movs	r3, #0
 80135ba:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80135bc:	4b10      	ldr	r3, [pc, #64]	@ (8013600 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ff ff20 	bl	8013408 <IsListEmpty>
 80135c8:	4603      	mov	r3, r0
 80135ca:	f083 0301 	eor.w	r3, r3, #1
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d011      	beq.n	80135f8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80135d4:	4b0a      	ldr	r3, [pc, #40]	@ (8013600 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135d6:	6859      	ldr	r1, [r3, #4]
 80135d8:	4b09      	ldr	r3, [pc, #36]	@ (8013600 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135da:	689a      	ldr	r2, [r3, #8]
 80135dc:	79bb      	ldrb	r3, [r7, #6]
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff ff32 	bl	8013448 <GetElement>
 80135e4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	79fa      	ldrb	r2, [r7, #7]
 80135f0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2201      	movs	r2, #1
 80135f6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80135f8:	bf00      	nop
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	20001ba4 	.word	0x20001ba4

08013604 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b084      	sub	sp, #16
 8013608:	af00      	add	r7, sp, #0
 801360a:	4603      	mov	r3, r0
 801360c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801360e:	2300      	movs	r3, #0
 8013610:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013612:	4b10      	ldr	r3, [pc, #64]	@ (8013654 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff fef5 	bl	8013408 <IsListEmpty>
 801361e:	4603      	mov	r3, r0
 8013620:	f083 0301 	eor.w	r3, r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d00e      	beq.n	8013648 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801362a:	4b0a      	ldr	r3, [pc, #40]	@ (8013654 <LoRaMacConfirmQueueGetStatus+0x50>)
 801362c:	6859      	ldr	r1, [r3, #4]
 801362e:	4b09      	ldr	r3, [pc, #36]	@ (8013654 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013630:	689a      	ldr	r2, [r3, #8]
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	4618      	mov	r0, r3
 8013636:	f7ff ff07 	bl	8013448 <GetElement>
 801363a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	785b      	ldrb	r3, [r3, #1]
 8013646:	e000      	b.n	801364a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013648:	2301      	movs	r3, #1
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	20001ba4 	.word	0x20001ba4

08013658 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	4603      	mov	r3, r0
 8013660:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013662:	4b16      	ldr	r3, [pc, #88]	@ (80136bc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013668:	4a14      	ldr	r2, [pc, #80]	@ (80136bc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801366a:	79fb      	ldrb	r3, [r7, #7]
 801366c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013670:	4b12      	ldr	r3, [pc, #72]	@ (80136bc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff fec6 	bl	8013408 <IsListEmpty>
 801367c:	4603      	mov	r3, r0
 801367e:	f083 0301 	eor.w	r3, r3, #1
 8013682:	b2db      	uxtb	r3, r3
 8013684:	2b00      	cmp	r3, #0
 8013686:	d015      	beq.n	80136b4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	79fa      	ldrb	r2, [r7, #7]
 801368c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	78db      	ldrb	r3, [r3, #3]
 8013692:	f083 0301 	eor.w	r3, r3, #1
 8013696:	b2db      	uxtb	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	d002      	beq.n	80136a2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2201      	movs	r2, #1
 80136a0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80136a2:	68f8      	ldr	r0, [r7, #12]
 80136a4:	f7ff fe98 	bl	80133d8 <IncreaseBufferPointer>
 80136a8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80136aa:	4b04      	ldr	r3, [pc, #16]	@ (80136bc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80136ac:	689b      	ldr	r3, [r3, #8]
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d1e9      	bne.n	8013688 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80136b4:	bf00      	nop
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	20001ba4 	.word	0x20001ba4

080136c0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	4603      	mov	r3, r0
 80136c8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80136ca:	4b09      	ldr	r3, [pc, #36]	@ (80136f0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80136cc:	6859      	ldr	r1, [r3, #4]
 80136ce:	4b08      	ldr	r3, [pc, #32]	@ (80136f0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80136d0:	689a      	ldr	r2, [r3, #8]
 80136d2:	79fb      	ldrb	r3, [r7, #7]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7ff feb7 	bl	8013448 <GetElement>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d001      	beq.n	80136e4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80136e0:	2301      	movs	r3, #1
 80136e2:	e000      	b.n	80136e6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20001ba4 	.word	0x20001ba4

080136f4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80136fc:	4b22      	ldr	r3, [pc, #136]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 80136fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013702:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013704:	2300      	movs	r3, #0
 8013706:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013708:	2300      	movs	r3, #0
 801370a:	73fb      	strb	r3, [r7, #15]
 801370c:	e032      	b.n	8013774 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801370e:	4b1e      	ldr	r3, [pc, #120]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	781a      	ldrb	r2, [r3, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013718:	4b1b      	ldr	r3, [pc, #108]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	785a      	ldrb	r2, [r3, #1]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013722:	4b19      	ldr	r3, [pc, #100]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	789b      	ldrb	r3, [r3, #2]
 8013728:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801372a:	7b7b      	ldrb	r3, [r7, #13]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d005      	beq.n	801373c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013730:	4b15      	ldr	r3, [pc, #84]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	689b      	ldr	r3, [r3, #8]
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	4798      	blx	r3
 801373a:	e00b      	b.n	8013754 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801373c:	4b12      	ldr	r3, [pc, #72]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013744:	4b10      	ldr	r3, [pc, #64]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	785b      	ldrb	r3, [r3, #1]
 801374a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801374c:	4b0e      	ldr	r3, [pc, #56]	@ (8013788 <LoRaMacConfirmQueueHandleCb+0x94>)
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	78db      	ldrb	r3, [r3, #3]
 8013752:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013754:	f7ff ff06 	bl	8013564 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013758:	7b7b      	ldrb	r3, [r7, #13]
 801375a:	f083 0301 	eor.w	r3, r3, #1
 801375e:	b2db      	uxtb	r3, r3
 8013760:	2b00      	cmp	r3, #0
 8013762:	d004      	beq.n	801376e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013764:	f107 0308 	add.w	r3, r7, #8
 8013768:	4618      	mov	r0, r3
 801376a:	f7ff fec1 	bl	80134f0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	3301      	adds	r3, #1
 8013772:	73fb      	strb	r3, [r7, #15]
 8013774:	7bfa      	ldrb	r2, [r7, #15]
 8013776:	7bbb      	ldrb	r3, [r7, #14]
 8013778:	429a      	cmp	r2, r3
 801377a:	d3c8      	bcc.n	801370e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801377c:	bf00      	nop
 801377e:	bf00      	nop
 8013780:	3710      	adds	r7, #16
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	20001ba4 	.word	0x20001ba4

0801378c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801378c:	b480      	push	{r7}
 801378e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013790:	4b03      	ldr	r3, [pc, #12]	@ (80137a0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013792:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013796:	4618      	mov	r0, r3
 8013798:	46bd      	mov	sp, r7
 801379a:	bc80      	pop	{r7}
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	20001ba4 	.word	0x20001ba4

080137a4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80137a8:	4b06      	ldr	r3, [pc, #24]	@ (80137c4 <LoRaMacConfirmQueueIsFull+0x20>)
 80137aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff fe3a 	bl	8013428 <IsListFull>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d001      	beq.n	80137be <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80137ba:	2301      	movs	r3, #1
 80137bc:	e000      	b.n	80137c0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80137be:	2300      	movs	r3, #0
    }
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	20001ba4 	.word	0x20001ba4

080137c8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b08e      	sub	sp, #56	@ 0x38
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	607b      	str	r3, [r7, #4]
 80137d2:	460b      	mov	r3, r1
 80137d4:	817b      	strh	r3, [r7, #10]
 80137d6:	4613      	mov	r3, r2
 80137d8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137e0:	2309      	movs	r3, #9
 80137e2:	e084      	b.n	80138ee <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80137ea:	2301      	movs	r3, #1
 80137ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80137ee:	f107 0320 	add.w	r3, r7, #32
 80137f2:	2200      	movs	r2, #0
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	605a      	str	r2, [r3, #4]
 80137f8:	609a      	str	r2, [r3, #8]
 80137fa:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 80137fc:	f107 0310 	add.w	r3, r7, #16
 8013800:	2200      	movs	r2, #0
 8013802:	601a      	str	r2, [r3, #0]
 8013804:	605a      	str	r2, [r3, #4]
 8013806:	609a      	str	r2, [r3, #8]
 8013808:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 801380a:	2301      	movs	r3, #1
 801380c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801380e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013812:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	b2db      	uxtb	r3, r3
 8013818:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	0a1b      	lsrs	r3, r3, #8
 801381e:	b2db      	uxtb	r3, r3
 8013820:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	0c1b      	lsrs	r3, r3, #16
 8013826:	b2db      	uxtb	r3, r3
 8013828:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	0e1b      	lsrs	r3, r3, #24
 801382e:	b2db      	uxtb	r3, r3
 8013830:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013834:	b2db      	uxtb	r3, r3
 8013836:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801383a:	0a1b      	lsrs	r3, r3, #8
 801383c:	b2db      	uxtb	r3, r3
 801383e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013842:	0c1b      	lsrs	r3, r3, #16
 8013844:	b2db      	uxtb	r3, r3
 8013846:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801384a:	0e1b      	lsrs	r3, r3, #24
 801384c:	b2db      	uxtb	r3, r3
 801384e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013850:	e048      	b.n	80138e4 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8013852:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013854:	b2db      	uxtb	r3, r3
 8013856:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013858:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801385a:	3301      	adds	r3, #1
 801385c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801385e:	f107 0320 	add.w	r3, r7, #32
 8013862:	7a7a      	ldrb	r2, [r7, #9]
 8013864:	f107 0010 	add.w	r0, r7, #16
 8013868:	2110      	movs	r1, #16
 801386a:	f7f8 fce6 	bl	800c23a <SecureElementAesEncrypt>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d001      	beq.n	8013878 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013874:	230e      	movs	r3, #14
 8013876:	e03a      	b.n	80138ee <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013878:	2300      	movs	r3, #0
 801387a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801387e:	e01e      	b.n	80138be <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013880:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013888:	4413      	add	r3, r2
 801388a:	461a      	mov	r2, r3
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	4413      	add	r3, r2
 8013890:	7819      	ldrb	r1, [r3, #0]
 8013892:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013896:	3338      	adds	r3, #56	@ 0x38
 8013898:	443b      	add	r3, r7
 801389a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801389e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80138a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138a6:	4403      	add	r3, r0
 80138a8:	4618      	mov	r0, r3
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	4403      	add	r3, r0
 80138ae:	404a      	eors	r2, r1
 80138b0:	b2d2      	uxtb	r2, r2
 80138b2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80138b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138b8:	3301      	adds	r3, #1
 80138ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80138be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80138c6:	2a10      	cmp	r2, #16
 80138c8:	bfa8      	it	ge
 80138ca:	2210      	movge	r2, #16
 80138cc:	b212      	sxth	r2, r2
 80138ce:	4293      	cmp	r3, r2
 80138d0:	dbd6      	blt.n	8013880 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 80138d2:	897b      	ldrh	r3, [r7, #10]
 80138d4:	3b10      	subs	r3, #16
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80138da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80138de:	3310      	adds	r3, #16
 80138e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80138e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	dcb2      	bgt.n	8013852 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138ec:	2300      	movs	r3, #0
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3738      	adds	r7, #56	@ 0x38
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80138f6:	b490      	push	{r4, r7}
 80138f8:	b082      	sub	sp, #8
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	4604      	mov	r4, r0
 80138fe:	4608      	mov	r0, r1
 8013900:	4611      	mov	r1, r2
 8013902:	461a      	mov	r2, r3
 8013904:	4623      	mov	r3, r4
 8013906:	80fb      	strh	r3, [r7, #6]
 8013908:	4603      	mov	r3, r0
 801390a:	717b      	strb	r3, [r7, #5]
 801390c:	460b      	mov	r3, r1
 801390e:	713b      	strb	r3, [r7, #4]
 8013910:	4613      	mov	r3, r2
 8013912:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801391a:	2309      	movs	r3, #9
 801391c:	e04e      	b.n	80139bc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	2249      	movs	r2, #73	@ 0x49
 8013922:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	3301      	adds	r3, #1
 8013928:	2200      	movs	r2, #0
 801392a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801392c:	69bb      	ldr	r3, [r7, #24]
 801392e:	3302      	adds	r3, #2
 8013930:	2200      	movs	r2, #0
 8013932:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013934:	69bb      	ldr	r3, [r7, #24]
 8013936:	3303      	adds	r3, #3
 8013938:	2200      	movs	r2, #0
 801393a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	3304      	adds	r3, #4
 8013940:	2200      	movs	r2, #0
 8013942:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	3305      	adds	r3, #5
 8013948:	78fa      	ldrb	r2, [r7, #3]
 801394a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	3306      	adds	r3, #6
 8013950:	693a      	ldr	r2, [r7, #16]
 8013952:	b2d2      	uxtb	r2, r2
 8013954:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	0a1a      	lsrs	r2, r3, #8
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	3307      	adds	r3, #7
 801395e:	b2d2      	uxtb	r2, r2
 8013960:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	0c1a      	lsrs	r2, r3, #16
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	3308      	adds	r3, #8
 801396a:	b2d2      	uxtb	r2, r2
 801396c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	0e1a      	lsrs	r2, r3, #24
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	3309      	adds	r3, #9
 8013976:	b2d2      	uxtb	r2, r2
 8013978:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801397a:	69bb      	ldr	r3, [r7, #24]
 801397c:	330a      	adds	r3, #10
 801397e:	697a      	ldr	r2, [r7, #20]
 8013980:	b2d2      	uxtb	r2, r2
 8013982:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	0a1a      	lsrs	r2, r3, #8
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	330b      	adds	r3, #11
 801398c:	b2d2      	uxtb	r2, r2
 801398e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	0c1a      	lsrs	r2, r3, #16
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	330c      	adds	r3, #12
 8013998:	b2d2      	uxtb	r2, r2
 801399a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	0e1a      	lsrs	r2, r3, #24
 80139a0:	69bb      	ldr	r3, [r7, #24]
 80139a2:	330d      	adds	r3, #13
 80139a4:	b2d2      	uxtb	r2, r2
 80139a6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	330e      	adds	r3, #14
 80139ac:	2200      	movs	r2, #0
 80139ae:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	330f      	adds	r3, #15
 80139b4:	88fa      	ldrh	r2, [r7, #6]
 80139b6:	b2d2      	uxtb	r2, r2
 80139b8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3708      	adds	r7, #8
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bc90      	pop	{r4, r7}
 80139c4:	4770      	bx	lr

080139c6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80139c6:	b590      	push	{r4, r7, lr}
 80139c8:	b08b      	sub	sp, #44	@ 0x2c
 80139ca:	af04      	add	r7, sp, #16
 80139cc:	6078      	str	r0, [r7, #4]
 80139ce:	4608      	mov	r0, r1
 80139d0:	4611      	mov	r1, r2
 80139d2:	461a      	mov	r2, r3
 80139d4:	4603      	mov	r3, r0
 80139d6:	807b      	strh	r3, [r7, #2]
 80139d8:	460b      	mov	r3, r1
 80139da:	707b      	strb	r3, [r7, #1]
 80139dc:	4613      	mov	r3, r2
 80139de:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d002      	beq.n	80139ec <ComputeCmacB0+0x26>
 80139e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d101      	bne.n	80139f0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139ec:	2309      	movs	r3, #9
 80139ee:	e024      	b.n	8013a3a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80139f0:	887b      	ldrh	r3, [r7, #2]
 80139f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139f6:	d901      	bls.n	80139fc <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80139f8:	230d      	movs	r3, #13
 80139fa:	e01e      	b.n	8013a3a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80139fc:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013a00:	783a      	ldrb	r2, [r7, #0]
 8013a02:	7879      	ldrb	r1, [r7, #1]
 8013a04:	8878      	ldrh	r0, [r7, #2]
 8013a06:	f107 0308 	add.w	r3, r7, #8
 8013a0a:	9302      	str	r3, [sp, #8]
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0e:	9301      	str	r3, [sp, #4]
 8013a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	4623      	mov	r3, r4
 8013a16:	f7ff ff6e 	bl	80138f6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013a1a:	7879      	ldrb	r1, [r7, #1]
 8013a1c:	887a      	ldrh	r2, [r7, #2]
 8013a1e:	f107 0008 	add.w	r0, r7, #8
 8013a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	460b      	mov	r3, r1
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	f7f8 fbb9 	bl	800c1a0 <SecureElementComputeAesCmac>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d001      	beq.n	8013a38 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a34:	230e      	movs	r3, #14
 8013a36:	e000      	b.n	8013a3a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	371c      	adds	r7, #28
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd90      	pop	{r4, r7, pc}

08013a42 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013a42:	b590      	push	{r4, r7, lr}
 8013a44:	b0cd      	sub	sp, #308	@ 0x134
 8013a46:	af04      	add	r7, sp, #16
 8013a48:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013a4c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013a50:	6020      	str	r0, [r4, #0]
 8013a52:	460c      	mov	r4, r1
 8013a54:	4610      	mov	r0, r2
 8013a56:	4619      	mov	r1, r3
 8013a58:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a5c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a60:	4622      	mov	r2, r4
 8013a62:	801a      	strh	r2, [r3, #0]
 8013a64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a68:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	701a      	strb	r2, [r3, #0]
 8013a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013a78:	460a      	mov	r2, r1
 8013a7a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013a7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d101      	bne.n	8013a8e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a8a:	2309      	movs	r3, #9
 8013a8c:	e063      	b.n	8013b56 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013a8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a92:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a9c:	d901      	bls.n	8013aa2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013a9e:	230d      	movs	r3, #13
 8013aa0:	e059      	b.n	8013b56 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013aa2:	f107 030c 	add.w	r3, r7, #12
 8013aa6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013aaa:	2100      	movs	r1, #0
 8013aac:	4618      	mov	r0, r3
 8013aae:	f003 fb29 	bl	8017104 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013ab2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013ab6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013aba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013abe:	781a      	ldrb	r2, [r3, #0]
 8013ac0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ac4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013ac8:	7819      	ldrb	r1, [r3, #0]
 8013aca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ace:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013ad2:	8818      	ldrh	r0, [r3, #0]
 8013ad4:	f107 030c 	add.w	r3, r7, #12
 8013ad8:	9302      	str	r3, [sp, #8]
 8013ada:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013ade:	9301      	str	r3, [sp, #4]
 8013ae0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	4623      	mov	r3, r4
 8013ae8:	f7ff ff05 	bl	80138f6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013aec:	f107 030c 	add.w	r3, r7, #12
 8013af0:	3310      	adds	r3, #16
 8013af2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013af6:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013afa:	8812      	ldrh	r2, [r2, #0]
 8013afc:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013b00:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013b04:	6809      	ldr	r1, [r1, #0]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f003 fac1 	bl	801708e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013b0c:	2306      	movs	r3, #6
 8013b0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013b12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b16:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b1a:	881b      	ldrh	r3, [r3, #0]
 8013b1c:	3310      	adds	r3, #16
 8013b1e:	b299      	uxth	r1, r3
 8013b20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b24:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	f107 000c 	add.w	r0, r7, #12
 8013b2e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013b32:	f7f8 fb53 	bl	800c1dc <SecureElementVerifyAesCmac>
 8013b36:	4603      	mov	r3, r0
 8013b38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d101      	bne.n	8013b48 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013b44:	2300      	movs	r3, #0
 8013b46:	e006      	b.n	8013b56 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d101      	bne.n	8013b54 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013b50:	2301      	movs	r3, #1
 8013b52:	e000      	b.n	8013b56 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b54:	230e      	movs	r3, #14
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd90      	pop	{r4, r7, pc}

08013b60 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013b60:	b480      	push	{r7}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	4603      	mov	r3, r0
 8013b68:	6039      	str	r1, [r7, #0]
 8013b6a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	73fb      	strb	r3, [r7, #15]
 8013b70:	e011      	b.n	8013b96 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	4a0c      	ldr	r2, [pc, #48]	@ (8013ba8 <GetKeyAddrItem+0x48>)
 8013b76:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013b7a:	79fa      	ldrb	r2, [r7, #7]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d107      	bne.n	8013b90 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013b80:	7bfb      	ldrb	r3, [r7, #15]
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	4a08      	ldr	r2, [pc, #32]	@ (8013ba8 <GetKeyAddrItem+0x48>)
 8013b86:	441a      	add	r2, r3
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e006      	b.n	8013b9e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b90:	7bfb      	ldrb	r3, [r7, #15]
 8013b92:	3301      	adds	r3, #1
 8013b94:	73fb      	strb	r3, [r7, #15]
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d9ea      	bls.n	8013b72 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013b9c:	230b      	movs	r3, #11
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3714      	adds	r7, #20
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bc80      	pop	{r7}
 8013ba6:	4770      	bx	lr
 8013ba8:	20000108 	.word	0x20000108

08013bac <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b088      	sub	sp, #32
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60b9      	str	r1, [r7, #8]
 8013bb4:	607a      	str	r2, [r7, #4]
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	4603      	mov	r3, r0
 8013bba:	73fb      	strb	r3, [r7, #15]
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013bc0:	f107 0310 	add.w	r3, r7, #16
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	601a      	str	r2, [r3, #0]
 8013bc8:	605a      	str	r2, [r3, #4]
 8013bca:	609a      	str	r2, [r3, #8]
 8013bcc:	60da      	str	r2, [r3, #12]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013bce:	7bfb      	ldrb	r3, [r7, #15]
 8013bd0:	2b02      	cmp	r3, #2
 8013bd2:	d002      	beq.n	8013bda <DeriveSessionKey10x+0x2e>
 8013bd4:	2b03      	cmp	r3, #3
 8013bd6:	d003      	beq.n	8013be0 <DeriveSessionKey10x+0x34>
 8013bd8:	e005      	b.n	8013be6 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	743b      	strb	r3, [r7, #16]
            break;
 8013bde:	e004      	b.n	8013bea <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013be0:	2302      	movs	r3, #2
 8013be2:	743b      	strb	r3, [r7, #16]
            break;
 8013be4:	e001      	b.n	8013bea <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013be6:	230a      	movs	r3, #10
 8013be8:	e02a      	b.n	8013c40 <DeriveSessionKey10x+0x94>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	0a1b      	lsrs	r3, r3, #8
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	0c1b      	lsrs	r3, r3, #16
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	0a1b      	lsrs	r3, r3, #8
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	0c1b      	lsrs	r3, r3, #16
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013c16:	89bb      	ldrh	r3, [r7, #12]
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013c1c:	89bb      	ldrh	r3, [r7, #12]
 8013c1e:	0a1b      	lsrs	r3, r3, #8
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013c26:	7bfa      	ldrb	r2, [r7, #15]
 8013c28:	f107 0310 	add.w	r3, r7, #16
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f8 fb6a 	bl	800c308 <SecureElementDeriveAndStoreKey>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013c3a:	230e      	movs	r3, #14
 8013c3c:	e000      	b.n	8013c40 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3720      	adds	r7, #32
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	4603      	mov	r3, r0
 8013c50:	6039      	str	r1, [r7, #0]
 8013c52:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d101      	bne.n	8013c5e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013c5a:	2309      	movs	r3, #9
 8013c5c:	e03b      	b.n	8013cd6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013c5e:	79fb      	ldrb	r3, [r7, #7]
 8013c60:	3b01      	subs	r3, #1
 8013c62:	2b03      	cmp	r3, #3
 8013c64:	d834      	bhi.n	8013cd0 <GetLastFcntDown+0x88>
 8013c66:	a201      	add	r2, pc, #4	@ (adr r2, 8013c6c <GetLastFcntDown+0x24>)
 8013c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c6c:	08013c7d 	.word	0x08013c7d
 8013c70:	08013c95 	.word	0x08013c95
 8013c74:	08013cad 	.word	0x08013cad
 8013c78:	08013cc5 	.word	0x08013cc5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013c7c:	4b18      	ldr	r3, [pc, #96]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	691a      	ldr	r2, [r3, #16]
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013c86:	4b16      	ldr	r3, [pc, #88]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	4b15      	ldr	r3, [pc, #84]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	6912      	ldr	r2, [r2, #16]
 8013c90:	621a      	str	r2, [r3, #32]
            break;
 8013c92:	e01f      	b.n	8013cd4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013c94:	4b12      	ldr	r3, [pc, #72]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	695a      	ldr	r2, [r3, #20]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013c9e:	4b10      	ldr	r3, [pc, #64]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	6952      	ldr	r2, [r2, #20]
 8013ca8:	621a      	str	r2, [r3, #32]
            break;
 8013caa:	e013      	b.n	8013cd4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013cac:	4b0c      	ldr	r3, [pc, #48]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	699a      	ldr	r2, [r3, #24]
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	4b09      	ldr	r3, [pc, #36]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	6992      	ldr	r2, [r2, #24]
 8013cc0:	621a      	str	r2, [r3, #32]
            break;
 8013cc2:	e007      	b.n	8013cd4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013cc4:	4b06      	ldr	r3, [pc, #24]	@ (8013ce0 <GetLastFcntDown+0x98>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	69da      	ldr	r2, [r3, #28]
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	601a      	str	r2, [r3, #0]
            break;
 8013cce:	e001      	b.n	8013cd4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013cd0:	2305      	movs	r3, #5
 8013cd2:	e000      	b.n	8013cd6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bc80      	pop	{r7}
 8013cde:	4770      	bx	lr
 8013ce0:	20001bc8 	.word	0x20001bc8

08013ce4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	6039      	str	r1, [r7, #0]
 8013cee:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013cf4:	f107 020c 	add.w	r2, r7, #12
 8013cf8:	79fb      	ldrb	r3, [r7, #7]
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7ff ffa3 	bl	8013c48 <GetLastFcntDown>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d001      	beq.n	8013d0c <CheckFCntDown+0x28>
    {
        return false;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e00a      	b.n	8013d22 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	683a      	ldr	r2, [r7, #0]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d803      	bhi.n	8013d1c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013d14:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1a:	d101      	bne.n	8013d20 <CheckFCntDown+0x3c>
    {
        return true;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	e000      	b.n	8013d22 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013d20:	2300      	movs	r3, #0
    }
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3710      	adds	r7, #16
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
	...

08013d2c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	6039      	str	r1, [r7, #0]
 8013d36:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013d38:	79fb      	ldrb	r3, [r7, #7]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	2b03      	cmp	r3, #3
 8013d3e:	d81f      	bhi.n	8013d80 <UpdateFCntDown+0x54>
 8013d40:	a201      	add	r2, pc, #4	@ (adr r2, 8013d48 <UpdateFCntDown+0x1c>)
 8013d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d46:	bf00      	nop
 8013d48:	08013d59 	.word	0x08013d59
 8013d4c:	08013d63 	.word	0x08013d63
 8013d50:	08013d6d 	.word	0x08013d6d
 8013d54:	08013d77 	.word	0x08013d77
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013d58:	4b0c      	ldr	r3, [pc, #48]	@ (8013d8c <UpdateFCntDown+0x60>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	683a      	ldr	r2, [r7, #0]
 8013d5e:	611a      	str	r2, [r3, #16]
            break;
 8013d60:	e00f      	b.n	8013d82 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013d62:	4b0a      	ldr	r3, [pc, #40]	@ (8013d8c <UpdateFCntDown+0x60>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	615a      	str	r2, [r3, #20]
            break;
 8013d6a:	e00a      	b.n	8013d82 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013d6c:	4b07      	ldr	r3, [pc, #28]	@ (8013d8c <UpdateFCntDown+0x60>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	619a      	str	r2, [r3, #24]
            break;
 8013d74:	e005      	b.n	8013d82 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013d76:	4b05      	ldr	r3, [pc, #20]	@ (8013d8c <UpdateFCntDown+0x60>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	683a      	ldr	r2, [r7, #0]
 8013d7c:	61da      	str	r2, [r3, #28]
            break;
 8013d7e:	e000      	b.n	8013d82 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013d80:	bf00      	nop
    }
}
 8013d82:	bf00      	nop
 8013d84:	370c      	adds	r7, #12
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bc80      	pop	{r7}
 8013d8a:	4770      	bx	lr
 8013d8c:	20001bc8 	.word	0x20001bc8

08013d90 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013d96:	4b18      	ldr	r3, [pc, #96]	@ (8013df8 <ResetFCnts+0x68>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013d9e:	4b16      	ldr	r3, [pc, #88]	@ (8013df8 <ResetFCnts+0x68>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f04f 32ff 	mov.w	r2, #4294967295
 8013da6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013da8:	4b13      	ldr	r3, [pc, #76]	@ (8013df8 <ResetFCnts+0x68>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	f04f 32ff 	mov.w	r2, #4294967295
 8013db0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013db2:	4b11      	ldr	r3, [pc, #68]	@ (8013df8 <ResetFCnts+0x68>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	f04f 32ff 	mov.w	r2, #4294967295
 8013dba:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8013df8 <ResetFCnts+0x68>)
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8013df8 <ResetFCnts+0x68>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	6992      	ldr	r2, [r2, #24]
 8013dc6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013dc8:	2300      	movs	r3, #0
 8013dca:	607b      	str	r3, [r7, #4]
 8013dcc:	e00b      	b.n	8013de6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013dce:	4b0a      	ldr	r3, [pc, #40]	@ (8013df8 <ResetFCnts+0x68>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	3306      	adds	r3, #6
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	4413      	add	r3, r2
 8013dda:	f04f 32ff 	mov.w	r2, #4294967295
 8013dde:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3301      	adds	r3, #1
 8013de4:	607b      	str	r3, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	ddf0      	ble.n	8013dce <ResetFCnts+0x3e>
    }
}
 8013dec:	bf00      	nop
 8013dee:	bf00      	nop
 8013df0:	370c      	adds	r7, #12
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bc80      	pop	{r7}
 8013df6:	4770      	bx	lr
 8013df8:	20001bc8 	.word	0x20001bc8

08013dfc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d101      	bne.n	8013e0e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013e0a:	2308      	movs	r3, #8
 8013e0c:	e01c      	b.n	8013e48 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013e0e:	4a10      	ldr	r2, [pc, #64]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013e14:	4b0e      	ldr	r3, [pc, #56]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2228      	movs	r2, #40	@ 0x28
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f003 f971 	bl	8017104 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013e22:	4b0b      	ldr	r3, [pc, #44]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2201      	movs	r2, #1
 8013e28:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013e2a:	4b09      	ldr	r3, [pc, #36]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013e32:	4b07      	ldr	r3, [pc, #28]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	2201      	movs	r2, #1
 8013e38:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013e3a:	4b05      	ldr	r3, [pc, #20]	@ (8013e50 <LoRaMacCryptoInit+0x54>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013e42:	f7ff ffa5 	bl	8013d90 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013e46:	2300      	movs	r3, #0
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	20001bc8 	.word	0x20001bc8

08013e54 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013e54:	b480      	push	{r7}
 8013e56:	b083      	sub	sp, #12
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013e5c:	4b04      	ldr	r3, [pc, #16]	@ (8013e70 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	370c      	adds	r7, #12
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bc80      	pop	{r7}
 8013e6e:	4770      	bx	lr
 8013e70:	20001bc8 	.word	0x20001bc8

08013e74 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013e74:	b480      	push	{r7}
 8013e76:	b083      	sub	sp, #12
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d101      	bne.n	8013e86 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e82:	2309      	movs	r3, #9
 8013e84:	e006      	b.n	8013e94 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013e86:	4b06      	ldr	r3, [pc, #24]	@ (8013ea0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	1c5a      	adds	r2, r3, #1
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013e92:	2300      	movs	r3, #0
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	370c      	adds	r7, #12
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bc80      	pop	{r7}
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	20001bc8 	.word	0x20001bc8

08013ea4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b088      	sub	sp, #32
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	4603      	mov	r3, r0
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013eba:	2312      	movs	r3, #18
 8013ebc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d101      	bne.n	8013ec8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ec4:	2309      	movs	r3, #9
 8013ec6:	e035      	b.n	8013f34 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013ec8:	f107 0214 	add.w	r2, r7, #20
 8013ecc:	7bfb      	ldrb	r3, [r7, #15]
 8013ece:	4611      	mov	r1, r2
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7ff feb9 	bl	8013c48 <GetLastFcntDown>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013eda:	7efb      	ldrb	r3, [r7, #27]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d001      	beq.n	8013ee4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013ee0:	7efb      	ldrb	r3, [r7, #27]
 8013ee2:	e027      	b.n	8013f34 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eea:	d103      	bne.n	8013ef4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	601a      	str	r2, [r3, #0]
 8013ef2:	e01e      	b.n	8013f32 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	68ba      	ldr	r2, [r7, #8]
 8013efa:	1ad3      	subs	r3, r2, r3
 8013efc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	dd05      	ble.n	8013f10 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013f04:	697a      	ldr	r2, [r7, #20]
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	441a      	add	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	e010      	b.n	8013f32 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d104      	bne.n	8013f20 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013f1c:	2307      	movs	r3, #7
 8013f1e:	e009      	b.n	8013f34 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	0c1b      	lsrs	r3, r3, #16
 8013f24:	041b      	lsls	r3, r3, #16
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	4413      	add	r3, r2
 8013f2a:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f32:	2300      	movs	r3, #0
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3720      	adds	r7, #32
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b085      	sub	sp, #20
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f4a:	2309      	movs	r3, #9
 8013f4c:	e017      	b.n	8013f7e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f4e:	2300      	movs	r3, #0
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	e010      	b.n	8013f76 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013f54:	4b0c      	ldr	r3, [pc, #48]	@ (8013f88 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013f56:	6819      	ldr	r1, [r3, #0]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	222c      	movs	r2, #44	@ 0x2c
 8013f5c:	fb02 f303 	mul.w	r3, r2, r3
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4413      	add	r3, r2
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	3206      	adds	r2, #6
 8013f68:	0092      	lsls	r2, r2, #2
 8013f6a:	440a      	add	r2, r1
 8013f6c:	3204      	adds	r2, #4
 8013f6e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	3301      	adds	r3, #1
 8013f74:	60fb      	str	r3, [r7, #12]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	ddeb      	ble.n	8013f54 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3714      	adds	r7, #20
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bc80      	pop	{r7}
 8013f86:	4770      	bx	lr
 8013f88:	20001bc8 	.word	0x20001bc8

08013f8c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	4603      	mov	r3, r0
 8013f94:	6039      	str	r1, [r7, #0]
 8013f96:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013f98:	79fb      	ldrb	r3, [r7, #7]
 8013f9a:	6839      	ldr	r1, [r7, #0]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7f8 f8a1 	bl	800c0e4 <SecureElementSetKey>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d001      	beq.n	8013fac <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fa8:	230e      	movs	r3, #14
 8013faa:	e018      	b.n	8013fde <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013fac:	79fb      	ldrb	r3, [r7, #7]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d114      	bne.n	8013fdc <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8013fe8 <LoRaMacCryptoSetKey+0x5c>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	789b      	ldrb	r3, [r3, #2]
 8013fb8:	79fa      	ldrb	r2, [r7, #7]
 8013fba:	4611      	mov	r1, r2
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f000 fa35 	bl	801442c <LoRaMacCryptoDeriveMcRootKey>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d001      	beq.n	8013fcc <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fc8:	230e      	movs	r3, #14
 8013fca:	e008      	b.n	8013fde <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013fcc:	2004      	movs	r0, #4
 8013fce:	f000 fa57 	bl	8014480 <LoRaMacCryptoDeriveMcKEKey>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d001      	beq.n	8013fdc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fd8:	230e      	movs	r3, #14
 8013fda:	e000      	b.n	8013fde <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3708      	adds	r7, #8
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	20001bc8 	.word	0x20001bc8

08013fec <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b086      	sub	sp, #24
 8013ff0:	af02      	add	r7, sp, #8
 8013ff2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d101      	bne.n	8013ffe <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ffa:	2309      	movs	r3, #9
 8013ffc:	e02d      	b.n	801405a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013ffe:	2301      	movs	r3, #1
 8014000:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014002:	4b18      	ldr	r3, [pc, #96]	@ (8014064 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	889a      	ldrh	r2, [r3, #4]
 8014008:	3201      	adds	r2, #1
 801400a:	b292      	uxth	r2, r2
 801400c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801400e:	4b15      	ldr	r3, [pc, #84]	@ (8014064 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	889a      	ldrh	r2, [r3, #4]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f000 fc10 	bl	801483e <LoRaMacSerializerJoinRequest>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d001      	beq.n	8014028 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014024:	2310      	movs	r3, #16
 8014026:	e018      	b.n	801405a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6819      	ldr	r1, [r3, #0]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	3318      	adds	r3, #24
 8014030:	7bfa      	ldrb	r2, [r7, #15]
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	4613      	mov	r3, r2
 8014036:	2213      	movs	r2, #19
 8014038:	2000      	movs	r0, #0
 801403a:	f7f8 f8b1 	bl	800c1a0 <SecureElementComputeAesCmac>
 801403e:	4603      	mov	r3, r0
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014044:	230e      	movs	r3, #14
 8014046:	e008      	b.n	801405a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fbf8 	bl	801483e <LoRaMacSerializerJoinRequest>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d001      	beq.n	8014058 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014054:	2310      	movs	r3, #16
 8014056:	e000      	b.n	801405a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20001bc8 	.word	0x20001bc8

08014068 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014068:	b590      	push	{r4, r7, lr}
 801406a:	b097      	sub	sp, #92	@ 0x5c
 801406c:	af04      	add	r7, sp, #16
 801406e:	4603      	mov	r3, r0
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
 8014074:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d002      	beq.n	8014082 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d101      	bne.n	8014086 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014082:	2309      	movs	r3, #9
 8014084:	e0bb      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014086:	2312      	movs	r3, #18
 8014088:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801408c:	f107 0318 	add.w	r3, r7, #24
 8014090:	2221      	movs	r2, #33	@ 0x21
 8014092:	2100      	movs	r1, #0
 8014094:	4618      	mov	r0, r3
 8014096:	f008 fb24 	bl	801c6e2 <memset>
    uint8_t versionMinor         = 0;
 801409a:	2300      	movs	r3, #0
 801409c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801409e:	4b5a      	ldr	r3, [pc, #360]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	889b      	ldrh	r3, [r3, #4]
 80140a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681c      	ldr	r4, [r3, #0]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	791b      	ldrb	r3, [r3, #4]
 80140b0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80140b4:	7bf8      	ldrb	r0, [r7, #15]
 80140b6:	f107 0217 	add.w	r2, r7, #23
 80140ba:	9202      	str	r2, [sp, #8]
 80140bc:	f107 0218 	add.w	r2, r7, #24
 80140c0:	9201      	str	r2, [sp, #4]
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	4623      	mov	r3, r4
 80140c6:	460a      	mov	r2, r1
 80140c8:	68b9      	ldr	r1, [r7, #8]
 80140ca:	f7f8 f95c 	bl	800c386 <SecureElementProcessJoinAccept>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d001      	beq.n	80140d8 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140d4:	230e      	movs	r3, #14
 80140d6:	e092      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6818      	ldr	r0, [r3, #0]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	791b      	ldrb	r3, [r3, #4]
 80140e0:	461a      	mov	r2, r3
 80140e2:	f107 0318 	add.w	r3, r7, #24
 80140e6:	4619      	mov	r1, r3
 80140e8:	f002 ffd1 	bl	801708e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 f9e9 	bl	80144c4 <LoRaMacParserJoinAccept>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80140f8:	230f      	movs	r3, #15
 80140fa:	e080      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	799b      	ldrb	r3, [r3, #6]
 8014100:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	79db      	ldrb	r3, [r3, #7]
 8014106:	021b      	lsls	r3, r3, #8
 8014108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801410a:	4313      	orrs	r3, r2
 801410c:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	7a1b      	ldrb	r3, [r3, #8]
 8014112:	041b      	lsls	r3, r3, #16
 8014114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014116:	4313      	orrs	r3, r2
 8014118:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801411a:	4b3b      	ldr	r3, [pc, #236]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	689b      	ldr	r3, [r3, #8]
 8014120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014122:	429a      	cmp	r2, r3
 8014124:	d010      	beq.n	8014148 <LoRaMacCryptoHandleJoinAccept+0xe0>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014126:	4b38      	ldr	r3, [pc, #224]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801412c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801412e:	7dfb      	ldrb	r3, [r7, #23]
 8014130:	2100      	movs	r1, #0
 8014132:	4618      	mov	r0, r3
 8014134:	f000 f97a 	bl	801442c <LoRaMacCryptoDeriveMcRootKey>
 8014138:	4603      	mov	r3, r0
 801413a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801413e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014142:	2b00      	cmp	r3, #0
 8014144:	d005      	beq.n	8014152 <LoRaMacCryptoHandleJoinAccept+0xea>
 8014146:	e001      	b.n	801414c <LoRaMacCryptoHandleJoinAccept+0xe4>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014148:	2303      	movs	r3, #3
 801414a:	e058      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        return retval;
 801414c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014150:	e055      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014152:	2004      	movs	r0, #4
 8014154:	f000 f994 	bl	8014480 <LoRaMacCryptoDeriveMcKEKey>
 8014158:	4603      	mov	r3, r0
 801415a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801415e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014162:	2b00      	cmp	r3, #0
 8014164:	d002      	beq.n	801416c <LoRaMacCryptoHandleJoinAccept+0x104>
    {
        return retval;
 8014166:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801416a:	e048      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	7a5b      	ldrb	r3, [r3, #9]
 8014170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	7a9b      	ldrb	r3, [r3, #10]
 8014176:	021b      	lsls	r3, r3, #8
 8014178:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801417a:	4313      	orrs	r3, r2
 801417c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	7adb      	ldrb	r3, [r3, #11]
 8014182:	041b      	lsls	r3, r3, #16
 8014184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014186:	4313      	orrs	r3, r2
 8014188:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801418a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801418e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014192:	2003      	movs	r0, #3
 8014194:	f7ff fd0a 	bl	8013bac <DeriveSessionKey10x>
 8014198:	4603      	mov	r3, r0
 801419a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801419e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d002      	beq.n	80141ac <LoRaMacCryptoHandleJoinAccept+0x144>
        {
            return retval;
 80141a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141aa:	e028      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80141ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80141b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141b4:	2002      	movs	r0, #2
 80141b6:	f7ff fcf9 	bl	8013bac <DeriveSessionKey10x>
 80141ba:	4603      	mov	r3, r0
 80141bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d002      	beq.n	80141ce <LoRaMacCryptoHandleJoinAccept+0x166>
        {
            return retval;
 80141c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141cc:	e017      	b.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x196>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80141ce:	4b0e      	ldr	r3, [pc, #56]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	7dfa      	ldrb	r2, [r7, #23]
 80141d4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80141d6:	4b0c      	ldr	r3, [pc, #48]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2200      	movs	r2, #0
 80141dc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80141de:	4b0a      	ldr	r3, [pc, #40]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	f04f 32ff 	mov.w	r2, #4294967295
 80141e6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80141e8:	4b07      	ldr	r3, [pc, #28]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f04f 32ff 	mov.w	r2, #4294967295
 80141f0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80141f2:	4b05      	ldr	r3, [pc, #20]	@ (8014208 <LoRaMacCryptoHandleJoinAccept+0x1a0>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	f04f 32ff 	mov.w	r2, #4294967295
 80141fa:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80141fc:	2300      	movs	r3, #0
}
 80141fe:	4618      	mov	r0, r3
 8014200:	374c      	adds	r7, #76	@ 0x4c
 8014202:	46bd      	mov	sp, r7
 8014204:	bd90      	pop	{r4, r7, pc}
 8014206:	bf00      	nop
 8014208:	20001bc8 	.word	0x20001bc8

0801420c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801420c:	b590      	push	{r4, r7, lr}
 801420e:	b08b      	sub	sp, #44	@ 0x2c
 8014210:	af04      	add	r7, sp, #16
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	607b      	str	r3, [r7, #4]
 8014216:	460b      	mov	r3, r1
 8014218:	72fb      	strb	r3, [r7, #11]
 801421a:	4613      	mov	r3, r2
 801421c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801421e:	2312      	movs	r3, #18
 8014220:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014222:	2303      	movs	r3, #3
 8014224:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d101      	bne.n	8014230 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801422c:	2309      	movs	r3, #9
 801422e:	e05e      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014230:	4b31      	ldr	r3, [pc, #196]	@ (80142f8 <LoRaMacCryptoSecureMessage+0xec>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	429a      	cmp	r2, r3
 801423a:	d201      	bcs.n	8014240 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801423c:	2306      	movs	r3, #6
 801423e:	e056      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d101      	bne.n	801424e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801424a:	2302      	movs	r3, #2
 801424c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801424e:	4b2a      	ldr	r3, [pc, #168]	@ (80142f8 <LoRaMacCryptoSecureMessage+0xec>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	429a      	cmp	r2, r3
 8014258:	d916      	bls.n	8014288 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014264:	b219      	sxth	r1, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	689c      	ldr	r4, [r3, #8]
 801426a:	7dfa      	ldrb	r2, [r7, #23]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	9301      	str	r3, [sp, #4]
 8014270:	2300      	movs	r3, #0
 8014272:	9300      	str	r3, [sp, #0]
 8014274:	4623      	mov	r3, r4
 8014276:	f7ff faa7 	bl	80137c8 <PayloadEncrypt>
 801427a:	4603      	mov	r3, r0
 801427c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801427e:	7dbb      	ldrb	r3, [r7, #22]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d001      	beq.n	8014288 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014284:	7dbb      	ldrb	r3, [r7, #22]
 8014286:	e032      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 fb5a 	bl	8014942 <LoRaMacSerializerData>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014294:	2310      	movs	r3, #16
 8014296:	e02a      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014298:	2302      	movs	r3, #2
 801429a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6818      	ldr	r0, [r3, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	791b      	ldrb	r3, [r3, #4]
 80142a4:	3b04      	subs	r3, #4
 80142a6:	b299      	uxth	r1, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	322c      	adds	r2, #44	@ 0x2c
 80142b0:	7dfc      	ldrb	r4, [r7, #23]
 80142b2:	9203      	str	r2, [sp, #12]
 80142b4:	68fa      	ldr	r2, [r7, #12]
 80142b6:	9202      	str	r2, [sp, #8]
 80142b8:	9301      	str	r3, [sp, #4]
 80142ba:	2300      	movs	r3, #0
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	2300      	movs	r3, #0
 80142c0:	4622      	mov	r2, r4
 80142c2:	f7ff fb80 	bl	80139c6 <ComputeCmacB0>
 80142c6:	4603      	mov	r3, r0
 80142c8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142ca:	7dbb      	ldrb	r3, [r7, #22]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80142d0:	7dbb      	ldrb	r3, [r7, #22]
 80142d2:	e00c      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 fb34 	bl	8014942 <LoRaMacSerializerData>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d001      	beq.n	80142e4 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80142e0:	2310      	movs	r3, #16
 80142e2:	e004      	b.n	80142ee <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80142e4:	4b04      	ldr	r3, [pc, #16]	@ (80142f8 <LoRaMacCryptoSecureMessage+0xec>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	371c      	adds	r7, #28
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd90      	pop	{r4, r7, pc}
 80142f6:	bf00      	nop
 80142f8:	20001bc8 	.word	0x20001bc8

080142fc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80142fc:	b590      	push	{r4, r7, lr}
 80142fe:	b08b      	sub	sp, #44	@ 0x2c
 8014300:	af04      	add	r7, sp, #16
 8014302:	60b9      	str	r1, [r7, #8]
 8014304:	607b      	str	r3, [r7, #4]
 8014306:	4603      	mov	r3, r0
 8014308:	73fb      	strb	r3, [r7, #15]
 801430a:	4613      	mov	r3, r2
 801430c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014310:	2b00      	cmp	r3, #0
 8014312:	d101      	bne.n	8014318 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014314:	2309      	movs	r3, #9
 8014316:	e083      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014318:	7bbb      	ldrb	r3, [r7, #14]
 801431a:	6879      	ldr	r1, [r7, #4]
 801431c:	4618      	mov	r0, r3
 801431e:	f7ff fce1 	bl	8013ce4 <CheckFCntDown>
 8014322:	4603      	mov	r3, r0
 8014324:	f083 0301 	eor.w	r3, r3, #1
 8014328:	b2db      	uxtb	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	d001      	beq.n	8014332 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801432e:	2306      	movs	r3, #6
 8014330:	e076      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014332:	2312      	movs	r3, #18
 8014334:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014336:	2303      	movs	r3, #3
 8014338:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801433a:	2302      	movs	r3, #2
 801433c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801433e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014340:	f000 f98b 	bl	801465a <LoRaMacParserData>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	d001      	beq.n	801434e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801434a:	230f      	movs	r3, #15
 801434c:	e068      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801434e:	f107 0210 	add.w	r2, r7, #16
 8014352:	7bfb      	ldrb	r3, [r7, #15]
 8014354:	4611      	mov	r1, r2
 8014356:	4618      	mov	r0, r3
 8014358:	f7ff fc02 	bl	8013b60 <GetKeyAddrItem>
 801435c:	4603      	mov	r3, r0
 801435e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014360:	7d7b      	ldrb	r3, [r7, #21]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d001      	beq.n	801436a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014366:	7d7b      	ldrb	r3, [r7, #21]
 8014368:	e05a      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	785b      	ldrb	r3, [r3, #1]
 801436e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	789b      	ldrb	r3, [r3, #2]
 8014374:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014378:	689b      	ldr	r3, [r3, #8]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	429a      	cmp	r2, r3
 801437e:	d001      	beq.n	8014384 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014380:	2302      	movs	r3, #2
 8014382:	e04d      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014386:	7b1b      	ldrb	r3, [r3, #12]
 8014388:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	bf14      	ite	ne
 8014392:	2301      	movne	r3, #1
 8014394:	2300      	moveq	r3, #0
 8014396:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014398:	4b23      	ldr	r3, [pc, #140]	@ (8014428 <LoRaMacCryptoUnsecureMessage+0x12c>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	789b      	ldrb	r3, [r3, #2]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80143a2:	2300      	movs	r3, #0
 80143a4:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80143a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a8:	6818      	ldr	r0, [r3, #0]
 80143aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ac:	791b      	ldrb	r3, [r3, #4]
 80143ae:	3b04      	subs	r3, #4
 80143b0:	b299      	uxth	r1, r3
 80143b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143b6:	7dbc      	ldrb	r4, [r7, #22]
 80143b8:	7d3a      	ldrb	r2, [r7, #20]
 80143ba:	9303      	str	r3, [sp, #12]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	9302      	str	r3, [sp, #8]
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	2301      	movs	r3, #1
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	4623      	mov	r3, r4
 80143ca:	f7ff fb3a 	bl	8013a42 <VerifyCmacB0>
 80143ce:	4603      	mov	r3, r0
 80143d0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80143d2:	7d7b      	ldrb	r3, [r7, #21]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80143d8:	7d7b      	ldrb	r3, [r7, #21]
 80143da:	e021      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80143dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d101      	bne.n	80143ea <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80143e6:	2302      	movs	r3, #2
 80143e8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80143ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80143ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143f4:	b219      	sxth	r1, r3
 80143f6:	7dfa      	ldrb	r2, [r7, #23]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	9301      	str	r3, [sp, #4]
 80143fc:	2301      	movs	r3, #1
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	f7ff f9e1 	bl	80137c8 <PayloadEncrypt>
 8014406:	4603      	mov	r3, r0
 8014408:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801440a:	7d7b      	ldrb	r3, [r7, #21]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d001      	beq.n	8014414 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014410:	7d7b      	ldrb	r3, [r7, #21]
 8014412:	e005      	b.n	8014420 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014414:	7bbb      	ldrb	r3, [r7, #14]
 8014416:	6879      	ldr	r1, [r7, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff fc87 	bl	8013d2c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801441e:	2300      	movs	r3, #0
}
 8014420:	4618      	mov	r0, r3
 8014422:	371c      	adds	r7, #28
 8014424:	46bd      	mov	sp, r7
 8014426:	bd90      	pop	{r4, r7, pc}
 8014428:	20001bc8 	.word	0x20001bc8

0801442c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b086      	sub	sp, #24
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	460a      	mov	r2, r1
 8014436:	71fb      	strb	r3, [r7, #7]
 8014438:	4613      	mov	r3, r2
 801443a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801443c:	79bb      	ldrb	r3, [r7, #6]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d001      	beq.n	8014446 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014442:	230a      	movs	r3, #10
 8014444:	e018      	b.n	8014478 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }
    uint8_t compBase[16] = { 0 };
 8014446:	f107 0308 	add.w	r3, r7, #8
 801444a:	2200      	movs	r2, #0
 801444c:	601a      	str	r2, [r3, #0]
 801444e:	605a      	str	r2, [r3, #4]
 8014450:	609a      	str	r2, [r3, #8]
 8014452:	60da      	str	r2, [r3, #12]

    if( versionMinor == 1 )
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	2b01      	cmp	r3, #1
 8014458:	d101      	bne.n	801445e <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        compBase[0] = 0x20;
 801445a:	2320      	movs	r3, #32
 801445c:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801445e:	79b9      	ldrb	r1, [r7, #6]
 8014460:	f107 0308 	add.w	r3, r7, #8
 8014464:	2204      	movs	r2, #4
 8014466:	4618      	mov	r0, r3
 8014468:	f7f7 ff4e 	bl	800c308 <SecureElementDeriveAndStoreKey>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d001      	beq.n	8014476 <LoRaMacCryptoDeriveMcRootKey+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014472:	230e      	movs	r3, #14
 8014474:	e000      	b.n	8014478 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014476:	2300      	movs	r3, #0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3718      	adds	r7, #24
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}

08014480 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af00      	add	r7, sp, #0
 8014486:	4603      	mov	r3, r0
 8014488:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 801448a:	79fb      	ldrb	r3, [r7, #7]
 801448c:	2b04      	cmp	r3, #4
 801448e:	d001      	beq.n	8014494 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014490:	230a      	movs	r3, #10
 8014492:	e013      	b.n	80144bc <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }
    uint8_t compBase[16] = { 0 };
 8014494:	f107 0308 	add.w	r3, r7, #8
 8014498:	2200      	movs	r2, #0
 801449a:	601a      	str	r2, [r3, #0]
 801449c:	605a      	str	r2, [r3, #4]
 801449e:	609a      	str	r2, [r3, #8]
 80144a0:	60da      	str	r2, [r3, #12]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80144a2:	79f9      	ldrb	r1, [r7, #7]
 80144a4:	f107 0308 	add.w	r3, r7, #8
 80144a8:	227f      	movs	r2, #127	@ 0x7f
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7f7 ff2c 	bl	800c308 <SecureElementDeriveAndStoreKey>
 80144b0:	4603      	mov	r3, r0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d001      	beq.n	80144ba <LoRaMacCryptoDeriveMcKEKey+0x3a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80144b6:	230e      	movs	r3, #14
 80144b8:	e000      	b.n	80144bc <LoRaMacCryptoDeriveMcKEKey+0x3c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144ba:	2300      	movs	r3, #0
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3718      	adds	r7, #24
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d003      	beq.n	80144da <LoRaMacParserJoinAccept+0x16>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d101      	bne.n	80144de <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80144da:	2302      	movs	r3, #2
 80144dc:	e0b9      	b.n	8014652 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	89fb      	ldrh	r3, [r7, #14]
 80144e8:	1c59      	adds	r1, r3, #1
 80144ea:	81f9      	strh	r1, [r7, #14]
 80144ec:	4413      	add	r3, r2
 80144ee:	781a      	ldrb	r2, [r3, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	1d98      	adds	r0, r3, #6
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	89fb      	ldrh	r3, [r7, #14]
 80144fe:	4413      	add	r3, r2
 8014500:	2203      	movs	r2, #3
 8014502:	4619      	mov	r1, r3
 8014504:	f002 fdc3 	bl	801708e <memcpy1>
    bufItr = bufItr + 3;
 8014508:	89fb      	ldrh	r3, [r7, #14]
 801450a:	3303      	adds	r3, #3
 801450c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f103 0009 	add.w	r0, r3, #9
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	89fb      	ldrh	r3, [r7, #14]
 801451a:	4413      	add	r3, r2
 801451c:	2203      	movs	r2, #3
 801451e:	4619      	mov	r1, r3
 8014520:	f002 fdb5 	bl	801708e <memcpy1>
    bufItr = bufItr + 3;
 8014524:	89fb      	ldrh	r3, [r7, #14]
 8014526:	3303      	adds	r3, #3
 8014528:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	89fb      	ldrh	r3, [r7, #14]
 8014530:	1c59      	adds	r1, r3, #1
 8014532:	81f9      	strh	r1, [r7, #14]
 8014534:	4413      	add	r3, r2
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	461a      	mov	r2, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	89fb      	ldrh	r3, [r7, #14]
 8014544:	1c59      	adds	r1, r3, #1
 8014546:	81f9      	strh	r1, [r7, #14]
 8014548:	4413      	add	r3, r2
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	021a      	lsls	r2, r3, #8
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	68db      	ldr	r3, [r3, #12]
 8014552:	431a      	orrs	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	89fb      	ldrh	r3, [r7, #14]
 801455e:	1c59      	adds	r1, r3, #1
 8014560:	81f9      	strh	r1, [r7, #14]
 8014562:	4413      	add	r3, r2
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	041a      	lsls	r2, r3, #16
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	431a      	orrs	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	89fb      	ldrh	r3, [r7, #14]
 8014578:	1c59      	adds	r1, r3, #1
 801457a:	81f9      	strh	r1, [r7, #14]
 801457c:	4413      	add	r3, r2
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	061a      	lsls	r2, r3, #24
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	431a      	orrs	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	89fb      	ldrh	r3, [r7, #14]
 8014592:	1c59      	adds	r1, r3, #1
 8014594:	81f9      	strh	r1, [r7, #14]
 8014596:	4413      	add	r3, r2
 8014598:	781a      	ldrb	r2, [r3, #0]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	89fb      	ldrh	r3, [r7, #14]
 80145a4:	1c59      	adds	r1, r3, #1
 80145a6:	81f9      	strh	r1, [r7, #14]
 80145a8:	4413      	add	r3, r2
 80145aa:	781a      	ldrb	r2, [r3, #0]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	791b      	ldrb	r3, [r3, #4]
 80145b4:	1f1a      	subs	r2, r3, #4
 80145b6:	89fb      	ldrh	r3, [r7, #14]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	2b10      	cmp	r3, #16
 80145bc:	d10e      	bne.n	80145dc <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f103 0012 	add.w	r0, r3, #18
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681a      	ldr	r2, [r3, #0]
 80145c8:	89fb      	ldrh	r3, [r7, #14]
 80145ca:	4413      	add	r3, r2
 80145cc:	2210      	movs	r2, #16
 80145ce:	4619      	mov	r1, r3
 80145d0:	f002 fd5d 	bl	801708e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80145d4:	89fb      	ldrh	r3, [r7, #14]
 80145d6:	3310      	adds	r3, #16
 80145d8:	81fb      	strh	r3, [r7, #14]
 80145da:	e008      	b.n	80145ee <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	791b      	ldrb	r3, [r3, #4]
 80145e0:	1f1a      	subs	r2, r3, #4
 80145e2:	89fb      	ldrh	r3, [r7, #14]
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	dd01      	ble.n	80145ee <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80145ea:	2301      	movs	r3, #1
 80145ec:	e031      	b.n	8014652 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	89fb      	ldrh	r3, [r7, #14]
 80145f4:	1c59      	adds	r1, r3, #1
 80145f6:	81f9      	strh	r1, [r7, #14]
 80145f8:	4413      	add	r3, r2
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	461a      	mov	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681a      	ldr	r2, [r3, #0]
 8014606:	89fb      	ldrh	r3, [r7, #14]
 8014608:	1c59      	adds	r1, r3, #1
 801460a:	81f9      	strh	r1, [r7, #14]
 801460c:	4413      	add	r3, r2
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	021a      	lsls	r2, r3, #8
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014616:	431a      	orrs	r2, r3
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	89fb      	ldrh	r3, [r7, #14]
 8014622:	1c59      	adds	r1, r3, #1
 8014624:	81f9      	strh	r1, [r7, #14]
 8014626:	4413      	add	r3, r2
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	041a      	lsls	r2, r3, #16
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014630:	431a      	orrs	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	89fb      	ldrh	r3, [r7, #14]
 801463c:	1c59      	adds	r1, r3, #1
 801463e:	81f9      	strh	r1, [r7, #14]
 8014640:	4413      	add	r3, r2
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	061a      	lsls	r2, r3, #24
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801464a:	431a      	orrs	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014650:	2300      	movs	r3, #0
}
 8014652:	4618      	mov	r0, r3
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801465a:	b580      	push	{r7, lr}
 801465c:	b084      	sub	sp, #16
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d003      	beq.n	8014670 <LoRaMacParserData+0x16>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d101      	bne.n	8014674 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014670:	2302      	movs	r3, #2
 8014672:	e0e0      	b.n	8014836 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014674:	2300      	movs	r3, #0
 8014676:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681a      	ldr	r2, [r3, #0]
 801467c:	89fb      	ldrh	r3, [r7, #14]
 801467e:	1c59      	adds	r1, r3, #1
 8014680:	81f9      	strh	r1, [r7, #14]
 8014682:	4413      	add	r3, r2
 8014684:	781a      	ldrb	r2, [r3, #0]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	89fb      	ldrh	r3, [r7, #14]
 8014690:	1c59      	adds	r1, r3, #1
 8014692:	81f9      	strh	r1, [r7, #14]
 8014694:	4413      	add	r3, r2
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	461a      	mov	r2, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	89fb      	ldrh	r3, [r7, #14]
 80146a4:	1c59      	adds	r1, r3, #1
 80146a6:	81f9      	strh	r1, [r7, #14]
 80146a8:	4413      	add	r3, r2
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	021a      	lsls	r2, r3, #8
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	431a      	orrs	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	89fb      	ldrh	r3, [r7, #14]
 80146be:	1c59      	adds	r1, r3, #1
 80146c0:	81f9      	strh	r1, [r7, #14]
 80146c2:	4413      	add	r3, r2
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	041a      	lsls	r2, r3, #16
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	689b      	ldr	r3, [r3, #8]
 80146cc:	431a      	orrs	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	89fb      	ldrh	r3, [r7, #14]
 80146d8:	1c59      	adds	r1, r3, #1
 80146da:	81f9      	strh	r1, [r7, #14]
 80146dc:	4413      	add	r3, r2
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	061a      	lsls	r2, r3, #24
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	431a      	orrs	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	89fb      	ldrh	r3, [r7, #14]
 80146f2:	1c59      	adds	r1, r3, #1
 80146f4:	81f9      	strh	r1, [r7, #14]
 80146f6:	4413      	add	r3, r2
 80146f8:	781a      	ldrb	r2, [r3, #0]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681a      	ldr	r2, [r3, #0]
 8014702:	89fb      	ldrh	r3, [r7, #14]
 8014704:	1c59      	adds	r1, r3, #1
 8014706:	81f9      	strh	r1, [r7, #14]
 8014708:	4413      	add	r3, r2
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	461a      	mov	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	89fb      	ldrh	r3, [r7, #14]
 8014718:	1c59      	adds	r1, r3, #1
 801471a:	81f9      	strh	r1, [r7, #14]
 801471c:	4413      	add	r3, r2
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	0219      	lsls	r1, r3, #8
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	89db      	ldrh	r3, [r3, #14]
 8014726:	b21a      	sxth	r2, r3
 8014728:	b20b      	sxth	r3, r1
 801472a:	4313      	orrs	r3, r2
 801472c:	b21b      	sxth	r3, r3
 801472e:	b29a      	uxth	r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f103 0010 	add.w	r0, r3, #16
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	89fb      	ldrh	r3, [r7, #14]
 8014740:	18d1      	adds	r1, r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	7b1b      	ldrb	r3, [r3, #12]
 8014746:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801474a:	b2db      	uxtb	r3, r3
 801474c:	461a      	mov	r2, r3
 801474e:	f002 fc9e 	bl	801708e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	7b1b      	ldrb	r3, [r3, #12]
 8014756:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801475a:	b2db      	uxtb	r3, r3
 801475c:	461a      	mov	r2, r3
 801475e:	89fb      	ldrh	r3, [r7, #14]
 8014760:	4413      	add	r3, r2
 8014762:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2200      	movs	r2, #0
 8014770:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	791b      	ldrb	r3, [r3, #4]
 8014778:	461a      	mov	r2, r3
 801477a:	89fb      	ldrh	r3, [r7, #14]
 801477c:	1ad3      	subs	r3, r2, r3
 801477e:	2b04      	cmp	r3, #4
 8014780:	dd27      	ble.n	80147d2 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681a      	ldr	r2, [r3, #0]
 8014786:	89fb      	ldrh	r3, [r7, #14]
 8014788:	1c59      	adds	r1, r3, #1
 801478a:	81f9      	strh	r1, [r7, #14]
 801478c:	4413      	add	r3, r2
 801478e:	781a      	ldrb	r2, [r3, #0]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	791a      	ldrb	r2, [r3, #4]
 801479a:	89fb      	ldrh	r3, [r7, #14]
 801479c:	b2db      	uxtb	r3, r3
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	3b04      	subs	r3, #4
 80147a4:	b2da      	uxtb	r2, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	89fb      	ldrh	r3, [r7, #14]
 80147b6:	18d1      	adds	r1, r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147be:	461a      	mov	r2, r3
 80147c0:	f002 fc65 	bl	801708e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147ca:	461a      	mov	r2, r3
 80147cc:	89fb      	ldrh	r3, [r7, #14]
 80147ce:	4413      	add	r3, r2
 80147d0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	791b      	ldrb	r3, [r3, #4]
 80147da:	3b04      	subs	r3, #4
 80147dc:	4413      	add	r3, r2
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	461a      	mov	r2, r3
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6819      	ldr	r1, [r3, #0]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	791b      	ldrb	r3, [r3, #4]
 80147f2:	3b03      	subs	r3, #3
 80147f4:	440b      	add	r3, r1
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	021b      	lsls	r3, r3, #8
 80147fa:	431a      	orrs	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6819      	ldr	r1, [r3, #0]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	791b      	ldrb	r3, [r3, #4]
 801480c:	3b02      	subs	r3, #2
 801480e:	440b      	add	r3, r1
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	041b      	lsls	r3, r3, #16
 8014814:	431a      	orrs	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6819      	ldr	r1, [r3, #0]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	791b      	ldrb	r3, [r3, #4]
 8014826:	3b01      	subs	r3, #1
 8014828:	440b      	add	r3, r1
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	061b      	lsls	r3, r3, #24
 801482e:	431a      	orrs	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801483e:	b580      	push	{r7, lr}
 8014840:	b084      	sub	sp, #16
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d003      	beq.n	8014854 <LoRaMacSerializerJoinRequest+0x16>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d101      	bne.n	8014858 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014854:	2301      	movs	r3, #1
 8014856:	e070      	b.n	801493a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014858:	2300      	movs	r3, #0
 801485a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	791b      	ldrb	r3, [r3, #4]
 8014860:	2b16      	cmp	r3, #22
 8014862:	d801      	bhi.n	8014868 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014864:	2302      	movs	r3, #2
 8014866:	e068      	b.n	801493a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	89fb      	ldrh	r3, [r7, #14]
 801486e:	1c59      	adds	r1, r3, #1
 8014870:	81f9      	strh	r1, [r7, #14]
 8014872:	4413      	add	r3, r2
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	7952      	ldrb	r2, [r2, #5]
 8014878:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	89fb      	ldrh	r3, [r7, #14]
 8014880:	18d0      	adds	r0, r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	3306      	adds	r3, #6
 8014886:	2208      	movs	r2, #8
 8014888:	4619      	mov	r1, r3
 801488a:	f002 fc1b 	bl	80170c4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801488e:	89fb      	ldrh	r3, [r7, #14]
 8014890:	3308      	adds	r3, #8
 8014892:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681a      	ldr	r2, [r3, #0]
 8014898:	89fb      	ldrh	r3, [r7, #14]
 801489a:	18d0      	adds	r0, r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	330e      	adds	r3, #14
 80148a0:	2208      	movs	r2, #8
 80148a2:	4619      	mov	r1, r3
 80148a4:	f002 fc0e 	bl	80170c4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80148a8:	89fb      	ldrh	r3, [r7, #14]
 80148aa:	3308      	adds	r3, #8
 80148ac:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	8ad9      	ldrh	r1, [r3, #22]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	89fb      	ldrh	r3, [r7, #14]
 80148b8:	1c58      	adds	r0, r3, #1
 80148ba:	81f8      	strh	r0, [r7, #14]
 80148bc:	4413      	add	r3, r2
 80148be:	b2ca      	uxtb	r2, r1
 80148c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	8adb      	ldrh	r3, [r3, #22]
 80148c6:	0a1b      	lsrs	r3, r3, #8
 80148c8:	b299      	uxth	r1, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	89fb      	ldrh	r3, [r7, #14]
 80148d0:	1c58      	adds	r0, r3, #1
 80148d2:	81f8      	strh	r0, [r7, #14]
 80148d4:	4413      	add	r3, r2
 80148d6:	b2ca      	uxtb	r2, r1
 80148d8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6999      	ldr	r1, [r3, #24]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	89fb      	ldrh	r3, [r7, #14]
 80148e4:	1c58      	adds	r0, r3, #1
 80148e6:	81f8      	strh	r0, [r7, #14]
 80148e8:	4413      	add	r3, r2
 80148ea:	b2ca      	uxtb	r2, r1
 80148ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	699b      	ldr	r3, [r3, #24]
 80148f2:	0a19      	lsrs	r1, r3, #8
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	89fb      	ldrh	r3, [r7, #14]
 80148fa:	1c58      	adds	r0, r3, #1
 80148fc:	81f8      	strh	r0, [r7, #14]
 80148fe:	4413      	add	r3, r2
 8014900:	b2ca      	uxtb	r2, r1
 8014902:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	699b      	ldr	r3, [r3, #24]
 8014908:	0c19      	lsrs	r1, r3, #16
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681a      	ldr	r2, [r3, #0]
 801490e:	89fb      	ldrh	r3, [r7, #14]
 8014910:	1c58      	adds	r0, r3, #1
 8014912:	81f8      	strh	r0, [r7, #14]
 8014914:	4413      	add	r3, r2
 8014916:	b2ca      	uxtb	r2, r1
 8014918:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	699b      	ldr	r3, [r3, #24]
 801491e:	0e19      	lsrs	r1, r3, #24
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	89fb      	ldrh	r3, [r7, #14]
 8014926:	1c58      	adds	r0, r3, #1
 8014928:	81f8      	strh	r0, [r7, #14]
 801492a:	4413      	add	r3, r2
 801492c:	b2ca      	uxtb	r2, r1
 801492e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014930:	89fb      	ldrh	r3, [r7, #14]
 8014932:	b2da      	uxtb	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014938:	2300      	movs	r3, #0
}
 801493a:	4618      	mov	r0, r3
 801493c:	3710      	adds	r7, #16
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}

08014942 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014942:	b580      	push	{r7, lr}
 8014944:	b084      	sub	sp, #16
 8014946:	af00      	add	r7, sp, #0
 8014948:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d003      	beq.n	8014958 <LoRaMacSerializerData+0x16>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d101      	bne.n	801495c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014958:	2301      	movs	r3, #1
 801495a:	e0e3      	b.n	8014b24 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801495c:	2300      	movs	r3, #0
 801495e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014960:	2308      	movs	r3, #8
 8014962:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	7b1b      	ldrb	r3, [r3, #12]
 8014968:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801496c:	b2db      	uxtb	r3, r3
 801496e:	461a      	mov	r2, r3
 8014970:	89bb      	ldrh	r3, [r7, #12]
 8014972:	4413      	add	r3, r2
 8014974:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801497c:	2b00      	cmp	r3, #0
 801497e:	d002      	beq.n	8014986 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014980:	89bb      	ldrh	r3, [r7, #12]
 8014982:	3301      	adds	r3, #1
 8014984:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801498c:	461a      	mov	r2, r3
 801498e:	89bb      	ldrh	r3, [r7, #12]
 8014990:	4413      	add	r3, r2
 8014992:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014994:	89bb      	ldrh	r3, [r7, #12]
 8014996:	3304      	adds	r3, #4
 8014998:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	791b      	ldrb	r3, [r3, #4]
 801499e:	461a      	mov	r2, r3
 80149a0:	89bb      	ldrh	r3, [r7, #12]
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d901      	bls.n	80149aa <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80149a6:	2302      	movs	r3, #2
 80149a8:	e0bc      	b.n	8014b24 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	89fb      	ldrh	r3, [r7, #14]
 80149b0:	1c59      	adds	r1, r3, #1
 80149b2:	81f9      	strh	r1, [r7, #14]
 80149b4:	4413      	add	r3, r2
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	7952      	ldrb	r2, [r2, #5]
 80149ba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6899      	ldr	r1, [r3, #8]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	89fb      	ldrh	r3, [r7, #14]
 80149c6:	1c58      	adds	r0, r3, #1
 80149c8:	81f8      	strh	r0, [r7, #14]
 80149ca:	4413      	add	r3, r2
 80149cc:	b2ca      	uxtb	r2, r1
 80149ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	689b      	ldr	r3, [r3, #8]
 80149d4:	0a19      	lsrs	r1, r3, #8
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	89fb      	ldrh	r3, [r7, #14]
 80149dc:	1c58      	adds	r0, r3, #1
 80149de:	81f8      	strh	r0, [r7, #14]
 80149e0:	4413      	add	r3, r2
 80149e2:	b2ca      	uxtb	r2, r1
 80149e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	689b      	ldr	r3, [r3, #8]
 80149ea:	0c19      	lsrs	r1, r3, #16
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	89fb      	ldrh	r3, [r7, #14]
 80149f2:	1c58      	adds	r0, r3, #1
 80149f4:	81f8      	strh	r0, [r7, #14]
 80149f6:	4413      	add	r3, r2
 80149f8:	b2ca      	uxtb	r2, r1
 80149fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	689b      	ldr	r3, [r3, #8]
 8014a00:	0e19      	lsrs	r1, r3, #24
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	89fb      	ldrh	r3, [r7, #14]
 8014a08:	1c58      	adds	r0, r3, #1
 8014a0a:	81f8      	strh	r0, [r7, #14]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	b2ca      	uxtb	r2, r1
 8014a10:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	89fb      	ldrh	r3, [r7, #14]
 8014a18:	1c59      	adds	r1, r3, #1
 8014a1a:	81f9      	strh	r1, [r7, #14]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	7b12      	ldrb	r2, [r2, #12]
 8014a22:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	89d9      	ldrh	r1, [r3, #14]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	89fb      	ldrh	r3, [r7, #14]
 8014a2e:	1c58      	adds	r0, r3, #1
 8014a30:	81f8      	strh	r0, [r7, #14]
 8014a32:	4413      	add	r3, r2
 8014a34:	b2ca      	uxtb	r2, r1
 8014a36:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	89db      	ldrh	r3, [r3, #14]
 8014a3c:	0a1b      	lsrs	r3, r3, #8
 8014a3e:	b299      	uxth	r1, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	89fb      	ldrh	r3, [r7, #14]
 8014a46:	1c58      	adds	r0, r3, #1
 8014a48:	81f8      	strh	r0, [r7, #14]
 8014a4a:	4413      	add	r3, r2
 8014a4c:	b2ca      	uxtb	r2, r1
 8014a4e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	89fb      	ldrh	r3, [r7, #14]
 8014a56:	18d0      	adds	r0, r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f103 0110 	add.w	r1, r3, #16
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7b1b      	ldrb	r3, [r3, #12]
 8014a62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	461a      	mov	r2, r3
 8014a6a:	f002 fb10 	bl	801708e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	7b1b      	ldrb	r3, [r3, #12]
 8014a72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a76:	b2db      	uxtb	r3, r3
 8014a78:	461a      	mov	r2, r3
 8014a7a:	89fb      	ldrh	r3, [r7, #14]
 8014a7c:	4413      	add	r3, r2
 8014a7e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d009      	beq.n	8014a9e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	89fb      	ldrh	r3, [r7, #14]
 8014a90:	1c59      	adds	r1, r3, #1
 8014a92:	81f9      	strh	r1, [r7, #14]
 8014a94:	4413      	add	r3, r2
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014a9c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	89fb      	ldrh	r3, [r7, #14]
 8014aa4:	18d0      	adds	r0, r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	f002 faec 	bl	801708e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014abc:	461a      	mov	r2, r3
 8014abe:	89fb      	ldrh	r3, [r7, #14]
 8014ac0:	4413      	add	r3, r2
 8014ac2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	89fb      	ldrh	r3, [r7, #14]
 8014ace:	1c58      	adds	r0, r3, #1
 8014ad0:	81f8      	strh	r0, [r7, #14]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	b2ca      	uxtb	r2, r1
 8014ad6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014adc:	0a19      	lsrs	r1, r3, #8
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	89fb      	ldrh	r3, [r7, #14]
 8014ae4:	1c58      	adds	r0, r3, #1
 8014ae6:	81f8      	strh	r0, [r7, #14]
 8014ae8:	4413      	add	r3, r2
 8014aea:	b2ca      	uxtb	r2, r1
 8014aec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014af2:	0c19      	lsrs	r1, r3, #16
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	89fb      	ldrh	r3, [r7, #14]
 8014afa:	1c58      	adds	r0, r3, #1
 8014afc:	81f8      	strh	r0, [r7, #14]
 8014afe:	4413      	add	r3, r2
 8014b00:	b2ca      	uxtb	r2, r1
 8014b02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b08:	0e19      	lsrs	r1, r3, #24
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	89fb      	ldrh	r3, [r7, #14]
 8014b10:	1c58      	adds	r0, r3, #1
 8014b12:	81f8      	strh	r0, [r7, #14]
 8014b14:	4413      	add	r3, r2
 8014b16:	b2ca      	uxtb	r2, r1
 8014b18:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014b1a:	89fb      	ldrh	r3, [r7, #14]
 8014b1c:	b2da      	uxtb	r2, r3
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014b22:	2300      	movs	r3, #0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	4603      	mov	r3, r0
 8014b34:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b36:	79fb      	ldrb	r3, [r7, #7]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d101      	bne.n	8014b40 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	e000      	b.n	8014b42 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014b40:	2300      	movs	r3, #0
        }
    }
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	370c      	adds	r7, #12
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bc80      	pop	{r7}
 8014b4a:	4770      	bx	lr

08014b4c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b084      	sub	sp, #16
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	4603      	mov	r3, r0
 8014b54:	6039      	str	r1, [r7, #0]
 8014b56:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014b58:	2300      	movs	r3, #0
 8014b5a:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014b5c:	79fb      	ldrb	r3, [r7, #7]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d105      	bne.n	8014b6e <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014b62:	6838      	ldr	r0, [r7, #0]
 8014b64:	f000 f9ec 	bl	8014f40 <RegionAS923GetPhyParam>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	60fb      	str	r3, [r7, #12]
 8014b6c:	e001      	b.n	8014b72 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	4618      	mov	r0, r3
 8014b76:	3710      	adds	r7, #16
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	4603      	mov	r3, r0
 8014b84:	6039      	str	r1, [r7, #0]
 8014b86:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b88:	79fb      	ldrb	r3, [r7, #7]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d103      	bne.n	8014b96 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014b8e:	6838      	ldr	r0, [r7, #0]
 8014b90:	f000 fb4c 	bl	801522c <RegionAS923SetBandTxDone>
 8014b94:	e000      	b.n	8014b98 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014b96:	bf00      	nop
        }
    }
}
 8014b98:	3708      	adds	r7, #8
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b082      	sub	sp, #8
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	6039      	str	r1, [r7, #0]
 8014ba8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d103      	bne.n	8014bb8 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014bb0:	6838      	ldr	r0, [r7, #0]
 8014bb2:	f000 fb67 	bl	8015284 <RegionAS923InitDefaults>
 8014bb6:	e000      	b.n	8014bba <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014bb8:	bf00      	nop
        }
    }
}
 8014bba:	bf00      	nop
 8014bbc:	3708      	adds	r7, #8
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014bc2:	b580      	push	{r7, lr}
 8014bc4:	b082      	sub	sp, #8
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	4603      	mov	r3, r0
 8014bca:	6039      	str	r1, [r7, #0]
 8014bcc:	71fb      	strb	r3, [r7, #7]
 8014bce:	4613      	mov	r3, r2
 8014bd0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014bd2:	79fb      	ldrb	r3, [r7, #7]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d106      	bne.n	8014be6 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014bd8:	79bb      	ldrb	r3, [r7, #6]
 8014bda:	4619      	mov	r1, r3
 8014bdc:	6838      	ldr	r0, [r7, #0]
 8014bde:	f000 fbe3 	bl	80153a8 <RegionAS923Verify>
 8014be2:	4603      	mov	r3, r0
 8014be4:	e000      	b.n	8014be8 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014be6:	2300      	movs	r3, #0
        }
    }
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	6039      	str	r1, [r7, #0]
 8014bfa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bfc:	79fb      	ldrb	r3, [r7, #7]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d103      	bne.n	8014c0a <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8014c02:	6838      	ldr	r0, [r7, #0]
 8014c04:	f000 fc6e 	bl	80154e4 <RegionAS923ApplyCFList>
 8014c08:	e000      	b.n	8014c0c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014c0a:	bf00      	nop
        }
    }
}
 8014c0c:	bf00      	nop
 8014c0e:	3708      	adds	r7, #8
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	6039      	str	r1, [r7, #0]
 8014c1e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c20:	79fb      	ldrb	r3, [r7, #7]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d104      	bne.n	8014c30 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014c26:	6838      	ldr	r0, [r7, #0]
 8014c28:	f000 fcd0 	bl	80155cc <RegionAS923ChanMaskSet>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	e000      	b.n	8014c32 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014c30:	2300      	movs	r3, #0
        }
    }
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3708      	adds	r7, #8
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}

08014c3a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b082      	sub	sp, #8
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	603b      	str	r3, [r7, #0]
 8014c42:	4603      	mov	r3, r0
 8014c44:	71fb      	strb	r3, [r7, #7]
 8014c46:	460b      	mov	r3, r1
 8014c48:	71bb      	strb	r3, [r7, #6]
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014c4e:	79fb      	ldrb	r3, [r7, #7]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d107      	bne.n	8014c64 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014c54:	7979      	ldrb	r1, [r7, #5]
 8014c56:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	f000 fcdf 	bl	8015620 <RegionAS923ComputeRxWindowParameters>
 8014c62:	e000      	b.n	8014c66 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014c64:	bf00      	nop
        }
    }
}
 8014c66:	bf00      	nop
 8014c68:	3708      	adds	r7, #8
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}

08014c6e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b084      	sub	sp, #16
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	4603      	mov	r3, r0
 8014c76:	60b9      	str	r1, [r7, #8]
 8014c78:	607a      	str	r2, [r7, #4]
 8014c7a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014c7c:	7bfb      	ldrb	r3, [r7, #15]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d105      	bne.n	8014c8e <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014c82:	6879      	ldr	r1, [r7, #4]
 8014c84:	68b8      	ldr	r0, [r7, #8]
 8014c86:	f000 fd25 	bl	80156d4 <RegionAS923RxConfig>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	e000      	b.n	8014c90 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014c8e:	2300      	movs	r3, #0
        }
    }
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	60b9      	str	r1, [r7, #8]
 8014ca0:	607a      	str	r2, [r7, #4]
 8014ca2:	603b      	str	r3, [r7, #0]
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014ca8:	7bfb      	ldrb	r3, [r7, #15]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d106      	bne.n	8014cbc <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8014cae:	683a      	ldr	r2, [r7, #0]
 8014cb0:	6879      	ldr	r1, [r7, #4]
 8014cb2:	68b8      	ldr	r0, [r7, #8]
 8014cb4:	f000 fdde 	bl	8015874 <RegionAS923TxConfig>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	e000      	b.n	8014cbe <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014cbc:	2300      	movs	r3, #0
        }
    }
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}

08014cc6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014cc6:	b580      	push	{r7, lr}
 8014cc8:	b086      	sub	sp, #24
 8014cca:	af02      	add	r7, sp, #8
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	603b      	str	r3, [r7, #0]
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014cd6:	7bfb      	ldrb	r3, [r7, #15]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d109      	bne.n	8014cf0 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	69bb      	ldr	r3, [r7, #24]
 8014ce2:	683a      	ldr	r2, [r7, #0]
 8014ce4:	6879      	ldr	r1, [r7, #4]
 8014ce6:	68b8      	ldr	r0, [r7, #8]
 8014ce8:	f000 fe94 	bl	8015a14 <RegionAS923LinkAdrReq>
 8014cec:	4603      	mov	r3, r0
 8014cee:	e000      	b.n	8014cf2 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014cf0:	2300      	movs	r3, #0
        }
    }
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b082      	sub	sp, #8
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	4603      	mov	r3, r0
 8014d02:	6039      	str	r1, [r7, #0]
 8014d04:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d06:	79fb      	ldrb	r3, [r7, #7]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d104      	bne.n	8014d16 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8014d0c:	6838      	ldr	r0, [r7, #0]
 8014d0e:	f000 ffa3 	bl	8015c58 <RegionAS923RxParamSetupReq>
 8014d12:	4603      	mov	r3, r0
 8014d14:	e000      	b.n	8014d18 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014d16:	2300      	movs	r3, #0
        }
    }
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	6039      	str	r1, [r7, #0]
 8014d2a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d2c:	79fb      	ldrb	r3, [r7, #7]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d104      	bne.n	8014d3c <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014d32:	6838      	ldr	r0, [r7, #0]
 8014d34:	f000 ffc8 	bl	8015cc8 <RegionAS923NewChannelReq>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	e000      	b.n	8014d3e <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014d3c:	2300      	movs	r3, #0
        }
    }
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}

08014d46 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b082      	sub	sp, #8
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	6039      	str	r1, [r7, #0]
 8014d50:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d104      	bne.n	8014d62 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014d58:	6838      	ldr	r0, [r7, #0]
 8014d5a:	f001 f813 	bl	8015d84 <RegionAS923TxParamSetupReq>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	e000      	b.n	8014d64 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014d62:	2300      	movs	r3, #0
        }
    }
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	4603      	mov	r3, r0
 8014d74:	6039      	str	r1, [r7, #0]
 8014d76:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d78:	79fb      	ldrb	r3, [r7, #7]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d104      	bne.n	8014d88 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8014d7e:	6838      	ldr	r0, [r7, #0]
 8014d80:	f001 f80a 	bl	8015d98 <RegionAS923DlChannelReq>
 8014d84:	4603      	mov	r3, r0
 8014d86:	e000      	b.n	8014d8a <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014d88:	2300      	movs	r3, #0
        }
    }
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3708      	adds	r7, #8
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	4603      	mov	r3, r0
 8014d9a:	71fb      	strb	r3, [r7, #7]
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	71bb      	strb	r3, [r7, #6]
 8014da0:	4613      	mov	r3, r2
 8014da2:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014da4:	79fb      	ldrb	r3, [r7, #7]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d108      	bne.n	8014dbc <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014daa:	797a      	ldrb	r2, [r7, #5]
 8014dac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014db0:	4611      	mov	r1, r2
 8014db2:	4618      	mov	r0, r3
 8014db4:	f001 f830 	bl	8015e18 <RegionAS923AlternateDr>
 8014db8:	4603      	mov	r3, r0
 8014dba:	e000      	b.n	8014dbe <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014dbc:	2300      	movs	r3, #0
        }
    }
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	607a      	str	r2, [r7, #4]
 8014dd0:	603b      	str	r3, [r7, #0]
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014dd6:	7bfb      	ldrb	r3, [r7, #15]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d107      	bne.n	8014dec <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	683a      	ldr	r2, [r7, #0]
 8014de0:	6879      	ldr	r1, [r7, #4]
 8014de2:	68b8      	ldr	r0, [r7, #8]
 8014de4:	f001 f826 	bl	8015e34 <RegionAS923NextChannel>
 8014de8:	4603      	mov	r3, r0
 8014dea:	e000      	b.n	8014dee <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014dec:	2309      	movs	r3, #9
        }
    }
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}

08014df6 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014df6:	b590      	push	{r4, r7, lr}
 8014df8:	b083      	sub	sp, #12
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	4604      	mov	r4, r0
 8014dfe:	4608      	mov	r0, r1
 8014e00:	4611      	mov	r1, r2
 8014e02:	461a      	mov	r2, r3
 8014e04:	4623      	mov	r3, r4
 8014e06:	71fb      	strb	r3, [r7, #7]
 8014e08:	4603      	mov	r3, r0
 8014e0a:	71bb      	strb	r3, [r7, #6]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	717b      	strb	r3, [r7, #5]
 8014e10:	4613      	mov	r3, r2
 8014e12:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014e14:	79fb      	ldrb	r3, [r7, #7]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d109      	bne.n	8014e2e <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014e1a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014e1e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014e22:	79bb      	ldrb	r3, [r7, #6]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f001 f979 	bl	801611c <RegionAS923ApplyDrOffset>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	e000      	b.n	8014e30 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014e2e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	370c      	adds	r7, #12
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd90      	pop	{r4, r7, pc}

08014e38 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014e3e:	4b04      	ldr	r3, [pc, #16]	@ (8014e50 <RegionGetVersion+0x18>)
 8014e40:	607b      	str	r3, [r7, #4]

    return version;
 8014e42:	687b      	ldr	r3, [r7, #4]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	370c      	adds	r7, #12
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bc80      	pop	{r7}
 8014e4c:	4770      	bx	lr
 8014e4e:	bf00      	nop
 8014e50:	02010001 	.word	0x02010001

08014e54 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8014e94 <VerifyRfFreq+0x40>)
 8014e5e:	6a1b      	ldr	r3, [r3, #32]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	4798      	blx	r3
 8014e64:	4603      	mov	r3, r0
 8014e66:	f083 0301 	eor.w	r3, r3, #1
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d001      	beq.n	8014e74 <VerifyRfFreq+0x20>
    {
        return false;
 8014e70:	2300      	movs	r3, #0
 8014e72:	e00a      	b.n	8014e8a <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	4a08      	ldr	r2, [pc, #32]	@ (8014e98 <VerifyRfFreq+0x44>)
 8014e78:	4293      	cmp	r3, r2
 8014e7a:	d903      	bls.n	8014e84 <VerifyRfFreq+0x30>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	4a07      	ldr	r2, [pc, #28]	@ (8014e9c <VerifyRfFreq+0x48>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d901      	bls.n	8014e88 <VerifyRfFreq+0x34>
    {
        return false;
 8014e84:	2300      	movs	r3, #0
 8014e86:	e000      	b.n	8014e8a <VerifyRfFreq+0x36>
    }
    return true;
 8014e88:	2301      	movs	r3, #1
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	0801f574 	.word	0x0801f574
 8014e98:	3689cabf 	.word	0x3689cabf
 8014e9c:	37502800 	.word	0x37502800

08014ea0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b08b      	sub	sp, #44	@ 0x2c
 8014ea4:	af04      	add	r7, sp, #16
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	460a      	mov	r2, r1
 8014eaa:	71fb      	strb	r3, [r7, #7]
 8014eac:	4613      	mov	r3, r2
 8014eae:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8014f34 <GetTimeOnAir+0x94>)
 8014eb6:	5cd3      	ldrb	r3, [r2, r3]
 8014eb8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8014eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ebe:	491e      	ldr	r1, [pc, #120]	@ (8014f38 <GetTimeOnAir+0x98>)
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f002 f835 	bl	8016f30 <RegionCommonGetBandwidth>
 8014ec6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ed0:	2b07      	cmp	r3, #7
 8014ed2:	d118      	bne.n	8014f06 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014ed4:	4b19      	ldr	r3, [pc, #100]	@ (8014f3c <GetTimeOnAir+0x9c>)
 8014ed6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014ed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014edc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ee0:	fb02 f303 	mul.w	r3, r2, r3
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	88bb      	ldrh	r3, [r7, #4]
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	2201      	movs	r2, #1
 8014eec:	9203      	str	r2, [sp, #12]
 8014eee:	9302      	str	r3, [sp, #8]
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	9301      	str	r3, [sp, #4]
 8014ef4:	2305      	movs	r3, #5
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	2300      	movs	r3, #0
 8014efa:	460a      	mov	r2, r1
 8014efc:	68f9      	ldr	r1, [r7, #12]
 8014efe:	2000      	movs	r0, #0
 8014f00:	47a0      	blx	r4
 8014f02:	6178      	str	r0, [r7, #20]
 8014f04:	e011      	b.n	8014f2a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014f06:	4b0d      	ldr	r3, [pc, #52]	@ (8014f3c <GetTimeOnAir+0x9c>)
 8014f08:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014f0e:	88bb      	ldrh	r3, [r7, #4]
 8014f10:	b2db      	uxtb	r3, r3
 8014f12:	2101      	movs	r1, #1
 8014f14:	9103      	str	r1, [sp, #12]
 8014f16:	9302      	str	r3, [sp, #8]
 8014f18:	2300      	movs	r3, #0
 8014f1a:	9301      	str	r3, [sp, #4]
 8014f1c:	2308      	movs	r3, #8
 8014f1e:	9300      	str	r3, [sp, #0]
 8014f20:	2301      	movs	r3, #1
 8014f22:	68f9      	ldr	r1, [r7, #12]
 8014f24:	2001      	movs	r0, #1
 8014f26:	47a0      	blx	r4
 8014f28:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014f2a:	697b      	ldr	r3, [r7, #20]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	371c      	adds	r7, #28
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd90      	pop	{r4, r7, pc}
 8014f34:	0801f4b4 	.word	0x0801f4b4
 8014f38:	0801f4bc 	.word	0x0801f4bc
 8014f3c:	0801f574 	.word	0x0801f574

08014f40 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b088      	sub	sp, #32
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014f48:	2300      	movs	r3, #0
 8014f4a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	3b01      	subs	r3, #1
 8014f52:	2b37      	cmp	r3, #55	@ 0x37
 8014f54:	f200 814e 	bhi.w	80151f4 <RegionAS923GetPhyParam+0x2b4>
 8014f58:	a201      	add	r2, pc, #4	@ (adr r2, 8014f60 <RegionAS923GetPhyParam+0x20>)
 8014f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f5e:	bf00      	nop
 8014f60:	08015041 	.word	0x08015041
 8014f64:	08015055 	.word	0x08015055
 8014f68:	080151f5 	.word	0x080151f5
 8014f6c:	080151f5 	.word	0x080151f5
 8014f70:	080151f5 	.word	0x080151f5
 8014f74:	08015069 	.word	0x08015069
 8014f78:	080151f5 	.word	0x080151f5
 8014f7c:	080150af 	.word	0x080150af
 8014f80:	080151f5 	.word	0x080151f5
 8014f84:	080150b5 	.word	0x080150b5
 8014f88:	080150bb 	.word	0x080150bb
 8014f8c:	080150c1 	.word	0x080150c1
 8014f90:	080150c7 	.word	0x080150c7
 8014f94:	080150ef 	.word	0x080150ef
 8014f98:	08015117 	.word	0x08015117
 8014f9c:	0801511d 	.word	0x0801511d
 8014fa0:	08015125 	.word	0x08015125
 8014fa4:	0801512d 	.word	0x0801512d
 8014fa8:	08015135 	.word	0x08015135
 8014fac:	0801513d 	.word	0x0801513d
 8014fb0:	08015145 	.word	0x08015145
 8014fb4:	08015159 	.word	0x08015159
 8014fb8:	0801515f 	.word	0x0801515f
 8014fbc:	08015165 	.word	0x08015165
 8014fc0:	0801516b 	.word	0x0801516b
 8014fc4:	08015177 	.word	0x08015177
 8014fc8:	08015183 	.word	0x08015183
 8014fcc:	08015189 	.word	0x08015189
 8014fd0:	08015191 	.word	0x08015191
 8014fd4:	08015197 	.word	0x08015197
 8014fd8:	0801519d 	.word	0x0801519d
 8014fdc:	080151a5 	.word	0x080151a5
 8014fe0:	0801506f 	.word	0x0801506f
 8014fe4:	080151f5 	.word	0x080151f5
 8014fe8:	080151f5 	.word	0x080151f5
 8014fec:	080151f5 	.word	0x080151f5
 8014ff0:	080151f5 	.word	0x080151f5
 8014ff4:	080151f5 	.word	0x080151f5
 8014ff8:	080151f5 	.word	0x080151f5
 8014ffc:	080151f5 	.word	0x080151f5
 8015000:	080151f5 	.word	0x080151f5
 8015004:	080151f5 	.word	0x080151f5
 8015008:	080151f5 	.word	0x080151f5
 801500c:	080151f5 	.word	0x080151f5
 8015010:	080151f5 	.word	0x080151f5
 8015014:	080151f5 	.word	0x080151f5
 8015018:	080151ab 	.word	0x080151ab
 801501c:	080151b1 	.word	0x080151b1
 8015020:	080151bf 	.word	0x080151bf
 8015024:	080151f5 	.word	0x080151f5
 8015028:	080151f5 	.word	0x080151f5
 801502c:	080151c5 	.word	0x080151c5
 8015030:	080151cb 	.word	0x080151cb
 8015034:	080151f5 	.word	0x080151f5
 8015038:	080151d1 	.word	0x080151d1
 801503c:	080151e1 	.word	0x080151e1
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	78db      	ldrb	r3, [r3, #3]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d102      	bne.n	801504e <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8015048:	2300      	movs	r3, #0
 801504a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 801504c:	e0d3      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801504e:	2302      	movs	r3, #2
 8015050:	61bb      	str	r3, [r7, #24]
            break;
 8015052:	e0d0      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	789b      	ldrb	r3, [r3, #2]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d102      	bne.n	8015062 <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 801505c:	2300      	movs	r3, #0
 801505e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015060:	e0c9      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015062:	2302      	movs	r3, #2
 8015064:	61bb      	str	r3, [r7, #24]
            break;
 8015066:	e0c6      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015068:	2302      	movs	r3, #2
 801506a:	61bb      	str	r3, [r7, #24]
            break;
 801506c:	e0c3      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015074:	733b      	strb	r3, [r7, #12]
 8015076:	2307      	movs	r3, #7
 8015078:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	789b      	ldrb	r3, [r3, #2]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d101      	bne.n	8015086 <RegionAS923GetPhyParam+0x146>
 8015082:	2300      	movs	r3, #0
 8015084:	e000      	b.n	8015088 <RegionAS923GetPhyParam+0x148>
 8015086:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015088:	73bb      	strb	r3, [r7, #14]
 801508a:	2310      	movs	r3, #16
 801508c:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801508e:	4b5d      	ldr	r3, [pc, #372]	@ (8015204 <RegionAS923GetPhyParam+0x2c4>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015096:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015098:	4b5a      	ldr	r3, [pc, #360]	@ (8015204 <RegionAS923GetPhyParam+0x2c4>)
 801509a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801509c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801509e:	f107 030c 	add.w	r3, r7, #12
 80150a2:	4618      	mov	r0, r3
 80150a4:	f001 fef1 	bl	8016e8a <RegionCommonGetNextLowerTxDr>
 80150a8:	4603      	mov	r3, r0
 80150aa:	61bb      	str	r3, [r7, #24]
            break;
 80150ac:	e0a3      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 80150ae:	2300      	movs	r3, #0
 80150b0:	61bb      	str	r3, [r7, #24]
            break;
 80150b2:	e0a0      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 80150b4:	2300      	movs	r3, #0
 80150b6:	61bb      	str	r3, [r7, #24]
            break;
 80150b8:	e09d      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80150ba:	2340      	movs	r3, #64	@ 0x40
 80150bc:	61bb      	str	r3, [r7, #24]
            break;
 80150be:	e09a      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80150c0:	2320      	movs	r3, #32
 80150c2:	61bb      	str	r3, [r7, #24]
            break;
 80150c4:	e097      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	789b      	ldrb	r3, [r3, #2]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d107      	bne.n	80150de <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150d4:	461a      	mov	r2, r3
 80150d6:	4b4c      	ldr	r3, [pc, #304]	@ (8015208 <RegionAS923GetPhyParam+0x2c8>)
 80150d8:	5c9b      	ldrb	r3, [r3, r2]
 80150da:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80150dc:	e08b      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150e4:	461a      	mov	r2, r3
 80150e6:	4b49      	ldr	r3, [pc, #292]	@ (801520c <RegionAS923GetPhyParam+0x2cc>)
 80150e8:	5c9b      	ldrb	r3, [r3, r2]
 80150ea:	61bb      	str	r3, [r7, #24]
            break;
 80150ec:	e083      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	789b      	ldrb	r3, [r3, #2]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d107      	bne.n	8015106 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150fc:	461a      	mov	r2, r3
 80150fe:	4b44      	ldr	r3, [pc, #272]	@ (8015210 <RegionAS923GetPhyParam+0x2d0>)
 8015100:	5c9b      	ldrb	r3, [r3, r2]
 8015102:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8015104:	e077      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801510c:	461a      	mov	r2, r3
 801510e:	4b3f      	ldr	r3, [pc, #252]	@ (801520c <RegionAS923GetPhyParam+0x2cc>)
 8015110:	5c9b      	ldrb	r3, [r3, r2]
 8015112:	61bb      	str	r3, [r7, #24]
            break;
 8015114:	e06f      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8015116:	2300      	movs	r3, #0
 8015118:	61bb      	str	r3, [r7, #24]
            break;
 801511a:	e06c      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 801511c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015120:	61bb      	str	r3, [r7, #24]
            break;
 8015122:	e068      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015128:	61bb      	str	r3, [r7, #24]
            break;
 801512a:	e064      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801512c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015130:	61bb      	str	r3, [r7, #24]
            break;
 8015132:	e060      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015134:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015138:	61bb      	str	r3, [r7, #24]
            break;
 801513a:	e05c      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801513c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015140:	61bb      	str	r3, [r7, #24]
            break;
 8015142:	e058      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8015144:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015148:	4832      	ldr	r0, [pc, #200]	@ (8015214 <RegionAS923GetPhyParam+0x2d4>)
 801514a:	f001 ff89 	bl	8017060 <randr>
 801514e:	4603      	mov	r3, r0
 8015150:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015154:	61bb      	str	r3, [r7, #24]
            break;
 8015156:	e04e      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015158:	2300      	movs	r3, #0
 801515a:	61bb      	str	r3, [r7, #24]
            break;
 801515c:	e04b      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 801515e:	4b2e      	ldr	r3, [pc, #184]	@ (8015218 <RegionAS923GetPhyParam+0x2d8>)
 8015160:	61bb      	str	r3, [r7, #24]
            break;
 8015162:	e048      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015164:	2302      	movs	r3, #2
 8015166:	61bb      	str	r3, [r7, #24]
            break;
 8015168:	e045      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801516a:	4b26      	ldr	r3, [pc, #152]	@ (8015204 <RegionAS923GetPhyParam+0x2c4>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015172:	61bb      	str	r3, [r7, #24]
            break;
 8015174:	e03f      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015176:	4b23      	ldr	r3, [pc, #140]	@ (8015204 <RegionAS923GetPhyParam+0x2c4>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801517e:	61bb      	str	r3, [r7, #24]
            break;
 8015180:	e039      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015182:	2310      	movs	r3, #16
 8015184:	61bb      	str	r3, [r7, #24]
            break;
 8015186:	e036      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015188:	4b1e      	ldr	r3, [pc, #120]	@ (8015204 <RegionAS923GetPhyParam+0x2c4>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	61bb      	str	r3, [r7, #24]
            break;
 801518e:	e032      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015190:	2301      	movs	r3, #1
 8015192:	61bb      	str	r3, [r7, #24]
            break;
 8015194:	e02f      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8015196:	2300      	movs	r3, #0
 8015198:	61bb      	str	r3, [r7, #24]
            break;
 801519a:	e02c      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 801519c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80151a0:	61bb      	str	r3, [r7, #24]
            break;
 80151a2:	e028      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80151a4:	4b1d      	ldr	r3, [pc, #116]	@ (801521c <RegionAS923GetPhyParam+0x2dc>)
 80151a6:	61bb      	str	r3, [r7, #24]
            break;
 80151a8:	e025      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80151aa:	4b1d      	ldr	r3, [pc, #116]	@ (8015220 <RegionAS923GetPhyParam+0x2e0>)
 80151ac:	61bb      	str	r3, [r7, #24]
            break;
 80151ae:	e022      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80151b0:	2311      	movs	r3, #17
 80151b2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80151b4:	2301      	movs	r3, #1
 80151b6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 80151b8:	2300      	movs	r3, #0
 80151ba:	76bb      	strb	r3, [r7, #26]
            break;
 80151bc:	e01b      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80151be:	2303      	movs	r3, #3
 80151c0:	61bb      	str	r3, [r7, #24]
            break;
 80151c2:	e018      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80151c4:	4b16      	ldr	r3, [pc, #88]	@ (8015220 <RegionAS923GetPhyParam+0x2e0>)
 80151c6:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 80151c8:	e015      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80151ca:	2303      	movs	r3, #3
 80151cc:	61bb      	str	r3, [r7, #24]
            break;
 80151ce:	e012      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151d6:	461a      	mov	r2, r3
 80151d8:	4b12      	ldr	r3, [pc, #72]	@ (8015224 <RegionAS923GetPhyParam+0x2e4>)
 80151da:	5c9b      	ldrb	r3, [r3, r2]
 80151dc:	61bb      	str	r3, [r7, #24]
            break;
 80151de:	e00a      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151e6:	4910      	ldr	r1, [pc, #64]	@ (8015228 <RegionAS923GetPhyParam+0x2e8>)
 80151e8:	4618      	mov	r0, r3
 80151ea:	f001 fea1 	bl	8016f30 <RegionCommonGetBandwidth>
 80151ee:	4603      	mov	r3, r0
 80151f0:	61bb      	str	r3, [r7, #24]
            break;
 80151f2:	e000      	b.n	80151f6 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 80151f4:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	61fb      	str	r3, [r7, #28]
 80151fa:	69fb      	ldr	r3, [r7, #28]
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3720      	adds	r7, #32
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	20001bcc 	.word	0x20001bcc
 8015208:	0801f4dc 	.word	0x0801f4dc
 801520c:	0801f4ec 	.word	0x0801f4ec
 8015210:	0801f4e4 	.word	0x0801f4e4
 8015214:	fffffc18 	.word	0xfffffc18
 8015218:	3706ea00 	.word	0x3706ea00
 801521c:	4009999a 	.word	0x4009999a
 8015220:	3709f740 	.word	0x3709f740
 8015224:	0801f4b4 	.word	0x0801f4b4
 8015228:	0801f4bc 	.word	0x0801f4bc

0801522c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801522c:	b590      	push	{r4, r7, lr}
 801522e:	b085      	sub	sp, #20
 8015230:	af02      	add	r7, sp, #8
 8015232:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015234:	4b11      	ldr	r3, [pc, #68]	@ (801527c <RegionAS923SetBandTxDone+0x50>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	4b11      	ldr	r3, [pc, #68]	@ (8015280 <RegionAS923SetBandTxDone+0x54>)
 801523a:	6819      	ldr	r1, [r3, #0]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	4618      	mov	r0, r3
 8015242:	4603      	mov	r3, r0
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4403      	add	r3, r0
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	440b      	add	r3, r1
 801524c:	3309      	adds	r3, #9
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	4619      	mov	r1, r3
 8015252:	460b      	mov	r3, r1
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	440b      	add	r3, r1
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	18d0      	adds	r0, r2, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6899      	ldr	r1, [r3, #8]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	785c      	ldrb	r4, [r3, #1]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	691a      	ldr	r2, [r3, #16]
 8015268:	9200      	str	r2, [sp, #0]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	4622      	mov	r2, r4
 801526e:	f001 f9e5 	bl	801663c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8015272:	bf00      	nop
 8015274:	370c      	adds	r7, #12
 8015276:	46bd      	mov	sp, r7
 8015278:	bd90      	pop	{r4, r7, pc}
 801527a:	bf00      	nop
 801527c:	20001bd0 	.word	0x20001bd0
 8015280:	20001bcc 	.word	0x20001bcc

08015284 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b08e      	sub	sp, #56	@ 0x38
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 801528c:	2364      	movs	r3, #100	@ 0x64
 801528e:	843b      	strh	r3, [r7, #32]
 8015290:	2300      	movs	r3, #0
 8015292:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015296:	2300      	movs	r3, #0
 8015298:	627b      	str	r3, [r7, #36]	@ 0x24
 801529a:	2300      	movs	r3, #0
 801529c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801529e:	2300      	movs	r3, #0
 80152a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80152a2:	2300      	movs	r3, #0
 80152a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80152a6:	2300      	movs	r3, #0
 80152a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	7b1b      	ldrb	r3, [r3, #12]
 80152b0:	2b02      	cmp	r3, #2
 80152b2:	d05e      	beq.n	8015372 <RegionAS923InitDefaults+0xee>
 80152b4:	2b02      	cmp	r3, #2
 80152b6:	dc6b      	bgt.n	8015390 <RegionAS923InitDefaults+0x10c>
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d002      	beq.n	80152c2 <RegionAS923InitDefaults+0x3e>
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d043      	beq.n	8015348 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80152c0:	e066      	b.n	8015390 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d063      	beq.n	8015392 <RegionAS923InitDefaults+0x10e>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d05f      	beq.n	8015392 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	4a30      	ldr	r2, [pc, #192]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 80152d8:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	689b      	ldr	r3, [r3, #8]
 80152de:	4a2f      	ldr	r2, [pc, #188]	@ (801539c <RegionAS923InitDefaults+0x118>)
 80152e0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80152e2:	4b2e      	ldr	r3, [pc, #184]	@ (801539c <RegionAS923InitDefaults+0x118>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f107 0120 	add.w	r1, r7, #32
 80152ea:	2218      	movs	r2, #24
 80152ec:	4618      	mov	r0, r3
 80152ee:	f001 fece 	bl	801708e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80152f2:	4b29      	ldr	r3, [pc, #164]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	4a2a      	ldr	r2, [pc, #168]	@ (80153a0 <RegionAS923InitDefaults+0x11c>)
 80152f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80152fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80152fe:	4b26      	ldr	r3, [pc, #152]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	4a28      	ldr	r2, [pc, #160]	@ (80153a4 <RegionAS923InitDefaults+0x120>)
 8015304:	330c      	adds	r3, #12
 8015306:	ca07      	ldmia	r2, {r0, r1, r2}
 8015308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 801530c:	4b22      	ldr	r3, [pc, #136]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	4b21      	ldr	r3, [pc, #132]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	6812      	ldr	r2, [r2, #0]
 8015316:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015318:	4b1f      	ldr	r3, [pc, #124]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	4b1e      	ldr	r3, [pc, #120]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68d2      	ldr	r2, [r2, #12]
 8015322:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8015324:	4b1c      	ldr	r3, [pc, #112]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2203      	movs	r2, #3
 801532a:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801532e:	4b1a      	ldr	r3, [pc, #104]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015336:	4b18      	ldr	r3, [pc, #96]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801533e:	2201      	movs	r2, #1
 8015340:	4619      	mov	r1, r3
 8015342:	f001 f955 	bl	80165f0 <RegionCommonChanMaskCopy>
 8015346:	e024      	b.n	8015392 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015348:	4b13      	ldr	r3, [pc, #76]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2200      	movs	r2, #0
 801534e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015350:	4b11      	ldr	r3, [pc, #68]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2200      	movs	r2, #0
 8015356:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015358:	4b0f      	ldr	r3, [pc, #60]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015360:	4b0d      	ldr	r3, [pc, #52]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015368:	2201      	movs	r2, #1
 801536a:	4619      	mov	r1, r3
 801536c:	f001 f940 	bl	80165f0 <RegionCommonChanMaskCopy>
            break;
 8015370:	e00f      	b.n	8015392 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015372:	4b09      	ldr	r3, [pc, #36]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801537a:	4b07      	ldr	r3, [pc, #28]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015382:	4b05      	ldr	r3, [pc, #20]	@ (8015398 <RegionAS923InitDefaults+0x114>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	430a      	orrs	r2, r1
 8015388:	b292      	uxth	r2, r2
 801538a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 801538e:	e000      	b.n	8015392 <RegionAS923InitDefaults+0x10e>
            break;
 8015390:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015392:	3738      	adds	r7, #56	@ 0x38
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	20001bcc 	.word	0x20001bcc
 801539c:	20001bd0 	.word	0x20001bd0
 80153a0:	0801eef0 	.word	0x0801eef0
 80153a4:	0801eefc 	.word	0x0801eefc

080153a8 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	460b      	mov	r3, r1
 80153b2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 80153b4:	78fb      	ldrb	r3, [r7, #3]
 80153b6:	2b0f      	cmp	r3, #15
 80153b8:	f200 808f 	bhi.w	80154da <RegionAS923Verify+0x132>
 80153bc:	a201      	add	r2, pc, #4	@ (adr r2, 80153c4 <RegionAS923Verify+0x1c>)
 80153be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c2:	bf00      	nop
 80153c4:	08015405 	.word	0x08015405
 80153c8:	080154db 	.word	0x080154db
 80153cc:	080154db 	.word	0x080154db
 80153d0:	080154db 	.word	0x080154db
 80153d4:	080154db 	.word	0x080154db
 80153d8:	08015413 	.word	0x08015413
 80153dc:	08015457 	.word	0x08015457
 80153e0:	08015475 	.word	0x08015475
 80153e4:	080154db 	.word	0x080154db
 80153e8:	080154b9 	.word	0x080154b9
 80153ec:	080154b9 	.word	0x080154b9
 80153f0:	080154db 	.word	0x080154db
 80153f4:	080154db 	.word	0x080154db
 80153f8:	080154db 	.word	0x080154db
 80153fc:	080154db 	.word	0x080154db
 8015400:	080154d7 	.word	0x080154d7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	4618      	mov	r0, r3
 801540a:	f7ff fd23 	bl	8014e54 <VerifyRfFreq>
 801540e:	4603      	mov	r3, r0
 8015410:	e064      	b.n	80154dc <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	789b      	ldrb	r3, [r3, #2]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10e      	bne.n	8015438 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f993 3000 	ldrsb.w	r3, [r3]
 8015420:	2207      	movs	r2, #7
 8015422:	2100      	movs	r1, #0
 8015424:	4618      	mov	r0, r3
 8015426:	f001 f866 	bl	80164f6 <RegionCommonValueInRange>
 801542a:	4603      	mov	r3, r0
 801542c:	2b00      	cmp	r3, #0
 801542e:	bf14      	ite	ne
 8015430:	2301      	movne	r3, #1
 8015432:	2300      	moveq	r3, #0
 8015434:	b2db      	uxtb	r3, r3
 8015436:	e051      	b.n	80154dc <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f993 3000 	ldrsb.w	r3, [r3]
 801543e:	2207      	movs	r2, #7
 8015440:	2102      	movs	r1, #2
 8015442:	4618      	mov	r0, r3
 8015444:	f001 f857 	bl	80164f6 <RegionCommonValueInRange>
 8015448:	4603      	mov	r3, r0
 801544a:	2b00      	cmp	r3, #0
 801544c:	bf14      	ite	ne
 801544e:	2301      	movne	r3, #1
 8015450:	2300      	moveq	r3, #0
 8015452:	b2db      	uxtb	r3, r3
 8015454:	e042      	b.n	80154dc <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f993 3000 	ldrsb.w	r3, [r3]
 801545c:	2205      	movs	r2, #5
 801545e:	2100      	movs	r1, #0
 8015460:	4618      	mov	r0, r3
 8015462:	f001 f848 	bl	80164f6 <RegionCommonValueInRange>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	bf14      	ite	ne
 801546c:	2301      	movne	r3, #1
 801546e:	2300      	moveq	r3, #0
 8015470:	b2db      	uxtb	r3, r3
 8015472:	e033      	b.n	80154dc <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	785b      	ldrb	r3, [r3, #1]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10e      	bne.n	801549a <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f993 3000 	ldrsb.w	r3, [r3]
 8015482:	2207      	movs	r2, #7
 8015484:	2100      	movs	r1, #0
 8015486:	4618      	mov	r0, r3
 8015488:	f001 f835 	bl	80164f6 <RegionCommonValueInRange>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	bf14      	ite	ne
 8015492:	2301      	movne	r3, #1
 8015494:	2300      	moveq	r3, #0
 8015496:	b2db      	uxtb	r3, r3
 8015498:	e020      	b.n	80154dc <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f993 3000 	ldrsb.w	r3, [r3]
 80154a0:	2207      	movs	r2, #7
 80154a2:	2102      	movs	r1, #2
 80154a4:	4618      	mov	r0, r3
 80154a6:	f001 f826 	bl	80164f6 <RegionCommonValueInRange>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	bf14      	ite	ne
 80154b0:	2301      	movne	r3, #1
 80154b2:	2300      	moveq	r3, #0
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	e011      	b.n	80154dc <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f993 3000 	ldrsb.w	r3, [r3]
 80154be:	2207      	movs	r2, #7
 80154c0:	2100      	movs	r1, #0
 80154c2:	4618      	mov	r0, r3
 80154c4:	f001 f817 	bl	80164f6 <RegionCommonValueInRange>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	bf14      	ite	ne
 80154ce:	2301      	movne	r3, #1
 80154d0:	2300      	moveq	r3, #0
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	e002      	b.n	80154dc <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 80154d6:	2300      	movs	r3, #0
 80154d8:	e000      	b.n	80154dc <RegionAS923Verify+0x134>
        }
        default:
            return false;
 80154da:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08a      	sub	sp, #40	@ 0x28
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80154ec:	2350      	movs	r3, #80	@ 0x50
 80154ee:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	7a1b      	ldrb	r3, [r3, #8]
 80154f6:	2b10      	cmp	r3, #16
 80154f8:	d162      	bne.n	80155c0 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	330f      	adds	r3, #15
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d15e      	bne.n	80155c4 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015506:	2300      	movs	r3, #0
 8015508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801550c:	2302      	movs	r3, #2
 801550e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015512:	e050      	b.n	80155b6 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8015514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015518:	2b06      	cmp	r3, #6
 801551a:	d824      	bhi.n	8015566 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	685a      	ldr	r2, [r3, #4]
 8015520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015524:	4413      	add	r3, r2
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801552a:	69ba      	ldr	r2, [r7, #24]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6859      	ldr	r1, [r3, #4]
 8015530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015534:	3301      	adds	r3, #1
 8015536:	440b      	add	r3, r1
 8015538:	781b      	ldrb	r3, [r3, #0]
 801553a:	021b      	lsls	r3, r3, #8
 801553c:	4313      	orrs	r3, r2
 801553e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015540:	69ba      	ldr	r2, [r7, #24]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6859      	ldr	r1, [r3, #4]
 8015546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801554a:	3302      	adds	r3, #2
 801554c:	440b      	add	r3, r1
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	041b      	lsls	r3, r3, #16
 8015552:	4313      	orrs	r3, r2
 8015554:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	2264      	movs	r2, #100	@ 0x64
 801555a:	fb02 f303 	mul.w	r3, r2, r3
 801555e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015560:	2300      	movs	r3, #0
 8015562:	61fb      	str	r3, [r7, #28]
 8015564:	e006      	b.n	8015574 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015566:	2300      	movs	r3, #0
 8015568:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015570:	2300      	movs	r3, #0
 8015572:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015574:	69bb      	ldr	r3, [r7, #24]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00b      	beq.n	8015592 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801557a:	f107 0318 	add.w	r3, r7, #24
 801557e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015584:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8015586:	f107 0310 	add.w	r3, r7, #16
 801558a:	4618      	mov	r0, r3
 801558c:	f000 fd00 	bl	8015f90 <RegionAS923ChannelAdd>
 8015590:	e007      	b.n	80155a2 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015592:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015596:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8015598:	f107 030c 	add.w	r3, r7, #12
 801559c:	4618      	mov	r0, r3
 801559e:	f000 fd93 	bl	80160c8 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80155a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155a6:	3303      	adds	r3, #3
 80155a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155b0:	3301      	adds	r3, #1
 80155b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80155b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155ba:	2b0f      	cmp	r3, #15
 80155bc:	d9aa      	bls.n	8015514 <RegionAS923ApplyCFList+0x30>
 80155be:	e002      	b.n	80155c6 <RegionAS923ApplyCFList+0xe2>
        return;
 80155c0:	bf00      	nop
 80155c2:	e000      	b.n	80155c6 <RegionAS923ApplyCFList+0xe2>
        return;
 80155c4:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 80155c6:	3728      	adds	r7, #40	@ 0x28
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}

080155cc <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	791b      	ldrb	r3, [r3, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d002      	beq.n	80155e2 <RegionAS923ChanMaskSet+0x16>
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d00b      	beq.n	80155f8 <RegionAS923ChanMaskSet+0x2c>
 80155e0:	e015      	b.n	801560e <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80155e2:	4b0e      	ldr	r3, [pc, #56]	@ (801561c <RegionAS923ChanMaskSet+0x50>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2201      	movs	r2, #1
 80155f0:	4619      	mov	r1, r3
 80155f2:	f000 fffd 	bl	80165f0 <RegionCommonChanMaskCopy>
            break;
 80155f6:	e00c      	b.n	8015612 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80155f8:	4b08      	ldr	r3, [pc, #32]	@ (801561c <RegionAS923ChanMaskSet+0x50>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2201      	movs	r2, #1
 8015606:	4619      	mov	r1, r3
 8015608:	f000 fff2 	bl	80165f0 <RegionCommonChanMaskCopy>
            break;
 801560c:	e001      	b.n	8015612 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 801560e:	2300      	movs	r3, #0
 8015610:	e000      	b.n	8015614 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8015612:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015614:	4618      	mov	r0, r3
 8015616:	3708      	adds	r7, #8
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	20001bcc 	.word	0x20001bcc

08015620 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b088      	sub	sp, #32
 8015624:	af02      	add	r7, sp, #8
 8015626:	60ba      	str	r2, [r7, #8]
 8015628:	607b      	str	r3, [r7, #4]
 801562a:	4603      	mov	r3, r0
 801562c:	73fb      	strb	r3, [r7, #15]
 801562e:	460b      	mov	r3, r1
 8015630:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8015636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801563a:	2b07      	cmp	r3, #7
 801563c:	bfa8      	it	ge
 801563e:	2307      	movge	r3, #7
 8015640:	b25a      	sxtb	r2, r3
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801564c:	491e      	ldr	r1, [pc, #120]	@ (80156c8 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801564e:	4618      	mov	r0, r3
 8015650:	f001 fc6e 	bl	8016f30 <RegionCommonGetBandwidth>
 8015654:	4603      	mov	r3, r0
 8015656:	b2da      	uxtb	r2, r3
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015662:	2b07      	cmp	r3, #7
 8015664:	d10a      	bne.n	801567c <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801566c:	461a      	mov	r2, r3
 801566e:	4b17      	ldr	r3, [pc, #92]	@ (80156cc <RegionAS923ComputeRxWindowParameters+0xac>)
 8015670:	5c9b      	ldrb	r3, [r3, r2]
 8015672:	4618      	mov	r0, r3
 8015674:	f001 f9f0 	bl	8016a58 <RegionCommonComputeSymbolTimeFsk>
 8015678:	6178      	str	r0, [r7, #20]
 801567a:	e011      	b.n	80156a0 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015682:	461a      	mov	r2, r3
 8015684:	4b11      	ldr	r3, [pc, #68]	@ (80156cc <RegionAS923ComputeRxWindowParameters+0xac>)
 8015686:	5c9a      	ldrb	r2, [r3, r2]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801568e:	4619      	mov	r1, r3
 8015690:	4b0d      	ldr	r3, [pc, #52]	@ (80156c8 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015696:	4619      	mov	r1, r3
 8015698:	4610      	mov	r0, r2
 801569a:	f001 f9c7 	bl	8016a2c <RegionCommonComputeSymbolTimeLoRa>
 801569e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80156a0:	4b0b      	ldr	r3, [pc, #44]	@ (80156d0 <RegionAS923ComputeRxWindowParameters+0xb0>)
 80156a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80156a4:	4798      	blx	r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	3308      	adds	r3, #8
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	320c      	adds	r2, #12
 80156ae:	7bb9      	ldrb	r1, [r7, #14]
 80156b0:	9201      	str	r2, [sp, #4]
 80156b2:	9300      	str	r3, [sp, #0]
 80156b4:	4603      	mov	r3, r0
 80156b6:	68ba      	ldr	r2, [r7, #8]
 80156b8:	6978      	ldr	r0, [r7, #20]
 80156ba:	f001 f9dd 	bl	8016a78 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 80156be:	bf00      	nop
 80156c0:	3718      	adds	r7, #24
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	0801f4bc 	.word	0x0801f4bc
 80156cc:	0801f4b4 	.word	0x0801f4b4
 80156d0:	0801f574 	.word	0x0801f574

080156d4 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80156d4:	b5b0      	push	{r4, r5, r7, lr}
 80156d6:	b090      	sub	sp, #64	@ 0x40
 80156d8:	af0a      	add	r7, sp, #40	@ 0x28
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	785b      	ldrb	r3, [r3, #1]
 80156e2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80156e4:	2300      	movs	r3, #0
 80156e6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80156e8:	2300      	movs	r3, #0
 80156ea:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80156f2:	4b5a      	ldr	r3, [pc, #360]	@ (801585c <RegionAS923RxConfig+0x188>)
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	4798      	blx	r3
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <RegionAS923RxConfig+0x2e>
    {
        return false;
 80156fe:	2300      	movs	r3, #0
 8015700:	e0a8      	b.n	8015854 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	7cdb      	ldrb	r3, [r3, #19]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d126      	bne.n	8015758 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801570a:	4b55      	ldr	r3, [pc, #340]	@ (8015860 <RegionAS923RxConfig+0x18c>)
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	4619      	mov	r1, r3
 8015714:	460b      	mov	r3, r1
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	440b      	add	r3, r1
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	4413      	add	r3, r2
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015722:	4b4f      	ldr	r3, [pc, #316]	@ (8015860 <RegionAS923RxConfig+0x18c>)
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	4619      	mov	r1, r3
 801572c:	460b      	mov	r3, r1
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	440b      	add	r3, r1
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	4413      	add	r3, r2
 8015736:	3304      	adds	r3, #4
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d00c      	beq.n	8015758 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801573e:	4b48      	ldr	r3, [pc, #288]	@ (8015860 <RegionAS923RxConfig+0x18c>)
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	4619      	mov	r1, r3
 8015748:	460b      	mov	r3, r1
 801574a:	005b      	lsls	r3, r3, #1
 801574c:	440b      	add	r3, r1
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4413      	add	r3, r2
 8015752:	3304      	adds	r3, #4
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8015758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801575c:	4a41      	ldr	r2, [pc, #260]	@ (8015864 <RegionAS923RxConfig+0x190>)
 801575e:	5cd3      	ldrb	r3, [r2, r3]
 8015760:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015762:	4b3e      	ldr	r3, [pc, #248]	@ (801585c <RegionAS923RxConfig+0x188>)
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	6938      	ldr	r0, [r7, #16]
 8015768:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801576a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801576e:	2b07      	cmp	r3, #7
 8015770:	d128      	bne.n	80157c4 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015772:	2300      	movs	r3, #0
 8015774:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015776:	4b39      	ldr	r3, [pc, #228]	@ (801585c <RegionAS923RxConfig+0x188>)
 8015778:	699c      	ldr	r4, [r3, #24]
 801577a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801577e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015782:	fb02 f303 	mul.w	r3, r2, r3
 8015786:	4619      	mov	r1, r3
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	689b      	ldr	r3, [r3, #8]
 801578c:	b29b      	uxth	r3, r3
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	7c92      	ldrb	r2, [r2, #18]
 8015792:	7df8      	ldrb	r0, [r7, #23]
 8015794:	9209      	str	r2, [sp, #36]	@ 0x24
 8015796:	2200      	movs	r2, #0
 8015798:	9208      	str	r2, [sp, #32]
 801579a:	2200      	movs	r2, #0
 801579c:	9207      	str	r2, [sp, #28]
 801579e:	2200      	movs	r2, #0
 80157a0:	9206      	str	r2, [sp, #24]
 80157a2:	2201      	movs	r2, #1
 80157a4:	9205      	str	r2, [sp, #20]
 80157a6:	2200      	movs	r2, #0
 80157a8:	9204      	str	r2, [sp, #16]
 80157aa:	2200      	movs	r2, #0
 80157ac:	9203      	str	r2, [sp, #12]
 80157ae:	9302      	str	r3, [sp, #8]
 80157b0:	2305      	movs	r3, #5
 80157b2:	9301      	str	r3, [sp, #4]
 80157b4:	4b2c      	ldr	r3, [pc, #176]	@ (8015868 <RegionAS923RxConfig+0x194>)
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	2300      	movs	r3, #0
 80157ba:	460a      	mov	r2, r1
 80157bc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80157c0:	47a0      	blx	r4
 80157c2:	e024      	b.n	801580e <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80157c4:	2301      	movs	r3, #1
 80157c6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80157c8:	4b24      	ldr	r3, [pc, #144]	@ (801585c <RegionAS923RxConfig+0x188>)
 80157ca:	699c      	ldr	r4, [r3, #24]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	789b      	ldrb	r3, [r3, #2]
 80157d0:	461d      	mov	r5, r3
 80157d2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	689b      	ldr	r3, [r3, #8]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	7c92      	ldrb	r2, [r2, #18]
 80157e0:	7df8      	ldrb	r0, [r7, #23]
 80157e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80157e4:	2201      	movs	r2, #1
 80157e6:	9208      	str	r2, [sp, #32]
 80157e8:	2200      	movs	r2, #0
 80157ea:	9207      	str	r2, [sp, #28]
 80157ec:	2200      	movs	r2, #0
 80157ee:	9206      	str	r2, [sp, #24]
 80157f0:	2200      	movs	r2, #0
 80157f2:	9205      	str	r2, [sp, #20]
 80157f4:	2200      	movs	r2, #0
 80157f6:	9204      	str	r2, [sp, #16]
 80157f8:	2200      	movs	r2, #0
 80157fa:	9203      	str	r2, [sp, #12]
 80157fc:	9302      	str	r3, [sp, #8]
 80157fe:	2308      	movs	r3, #8
 8015800:	9301      	str	r3, [sp, #4]
 8015802:	2300      	movs	r3, #0
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	2301      	movs	r3, #1
 8015808:	460a      	mov	r2, r1
 801580a:	4629      	mov	r1, r5
 801580c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7c5b      	ldrb	r3, [r3, #17]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d005      	beq.n	8015822 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8015816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801581a:	4a14      	ldr	r2, [pc, #80]	@ (801586c <RegionAS923RxConfig+0x198>)
 801581c:	5cd3      	ldrb	r3, [r2, r3]
 801581e:	75bb      	strb	r3, [r7, #22]
 8015820:	e004      	b.n	801582c <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8015822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015826:	4a12      	ldr	r2, [pc, #72]	@ (8015870 <RegionAS923RxConfig+0x19c>)
 8015828:	5cd3      	ldrb	r3, [r2, r3]
 801582a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801582c:	4b0b      	ldr	r3, [pc, #44]	@ (801585c <RegionAS923RxConfig+0x188>)
 801582e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015830:	7dba      	ldrb	r2, [r7, #22]
 8015832:	320d      	adds	r2, #13
 8015834:	b2d1      	uxtb	r1, r2
 8015836:	7dfa      	ldrb	r2, [r7, #23]
 8015838:	4610      	mov	r0, r2
 801583a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	7cdb      	ldrb	r3, [r3, #19]
 8015840:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015844:	6939      	ldr	r1, [r7, #16]
 8015846:	4618      	mov	r0, r3
 8015848:	f001 fb90 	bl	8016f6c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	7bfa      	ldrb	r2, [r7, #15]
 8015850:	701a      	strb	r2, [r3, #0]
    return true;
 8015852:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015854:	4618      	mov	r0, r3
 8015856:	3718      	adds	r7, #24
 8015858:	46bd      	mov	sp, r7
 801585a:	bdb0      	pop	{r4, r5, r7, pc}
 801585c:	0801f574 	.word	0x0801f574
 8015860:	20001bcc 	.word	0x20001bcc
 8015864:	0801f4b4 	.word	0x0801f4b4
 8015868:	00014585 	.word	0x00014585
 801586c:	0801f4e4 	.word	0x0801f4e4
 8015870:	0801f4dc 	.word	0x0801f4dc

08015874 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015874:	b590      	push	{r4, r7, lr}
 8015876:	b093      	sub	sp, #76	@ 0x4c
 8015878:	af0a      	add	r7, sp, #40	@ 0x28
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015886:	461a      	mov	r2, r3
 8015888:	4b5d      	ldr	r3, [pc, #372]	@ (8015a00 <RegionAS923TxConfig+0x18c>)
 801588a:	5c9b      	ldrb	r3, [r3, r2]
 801588c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015894:	4b5b      	ldr	r3, [pc, #364]	@ (8015a04 <RegionAS923TxConfig+0x190>)
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	4b5b      	ldr	r3, [pc, #364]	@ (8015a08 <RegionAS923TxConfig+0x194>)
 801589a:	6819      	ldr	r1, [r3, #0]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	461c      	mov	r4, r3
 80158a2:	4623      	mov	r3, r4
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	4423      	add	r3, r4
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	440b      	add	r3, r1
 80158ac:	3309      	adds	r3, #9
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	4619      	mov	r1, r3
 80158b2:	460b      	mov	r3, r1
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	440b      	add	r3, r1
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	4413      	add	r3, r2
 80158bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80158c0:	4619      	mov	r1, r3
 80158c2:	f001 fb20 	bl	8016f06 <RegionCommonLimitTxPower>
 80158c6:	4603      	mov	r3, r0
 80158c8:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158d0:	494e      	ldr	r1, [pc, #312]	@ (8015a0c <RegionAS923TxConfig+0x198>)
 80158d2:	4618      	mov	r0, r3
 80158d4:	f001 fb2c 	bl	8016f30 <RegionCommonGetBandwidth>
 80158d8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80158da:	2300      	movs	r3, #0
 80158dc:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	6859      	ldr	r1, [r3, #4]
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	689a      	ldr	r2, [r3, #8]
 80158e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f001 f97c 	bl	8016be8 <RegionCommonComputeTxPower>
 80158f0:	4603      	mov	r3, r0
 80158f2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80158f4:	4b46      	ldr	r3, [pc, #280]	@ (8015a10 <RegionAS923TxConfig+0x19c>)
 80158f6:	68da      	ldr	r2, [r3, #12]
 80158f8:	4b43      	ldr	r3, [pc, #268]	@ (8015a08 <RegionAS923TxConfig+0x194>)
 80158fa:	6819      	ldr	r1, [r3, #0]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	4618      	mov	r0, r3
 8015902:	4603      	mov	r3, r0
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4403      	add	r3, r0
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	440b      	add	r3, r1
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	4618      	mov	r0, r3
 8015910:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015918:	2b07      	cmp	r3, #7
 801591a:	d124      	bne.n	8015966 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801591c:	2300      	movs	r3, #0
 801591e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015920:	4b3b      	ldr	r3, [pc, #236]	@ (8015a10 <RegionAS923TxConfig+0x19c>)
 8015922:	69dc      	ldr	r4, [r3, #28]
 8015924:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801592c:	fb02 f303 	mul.w	r3, r2, r3
 8015930:	461a      	mov	r2, r3
 8015932:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015936:	7ff8      	ldrb	r0, [r7, #31]
 8015938:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801593c:	9308      	str	r3, [sp, #32]
 801593e:	2300      	movs	r3, #0
 8015940:	9307      	str	r3, [sp, #28]
 8015942:	2300      	movs	r3, #0
 8015944:	9306      	str	r3, [sp, #24]
 8015946:	2300      	movs	r3, #0
 8015948:	9305      	str	r3, [sp, #20]
 801594a:	2301      	movs	r3, #1
 801594c:	9304      	str	r3, [sp, #16]
 801594e:	2300      	movs	r3, #0
 8015950:	9303      	str	r3, [sp, #12]
 8015952:	2305      	movs	r3, #5
 8015954:	9302      	str	r3, [sp, #8]
 8015956:	2300      	movs	r3, #0
 8015958:	9301      	str	r3, [sp, #4]
 801595a:	9200      	str	r2, [sp, #0]
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015962:	47a0      	blx	r4
 8015964:	e01d      	b.n	80159a2 <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8015966:	2301      	movs	r3, #1
 8015968:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801596a:	4b29      	ldr	r3, [pc, #164]	@ (8015a10 <RegionAS923TxConfig+0x19c>)
 801596c:	69dc      	ldr	r4, [r3, #28]
 801596e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015972:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015976:	7ff8      	ldrb	r0, [r7, #31]
 8015978:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801597c:	9208      	str	r2, [sp, #32]
 801597e:	2200      	movs	r2, #0
 8015980:	9207      	str	r2, [sp, #28]
 8015982:	2200      	movs	r2, #0
 8015984:	9206      	str	r2, [sp, #24]
 8015986:	2200      	movs	r2, #0
 8015988:	9205      	str	r2, [sp, #20]
 801598a:	2201      	movs	r2, #1
 801598c:	9204      	str	r2, [sp, #16]
 801598e:	2200      	movs	r2, #0
 8015990:	9203      	str	r2, [sp, #12]
 8015992:	2208      	movs	r2, #8
 8015994:	9202      	str	r2, [sp, #8]
 8015996:	2201      	movs	r2, #1
 8015998:	9201      	str	r2, [sp, #4]
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	2200      	movs	r2, #0
 80159a0:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80159a2:	4b19      	ldr	r3, [pc, #100]	@ (8015a08 <RegionAS923TxConfig+0x194>)
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	781b      	ldrb	r3, [r3, #0]
 80159aa:	4619      	mov	r1, r3
 80159ac:	460b      	mov	r3, r1
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	440b      	add	r3, r1
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	4413      	add	r3, r2
 80159b6:	681a      	ldr	r2, [r3, #0]
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159be:	4619      	mov	r1, r3
 80159c0:	4610      	mov	r0, r2
 80159c2:	f001 fb05 	bl	8016fd0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	899b      	ldrh	r3, [r3, #12]
 80159d0:	4619      	mov	r1, r3
 80159d2:	4610      	mov	r0, r2
 80159d4:	f7ff fa64 	bl	8014ea0 <GetTimeOnAir>
 80159d8:	4602      	mov	r2, r0
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80159de:	4b0c      	ldr	r3, [pc, #48]	@ (8015a10 <RegionAS923TxConfig+0x19c>)
 80159e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159e2:	68fa      	ldr	r2, [r7, #12]
 80159e4:	8992      	ldrh	r2, [r2, #12]
 80159e6:	b2d1      	uxtb	r1, r2
 80159e8:	7ffa      	ldrb	r2, [r7, #31]
 80159ea:	4610      	mov	r0, r2
 80159ec:	4798      	blx	r3

    *txPower = txPowerLimited;
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	7f7a      	ldrb	r2, [r7, #29]
 80159f2:	701a      	strb	r2, [r3, #0]
    return true;
 80159f4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3724      	adds	r7, #36	@ 0x24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd90      	pop	{r4, r7, pc}
 80159fe:	bf00      	nop
 8015a00:	0801f4b4 	.word	0x0801f4b4
 8015a04:	20001bd0 	.word	0x20001bd0
 8015a08:	20001bcc 	.word	0x20001bcc
 8015a0c:	0801f4bc 	.word	0x0801f4bc
 8015a10:	0801f574 	.word	0x0801f574

08015a14 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015a14:	b590      	push	{r4, r7, lr}
 8015a16:	b093      	sub	sp, #76	@ 0x4c
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	60f8      	str	r0, [r7, #12]
 8015a1c:	60b9      	str	r1, [r7, #8]
 8015a1e:	607a      	str	r2, [r7, #4]
 8015a20:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015a22:	2307      	movs	r3, #7
 8015a24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015a28:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	601a      	str	r2, [r3, #0]
 8015a30:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015a42:	e085      	b.n	8015b50 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	685a      	ldr	r2, [r3, #4]
 8015a48:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015a4c:	4413      	add	r3, r2
 8015a4e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015a52:	4611      	mov	r1, r2
 8015a54:	4618      	mov	r0, r3
 8015a56:	f000 ff0f 	bl	8016878 <RegionCommonParseLinkAdrReq>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015a60:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d07b      	beq.n	8015b60 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015a68:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015a6c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a70:	4413      	add	r3, r2
 8015a72:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015a76:	2307      	movs	r3, #7
 8015a78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015a7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a80:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015a82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d109      	bne.n	8015a9e <RegionAS923LinkAdrReq+0x8a>
 8015a8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d106      	bne.n	8015a9e <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015a90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a94:	f023 0301 	bic.w	r3, r3, #1
 8015a98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015a9c:	e058      	b.n	8015b50 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d003      	beq.n	8015aae <RegionAS923LinkAdrReq+0x9a>
 8015aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015aaa:	2b05      	cmp	r3, #5
 8015aac:	d903      	bls.n	8015ab6 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015aae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ab2:	2b06      	cmp	r3, #6
 8015ab4:	d906      	bls.n	8015ac4 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015ab6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015aba:	f023 0301 	bic.w	r3, r3, #1
 8015abe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015ac2:	e045      	b.n	8015b50 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015aca:	e03d      	b.n	8015b48 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015acc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015ad0:	2b06      	cmp	r3, #6
 8015ad2:	d118      	bne.n	8015b06 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8015c54 <RegionAS923LinkAdrReq+0x240>)
 8015ad6:	6819      	ldr	r1, [r3, #0]
 8015ad8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015adc:	4613      	mov	r3, r2
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	4413      	add	r3, r2
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	440b      	add	r3, r1
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d028      	beq.n	8015b3e <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015aec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015af0:	2201      	movs	r2, #1
 8015af2:	fa02 f303 	lsl.w	r3, r2, r3
 8015af6:	b21a      	sxth	r2, r3
 8015af8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015afa:	b21b      	sxth	r3, r3
 8015afc:	4313      	orrs	r3, r2
 8015afe:	b21b      	sxth	r3, r3
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b04:	e01b      	b.n	8015b3e <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b08:	461a      	mov	r2, r3
 8015b0a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b0e:	fa42 f303 	asr.w	r3, r2, r3
 8015b12:	f003 0301 	and.w	r3, r3, #1
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d011      	beq.n	8015b3e <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8015c54 <RegionAS923LinkAdrReq+0x240>)
 8015b1c:	6819      	ldr	r1, [r3, #0]
 8015b1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015b22:	4613      	mov	r3, r2
 8015b24:	005b      	lsls	r3, r3, #1
 8015b26:	4413      	add	r3, r2
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	440b      	add	r3, r1
 8015b2c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d105      	bne.n	8015b3e <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015b32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b36:	f023 0301 	bic.w	r3, r3, #1
 8015b3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015b3e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b42:	3301      	adds	r3, #1
 8015b44:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015b48:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b4c:	2b0f      	cmp	r3, #15
 8015b4e:	d9bd      	bls.n	8015acc <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	7a1b      	ldrb	r3, [r3, #8]
 8015b54:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	f4ff af73 	bcc.w	8015a44 <RegionAS923LinkAdrReq+0x30>
 8015b5e:	e000      	b.n	8015b62 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015b60:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015b62:	2302      	movs	r3, #2
 8015b64:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	7a5b      	ldrb	r3, [r3, #9]
 8015b6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015b70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ff f9e3 	bl	8014f40 <RegionAS923GetPhyParam>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015b7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b82:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	7a9b      	ldrb	r3, [r3, #10]
 8015b88:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015b8a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015b8e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015b90:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015b94:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015b96:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015b9a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015ba2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015baa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	7b5b      	ldrb	r3, [r3, #13]
 8015bb0:	b25b      	sxtb	r3, r3
 8015bb2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015bb4:	2310      	movs	r3, #16
 8015bb6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015bb8:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015bbc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bc0:	b25b      	sxtb	r3, r3
 8015bc2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015bc6:	2307      	movs	r3, #7
 8015bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015bcc:	4b21      	ldr	r3, [pc, #132]	@ (8015c54 <RegionAS923LinkAdrReq+0x240>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8015bd2:	2307      	movs	r3, #7
 8015bd4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015be4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015be8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015bec:	1c9a      	adds	r2, r3, #2
 8015bee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015bf2:	1c59      	adds	r1, r3, #1
 8015bf4:	f107 0010 	add.w	r0, r7, #16
 8015bf8:	4623      	mov	r3, r4
 8015bfa:	f000 fe8f 	bl	801691c <RegionCommonLinkAdrReqVerifyParams>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c08:	2b07      	cmp	r3, #7
 8015c0a:	d10d      	bne.n	8015c28 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015c0c:	4b11      	ldr	r3, [pc, #68]	@ (8015c54 <RegionAS923LinkAdrReq+0x240>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015c14:	220c      	movs	r2, #12
 8015c16:	2100      	movs	r1, #0
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f001 fa73 	bl	8017104 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8015c54 <RegionAS923LinkAdrReq+0x240>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c24:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015c28:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015c30:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015c38:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015c42:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015c46:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015c48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	374c      	adds	r7, #76	@ 0x4c
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd90      	pop	{r4, r7, pc}
 8015c54:	20001bcc 	.word	0x20001bcc

08015c58 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015c60:	2307      	movs	r3, #7
 8015c62:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7ff f8f3 	bl	8014e54 <VerifyRfFreq>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	f083 0301 	eor.w	r3, r3, #1
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d003      	beq.n	8015c82 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015c7a:	7bfb      	ldrb	r3, [r7, #15]
 8015c7c:	f023 0301 	bic.w	r3, r3, #1
 8015c80:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f993 3000 	ldrsb.w	r3, [r3]
 8015c88:	2207      	movs	r2, #7
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f000 fc32 	bl	80164f6 <RegionCommonValueInRange>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d103      	bne.n	8015ca0 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015c98:	7bfb      	ldrb	r3, [r7, #15]
 8015c9a:	f023 0302 	bic.w	r3, r3, #2
 8015c9e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ca6:	2207      	movs	r2, #7
 8015ca8:	2100      	movs	r1, #0
 8015caa:	4618      	mov	r0, r3
 8015cac:	f000 fc23 	bl	80164f6 <RegionCommonValueInRange>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d103      	bne.n	8015cbe <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015cb6:	7bfb      	ldrb	r3, [r7, #15]
 8015cb8:	f023 0304 	bic.w	r3, r3, #4
 8015cbc:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015cd0:	2303      	movs	r3, #3
 8015cd2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d114      	bne.n	8015d08 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8015ce8:	f107 0308 	add.w	r3, r7, #8
 8015cec:	4618      	mov	r0, r3
 8015cee:	f000 f9eb 	bl	80160c8 <RegionAS923ChannelsRemove>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	f083 0301 	eor.w	r3, r3, #1
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d03b      	beq.n	8015d76 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015cfe:	7dfb      	ldrb	r3, [r7, #23]
 8015d00:	f023 0303 	bic.w	r3, r3, #3
 8015d04:	75fb      	strb	r3, [r7, #23]
 8015d06:	e036      	b.n	8015d76 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d14:	b2db      	uxtb	r3, r3
 8015d16:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015d18:	f107 030c 	add.w	r3, r7, #12
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f000 f937 	bl	8015f90 <RegionAS923ChannelAdd>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b06      	cmp	r3, #6
 8015d26:	d820      	bhi.n	8015d6a <RegionAS923NewChannelReq+0xa2>
 8015d28:	a201      	add	r2, pc, #4	@ (adr r2, 8015d30 <RegionAS923NewChannelReq+0x68>)
 8015d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d2e:	bf00      	nop
 8015d30:	08015d75 	.word	0x08015d75
 8015d34:	08015d6b 	.word	0x08015d6b
 8015d38:	08015d6b 	.word	0x08015d6b
 8015d3c:	08015d6b 	.word	0x08015d6b
 8015d40:	08015d4d 	.word	0x08015d4d
 8015d44:	08015d57 	.word	0x08015d57
 8015d48:	08015d61 	.word	0x08015d61
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015d4c:	7dfb      	ldrb	r3, [r7, #23]
 8015d4e:	f023 0301 	bic.w	r3, r3, #1
 8015d52:	75fb      	strb	r3, [r7, #23]
                break;
 8015d54:	e00f      	b.n	8015d76 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015d56:	7dfb      	ldrb	r3, [r7, #23]
 8015d58:	f023 0302 	bic.w	r3, r3, #2
 8015d5c:	75fb      	strb	r3, [r7, #23]
                break;
 8015d5e:	e00a      	b.n	8015d76 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015d60:	7dfb      	ldrb	r3, [r7, #23]
 8015d62:	f023 0303 	bic.w	r3, r3, #3
 8015d66:	75fb      	strb	r3, [r7, #23]
                break;
 8015d68:	e005      	b.n	8015d76 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015d6a:	7dfb      	ldrb	r3, [r7, #23]
 8015d6c:	f023 0303 	bic.w	r3, r3, #3
 8015d70:	75fb      	strb	r3, [r7, #23]
                break;
 8015d72:	e000      	b.n	8015d76 <RegionAS923NewChannelReq+0xae>
                break;
 8015d74:	bf00      	nop
            }
        }
    }

    return status;
 8015d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3718      	adds	r7, #24
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop

08015d84 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015d84:	b480      	push	{r7}
 8015d86:	b083      	sub	sp, #12
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	370c      	adds	r7, #12
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bc80      	pop	{r7}
 8015d96:	4770      	bx	lr

08015d98 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015da0:	2303      	movs	r3, #3
 8015da2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7ff f853 	bl	8014e54 <VerifyRfFreq>
 8015dae:	4603      	mov	r3, r0
 8015db0:	f083 0301 	eor.w	r3, r3, #1
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d003      	beq.n	8015dc2 <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
 8015dbc:	f023 0301 	bic.w	r3, r3, #1
 8015dc0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015dc2:	4b14      	ldr	r3, [pc, #80]	@ (8015e14 <RegionAS923DlChannelReq+0x7c>)
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	4619      	mov	r1, r3
 8015dcc:	460b      	mov	r3, r1
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	440b      	add	r3, r1
 8015dd2:	009b      	lsls	r3, r3, #2
 8015dd4:	4413      	add	r3, r2
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d103      	bne.n	8015de4 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8015ddc:	7bfb      	ldrb	r3, [r7, #15]
 8015dde:	f023 0302 	bic.w	r3, r3, #2
 8015de2:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015de4:	7bfb      	ldrb	r3, [r7, #15]
 8015de6:	2b03      	cmp	r3, #3
 8015de8:	d10d      	bne.n	8015e06 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015dea:	4b0a      	ldr	r3, [pc, #40]	@ (8015e14 <RegionAS923DlChannelReq+0x7c>)
 8015dec:	6819      	ldr	r1, [r3, #0]
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	4618      	mov	r0, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685a      	ldr	r2, [r3, #4]
 8015df8:	4603      	mov	r3, r0
 8015dfa:	005b      	lsls	r3, r3, #1
 8015dfc:	4403      	add	r3, r0
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	440b      	add	r3, r1
 8015e02:	3304      	adds	r3, #4
 8015e04:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8015e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	20001bcc 	.word	0x20001bcc

08015e18 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015e18:	b480      	push	{r7}
 8015e1a:	b083      	sub	sp, #12
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	4603      	mov	r3, r0
 8015e20:	460a      	mov	r2, r1
 8015e22:	71fb      	strb	r3, [r7, #7]
 8015e24:	4613      	mov	r3, r2
 8015e26:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015e28:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	370c      	adds	r7, #12
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bc80      	pop	{r7}
 8015e32:	4770      	bx	lr

08015e34 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b09a      	sub	sp, #104	@ 0x68
 8015e38:	af02      	add	r7, sp, #8
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
 8015e40:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015e42:	2300      	movs	r3, #0
 8015e44:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8015e4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015e52:	2200      	movs	r2, #0
 8015e54:	601a      	str	r2, [r3, #0]
 8015e56:	605a      	str	r2, [r3, #4]
 8015e58:	609a      	str	r2, [r3, #8]
 8015e5a:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015e5c:	230c      	movs	r3, #12
 8015e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015e62:	2303      	movs	r3, #3
 8015e64:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015e66:	4b48      	ldr	r3, [pc, #288]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015e6e:	2201      	movs	r2, #1
 8015e70:	2100      	movs	r1, #0
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 fb90 	bl	8016598 <RegionCommonCountChannels>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d10a      	bne.n	8015e94 <RegionAS923NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015e7e:	4b42      	ldr	r3, [pc, #264]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015e86:	4b40      	ldr	r3, [pc, #256]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f042 0203 	orr.w	r2, r2, #3
 8015e8e:	b292      	uxth	r2, r2
 8015e90:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	7a5b      	ldrb	r3, [r3, #9]
 8015e98:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015ea4:	4b38      	ldr	r3, [pc, #224]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015eac:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015eae:	4b36      	ldr	r3, [pc, #216]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015eb4:	4b35      	ldr	r3, [pc, #212]	@ (8015f8c <RegionAS923NextChannel+0x158>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8015eba:	2310      	movs	r3, #16
 8015ebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015ebe:	f107 0312 	add.w	r3, r7, #18
 8015ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	7a9b      	ldrb	r3, [r3, #10]
 8015ed4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015ede:	68fa      	ldr	r2, [r7, #12]
 8015ee0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015ee4:	320c      	adds	r2, #12
 8015ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015eea:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	7d1b      	ldrb	r3, [r3, #20]
 8015ef2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	8adb      	ldrh	r3, [r3, #22]
 8015f00:	4619      	mov	r1, r3
 8015f02:	4610      	mov	r0, r2
 8015f04:	f7fe ffcc 	bl	8014ea0 <GetTimeOnAir>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015f0c:	f107 0314 	add.w	r3, r7, #20
 8015f10:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015f12:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015f16:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015f1a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015f26:	9300      	str	r3, [sp, #0]
 8015f28:	460b      	mov	r3, r1
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	f000 ff4b 	bl	8016dc6 <RegionCommonIdentifyChannels>
 8015f30:	4603      	mov	r3, r0
 8015f32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015f36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d10e      	bne.n	8015f5c <RegionAS923NextChannel+0x128>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015f3e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015f42:	3b01      	subs	r3, #1
 8015f44:	4619      	mov	r1, r3
 8015f46:	2000      	movs	r0, #0
 8015f48:	f001 f88a 	bl	8017060 <randr>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	3360      	adds	r3, #96	@ 0x60
 8015f50:	443b      	add	r3, r7
 8015f52:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	701a      	strb	r2, [r3, #0]
 8015f5a:	e00e      	b.n	8015f7a <RegionAS923NextChannel+0x146>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f60:	2b0c      	cmp	r3, #12
 8015f62:	d10a      	bne.n	8015f7a <RegionAS923NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015f64:	4b08      	ldr	r3, [pc, #32]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015f6c:	4b06      	ldr	r3, [pc, #24]	@ (8015f88 <RegionAS923NextChannel+0x154>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f042 0203 	orr.w	r2, r2, #3
 8015f74:	b292      	uxth	r2, r2
 8015f76:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8015f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3760      	adds	r7, #96	@ 0x60
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	20001bcc 	.word	0x20001bcc
 8015f8c:	20001bd0 	.word	0x20001bd0

08015f90 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	791b      	ldrb	r3, [r3, #4]
 8015fa4:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015fa6:	7b7b      	ldrb	r3, [r7, #13]
 8015fa8:	2b01      	cmp	r3, #1
 8015faa:	d801      	bhi.n	8015fb0 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015fac:	2306      	movs	r3, #6
 8015fae:	e085      	b.n	80160bc <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8015fb0:	7b7b      	ldrb	r3, [r7, #13]
 8015fb2:	2b0f      	cmp	r3, #15
 8015fb4:	d901      	bls.n	8015fba <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015fb6:	2303      	movs	r3, #3
 8015fb8:	e080      	b.n	80160bc <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	7a1b      	ldrb	r3, [r3, #8]
 8015fc0:	f343 0303 	sbfx	r3, r3, #0, #4
 8015fc4:	b25b      	sxtb	r3, r3
 8015fc6:	2207      	movs	r2, #7
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f000 fa93 	bl	80164f6 <RegionCommonValueInRange>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d101      	bne.n	8015fda <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	7a1b      	ldrb	r3, [r3, #8]
 8015fe0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015fe4:	b25b      	sxtb	r3, r3
 8015fe6:	2207      	movs	r2, #7
 8015fe8:	2100      	movs	r1, #0
 8015fea:	4618      	mov	r0, r3
 8015fec:	f000 fa83 	bl	80164f6 <RegionCommonValueInRange>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d101      	bne.n	8015ffa <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	7a1b      	ldrb	r3, [r3, #8]
 8016000:	f343 0303 	sbfx	r3, r3, #0, #4
 8016004:	b25a      	sxtb	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	7a1b      	ldrb	r3, [r3, #8]
 801600c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016010:	b25b      	sxtb	r3, r3
 8016012:	429a      	cmp	r2, r3
 8016014:	dd01      	ble.n	801601a <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8016016:	2301      	movs	r3, #1
 8016018:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801601a:	7bbb      	ldrb	r3, [r7, #14]
 801601c:	f083 0301 	eor.w	r3, r3, #1
 8016020:	b2db      	uxtb	r3, r3
 8016022:	2b00      	cmp	r3, #0
 8016024:	d00d      	beq.n	8016042 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4618      	mov	r0, r3
 801602e:	f7fe ff11 	bl	8014e54 <VerifyRfFreq>
 8016032:	4603      	mov	r3, r0
 8016034:	f083 0301 	eor.w	r3, r3, #1
 8016038:	b2db      	uxtb	r3, r3
 801603a:	2b00      	cmp	r3, #0
 801603c:	d001      	beq.n	8016042 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801603e:	2301      	movs	r3, #1
 8016040:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016042:	7bfb      	ldrb	r3, [r7, #15]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d004      	beq.n	8016052 <RegionAS923ChannelAdd+0xc2>
 8016048:	7bbb      	ldrb	r3, [r7, #14]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d001      	beq.n	8016052 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801604e:	2306      	movs	r3, #6
 8016050:	e034      	b.n	80160bc <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8016052:	7bfb      	ldrb	r3, [r7, #15]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d001      	beq.n	801605c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016058:	2305      	movs	r3, #5
 801605a:	e02f      	b.n	80160bc <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 801605c:	7bbb      	ldrb	r3, [r7, #14]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d001      	beq.n	8016066 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016062:	2304      	movs	r3, #4
 8016064:	e02a      	b.n	80160bc <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016066:	4b17      	ldr	r3, [pc, #92]	@ (80160c4 <RegionAS923ChannelAdd+0x134>)
 8016068:	6819      	ldr	r1, [r3, #0]
 801606a:	7b7a      	ldrb	r2, [r7, #13]
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	18c8      	adds	r0, r1, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	220c      	movs	r2, #12
 801607c:	4619      	mov	r1, r3
 801607e:	f001 f806 	bl	801708e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8016082:	4b10      	ldr	r3, [pc, #64]	@ (80160c4 <RegionAS923ChannelAdd+0x134>)
 8016084:	6819      	ldr	r1, [r3, #0]
 8016086:	7b7a      	ldrb	r2, [r7, #13]
 8016088:	4613      	mov	r3, r2
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	4413      	add	r3, r2
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	440b      	add	r3, r1
 8016092:	3309      	adds	r3, #9
 8016094:	2200      	movs	r2, #0
 8016096:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016098:	4b0a      	ldr	r3, [pc, #40]	@ (80160c4 <RegionAS923ChannelAdd+0x134>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80160a0:	b21a      	sxth	r2, r3
 80160a2:	7b7b      	ldrb	r3, [r7, #13]
 80160a4:	2101      	movs	r1, #1
 80160a6:	fa01 f303 	lsl.w	r3, r1, r3
 80160aa:	b21b      	sxth	r3, r3
 80160ac:	4313      	orrs	r3, r2
 80160ae:	b21a      	sxth	r2, r3
 80160b0:	4b04      	ldr	r3, [pc, #16]	@ (80160c4 <RegionAS923ChannelAdd+0x134>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	b292      	uxth	r2, r2
 80160b6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80160ba:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3710      	adds	r7, #16
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	20001bcc 	.word	0x20001bcc

080160c8 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d801      	bhi.n	80160e0 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80160dc:	2300      	movs	r3, #0
 80160de:	e016      	b.n	801610e <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80160e0:	4b0d      	ldr	r3, [pc, #52]	@ (8016118 <RegionAS923ChannelsRemove+0x50>)
 80160e2:	6819      	ldr	r1, [r3, #0]
 80160e4:	7dfa      	ldrb	r2, [r7, #23]
 80160e6:	4613      	mov	r3, r2
 80160e8:	005b      	lsls	r3, r3, #1
 80160ea:	4413      	add	r3, r2
 80160ec:	009b      	lsls	r3, r3, #2
 80160ee:	440b      	add	r3, r1
 80160f0:	461a      	mov	r2, r3
 80160f2:	2300      	movs	r3, #0
 80160f4:	6013      	str	r3, [r2, #0]
 80160f6:	6053      	str	r3, [r2, #4]
 80160f8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80160fa:	4b07      	ldr	r3, [pc, #28]	@ (8016118 <RegionAS923ChannelsRemove+0x50>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016102:	7df9      	ldrb	r1, [r7, #23]
 8016104:	2210      	movs	r2, #16
 8016106:	4618      	mov	r0, r3
 8016108:	f000 fa12 	bl	8016530 <RegionCommonChanDisable>
 801610c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 801610e:	4618      	mov	r0, r3
 8016110:	3718      	adds	r7, #24
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	20001bcc 	.word	0x20001bcc

0801611c <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801611c:	b480      	push	{r7}
 801611e:	b085      	sub	sp, #20
 8016120:	af00      	add	r7, sp, #0
 8016122:	4603      	mov	r3, r0
 8016124:	71fb      	strb	r3, [r7, #7]
 8016126:	460b      	mov	r3, r1
 8016128:	71bb      	strb	r3, [r7, #6]
 801612a:	4613      	mov	r3, r2
 801612c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 801612e:	79fb      	ldrb	r3, [r7, #7]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10a      	bne.n	801614a <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8016134:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016138:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801613c:	490b      	ldr	r1, [pc, #44]	@ (801616c <RegionAS923ApplyDrOffset+0x50>)
 801613e:	00d2      	lsls	r2, r2, #3
 8016140:	440a      	add	r2, r1
 8016142:	4413      	add	r3, r2
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	73fb      	strb	r3, [r7, #15]
 8016148:	e009      	b.n	801615e <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 801614a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801614e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016152:	4907      	ldr	r1, [pc, #28]	@ (8016170 <RegionAS923ApplyDrOffset+0x54>)
 8016154:	00d2      	lsls	r2, r2, #3
 8016156:	440a      	add	r2, r1
 8016158:	4413      	add	r3, r2
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 801615e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016160:	4618      	mov	r0, r3
 8016162:	3714      	adds	r7, #20
 8016164:	46bd      	mov	sp, r7
 8016166:	bc80      	pop	{r7}
 8016168:	4770      	bx	lr
 801616a:	bf00      	nop
 801616c:	0801f4f4 	.word	0x0801f4f4
 8016170:	0801f534 	.word	0x0801f534

08016174 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016174:	b480      	push	{r7}
 8016176:	b087      	sub	sp, #28
 8016178:	af00      	add	r7, sp, #0
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	4608      	mov	r0, r1
 801617e:	4639      	mov	r1, r7
 8016180:	e881 000c 	stmia.w	r1, {r2, r3}
 8016184:	4603      	mov	r3, r0
 8016186:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801618e:	7afb      	ldrb	r3, [r7, #11]
 8016190:	f083 0301 	eor.w	r3, r3, #1
 8016194:	b2db      	uxtb	r3, r3
 8016196:	2b00      	cmp	r3, #0
 8016198:	d01b      	beq.n	80161d2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801619a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801619e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80161a6:	d202      	bcs.n	80161ae <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80161a8:	2364      	movs	r3, #100	@ 0x64
 80161aa:	82bb      	strh	r3, [r7, #20]
 80161ac:	e00b      	b.n	80161c6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80161b4:	4293      	cmp	r3, r2
 80161b6:	d803      	bhi.n	80161c0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80161b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80161bc:	82bb      	strh	r3, [r7, #20]
 80161be:	e002      	b.n	80161c6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80161c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80161c4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80161c6:	8aba      	ldrh	r2, [r7, #20]
 80161c8:	8afb      	ldrh	r3, [r7, #22]
 80161ca:	4293      	cmp	r3, r2
 80161cc:	bf38      	it	cc
 80161ce:	4613      	movcc	r3, r2
 80161d0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80161d2:	8afb      	ldrh	r3, [r7, #22]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d101      	bne.n	80161dc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80161d8:	2301      	movs	r3, #1
 80161da:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80161dc:	8afb      	ldrh	r3, [r7, #22]
}
 80161de:	4618      	mov	r0, r3
 80161e0:	371c      	adds	r7, #28
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bc80      	pop	{r7}
 80161e6:	4770      	bx	lr

080161e8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b08e      	sub	sp, #56	@ 0x38
 80161ec:	af02      	add	r7, sp, #8
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	4608      	mov	r0, r1
 80161f2:	4639      	mov	r1, r7
 80161f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80161f8:	4603      	mov	r3, r0
 80161fa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	881b      	ldrh	r3, [r3, #0]
 8016200:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016202:	4b4b      	ldr	r3, [pc, #300]	@ (8016330 <SetMaxTimeCredits+0x148>)
 8016204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016206:	463b      	mov	r3, r7
 8016208:	e893 0003 	ldmia.w	r3, {r0, r1}
 801620c:	f004 fb7e 	bl	801a90c <SysTimeToMs>
 8016210:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8016212:	f107 0314 	add.w	r3, r7, #20
 8016216:	2200      	movs	r2, #0
 8016218:	601a      	str	r2, [r3, #0]
 801621a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801621c:	7af9      	ldrb	r1, [r7, #11]
 801621e:	463b      	mov	r3, r7
 8016220:	cb0c      	ldmia	r3, {r2, r3}
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7ff ffa6 	bl	8016174 <GetDutyCycle>
 8016228:	4603      	mov	r3, r0
 801622a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 801622c:	7afb      	ldrb	r3, [r7, #11]
 801622e:	f083 0301 	eor.w	r3, r3, #1
 8016232:	b2db      	uxtb	r3, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	d062      	beq.n	80162fe <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016238:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801623a:	2b64      	cmp	r3, #100	@ 0x64
 801623c:	d105      	bne.n	801624a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801623e:	4b3c      	ldr	r3, [pc, #240]	@ (8016330 <SetMaxTimeCredits+0x148>)
 8016240:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016246:	609a      	str	r2, [r3, #8]
 8016248:	e00b      	b.n	8016262 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801624a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801624c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016250:	d105      	bne.n	801625e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016252:	4b38      	ldr	r3, [pc, #224]	@ (8016334 <SetMaxTimeCredits+0x14c>)
 8016254:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801625a:	609a      	str	r2, [r3, #8]
 801625c:	e001      	b.n	8016262 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801625e:	4b36      	ldr	r3, [pc, #216]	@ (8016338 <SetMaxTimeCredits+0x150>)
 8016260:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	689a      	ldr	r2, [r3, #8]
 8016266:	f107 031c 	add.w	r3, r7, #28
 801626a:	4611      	mov	r1, r2
 801626c:	4618      	mov	r0, r3
 801626e:	f004 fb75 	bl	801a95c <SysTimeFromMs>
 8016272:	f107 0014 	add.w	r0, r7, #20
 8016276:	6a3b      	ldr	r3, [r7, #32]
 8016278:	9300      	str	r3, [sp, #0]
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	463a      	mov	r2, r7
 801627e:	ca06      	ldmia	r2, {r1, r2}
 8016280:	f004 fa85 	bl	801a78e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016284:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016288:	f083 0301 	eor.w	r3, r3, #1
 801628c:	b2db      	uxtb	r3, r3
 801628e:	2b00      	cmp	r3, #0
 8016290:	d006      	beq.n	80162a0 <SetMaxTimeCredits+0xb8>
 8016292:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016296:	f083 0301 	eor.w	r3, r3, #1
 801629a:	b2db      	uxtb	r3, r3
 801629c:	2b00      	cmp	r3, #0
 801629e:	d108      	bne.n	80162b2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80162a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d103      	bne.n	80162b2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80162aa:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80162ac:	4a23      	ldr	r2, [pc, #140]	@ (801633c <SetMaxTimeCredits+0x154>)
 80162ae:	4293      	cmp	r3, r2
 80162b0:	d92f      	bls.n	8016312 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162b6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	4a21      	ldr	r2, [pc, #132]	@ (8016340 <SetMaxTimeCredits+0x158>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d928      	bls.n	8016312 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80162c6:	3b30      	subs	r3, #48	@ 0x30
 80162c8:	4a1e      	ldr	r2, [pc, #120]	@ (8016344 <SetMaxTimeCredits+0x15c>)
 80162ca:	fba2 2303 	umull	r2, r3, r2, r3
 80162ce:	0c1b      	lsrs	r3, r3, #16
 80162d0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	4a1c      	ldr	r2, [pc, #112]	@ (8016348 <SetMaxTimeCredits+0x160>)
 80162d6:	fb02 f303 	mul.w	r3, r2, r3
 80162da:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80162e2:	3330      	adds	r3, #48	@ 0x30
 80162e4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80162ea:	f107 0314 	add.w	r3, r7, #20
 80162ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162f2:	f004 fb0b 	bl	801a90c <SysTimeToMs>
 80162f6:	4602      	mov	r2, r0
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	609a      	str	r2, [r3, #8]
 80162fc:	e009      	b.n	8016312 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80162fe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016302:	f083 0301 	eor.w	r3, r3, #1
 8016306:	b2db      	uxtb	r3, r3
 8016308:	2b00      	cmp	r3, #0
 801630a:	d002      	beq.n	8016312 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016310:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d102      	bne.n	8016320 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801631e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016324:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016326:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8016328:	4618      	mov	r0, r3
 801632a:	3730      	adds	r7, #48	@ 0x30
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	001b7740 	.word	0x001b7740
 8016334:	0112a880 	.word	0x0112a880
 8016338:	02932e00 	.word	0x02932e00
 801633c:	0001517f 	.word	0x0001517f
 8016340:	0001ec2f 	.word	0x0001ec2f
 8016344:	c22e4507 	.word	0xc22e4507
 8016348:	00015180 	.word	0x00015180

0801634c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af02      	add	r7, sp, #8
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	4608      	mov	r0, r1
 8016356:	4611      	mov	r1, r2
 8016358:	461a      	mov	r2, r3
 801635a:	4603      	mov	r3, r0
 801635c:	70fb      	strb	r3, [r7, #3]
 801635e:	460b      	mov	r3, r1
 8016360:	70bb      	strb	r3, [r7, #2]
 8016362:	4613      	mov	r3, r2
 8016364:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016366:	78f9      	ldrb	r1, [r7, #3]
 8016368:	787b      	ldrb	r3, [r7, #1]
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	78bb      	ldrb	r3, [r7, #2]
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	f107 0318 	add.w	r3, r7, #24
 8016374:	cb0c      	ldmia	r3, {r2, r3}
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7ff ff36 	bl	80161e8 <SetMaxTimeCredits>
 801637c:	4603      	mov	r3, r0
 801637e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016380:	78fb      	ldrb	r3, [r7, #3]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d00a      	beq.n	801639c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	4618      	mov	r0, r3
 801638c:	f005 f8f8 	bl	801b580 <UTIL_TIMER_GetElapsedTime>
 8016390:	4602      	mov	r2, r0
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	441a      	add	r2, r3
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	68da      	ldr	r2, [r3, #12]
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	691b      	ldr	r3, [r3, #16]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d903      	bls.n	80163b0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	691a      	ldr	r2, [r3, #16]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6a3a      	ldr	r2, [r7, #32]
 80163b4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80163b6:	89fb      	ldrh	r3, [r7, #14]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	4603      	mov	r3, r0
 80163c8:	460a      	mov	r2, r1
 80163ca:	80fb      	strh	r3, [r7, #6]
 80163cc:	4613      	mov	r3, r2
 80163ce:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80163d0:	2300      	movs	r3, #0
 80163d2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80163d4:	2300      	movs	r3, #0
 80163d6:	73bb      	strb	r3, [r7, #14]
 80163d8:	e011      	b.n	80163fe <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80163da:	88fa      	ldrh	r2, [r7, #6]
 80163dc:	7bbb      	ldrb	r3, [r7, #14]
 80163de:	2101      	movs	r1, #1
 80163e0:	fa01 f303 	lsl.w	r3, r1, r3
 80163e4:	401a      	ands	r2, r3
 80163e6:	7bbb      	ldrb	r3, [r7, #14]
 80163e8:	2101      	movs	r1, #1
 80163ea:	fa01 f303 	lsl.w	r3, r1, r3
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d102      	bne.n	80163f8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80163f2:	7bfb      	ldrb	r3, [r7, #15]
 80163f4:	3301      	adds	r3, #1
 80163f6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80163f8:	7bbb      	ldrb	r3, [r7, #14]
 80163fa:	3301      	adds	r3, #1
 80163fc:	73bb      	strb	r3, [r7, #14]
 80163fe:	7bba      	ldrb	r2, [r7, #14]
 8016400:	797b      	ldrb	r3, [r7, #5]
 8016402:	429a      	cmp	r2, r3
 8016404:	d3e9      	bcc.n	80163da <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016406:	7bfb      	ldrb	r3, [r7, #15]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3714      	adds	r7, #20
 801640c:	46bd      	mov	sp, r7
 801640e:	bc80      	pop	{r7}
 8016410:	4770      	bx	lr

08016412 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b084      	sub	sp, #16
 8016416:	af00      	add	r7, sp, #0
 8016418:	6039      	str	r1, [r7, #0]
 801641a:	4611      	mov	r1, r2
 801641c:	461a      	mov	r2, r3
 801641e:	4603      	mov	r3, r0
 8016420:	71fb      	strb	r3, [r7, #7]
 8016422:	460b      	mov	r3, r1
 8016424:	71bb      	strb	r3, [r7, #6]
 8016426:	4613      	mov	r3, r2
 8016428:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801642a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801642e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016432:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016436:	4618      	mov	r0, r3
 8016438:	f000 f85d 	bl	80164f6 <RegionCommonValueInRange>
 801643c:	4603      	mov	r3, r0
 801643e:	2b00      	cmp	r3, #0
 8016440:	d101      	bne.n	8016446 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016442:	2300      	movs	r3, #0
 8016444:	e053      	b.n	80164ee <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016446:	2300      	movs	r3, #0
 8016448:	73fb      	strb	r3, [r7, #15]
 801644a:	2300      	movs	r3, #0
 801644c:	73bb      	strb	r3, [r7, #14]
 801644e:	e049      	b.n	80164e4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016450:	2300      	movs	r3, #0
 8016452:	737b      	strb	r3, [r7, #13]
 8016454:	e03d      	b.n	80164d2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016456:	7bbb      	ldrb	r3, [r7, #14]
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	683a      	ldr	r2, [r7, #0]
 801645c:	4413      	add	r3, r2
 801645e:	881b      	ldrh	r3, [r3, #0]
 8016460:	461a      	mov	r2, r3
 8016462:	7b7b      	ldrb	r3, [r7, #13]
 8016464:	fa42 f303 	asr.w	r3, r2, r3
 8016468:	f003 0301 	and.w	r3, r3, #1
 801646c:	2b00      	cmp	r3, #0
 801646e:	d02d      	beq.n	80164cc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016470:	7bfa      	ldrb	r2, [r7, #15]
 8016472:	7b7b      	ldrb	r3, [r7, #13]
 8016474:	4413      	add	r3, r2
 8016476:	461a      	mov	r2, r3
 8016478:	4613      	mov	r3, r2
 801647a:	005b      	lsls	r3, r3, #1
 801647c:	4413      	add	r3, r2
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	461a      	mov	r2, r3
 8016482:	69fb      	ldr	r3, [r7, #28]
 8016484:	4413      	add	r3, r2
 8016486:	7a1b      	ldrb	r3, [r3, #8]
 8016488:	f343 0303 	sbfx	r3, r3, #0, #4
 801648c:	b25b      	sxtb	r3, r3
 801648e:	f003 030f 	and.w	r3, r3, #15
 8016492:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016494:	7bfa      	ldrb	r2, [r7, #15]
 8016496:	7b7b      	ldrb	r3, [r7, #13]
 8016498:	4413      	add	r3, r2
 801649a:	461a      	mov	r2, r3
 801649c:	4613      	mov	r3, r2
 801649e:	005b      	lsls	r3, r3, #1
 80164a0:	4413      	add	r3, r2
 80164a2:	009b      	lsls	r3, r3, #2
 80164a4:	461a      	mov	r2, r3
 80164a6:	69fb      	ldr	r3, [r7, #28]
 80164a8:	4413      	add	r3, r2
 80164aa:	7a1b      	ldrb	r3, [r3, #8]
 80164ac:	f343 1303 	sbfx	r3, r3, #4, #4
 80164b0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80164b2:	f003 030f 	and.w	r3, r3, #15
 80164b6:	b25a      	sxtb	r2, r3
 80164b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80164bc:	4618      	mov	r0, r3
 80164be:	f000 f81a 	bl	80164f6 <RegionCommonValueInRange>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d101      	bne.n	80164cc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80164c8:	2301      	movs	r3, #1
 80164ca:	e010      	b.n	80164ee <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80164cc:	7b7b      	ldrb	r3, [r7, #13]
 80164ce:	3301      	adds	r3, #1
 80164d0:	737b      	strb	r3, [r7, #13]
 80164d2:	7b7b      	ldrb	r3, [r7, #13]
 80164d4:	2b0f      	cmp	r3, #15
 80164d6:	d9be      	bls.n	8016456 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80164d8:	7bfb      	ldrb	r3, [r7, #15]
 80164da:	3310      	adds	r3, #16
 80164dc:	73fb      	strb	r3, [r7, #15]
 80164de:	7bbb      	ldrb	r3, [r7, #14]
 80164e0:	3301      	adds	r3, #1
 80164e2:	73bb      	strb	r3, [r7, #14]
 80164e4:	7bfa      	ldrb	r2, [r7, #15]
 80164e6:	79fb      	ldrb	r3, [r7, #7]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d3b1      	bcc.n	8016450 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80164ec:	2300      	movs	r3, #0
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3710      	adds	r7, #16
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80164f6:	b480      	push	{r7}
 80164f8:	b083      	sub	sp, #12
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	4603      	mov	r3, r0
 80164fe:	71fb      	strb	r3, [r7, #7]
 8016500:	460b      	mov	r3, r1
 8016502:	71bb      	strb	r3, [r7, #6]
 8016504:	4613      	mov	r3, r2
 8016506:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016508:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801650c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016510:	429a      	cmp	r2, r3
 8016512:	db07      	blt.n	8016524 <RegionCommonValueInRange+0x2e>
 8016514:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016518:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801651c:	429a      	cmp	r2, r3
 801651e:	dc01      	bgt.n	8016524 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016520:	2301      	movs	r3, #1
 8016522:	e000      	b.n	8016526 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016524:	2300      	movs	r3, #0
}
 8016526:	4618      	mov	r0, r3
 8016528:	370c      	adds	r7, #12
 801652a:	46bd      	mov	sp, r7
 801652c:	bc80      	pop	{r7}
 801652e:	4770      	bx	lr

08016530 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016530:	b480      	push	{r7}
 8016532:	b085      	sub	sp, #20
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	460b      	mov	r3, r1
 801653a:	70fb      	strb	r3, [r7, #3]
 801653c:	4613      	mov	r3, r2
 801653e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016540:	78fb      	ldrb	r3, [r7, #3]
 8016542:	091b      	lsrs	r3, r3, #4
 8016544:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016546:	78bb      	ldrb	r3, [r7, #2]
 8016548:	091b      	lsrs	r3, r3, #4
 801654a:	b2db      	uxtb	r3, r3
 801654c:	7bfa      	ldrb	r2, [r7, #15]
 801654e:	429a      	cmp	r2, r3
 8016550:	d803      	bhi.n	801655a <RegionCommonChanDisable+0x2a>
 8016552:	78fa      	ldrb	r2, [r7, #3]
 8016554:	78bb      	ldrb	r3, [r7, #2]
 8016556:	429a      	cmp	r2, r3
 8016558:	d301      	bcc.n	801655e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801655a:	2300      	movs	r3, #0
 801655c:	e017      	b.n	801658e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801655e:	7bfb      	ldrb	r3, [r7, #15]
 8016560:	005b      	lsls	r3, r3, #1
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	4413      	add	r3, r2
 8016566:	881b      	ldrh	r3, [r3, #0]
 8016568:	b21a      	sxth	r2, r3
 801656a:	78fb      	ldrb	r3, [r7, #3]
 801656c:	f003 030f 	and.w	r3, r3, #15
 8016570:	2101      	movs	r1, #1
 8016572:	fa01 f303 	lsl.w	r3, r1, r3
 8016576:	b21b      	sxth	r3, r3
 8016578:	43db      	mvns	r3, r3
 801657a:	b21b      	sxth	r3, r3
 801657c:	4013      	ands	r3, r2
 801657e:	b219      	sxth	r1, r3
 8016580:	7bfb      	ldrb	r3, [r7, #15]
 8016582:	005b      	lsls	r3, r3, #1
 8016584:	687a      	ldr	r2, [r7, #4]
 8016586:	4413      	add	r3, r2
 8016588:	b28a      	uxth	r2, r1
 801658a:	801a      	strh	r2, [r3, #0]

    return true;
 801658c:	2301      	movs	r3, #1
}
 801658e:	4618      	mov	r0, r3
 8016590:	3714      	adds	r7, #20
 8016592:	46bd      	mov	sp, r7
 8016594:	bc80      	pop	{r7}
 8016596:	4770      	bx	lr

08016598 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	460b      	mov	r3, r1
 80165a2:	70fb      	strb	r3, [r7, #3]
 80165a4:	4613      	mov	r3, r2
 80165a6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80165a8:	2300      	movs	r3, #0
 80165aa:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d101      	bne.n	80165b6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	e018      	b.n	80165e8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80165b6:	78fb      	ldrb	r3, [r7, #3]
 80165b8:	73bb      	strb	r3, [r7, #14]
 80165ba:	e010      	b.n	80165de <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80165bc:	7bbb      	ldrb	r3, [r7, #14]
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	4413      	add	r3, r2
 80165c4:	881b      	ldrh	r3, [r3, #0]
 80165c6:	2110      	movs	r1, #16
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7ff fef9 	bl	80163c0 <CountChannels>
 80165ce:	4603      	mov	r3, r0
 80165d0:	461a      	mov	r2, r3
 80165d2:	7bfb      	ldrb	r3, [r7, #15]
 80165d4:	4413      	add	r3, r2
 80165d6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80165d8:	7bbb      	ldrb	r3, [r7, #14]
 80165da:	3301      	adds	r3, #1
 80165dc:	73bb      	strb	r3, [r7, #14]
 80165de:	7bba      	ldrb	r2, [r7, #14]
 80165e0:	78bb      	ldrb	r3, [r7, #2]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d3ea      	bcc.n	80165bc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80165f0:	b480      	push	{r7}
 80165f2:	b087      	sub	sp, #28
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	4613      	mov	r3, r2
 80165fc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d016      	beq.n	8016632 <RegionCommonChanMaskCopy+0x42>
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d013      	beq.n	8016632 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801660a:	2300      	movs	r3, #0
 801660c:	75fb      	strb	r3, [r7, #23]
 801660e:	e00c      	b.n	801662a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016610:	7dfb      	ldrb	r3, [r7, #23]
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	68ba      	ldr	r2, [r7, #8]
 8016616:	441a      	add	r2, r3
 8016618:	7dfb      	ldrb	r3, [r7, #23]
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	68f9      	ldr	r1, [r7, #12]
 801661e:	440b      	add	r3, r1
 8016620:	8812      	ldrh	r2, [r2, #0]
 8016622:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016624:	7dfb      	ldrb	r3, [r7, #23]
 8016626:	3301      	adds	r3, #1
 8016628:	75fb      	strb	r3, [r7, #23]
 801662a:	7dfa      	ldrb	r2, [r7, #23]
 801662c:	79fb      	ldrb	r3, [r7, #7]
 801662e:	429a      	cmp	r2, r3
 8016630:	d3ee      	bcc.n	8016610 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016632:	bf00      	nop
 8016634:	371c      	adds	r7, #28
 8016636:	46bd      	mov	sp, r7
 8016638:	bc80      	pop	{r7}
 801663a:	4770      	bx	lr

0801663c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801663c:	b082      	sub	sp, #8
 801663e:	b580      	push	{r7, lr}
 8016640:	b086      	sub	sp, #24
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	627b      	str	r3, [r7, #36]	@ 0x24
 801664a:	4613      	mov	r3, r2
 801664c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801664e:	79f9      	ldrb	r1, [r7, #7]
 8016650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016654:	cb0c      	ldmia	r3, {r2, r3}
 8016656:	68f8      	ldr	r0, [r7, #12]
 8016658:	f7ff fd8c 	bl	8016174 <GetDutyCycle>
 801665c:	4603      	mov	r3, r0
 801665e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	68da      	ldr	r2, [r3, #12]
 8016664:	8afb      	ldrh	r3, [r7, #22]
 8016666:	68b9      	ldr	r1, [r7, #8]
 8016668:	fb01 f303 	mul.w	r3, r1, r3
 801666c:	429a      	cmp	r2, r3
 801666e:	d909      	bls.n	8016684 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	68da      	ldr	r2, [r3, #12]
 8016674:	8afb      	ldrh	r3, [r7, #22]
 8016676:	68b9      	ldr	r1, [r7, #8]
 8016678:	fb01 f303 	mul.w	r3, r1, r3
 801667c:	1ad2      	subs	r2, r2, r3
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016682:	e002      	b.n	801668a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2200      	movs	r2, #0
 8016688:	60da      	str	r2, [r3, #12]
}
 801668a:	bf00      	nop
 801668c:	3718      	adds	r7, #24
 801668e:	46bd      	mov	sp, r7
 8016690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016694:	b002      	add	sp, #8
 8016696:	4770      	bx	lr

08016698 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801669a:	b08f      	sub	sp, #60	@ 0x3c
 801669c:	af04      	add	r7, sp, #16
 801669e:	6039      	str	r1, [r7, #0]
 80166a0:	4611      	mov	r1, r2
 80166a2:	461a      	mov	r2, r3
 80166a4:	4603      	mov	r3, r0
 80166a6:	71fb      	strb	r3, [r7, #7]
 80166a8:	460b      	mov	r3, r1
 80166aa:	71bb      	strb	r3, [r7, #6]
 80166ac:	4613      	mov	r3, r2
 80166ae:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80166b0:	f04f 33ff 	mov.w	r3, #4294967295
 80166b4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80166b6:	f004 ff51 	bl	801b55c <UTIL_TIMER_GetCurrentTime>
 80166ba:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80166bc:	2300      	movs	r3, #0
 80166be:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80166c0:	2301      	movs	r3, #1
 80166c2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80166c4:	2300      	movs	r3, #0
 80166c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80166ca:	2300      	movs	r3, #0
 80166cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80166d0:	e0ba      	b.n	8016848 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80166d2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80166d6:	4613      	mov	r3, r2
 80166d8:	005b      	lsls	r3, r3, #1
 80166da:	4413      	add	r3, r2
 80166dc:	00db      	lsls	r3, r3, #3
 80166de:	461a      	mov	r2, r3
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	189c      	adds	r4, r3, r2
 80166e4:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80166e8:	797a      	ldrb	r2, [r7, #5]
 80166ea:	79fd      	ldrb	r5, [r7, #7]
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	9302      	str	r3, [sp, #8]
 80166f0:	46ec      	mov	ip, sp
 80166f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80166f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80166fe:	4633      	mov	r3, r6
 8016700:	4629      	mov	r1, r5
 8016702:	4620      	mov	r0, r4
 8016704:	f7ff fe22 	bl	801634c <UpdateTimeCredits>
 8016708:	4603      	mov	r3, r0
 801670a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801670c:	8afa      	ldrh	r2, [r7, #22]
 801670e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016710:	fb02 f303 	mul.w	r3, r2, r3
 8016714:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016716:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801671a:	4613      	mov	r3, r2
 801671c:	005b      	lsls	r3, r3, #1
 801671e:	4413      	add	r3, r2
 8016720:	00db      	lsls	r3, r3, #3
 8016722:	461a      	mov	r2, r3
 8016724:	683b      	ldr	r3, [r7, #0]
 8016726:	4413      	add	r3, r2
 8016728:	68db      	ldr	r3, [r3, #12]
 801672a:	69ba      	ldr	r2, [r7, #24]
 801672c:	429a      	cmp	r2, r3
 801672e:	d308      	bcc.n	8016742 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016730:	797b      	ldrb	r3, [r7, #5]
 8016732:	f083 0301 	eor.w	r3, r3, #1
 8016736:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016738:	2b00      	cmp	r3, #0
 801673a:	d013      	beq.n	8016764 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801673c:	79fb      	ldrb	r3, [r7, #7]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d010      	beq.n	8016764 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016742:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016746:	4613      	mov	r3, r2
 8016748:	005b      	lsls	r3, r3, #1
 801674a:	4413      	add	r3, r2
 801674c:	00db      	lsls	r3, r3, #3
 801674e:	461a      	mov	r2, r3
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	4413      	add	r3, r2
 8016754:	2201      	movs	r2, #1
 8016756:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016758:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801675c:	3301      	adds	r3, #1
 801675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016762:	e06c      	b.n	801683e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016764:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016768:	4613      	mov	r3, r2
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	4413      	add	r3, r2
 801676e:	00db      	lsls	r3, r3, #3
 8016770:	461a      	mov	r2, r3
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	4413      	add	r3, r2
 8016776:	2200      	movs	r2, #0
 8016778:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801677a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801677e:	4613      	mov	r3, r2
 8016780:	005b      	lsls	r3, r3, #1
 8016782:	4413      	add	r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	461a      	mov	r2, r3
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	4413      	add	r3, r2
 801678c:	691b      	ldr	r3, [r3, #16]
 801678e:	69ba      	ldr	r2, [r7, #24]
 8016790:	429a      	cmp	r2, r3
 8016792:	d215      	bcs.n	80167c0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016794:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016798:	4613      	mov	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	4413      	add	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	461a      	mov	r2, r3
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	4413      	add	r3, r2
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	69ba      	ldr	r2, [r7, #24]
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80167ae:	4293      	cmp	r3, r2
 80167b0:	bf28      	it	cs
 80167b2:	4613      	movcs	r3, r2
 80167b4:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80167b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80167ba:	3301      	adds	r3, #1
 80167bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80167c0:	79fb      	ldrb	r3, [r7, #7]
 80167c2:	f083 0301 	eor.w	r3, r3, #1
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d038      	beq.n	801683e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80167cc:	2300      	movs	r3, #0
 80167ce:	60fb      	str	r3, [r7, #12]
 80167d0:	2300      	movs	r3, #0
 80167d2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80167d4:	8afb      	ldrh	r3, [r7, #22]
 80167d6:	2b64      	cmp	r3, #100	@ 0x64
 80167d8:	d103      	bne.n	80167e2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80167da:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80167de:	60fb      	str	r3, [r7, #12]
 80167e0:	e009      	b.n	80167f6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80167e2:	8afb      	ldrh	r3, [r7, #22]
 80167e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80167e8:	d103      	bne.n	80167f2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80167ea:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80167ee:	60fb      	str	r3, [r7, #12]
 80167f0:	e001      	b.n	80167f6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80167f2:	4b1e      	ldr	r3, [pc, #120]	@ (801686c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80167f4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80167f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167f8:	4a1c      	ldr	r2, [pc, #112]	@ (801686c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d90e      	bls.n	801681c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016802:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016806:	3b30      	subs	r3, #48	@ 0x30
 8016808:	4919      	ldr	r1, [pc, #100]	@ (8016870 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801680a:	fba1 1303 	umull	r1, r3, r1, r3
 801680e:	0c1b      	lsrs	r3, r3, #16
 8016810:	3301      	adds	r3, #1
 8016812:	4918      	ldr	r1, [pc, #96]	@ (8016874 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016814:	fb01 f303 	mul.w	r3, r1, r3
 8016818:	4413      	add	r3, r2
 801681a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801681c:	f107 000c 	add.w	r0, r7, #12
 8016820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016826:	f107 020c 	add.w	r2, r7, #12
 801682a:	ca06      	ldmia	r2, {r1, r2}
 801682c:	f003 ffaf 	bl	801a78e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016830:	f107 030c 	add.w	r3, r7, #12
 8016834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016838:	f004 f868 	bl	801a90c <SysTimeToMs>
 801683c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801683e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016842:	3301      	adds	r3, #1
 8016844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016848:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801684c:	79bb      	ldrb	r3, [r7, #6]
 801684e:	429a      	cmp	r2, r3
 8016850:	f4ff af3f 	bcc.w	80166d2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016854:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016858:	2b00      	cmp	r3, #0
 801685a:	d102      	bne.n	8016862 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801685c:	f04f 33ff 	mov.w	r3, #4294967295
 8016860:	e000      	b.n	8016864 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016864:	4618      	mov	r0, r3
 8016866:	372c      	adds	r7, #44	@ 0x2c
 8016868:	46bd      	mov	sp, r7
 801686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801686c:	0001ec30 	.word	0x0001ec30
 8016870:	c22e4507 	.word	0xc22e4507
 8016874:	00015180 	.word	0x00015180

08016878 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016878:	b480      	push	{r7}
 801687a:	b085      	sub	sp, #20
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016882:	2300      	movs	r3, #0
 8016884:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b03      	cmp	r3, #3
 801688c:	d140      	bne.n	8016910 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	3301      	adds	r3, #1
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	b25a      	sxtb	r2, r3
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168a0:	f003 030f 	and.w	r3, r3, #15
 80168a4:	b25a      	sxtb	r2, r3
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168b0:	b2db      	uxtb	r3, r3
 80168b2:	091b      	lsrs	r3, r3, #4
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	b25a      	sxtb	r2, r3
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	3302      	adds	r3, #2
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	461a      	mov	r2, r3
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	889b      	ldrh	r3, [r3, #4]
 80168cc:	b21a      	sxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	3303      	adds	r3, #3
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	b21b      	sxth	r3, r3
 80168d6:	021b      	lsls	r3, r3, #8
 80168d8:	b21b      	sxth	r3, r3
 80168da:	4313      	orrs	r3, r2
 80168dc:	b21b      	sxth	r3, r3
 80168de:	b29a      	uxth	r2, r3
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	791a      	ldrb	r2, [r3, #4]
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	091b      	lsrs	r3, r3, #4
 80168f2:	b2db      	uxtb	r3, r3
 80168f4:	f003 0307 	and.w	r3, r3, #7
 80168f8:	b2da      	uxtb	r2, r3
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	f003 030f 	and.w	r3, r3, #15
 8016906:	b2da      	uxtb	r2, r3
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801690c:	2305      	movs	r3, #5
 801690e:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016910:	7bfb      	ldrb	r3, [r7, #15]
}
 8016912:	4618      	mov	r0, r3
 8016914:	3714      	adds	r7, #20
 8016916:	46bd      	mov	sp, r7
 8016918:	bc80      	pop	{r7}
 801691a:	4770      	bx	lr

0801691c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801691c:	b5b0      	push	{r4, r5, r7, lr}
 801691e:	b088      	sub	sp, #32
 8016920:	af02      	add	r7, sp, #8
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	791b      	ldrb	r3, [r3, #4]
 801692e:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	799b      	ldrb	r3, [r3, #6]
 8016934:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	79db      	ldrb	r3, [r3, #7]
 801693a:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	7a1b      	ldrb	r3, [r3, #8]
 8016940:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	795b      	ldrb	r3, [r3, #5]
 8016946:	f083 0301 	eor.w	r3, r3, #1
 801694a:	b2db      	uxtb	r3, r3
 801694c:	2b00      	cmp	r3, #0
 801694e:	d008      	beq.n	8016962 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	7adb      	ldrb	r3, [r3, #11]
 8016954:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	7a5b      	ldrb	r3, [r3, #9]
 801695a:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	7a9b      	ldrb	r3, [r3, #10]
 8016960:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016962:	7dfb      	ldrb	r3, [r7, #23]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d04a      	beq.n	80169fe <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016968:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801696c:	2b0f      	cmp	r3, #15
 801696e:	d103      	bne.n	8016978 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	7a5b      	ldrb	r3, [r3, #9]
 8016974:	75bb      	strb	r3, [r7, #22]
 8016976:	e01d      	b.n	80169b4 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	7b18      	ldrb	r0, [r3, #12]
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	6919      	ldr	r1, [r3, #16]
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801698c:	68fa      	ldr	r2, [r7, #12]
 801698e:	6992      	ldr	r2, [r2, #24]
 8016990:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016994:	9201      	str	r2, [sp, #4]
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	462b      	mov	r3, r5
 801699a:	4622      	mov	r2, r4
 801699c:	f7ff fd39 	bl	8016412 <RegionCommonChanVerifyDr>
 80169a0:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80169a2:	f083 0301 	eor.w	r3, r3, #1
 80169a6:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d003      	beq.n	80169b4 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80169ac:	7dfb      	ldrb	r3, [r7, #23]
 80169ae:	f023 0302 	bic.w	r3, r3, #2
 80169b2:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80169b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169b8:	2b0f      	cmp	r3, #15
 80169ba:	d103      	bne.n	80169c4 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	7a9b      	ldrb	r3, [r3, #10]
 80169c0:	757b      	strb	r3, [r7, #21]
 80169c2:	e01c      	b.n	80169fe <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80169d0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7ff fd8e 	bl	80164f6 <RegionCommonValueInRange>
 80169da:	4603      	mov	r3, r0
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d10e      	bne.n	80169fe <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80169e6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80169ea:	429a      	cmp	r2, r3
 80169ec:	da03      	bge.n	80169f6 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	7f5b      	ldrb	r3, [r3, #29]
 80169f2:	757b      	strb	r3, [r7, #21]
 80169f4:	e003      	b.n	80169fe <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80169f6:	7dfb      	ldrb	r3, [r7, #23]
 80169f8:	f023 0304 	bic.w	r3, r3, #4
 80169fc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80169fe:	7dfb      	ldrb	r3, [r7, #23]
 8016a00:	2b07      	cmp	r3, #7
 8016a02:	d105      	bne.n	8016a10 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016a04:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d101      	bne.n	8016a10 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	7dba      	ldrb	r2, [r7, #22]
 8016a14:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	7d7a      	ldrb	r2, [r7, #21]
 8016a1a:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016a1c:	7d3a      	ldrb	r2, [r7, #20]
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	701a      	strb	r2, [r3, #0]

    return status;
 8016a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3718      	adds	r7, #24
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bdb0      	pop	{r4, r5, r7, pc}

08016a2c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	4603      	mov	r3, r0
 8016a34:	6039      	str	r1, [r7, #0]
 8016a36:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016a38:	79fb      	ldrb	r3, [r7, #7]
 8016a3a:	4a06      	ldr	r2, [pc, #24]	@ (8016a54 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a40:	461a      	mov	r2, r3
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	370c      	adds	r7, #12
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bc80      	pop	{r7}
 8016a50:	4770      	bx	lr
 8016a52:	bf00      	nop
 8016a54:	000f4240 	.word	0x000f4240

08016a58 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b083      	sub	sp, #12
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	4603      	mov	r3, r0
 8016a60:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016a62:	79fb      	ldrb	r3, [r7, #7]
 8016a64:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016a68:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	370c      	adds	r7, #12
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bc80      	pop	{r7}
 8016a74:	4770      	bx	lr
	...

08016a78 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b085      	sub	sp, #20
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	607a      	str	r2, [r7, #4]
 8016a82:	603b      	str	r3, [r7, #0]
 8016a84:	460b      	mov	r3, r1
 8016a86:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016a88:	7afa      	ldrb	r2, [r7, #11]
 8016a8a:	7afb      	ldrb	r3, [r7, #11]
 8016a8c:	3b04      	subs	r3, #4
 8016a8e:	4619      	mov	r1, r3
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	fb03 f101 	mul.w	r1, r3, r1
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016a9c:	fb00 f303 	mul.w	r3, r0, r3
 8016aa0:	440b      	add	r3, r1
 8016aa2:	005b      	lsls	r3, r3, #1
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d013      	beq.n	8016ad0 <RegionCommonComputeRxWindowParameters+0x58>
 8016aa8:	7afb      	ldrb	r3, [r7, #11]
 8016aaa:	3b04      	subs	r3, #4
 8016aac:	4619      	mov	r1, r3
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	fb03 f101 	mul.w	r1, r3, r1
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016aba:	fb00 f303 	mul.w	r3, r0, r3
 8016abe:	440b      	add	r3, r1
 8016ac0:	0059      	lsls	r1, r3, #1
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	440b      	add	r3, r1
 8016ac6:	1e59      	subs	r1, r3, #1
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8016ace:	e00f      	b.n	8016af0 <RegionCommonComputeRxWindowParameters+0x78>
 8016ad0:	7afb      	ldrb	r3, [r7, #11]
 8016ad2:	3b04      	subs	r3, #4
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	fb03 f101 	mul.w	r1, r3, r1
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016ae2:	fb00 f303 	mul.w	r3, r0, r3
 8016ae6:	440b      	add	r3, r1
 8016ae8:	0059      	lsls	r1, r3, #1
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8016af0:	429a      	cmp	r2, r3
 8016af2:	bf38      	it	cc
 8016af4:	461a      	movcc	r2, r3
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	009b      	lsls	r3, r3, #2
 8016afe:	4619      	mov	r1, r3
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	68fa      	ldr	r2, [r7, #12]
 8016b06:	fb02 f303 	mul.w	r3, r2, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d007      	beq.n	8016b1e <RegionCommonComputeRxWindowParameters+0xa6>
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	68fa      	ldr	r2, [r7, #12]
 8016b14:	fb02 f303 	mul.w	r3, r2, r3
 8016b18:	3301      	adds	r3, #1
 8016b1a:	085b      	lsrs	r3, r3, #1
 8016b1c:	e005      	b.n	8016b2a <RegionCommonComputeRxWindowParameters+0xb2>
 8016b1e:	69bb      	ldr	r3, [r7, #24]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	68fa      	ldr	r2, [r7, #12]
 8016b24:	fb02 f303 	mul.w	r3, r2, r3
 8016b28:	085b      	lsrs	r3, r3, #1
 8016b2a:	1acb      	subs	r3, r1, r3
 8016b2c:	683a      	ldr	r2, [r7, #0]
 8016b2e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b32:	fb01 f202 	mul.w	r2, r1, r2
 8016b36:	1a9b      	subs	r3, r3, r2
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	dd27      	ble.n	8016b8c <RegionCommonComputeRxWindowParameters+0x114>
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	4619      	mov	r1, r3
 8016b42:	69bb      	ldr	r3, [r7, #24]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	68fa      	ldr	r2, [r7, #12]
 8016b48:	fb02 f303 	mul.w	r3, r2, r3
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d007      	beq.n	8016b60 <RegionCommonComputeRxWindowParameters+0xe8>
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	68fa      	ldr	r2, [r7, #12]
 8016b56:	fb02 f303 	mul.w	r3, r2, r3
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	085b      	lsrs	r3, r3, #1
 8016b5e:	e005      	b.n	8016b6c <RegionCommonComputeRxWindowParameters+0xf4>
 8016b60:	69bb      	ldr	r3, [r7, #24]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	68fa      	ldr	r2, [r7, #12]
 8016b66:	fb02 f303 	mul.w	r3, r2, r3
 8016b6a:	085b      	lsrs	r3, r3, #1
 8016b6c:	1acb      	subs	r3, r1, r3
 8016b6e:	683a      	ldr	r2, [r7, #0]
 8016b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b74:	fb01 f202 	mul.w	r2, r1, r2
 8016b78:	1a9b      	subs	r3, r3, r2
 8016b7a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016b7e:	4a19      	ldr	r2, [pc, #100]	@ (8016be4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016b80:	fb82 1203 	smull	r1, r2, r2, r3
 8016b84:	1192      	asrs	r2, r2, #6
 8016b86:	17db      	asrs	r3, r3, #31
 8016b88:	1ad3      	subs	r3, r2, r3
 8016b8a:	e024      	b.n	8016bd6 <RegionCommonComputeRxWindowParameters+0x15e>
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	009b      	lsls	r3, r3, #2
 8016b90:	4619      	mov	r1, r3
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	68fa      	ldr	r2, [r7, #12]
 8016b98:	fb02 f303 	mul.w	r3, r2, r3
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d007      	beq.n	8016bb0 <RegionCommonComputeRxWindowParameters+0x138>
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	68fa      	ldr	r2, [r7, #12]
 8016ba6:	fb02 f303 	mul.w	r3, r2, r3
 8016baa:	3301      	adds	r3, #1
 8016bac:	085b      	lsrs	r3, r3, #1
 8016bae:	e005      	b.n	8016bbc <RegionCommonComputeRxWindowParameters+0x144>
 8016bb0:	69bb      	ldr	r3, [r7, #24]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	68fa      	ldr	r2, [r7, #12]
 8016bb6:	fb02 f303 	mul.w	r3, r2, r3
 8016bba:	085b      	lsrs	r3, r3, #1
 8016bbc:	1acb      	subs	r3, r1, r3
 8016bbe:	683a      	ldr	r2, [r7, #0]
 8016bc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016bc4:	fb01 f202 	mul.w	r2, r1, r2
 8016bc8:	1a9b      	subs	r3, r3, r2
 8016bca:	4a06      	ldr	r2, [pc, #24]	@ (8016be4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8016bd0:	1192      	asrs	r2, r2, #6
 8016bd2:	17db      	asrs	r3, r3, #31
 8016bd4:	1ad3      	subs	r3, r2, r3
 8016bd6:	69fa      	ldr	r2, [r7, #28]
 8016bd8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016bda:	bf00      	nop
 8016bdc:	3714      	adds	r7, #20
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bc80      	pop	{r7}
 8016be2:	4770      	bx	lr
 8016be4:	10624dd3 	.word	0x10624dd3

08016be8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b086      	sub	sp, #24
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	607a      	str	r2, [r7, #4]
 8016bf4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7ea f85f 	bl	8000cc4 <__aeabi_ui2f>
 8016c06:	4603      	mov	r3, r0
 8016c08:	4619      	mov	r1, r3
 8016c0a:	68b8      	ldr	r0, [r7, #8]
 8016c0c:	f7e9 ffa8 	bl	8000b60 <__aeabi_fsub>
 8016c10:	4603      	mov	r3, r0
 8016c12:	6879      	ldr	r1, [r7, #4]
 8016c14:	4618      	mov	r0, r3
 8016c16:	f7e9 ffa3 	bl	8000b60 <__aeabi_fsub>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7e9 fc6b 	bl	80004f8 <__aeabi_f2d>
 8016c22:	4602      	mov	r2, r0
 8016c24:	460b      	mov	r3, r1
 8016c26:	4610      	mov	r0, r2
 8016c28:	4619      	mov	r1, r3
 8016c2a:	f007 fc79 	bl	801e520 <floor>
 8016c2e:	4602      	mov	r2, r0
 8016c30:	460b      	mov	r3, r1
 8016c32:	4610      	mov	r0, r2
 8016c34:	4619      	mov	r1, r3
 8016c36:	f7e9 ff67 	bl	8000b08 <__aeabi_d2iz>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3718      	adds	r7, #24
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}

08016c4a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016c4a:	b590      	push	{r4, r7, lr}
 8016c4c:	b087      	sub	sp, #28
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	60f8      	str	r0, [r7, #12]
 8016c52:	60b9      	str	r1, [r7, #8]
 8016c54:	607a      	str	r2, [r7, #4]
 8016c56:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016c60:	2300      	movs	r3, #0
 8016c62:	757b      	strb	r3, [r7, #21]
 8016c64:	2300      	movs	r3, #0
 8016c66:	753b      	strb	r3, [r7, #20]
 8016c68:	e09c      	b.n	8016da4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	74fb      	strb	r3, [r7, #19]
 8016c6e:	e08f      	b.n	8016d90 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	685a      	ldr	r2, [r3, #4]
 8016c74:	7d3b      	ldrb	r3, [r7, #20]
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	4413      	add	r3, r2
 8016c7a:	881b      	ldrh	r3, [r3, #0]
 8016c7c:	461a      	mov	r2, r3
 8016c7e:	7cfb      	ldrb	r3, [r7, #19]
 8016c80:	fa42 f303 	asr.w	r3, r2, r3
 8016c84:	f003 0301 	and.w	r3, r3, #1
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d07e      	beq.n	8016d8a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	689a      	ldr	r2, [r3, #8]
 8016c90:	7d79      	ldrb	r1, [r7, #21]
 8016c92:	7cfb      	ldrb	r3, [r7, #19]
 8016c94:	440b      	add	r3, r1
 8016c96:	4619      	mov	r1, r3
 8016c98:	460b      	mov	r3, r1
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	440b      	add	r3, r1
 8016c9e:	009b      	lsls	r3, r3, #2
 8016ca0:	4413      	add	r3, r2
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d06b      	beq.n	8016d80 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	f083 0301 	eor.w	r3, r3, #1
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d011      	beq.n	8016cda <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d00d      	beq.n	8016cda <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	695a      	ldr	r2, [r3, #20]
 8016cc2:	7d3b      	ldrb	r3, [r7, #20]
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	881b      	ldrh	r3, [r3, #0]
 8016cca:	461a      	mov	r2, r3
 8016ccc:	7cfb      	ldrb	r3, [r7, #19]
 8016cce:	fa42 f303 	asr.w	r3, r2, r3
 8016cd2:	f003 0301 	and.w	r3, r3, #1
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d054      	beq.n	8016d84 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	785b      	ldrb	r3, [r3, #1]
 8016cde:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	689a      	ldr	r2, [r3, #8]
 8016ce4:	7d79      	ldrb	r1, [r7, #21]
 8016ce6:	7cfb      	ldrb	r3, [r7, #19]
 8016ce8:	440b      	add	r3, r1
 8016cea:	4619      	mov	r1, r3
 8016cec:	460b      	mov	r3, r1
 8016cee:	005b      	lsls	r3, r3, #1
 8016cf0:	440b      	add	r3, r1
 8016cf2:	009b      	lsls	r3, r3, #2
 8016cf4:	4413      	add	r3, r2
 8016cf6:	7a1b      	ldrb	r3, [r3, #8]
 8016cf8:	f343 0303 	sbfx	r3, r3, #0, #4
 8016cfc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016cfe:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	689a      	ldr	r2, [r3, #8]
 8016d04:	7d79      	ldrb	r1, [r7, #21]
 8016d06:	7cfb      	ldrb	r3, [r7, #19]
 8016d08:	440b      	add	r3, r1
 8016d0a:	4619      	mov	r1, r3
 8016d0c:	460b      	mov	r3, r1
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	440b      	add	r3, r1
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	4413      	add	r3, r2
 8016d16:	7a1b      	ldrb	r3, [r3, #8]
 8016d18:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d1c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d1e:	461a      	mov	r2, r3
 8016d20:	4621      	mov	r1, r4
 8016d22:	f7ff fbe8 	bl	80164f6 <RegionCommonValueInRange>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d02d      	beq.n	8016d88 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	68da      	ldr	r2, [r3, #12]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	6899      	ldr	r1, [r3, #8]
 8016d34:	7d78      	ldrb	r0, [r7, #21]
 8016d36:	7cfb      	ldrb	r3, [r7, #19]
 8016d38:	4403      	add	r3, r0
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	005b      	lsls	r3, r3, #1
 8016d40:	4403      	add	r3, r0
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	440b      	add	r3, r1
 8016d46:	7a5b      	ldrb	r3, [r3, #9]
 8016d48:	4619      	mov	r1, r3
 8016d4a:	460b      	mov	r3, r1
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	440b      	add	r3, r1
 8016d50:	00db      	lsls	r3, r3, #3
 8016d52:	4413      	add	r3, r2
 8016d54:	7d1b      	ldrb	r3, [r3, #20]
 8016d56:	f083 0301 	eor.w	r3, r3, #1
 8016d5a:	b2db      	uxtb	r3, r3
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d003      	beq.n	8016d68 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016d60:	7dbb      	ldrb	r3, [r7, #22]
 8016d62:	3301      	adds	r3, #1
 8016d64:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016d66:	e010      	b.n	8016d8a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016d68:	7dfb      	ldrb	r3, [r7, #23]
 8016d6a:	1c5a      	adds	r2, r3, #1
 8016d6c:	75fa      	strb	r2, [r7, #23]
 8016d6e:	461a      	mov	r2, r3
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	4413      	add	r3, r2
 8016d74:	7d79      	ldrb	r1, [r7, #21]
 8016d76:	7cfa      	ldrb	r2, [r7, #19]
 8016d78:	440a      	add	r2, r1
 8016d7a:	b2d2      	uxtb	r2, r2
 8016d7c:	701a      	strb	r2, [r3, #0]
 8016d7e:	e004      	b.n	8016d8a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016d80:	bf00      	nop
 8016d82:	e002      	b.n	8016d8a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016d84:	bf00      	nop
 8016d86:	e000      	b.n	8016d8a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016d88:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016d8a:	7cfb      	ldrb	r3, [r7, #19]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	74fb      	strb	r3, [r7, #19]
 8016d90:	7cfb      	ldrb	r3, [r7, #19]
 8016d92:	2b0f      	cmp	r3, #15
 8016d94:	f67f af6c 	bls.w	8016c70 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016d98:	7d7b      	ldrb	r3, [r7, #21]
 8016d9a:	3310      	adds	r3, #16
 8016d9c:	757b      	strb	r3, [r7, #21]
 8016d9e:	7d3b      	ldrb	r3, [r7, #20]
 8016da0:	3301      	adds	r3, #1
 8016da2:	753b      	strb	r3, [r7, #20]
 8016da4:	7d7b      	ldrb	r3, [r7, #21]
 8016da6:	b29a      	uxth	r2, r3
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	8a1b      	ldrh	r3, [r3, #16]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	f4ff af5c 	bcc.w	8016c6a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	7dfa      	ldrb	r2, [r7, #23]
 8016db6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	7dba      	ldrb	r2, [r7, #22]
 8016dbc:	701a      	strb	r2, [r3, #0]
}
 8016dbe:	bf00      	nop
 8016dc0:	371c      	adds	r7, #28
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd90      	pop	{r4, r7, pc}

08016dc6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dc8:	b08b      	sub	sp, #44	@ 0x2c
 8016dca:	af04      	add	r7, sp, #16
 8016dcc:	60f8      	str	r0, [r7, #12]
 8016dce:	60b9      	str	r1, [r7, #8]
 8016dd0:	607a      	str	r2, [r7, #4]
 8016dd2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	685b      	ldr	r3, [r3, #4]
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f004 fbd1 	bl	801b580 <UTIL_TIMER_GetElapsedTime>
 8016dde:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	1ad2      	subs	r2, r2, r3
 8016de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016dea:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dee:	2201      	movs	r2, #1
 8016df0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	2200      	movs	r2, #0
 8016df6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d004      	beq.n	8016e0a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d32b      	bcc.n	8016e62 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	69db      	ldr	r3, [r3, #28]
 8016e14:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e1a:	68dd      	ldr	r5, [r3, #12]
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	7a5e      	ldrb	r6, [r3, #9]
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	7d1b      	ldrb	r3, [r3, #20]
 8016e2a:	68fa      	ldr	r2, [r7, #12]
 8016e2c:	6992      	ldr	r2, [r2, #24]
 8016e2e:	9203      	str	r2, [sp, #12]
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	f10d 0e04 	add.w	lr, sp, #4
 8016e36:	320c      	adds	r2, #12
 8016e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e3c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016e40:	9300      	str	r3, [sp, #0]
 8016e42:	4663      	mov	r3, ip
 8016e44:	4632      	mov	r2, r6
 8016e46:	4629      	mov	r1, r5
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f7ff fc25 	bl	8016698 <RegionCommonUpdateBandTimeOff>
 8016e4e:	4602      	mov	r2, r0
 8016e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e52:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	69d8      	ldr	r0, [r3, #28]
 8016e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e5a:	683a      	ldr	r2, [r7, #0]
 8016e5c:	6879      	ldr	r1, [r7, #4]
 8016e5e:	f7ff fef4 	bl	8016c4a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d004      	beq.n	8016e74 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016e70:	2300      	movs	r3, #0
 8016e72:	e006      	b.n	8016e82 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d001      	beq.n	8016e80 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016e7c:	230b      	movs	r3, #11
 8016e7e:	e000      	b.n	8016e82 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016e80:	230c      	movs	r3, #12
    }
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	371c      	adds	r7, #28
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e8a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016e8a:	b5b0      	push	{r4, r5, r7, lr}
 8016e8c:	b086      	sub	sp, #24
 8016e8e:	af02      	add	r7, sp, #8
 8016e90:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f993 2000 	ldrsb.w	r2, [r3]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d103      	bne.n	8016eb0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016eae:	e026      	b.n	8016efe <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016eb0:	7bfb      	ldrb	r3, [r7, #15]
 8016eb2:	3b01      	subs	r3, #1
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ebe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d019      	beq.n	8016efa <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	78d8      	ldrb	r0, [r3, #3]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6859      	ldr	r1, [r3, #4]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	6892      	ldr	r2, [r2, #8]
 8016ede:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016ee2:	9201      	str	r2, [sp, #4]
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	462b      	mov	r3, r5
 8016ee8:	4622      	mov	r2, r4
 8016eea:	f7ff fa92 	bl	8016412 <RegionCommonChanVerifyDr>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	f083 0301 	eor.w	r3, r3, #1
 8016ef4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d1da      	bne.n	8016eb0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bdb0      	pop	{r4, r5, r7, pc}

08016f06 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016f06:	b480      	push	{r7}
 8016f08:	b083      	sub	sp, #12
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	460a      	mov	r2, r1
 8016f10:	71fb      	strb	r3, [r7, #7]
 8016f12:	4613      	mov	r3, r2
 8016f14:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016f16:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	bfb8      	it	lt
 8016f22:	4613      	movlt	r3, r2
 8016f24:	b25b      	sxtb	r3, r3
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	370c      	adds	r7, #12
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bc80      	pop	{r7}
 8016f2e:	4770      	bx	lr

08016f30 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	683a      	ldr	r2, [r7, #0]
 8016f40:	4413      	add	r3, r2
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	4a07      	ldr	r2, [pc, #28]	@ (8016f64 <RegionCommonGetBandwidth+0x34>)
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d004      	beq.n	8016f54 <RegionCommonGetBandwidth+0x24>
 8016f4a:	4a07      	ldr	r2, [pc, #28]	@ (8016f68 <RegionCommonGetBandwidth+0x38>)
 8016f4c:	4293      	cmp	r3, r2
 8016f4e:	d003      	beq.n	8016f58 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	e002      	b.n	8016f5a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016f54:	2301      	movs	r3, #1
 8016f56:	e000      	b.n	8016f5a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016f58:	2302      	movs	r3, #2
    }
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	370c      	adds	r7, #12
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bc80      	pop	{r7}
 8016f62:	4770      	bx	lr
 8016f64:	0003d090 	.word	0x0003d090
 8016f68:	0007a120 	.word	0x0007a120

08016f6c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b086      	sub	sp, #24
 8016f70:	af04      	add	r7, sp, #16
 8016f72:	4603      	mov	r3, r0
 8016f74:	6039      	str	r1, [r7, #0]
 8016f76:	71fb      	strb	r3, [r7, #7]
 8016f78:	4613      	mov	r3, r2
 8016f7a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016f7c:	79fb      	ldrb	r3, [r7, #7]
 8016f7e:	2b05      	cmp	r3, #5
 8016f80:	d810      	bhi.n	8016fa4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016f82:	79fb      	ldrb	r3, [r7, #7]
 8016f84:	4a0f      	ldr	r2, [pc, #60]	@ (8016fc4 <RegionCommonRxConfigPrint+0x58>)
 8016f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f8e:	9202      	str	r2, [sp, #8]
 8016f90:	683a      	ldr	r2, [r7, #0]
 8016f92:	9201      	str	r2, [sp, #4]
 8016f94:	9300      	str	r3, [sp, #0]
 8016f96:	4b0c      	ldr	r3, [pc, #48]	@ (8016fc8 <RegionCommonRxConfigPrint+0x5c>)
 8016f98:	2201      	movs	r2, #1
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	2002      	movs	r0, #2
 8016f9e:	f004 fbcd 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016fa2:	e00a      	b.n	8016fba <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	4b07      	ldr	r3, [pc, #28]	@ (8016fcc <RegionCommonRxConfigPrint+0x60>)
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	2002      	movs	r0, #2
 8016fb6:	f004 fbc1 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 8016fba:	bf00      	nop
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	20000110 	.word	0x20000110
 8016fc8:	0801ef48 	.word	0x0801ef48
 8016fcc:	0801ef68 	.word	0x0801ef68

08016fd0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af02      	add	r7, sp, #8
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016fe0:	9301      	str	r3, [sp, #4]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	9300      	str	r3, [sp, #0]
 8016fe6:	4b05      	ldr	r3, [pc, #20]	@ (8016ffc <RegionCommonTxConfigPrint+0x2c>)
 8016fe8:	2201      	movs	r2, #1
 8016fea:	2100      	movs	r1, #0
 8016fec:	2002      	movs	r0, #2
 8016fee:	f004 fba5 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
}
 8016ff2:	bf00      	nop
 8016ff4:	3708      	adds	r7, #8
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop
 8016ffc:	0801ef84 	.word	0x0801ef84

08017000 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017000:	b480      	push	{r7}
 8017002:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017004:	4b0d      	ldr	r3, [pc, #52]	@ (801703c <rand1+0x3c>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	4a0d      	ldr	r2, [pc, #52]	@ (8017040 <rand1+0x40>)
 801700a:	fb02 f303 	mul.w	r3, r2, r3
 801700e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017012:	3339      	adds	r3, #57	@ 0x39
 8017014:	4a09      	ldr	r2, [pc, #36]	@ (801703c <rand1+0x3c>)
 8017016:	6013      	str	r3, [r2, #0]
 8017018:	4b08      	ldr	r3, [pc, #32]	@ (801703c <rand1+0x3c>)
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	2303      	movs	r3, #3
 801701e:	fba3 1302 	umull	r1, r3, r3, r2
 8017022:	1ad1      	subs	r1, r2, r3
 8017024:	0849      	lsrs	r1, r1, #1
 8017026:	440b      	add	r3, r1
 8017028:	0f99      	lsrs	r1, r3, #30
 801702a:	460b      	mov	r3, r1
 801702c:	07db      	lsls	r3, r3, #31
 801702e:	1a5b      	subs	r3, r3, r1
 8017030:	1ad1      	subs	r1, r2, r3
 8017032:	460b      	mov	r3, r1
}
 8017034:	4618      	mov	r0, r3
 8017036:	46bd      	mov	sp, r7
 8017038:	bc80      	pop	{r7}
 801703a:	4770      	bx	lr
 801703c:	20000128 	.word	0x20000128
 8017040:	41c64e6d 	.word	0x41c64e6d

08017044 <srand1>:

void srand1( uint32_t seed )
{
 8017044:	b480      	push	{r7}
 8017046:	b083      	sub	sp, #12
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
    next = seed;
 801704c:	4a03      	ldr	r2, [pc, #12]	@ (801705c <srand1+0x18>)
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	6013      	str	r3, [r2, #0]
}
 8017052:	bf00      	nop
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	bc80      	pop	{r7}
 801705a:	4770      	bx	lr
 801705c:	20000128 	.word	0x20000128

08017060 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b082      	sub	sp, #8
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801706a:	f7ff ffc9 	bl	8017000 <rand1>
 801706e:	4602      	mov	r2, r0
 8017070:	6839      	ldr	r1, [r7, #0]
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	1acb      	subs	r3, r1, r3
 8017076:	3301      	adds	r3, #1
 8017078:	fb92 f1f3 	sdiv	r1, r2, r3
 801707c:	fb01 f303 	mul.w	r3, r1, r3
 8017080:	1ad2      	subs	r2, r2, r3
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	4413      	add	r3, r2
}
 8017086:	4618      	mov	r0, r3
 8017088:	3708      	adds	r7, #8
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}

0801708e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801708e:	b480      	push	{r7}
 8017090:	b085      	sub	sp, #20
 8017092:	af00      	add	r7, sp, #0
 8017094:	60f8      	str	r0, [r7, #12]
 8017096:	60b9      	str	r1, [r7, #8]
 8017098:	4613      	mov	r3, r2
 801709a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801709c:	e007      	b.n	80170ae <memcpy1+0x20>
    {
        *dst++ = *src++;
 801709e:	68ba      	ldr	r2, [r7, #8]
 80170a0:	1c53      	adds	r3, r2, #1
 80170a2:	60bb      	str	r3, [r7, #8]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	1c59      	adds	r1, r3, #1
 80170a8:	60f9      	str	r1, [r7, #12]
 80170aa:	7812      	ldrb	r2, [r2, #0]
 80170ac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80170ae:	88fb      	ldrh	r3, [r7, #6]
 80170b0:	1e5a      	subs	r2, r3, #1
 80170b2:	80fa      	strh	r2, [r7, #6]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d1f2      	bne.n	801709e <memcpy1+0x10>
    }
}
 80170b8:	bf00      	nop
 80170ba:	bf00      	nop
 80170bc:	3714      	adds	r7, #20
 80170be:	46bd      	mov	sp, r7
 80170c0:	bc80      	pop	{r7}
 80170c2:	4770      	bx	lr

080170c4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80170c4:	b480      	push	{r7}
 80170c6:	b085      	sub	sp, #20
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	4613      	mov	r3, r2
 80170d0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80170d2:	88fb      	ldrh	r3, [r7, #6]
 80170d4:	3b01      	subs	r3, #1
 80170d6:	68fa      	ldr	r2, [r7, #12]
 80170d8:	4413      	add	r3, r2
 80170da:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80170dc:	e007      	b.n	80170ee <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80170de:	68ba      	ldr	r2, [r7, #8]
 80170e0:	1c53      	adds	r3, r2, #1
 80170e2:	60bb      	str	r3, [r7, #8]
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	1e59      	subs	r1, r3, #1
 80170e8:	60f9      	str	r1, [r7, #12]
 80170ea:	7812      	ldrb	r2, [r2, #0]
 80170ec:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80170ee:	88fb      	ldrh	r3, [r7, #6]
 80170f0:	1e5a      	subs	r2, r3, #1
 80170f2:	80fa      	strh	r2, [r7, #6]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d1f2      	bne.n	80170de <memcpyr+0x1a>
    }
}
 80170f8:	bf00      	nop
 80170fa:	bf00      	nop
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	bc80      	pop	{r7}
 8017102:	4770      	bx	lr

08017104 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017104:	b480      	push	{r7}
 8017106:	b083      	sub	sp, #12
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	460b      	mov	r3, r1
 801710e:	70fb      	strb	r3, [r7, #3]
 8017110:	4613      	mov	r3, r2
 8017112:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017114:	e004      	b.n	8017120 <memset1+0x1c>
    {
        *dst++ = value;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	1c5a      	adds	r2, r3, #1
 801711a:	607a      	str	r2, [r7, #4]
 801711c:	78fa      	ldrb	r2, [r7, #3]
 801711e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017120:	883b      	ldrh	r3, [r7, #0]
 8017122:	1e5a      	subs	r2, r3, #1
 8017124:	803a      	strh	r2, [r7, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d1f5      	bne.n	8017116 <memset1+0x12>
    }
}
 801712a:	bf00      	nop
 801712c:	bf00      	nop
 801712e:	370c      	adds	r7, #12
 8017130:	46bd      	mov	sp, r7
 8017132:	bc80      	pop	{r7}
 8017134:	4770      	bx	lr
	...

08017138 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017138:	b480      	push	{r7}
 801713a:	b085      	sub	sp, #20
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	460b      	mov	r3, r1
 8017142:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017144:	f04f 33ff 	mov.w	r3, #4294967295
 8017148:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <Crc32+0x1c>
    {
        return 0;
 8017150:	2300      	movs	r3, #0
 8017152:	e026      	b.n	80171a2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017154:	2300      	movs	r3, #0
 8017156:	817b      	strh	r3, [r7, #10]
 8017158:	e01d      	b.n	8017196 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801715a:	897b      	ldrh	r3, [r7, #10]
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	4413      	add	r3, r2
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	461a      	mov	r2, r3
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	4053      	eors	r3, r2
 8017168:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801716a:	2300      	movs	r3, #0
 801716c:	813b      	strh	r3, [r7, #8]
 801716e:	e00c      	b.n	801718a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	085a      	lsrs	r2, r3, #1
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	f003 0301 	and.w	r3, r3, #1
 801717a:	425b      	negs	r3, r3
 801717c:	490b      	ldr	r1, [pc, #44]	@ (80171ac <Crc32+0x74>)
 801717e:	400b      	ands	r3, r1
 8017180:	4053      	eors	r3, r2
 8017182:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017184:	893b      	ldrh	r3, [r7, #8]
 8017186:	3301      	adds	r3, #1
 8017188:	813b      	strh	r3, [r7, #8]
 801718a:	893b      	ldrh	r3, [r7, #8]
 801718c:	2b07      	cmp	r3, #7
 801718e:	d9ef      	bls.n	8017170 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017190:	897b      	ldrh	r3, [r7, #10]
 8017192:	3301      	adds	r3, #1
 8017194:	817b      	strh	r3, [r7, #10]
 8017196:	897a      	ldrh	r2, [r7, #10]
 8017198:	887b      	ldrh	r3, [r7, #2]
 801719a:	429a      	cmp	r2, r3
 801719c:	d3dd      	bcc.n	801715a <Crc32+0x22>
        }
    }

    return ~crc;
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	43db      	mvns	r3, r3
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3714      	adds	r7, #20
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bc80      	pop	{r7}
 80171aa:	4770      	bx	lr
 80171ac:	edb88320 	.word	0xedb88320

080171b0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b084      	sub	sp, #16
 80171b4:	af02      	add	r7, sp, #8
 80171b6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80171b8:	4a24      	ldr	r2, [pc, #144]	@ (801724c <RadioInit+0x9c>)
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80171be:	4b24      	ldr	r3, [pc, #144]	@ (8017250 <RadioInit+0xa0>)
 80171c0:	2200      	movs	r2, #0
 80171c2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80171c4:	4b22      	ldr	r3, [pc, #136]	@ (8017250 <RadioInit+0xa0>)
 80171c6:	2200      	movs	r2, #0
 80171c8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80171ca:	4b21      	ldr	r3, [pc, #132]	@ (8017250 <RadioInit+0xa0>)
 80171cc:	2200      	movs	r2, #0
 80171ce:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80171d0:	4b1f      	ldr	r3, [pc, #124]	@ (8017250 <RadioInit+0xa0>)
 80171d2:	2200      	movs	r2, #0
 80171d4:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80171d6:	481f      	ldr	r0, [pc, #124]	@ (8017254 <RadioInit+0xa4>)
 80171d8:	f001 ff8e 	bl	80190f8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80171dc:	4b1c      	ldr	r3, [pc, #112]	@ (8017250 <RadioInit+0xa0>)
 80171de:	2200      	movs	r2, #0
 80171e0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80171e2:	4b1b      	ldr	r3, [pc, #108]	@ (8017250 <RadioInit+0xa0>)
 80171e4:	2200      	movs	r2, #0
 80171e6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80171e8:	f002 fa1e 	bl	8019628 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80171ec:	2100      	movs	r1, #0
 80171ee:	2000      	movs	r0, #0
 80171f0:	f002 fde6 	bl	8019dc0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80171f4:	2204      	movs	r2, #4
 80171f6:	2100      	movs	r1, #0
 80171f8:	2001      	movs	r0, #1
 80171fa:	f002 fba9 	bl	8019950 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80171fe:	2300      	movs	r3, #0
 8017200:	2200      	movs	r2, #0
 8017202:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017206:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801720a:	f002 fad9 	bl	80197c0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801720e:	f000 fe83 	bl	8017f18 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017212:	2300      	movs	r3, #0
 8017214:	9300      	str	r3, [sp, #0]
 8017216:	4b10      	ldr	r3, [pc, #64]	@ (8017258 <RadioInit+0xa8>)
 8017218:	2200      	movs	r2, #0
 801721a:	f04f 31ff 	mov.w	r1, #4294967295
 801721e:	480f      	ldr	r0, [pc, #60]	@ (801725c <RadioInit+0xac>)
 8017220:	f003 ffde 	bl	801b1e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017224:	2300      	movs	r3, #0
 8017226:	9300      	str	r3, [sp, #0]
 8017228:	4b0d      	ldr	r3, [pc, #52]	@ (8017260 <RadioInit+0xb0>)
 801722a:	2200      	movs	r2, #0
 801722c:	f04f 31ff 	mov.w	r1, #4294967295
 8017230:	480c      	ldr	r0, [pc, #48]	@ (8017264 <RadioInit+0xb4>)
 8017232:	f003 ffd5 	bl	801b1e0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017236:	4809      	ldr	r0, [pc, #36]	@ (801725c <RadioInit+0xac>)
 8017238:	f004 f876 	bl	801b328 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801723c:	4809      	ldr	r0, [pc, #36]	@ (8017264 <RadioInit+0xb4>)
 801723e:	f004 f873 	bl	801b328 <UTIL_TIMER_Stop>
}
 8017242:	bf00      	nop
 8017244:	3708      	adds	r7, #8
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	20001cd4 	.word	0x20001cd4
 8017250:	20001cd8 	.word	0x20001cd8
 8017254:	08018301 	.word	0x08018301
 8017258:	08018289 	.word	0x08018289
 801725c:	20001d34 	.word	0x20001d34
 8017260:	0801829d 	.word	0x0801829d
 8017264:	20001d4c 	.word	0x20001d4c

08017268 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017268:	b580      	push	{r7, lr}
 801726a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801726c:	f001 ff86 	bl	801917c <SUBGRF_GetOperatingMode>
 8017270:	4603      	mov	r3, r0
 8017272:	2b07      	cmp	r3, #7
 8017274:	d00a      	beq.n	801728c <RadioGetStatus+0x24>
 8017276:	2b07      	cmp	r3, #7
 8017278:	dc0a      	bgt.n	8017290 <RadioGetStatus+0x28>
 801727a:	2b04      	cmp	r3, #4
 801727c:	d002      	beq.n	8017284 <RadioGetStatus+0x1c>
 801727e:	2b05      	cmp	r3, #5
 8017280:	d002      	beq.n	8017288 <RadioGetStatus+0x20>
 8017282:	e005      	b.n	8017290 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017284:	2302      	movs	r3, #2
 8017286:	e004      	b.n	8017292 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017288:	2301      	movs	r3, #1
 801728a:	e002      	b.n	8017292 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801728c:	2303      	movs	r3, #3
 801728e:	e000      	b.n	8017292 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017290:	2300      	movs	r3, #0
    }
}
 8017292:	4618      	mov	r0, r3
 8017294:	bd80      	pop	{r7, pc}
	...

08017298 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80172a2:	4a2a      	ldr	r2, [pc, #168]	@ (801734c <RadioSetModem+0xb4>)
 80172a4:	79fb      	ldrb	r3, [r7, #7]
 80172a6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80172a8:	79fb      	ldrb	r3, [r7, #7]
 80172aa:	4618      	mov	r0, r3
 80172ac:	f003 f94b 	bl	801a546 <RFW_SetRadioModem>
    switch( modem )
 80172b0:	79fb      	ldrb	r3, [r7, #7]
 80172b2:	2b05      	cmp	r3, #5
 80172b4:	d80e      	bhi.n	80172d4 <RadioSetModem+0x3c>
 80172b6:	a201      	add	r2, pc, #4	@ (adr r2, 80172bc <RadioSetModem+0x24>)
 80172b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172bc:	080172e3 	.word	0x080172e3
 80172c0:	080172f1 	.word	0x080172f1
 80172c4:	080172d5 	.word	0x080172d5
 80172c8:	08017317 	.word	0x08017317
 80172cc:	08017325 	.word	0x08017325
 80172d0:	08017333 	.word	0x08017333
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80172d4:	2003      	movs	r0, #3
 80172d6:	f002 fb15 	bl	8019904 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80172da:	4b1c      	ldr	r3, [pc, #112]	@ (801734c <RadioSetModem+0xb4>)
 80172dc:	2200      	movs	r2, #0
 80172de:	735a      	strb	r2, [r3, #13]
        break;
 80172e0:	e02f      	b.n	8017342 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80172e2:	2000      	movs	r0, #0
 80172e4:	f002 fb0e 	bl	8019904 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80172e8:	4b18      	ldr	r3, [pc, #96]	@ (801734c <RadioSetModem+0xb4>)
 80172ea:	2200      	movs	r2, #0
 80172ec:	735a      	strb	r2, [r3, #13]
        break;
 80172ee:	e028      	b.n	8017342 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80172f0:	2001      	movs	r0, #1
 80172f2:	f002 fb07 	bl	8019904 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80172f6:	4b15      	ldr	r3, [pc, #84]	@ (801734c <RadioSetModem+0xb4>)
 80172f8:	7b5a      	ldrb	r2, [r3, #13]
 80172fa:	4b14      	ldr	r3, [pc, #80]	@ (801734c <RadioSetModem+0xb4>)
 80172fc:	7b1b      	ldrb	r3, [r3, #12]
 80172fe:	429a      	cmp	r2, r3
 8017300:	d01e      	beq.n	8017340 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017302:	4b12      	ldr	r3, [pc, #72]	@ (801734c <RadioSetModem+0xb4>)
 8017304:	7b1a      	ldrb	r2, [r3, #12]
 8017306:	4b11      	ldr	r3, [pc, #68]	@ (801734c <RadioSetModem+0xb4>)
 8017308:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801730a:	4b10      	ldr	r3, [pc, #64]	@ (801734c <RadioSetModem+0xb4>)
 801730c:	7b5b      	ldrb	r3, [r3, #13]
 801730e:	4618      	mov	r0, r3
 8017310:	f000 ff84 	bl	801821c <RadioSetPublicNetwork>
        }
        break;
 8017314:	e014      	b.n	8017340 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017316:	2002      	movs	r0, #2
 8017318:	f002 faf4 	bl	8019904 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801731c:	4b0b      	ldr	r3, [pc, #44]	@ (801734c <RadioSetModem+0xb4>)
 801731e:	2200      	movs	r2, #0
 8017320:	735a      	strb	r2, [r3, #13]
        break;
 8017322:	e00e      	b.n	8017342 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017324:	2002      	movs	r0, #2
 8017326:	f002 faed 	bl	8019904 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801732a:	4b08      	ldr	r3, [pc, #32]	@ (801734c <RadioSetModem+0xb4>)
 801732c:	2200      	movs	r2, #0
 801732e:	735a      	strb	r2, [r3, #13]
        break;
 8017330:	e007      	b.n	8017342 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017332:	2000      	movs	r0, #0
 8017334:	f002 fae6 	bl	8019904 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017338:	4b04      	ldr	r3, [pc, #16]	@ (801734c <RadioSetModem+0xb4>)
 801733a:	2200      	movs	r2, #0
 801733c:	735a      	strb	r2, [r3, #13]
        break;
 801733e:	e000      	b.n	8017342 <RadioSetModem+0xaa>
        break;
 8017340:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017342:	bf00      	nop
 8017344:	3708      	adds	r7, #8
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	20001cd8 	.word	0x20001cd8

08017350 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f002 fa8d 	bl	8019878 <SUBGRF_SetRfFrequency>
}
 801735e:	bf00      	nop
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}

08017366 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017366:	b580      	push	{r7, lr}
 8017368:	b090      	sub	sp, #64	@ 0x40
 801736a:	af0a      	add	r7, sp, #40	@ 0x28
 801736c:	60f8      	str	r0, [r7, #12]
 801736e:	60b9      	str	r1, [r7, #8]
 8017370:	603b      	str	r3, [r7, #0]
 8017372:	4613      	mov	r3, r2
 8017374:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017376:	2301      	movs	r3, #1
 8017378:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801737a:	2300      	movs	r3, #0
 801737c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801737e:	2300      	movs	r3, #0
 8017380:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017382:	f000 fddc 	bl	8017f3e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017386:	2000      	movs	r0, #0
 8017388:	f7ff ff86 	bl	8017298 <RadioSetModem>

    RadioSetChannel( freq );
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f7ff ffdf 	bl	8017350 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017392:	2301      	movs	r3, #1
 8017394:	9309      	str	r3, [sp, #36]	@ 0x24
 8017396:	2300      	movs	r3, #0
 8017398:	9308      	str	r3, [sp, #32]
 801739a:	2300      	movs	r3, #0
 801739c:	9307      	str	r3, [sp, #28]
 801739e:	2300      	movs	r3, #0
 80173a0:	9306      	str	r3, [sp, #24]
 80173a2:	2300      	movs	r3, #0
 80173a4:	9305      	str	r3, [sp, #20]
 80173a6:	2300      	movs	r3, #0
 80173a8:	9304      	str	r3, [sp, #16]
 80173aa:	2300      	movs	r3, #0
 80173ac:	9303      	str	r3, [sp, #12]
 80173ae:	2300      	movs	r3, #0
 80173b0:	9302      	str	r3, [sp, #8]
 80173b2:	2303      	movs	r3, #3
 80173b4:	9301      	str	r3, [sp, #4]
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	9300      	str	r3, [sp, #0]
 80173ba:	2300      	movs	r3, #0
 80173bc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80173c0:	68b9      	ldr	r1, [r7, #8]
 80173c2:	2000      	movs	r0, #0
 80173c4:	f000 f83c 	bl	8017440 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80173c8:	2000      	movs	r0, #0
 80173ca:	f000 fdbf 	bl	8017f4c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80173ce:	f000 ff53 	bl	8018278 <RadioGetWakeupTime>
 80173d2:	4603      	mov	r3, r0
 80173d4:	4618      	mov	r0, r3
 80173d6:	f7ea feb3 	bl	8002140 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80173da:	f004 f8bf 	bl	801b55c <UTIL_TIMER_GetCurrentTime>
 80173de:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80173e0:	e00d      	b.n	80173fe <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80173e2:	2000      	movs	r0, #0
 80173e4:	f000 fe9a 	bl	801811c <RadioRssi>
 80173e8:	4603      	mov	r3, r0
 80173ea:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80173ec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80173f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	dd02      	ble.n	80173fe <RadioIsChannelFree+0x98>
        {
            status = false;
 80173f8:	2300      	movs	r3, #0
 80173fa:	75fb      	strb	r3, [r7, #23]
            break;
 80173fc:	e006      	b.n	801740c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80173fe:	6938      	ldr	r0, [r7, #16]
 8017400:	f004 f8be 	bl	801b580 <UTIL_TIMER_GetElapsedTime>
 8017404:	4602      	mov	r2, r0
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	4293      	cmp	r3, r2
 801740a:	d8ea      	bhi.n	80173e2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801740c:	f000 fd97 	bl	8017f3e <RadioStandby>

    return status;
 8017410:	7dfb      	ldrb	r3, [r7, #23]
}
 8017412:	4618      	mov	r0, r3
 8017414:	3718      	adds	r7, #24
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}

0801741a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801741a:	b580      	push	{r7, lr}
 801741c:	b082      	sub	sp, #8
 801741e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017420:	2300      	movs	r3, #0
 8017422:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017424:	2300      	movs	r3, #0
 8017426:	2200      	movs	r2, #0
 8017428:	2100      	movs	r1, #0
 801742a:	2000      	movs	r0, #0
 801742c:	f002 f9c8 	bl	80197c0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017430:	f001 ff75 	bl	801931e <SUBGRF_GetRandom>
 8017434:	6078      	str	r0, [r7, #4]

    return rnd;
 8017436:	687b      	ldr	r3, [r7, #4]
}
 8017438:	4618      	mov	r0, r3
 801743a:	3708      	adds	r7, #8
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b08a      	sub	sp, #40	@ 0x28
 8017444:	af00      	add	r7, sp, #0
 8017446:	60b9      	str	r1, [r7, #8]
 8017448:	607a      	str	r2, [r7, #4]
 801744a:	461a      	mov	r2, r3
 801744c:	4603      	mov	r3, r0
 801744e:	73fb      	strb	r3, [r7, #15]
 8017450:	4613      	mov	r3, r2
 8017452:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017454:	4ab9      	ldr	r2, [pc, #740]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017456:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801745a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801745c:	f003 f831 	bl	801a4c2 <RFW_DeInit>
    if( rxContinuous == true )
 8017460:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017464:	2b00      	cmp	r3, #0
 8017466:	d001      	beq.n	801746c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017468:	2300      	movs	r3, #0
 801746a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 801746c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017470:	2b00      	cmp	r3, #0
 8017472:	d004      	beq.n	801747e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017474:	4ab2      	ldr	r2, [pc, #712]	@ (8017740 <RadioSetRxConfig+0x300>)
 8017476:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801747a:	7013      	strb	r3, [r2, #0]
 801747c:	e002      	b.n	8017484 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801747e:	4bb0      	ldr	r3, [pc, #704]	@ (8017740 <RadioSetRxConfig+0x300>)
 8017480:	22ff      	movs	r2, #255	@ 0xff
 8017482:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017484:	7bfb      	ldrb	r3, [r7, #15]
 8017486:	2b05      	cmp	r3, #5
 8017488:	d009      	beq.n	801749e <RadioSetRxConfig+0x5e>
 801748a:	2b05      	cmp	r3, #5
 801748c:	f300 81ca 	bgt.w	8017824 <RadioSetRxConfig+0x3e4>
 8017490:	2b00      	cmp	r3, #0
 8017492:	f000 80bf 	beq.w	8017614 <RadioSetRxConfig+0x1d4>
 8017496:	2b01      	cmp	r3, #1
 8017498:	f000 8124 	beq.w	80176e4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801749c:	e1c2      	b.n	8017824 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801749e:	2001      	movs	r0, #1
 80174a0:	f002 f884 	bl	80195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80174a4:	4ba5      	ldr	r3, [pc, #660]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174a6:	2200      	movs	r2, #0
 80174a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80174ac:	4aa3      	ldr	r2, [pc, #652]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80174b2:	4ba2      	ldr	r3, [pc, #648]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174b4:	2209      	movs	r2, #9
 80174b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80174ba:	4ba0      	ldr	r3, [pc, #640]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174bc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80174c0:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80174c2:	68b8      	ldr	r0, [r7, #8]
 80174c4:	f002 ff30 	bl	801a328 <SUBGRF_GetFskBandwidthRegValue>
 80174c8:	4603      	mov	r3, r0
 80174ca:	461a      	mov	r2, r3
 80174cc:	4b9b      	ldr	r3, [pc, #620]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80174d2:	4b9a      	ldr	r3, [pc, #616]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80174d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80174da:	00db      	lsls	r3, r3, #3
 80174dc:	b29a      	uxth	r2, r3
 80174de:	4b97      	ldr	r3, [pc, #604]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174e0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80174e2:	4b96      	ldr	r3, [pc, #600]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174e4:	2200      	movs	r2, #0
 80174e6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80174e8:	4b94      	ldr	r3, [pc, #592]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174ea:	2210      	movs	r2, #16
 80174ec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80174ee:	4b93      	ldr	r3, [pc, #588]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174f0:	2200      	movs	r2, #0
 80174f2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80174f4:	4b91      	ldr	r3, [pc, #580]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80174f6:	2200      	movs	r2, #0
 80174f8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80174fa:	4b91      	ldr	r3, [pc, #580]	@ (8017740 <RadioSetRxConfig+0x300>)
 80174fc:	781a      	ldrb	r2, [r3, #0]
 80174fe:	4b8f      	ldr	r3, [pc, #572]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017500:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017502:	4b8e      	ldr	r3, [pc, #568]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017504:	2201      	movs	r2, #1
 8017506:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017508:	4b8c      	ldr	r3, [pc, #560]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801750a:	2200      	movs	r2, #0
 801750c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801750e:	2005      	movs	r0, #5
 8017510:	f7ff fec2 	bl	8017298 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017514:	488b      	ldr	r0, [pc, #556]	@ (8017744 <RadioSetRxConfig+0x304>)
 8017516:	f002 fae9 	bl	8019aec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801751a:	488b      	ldr	r0, [pc, #556]	@ (8017748 <RadioSetRxConfig+0x308>)
 801751c:	f002 fbb4 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017520:	4a8a      	ldr	r2, [pc, #552]	@ (801774c <RadioSetRxConfig+0x30c>)
 8017522:	f107 031c 	add.w	r3, r7, #28
 8017526:	e892 0003 	ldmia.w	r2, {r0, r1}
 801752a:	e883 0003 	stmia.w	r3, {r0, r1}
 801752e:	f107 031c 	add.w	r3, r7, #28
 8017532:	4618      	mov	r0, r3
 8017534:	f001 fe71 	bl	801921a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017538:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801753c:	f001 febc 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017540:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017544:	f000 fe08 	bl	8018158 <RadioRead>
 8017548:	4603      	mov	r3, r0
 801754a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 801754e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017552:	f023 0310 	bic.w	r3, r3, #16
 8017556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801755a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801755e:	4619      	mov	r1, r3
 8017560:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017564:	f000 fde6 	bl	8018134 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017568:	2104      	movs	r1, #4
 801756a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 801756e:	f000 fde1 	bl	8018134 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017572:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017576:	f000 fdef 	bl	8018158 <RadioRead>
 801757a:	4603      	mov	r3, r0
 801757c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017584:	f023 031c 	bic.w	r3, r3, #28
 8017588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801758c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017590:	f043 0308 	orr.w	r3, r3, #8
 8017594:	b2db      	uxtb	r3, r3
 8017596:	4619      	mov	r1, r3
 8017598:	f640 009b 	movw	r0, #2203	@ 0x89b
 801759c:	f000 fdca 	bl	8018134 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80175a0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80175a4:	f000 fdd8 	bl	8018158 <RadioRead>
 80175a8:	4603      	mov	r3, r0
 80175aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80175ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175b2:	f023 0318 	bic.w	r3, r3, #24
 80175b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80175ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175be:	f043 0318 	orr.w	r3, r3, #24
 80175c2:	b2db      	uxtb	r3, r3
 80175c4:	4619      	mov	r1, r3
 80175c6:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80175ca:	f000 fdb3 	bl	8018134 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80175ce:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80175d2:	f000 fdc1 	bl	8018158 <RadioRead>
 80175d6:	4603      	mov	r3, r0
 80175d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80175dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80175e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80175e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175ec:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	4619      	mov	r1, r3
 80175f4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80175f8:	f000 fd9c 	bl	8018134 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80175fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80175fe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017602:	fb02 f303 	mul.w	r3, r2, r3
 8017606:	461a      	mov	r2, r3
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	fbb2 f3f3 	udiv	r3, r2, r3
 801760e:	4a4b      	ldr	r2, [pc, #300]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017610:	6093      	str	r3, [r2, #8]
            break;
 8017612:	e108      	b.n	8017826 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017614:	2000      	movs	r0, #0
 8017616:	f001 ffc9 	bl	80195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801761a:	4b48      	ldr	r3, [pc, #288]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801761c:	2200      	movs	r2, #0
 801761e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017622:	4a46      	ldr	r2, [pc, #280]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017628:	4b44      	ldr	r3, [pc, #272]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801762a:	220b      	movs	r2, #11
 801762c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017630:	68b8      	ldr	r0, [r7, #8]
 8017632:	f002 fe79 	bl	801a328 <SUBGRF_GetFskBandwidthRegValue>
 8017636:	4603      	mov	r3, r0
 8017638:	461a      	mov	r2, r3
 801763a:	4b40      	ldr	r3, [pc, #256]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801763c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017640:	4b3e      	ldr	r3, [pc, #248]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017642:	2200      	movs	r2, #0
 8017644:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017646:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017648:	00db      	lsls	r3, r3, #3
 801764a:	b29a      	uxth	r2, r3
 801764c:	4b3b      	ldr	r3, [pc, #236]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801764e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017650:	4b3a      	ldr	r3, [pc, #232]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017652:	2204      	movs	r2, #4
 8017654:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017656:	4b39      	ldr	r3, [pc, #228]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017658:	2218      	movs	r2, #24
 801765a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801765c:	4b37      	ldr	r3, [pc, #220]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801765e:	2200      	movs	r2, #0
 8017660:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017662:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017666:	f083 0301 	eor.w	r3, r3, #1
 801766a:	b2db      	uxtb	r3, r3
 801766c:	461a      	mov	r2, r3
 801766e:	4b33      	ldr	r3, [pc, #204]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017670:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017672:	4b33      	ldr	r3, [pc, #204]	@ (8017740 <RadioSetRxConfig+0x300>)
 8017674:	781a      	ldrb	r2, [r3, #0]
 8017676:	4b31      	ldr	r3, [pc, #196]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017678:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801767a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801767e:	2b00      	cmp	r3, #0
 8017680:	d003      	beq.n	801768a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017682:	4b2e      	ldr	r3, [pc, #184]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017684:	22f2      	movs	r2, #242	@ 0xf2
 8017686:	75da      	strb	r2, [r3, #23]
 8017688:	e002      	b.n	8017690 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801768a:	4b2c      	ldr	r3, [pc, #176]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801768c:	2201      	movs	r2, #1
 801768e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017690:	4b2a      	ldr	r3, [pc, #168]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017692:	2201      	movs	r2, #1
 8017694:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017696:	f000 fc52 	bl	8017f3e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801769a:	2000      	movs	r0, #0
 801769c:	f7ff fdfc 	bl	8017298 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80176a0:	4828      	ldr	r0, [pc, #160]	@ (8017744 <RadioSetRxConfig+0x304>)
 80176a2:	f002 fa23 	bl	8019aec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80176a6:	4828      	ldr	r0, [pc, #160]	@ (8017748 <RadioSetRxConfig+0x308>)
 80176a8:	f002 faee 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80176ac:	4a28      	ldr	r2, [pc, #160]	@ (8017750 <RadioSetRxConfig+0x310>)
 80176ae:	f107 0314 	add.w	r3, r7, #20
 80176b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80176ba:	f107 0314 	add.w	r3, r7, #20
 80176be:	4618      	mov	r0, r3
 80176c0:	f001 fdab 	bl	801921a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80176c4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80176c8:	f001 fdf6 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80176cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80176ce:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80176d2:	fb02 f303 	mul.w	r3, r2, r3
 80176d6:	461a      	mov	r2, r3
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	fbb2 f3f3 	udiv	r3, r2, r3
 80176de:	4a17      	ldr	r2, [pc, #92]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80176e0:	6093      	str	r3, [r2, #8]
            break;
 80176e2:	e0a0      	b.n	8017826 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80176e4:	2000      	movs	r0, #0
 80176e6:	f001 ff61 	bl	80195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80176ea:	4b14      	ldr	r3, [pc, #80]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80176ec:	2201      	movs	r2, #1
 80176ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	b2da      	uxtb	r2, r3
 80176f6:	4b11      	ldr	r3, [pc, #68]	@ (801773c <RadioSetRxConfig+0x2fc>)
 80176f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80176fc:	4a15      	ldr	r2, [pc, #84]	@ (8017754 <RadioSetRxConfig+0x314>)
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	4413      	add	r3, r2
 8017702:	781a      	ldrb	r2, [r3, #0]
 8017704:	4b0d      	ldr	r3, [pc, #52]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801770a:	4a0c      	ldr	r2, [pc, #48]	@ (801773c <RadioSetRxConfig+0x2fc>)
 801770c:	7bbb      	ldrb	r3, [r7, #14]
 801770e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d105      	bne.n	8017724 <RadioSetRxConfig+0x2e4>
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2b0b      	cmp	r3, #11
 801771c:	d008      	beq.n	8017730 <RadioSetRxConfig+0x2f0>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2b0c      	cmp	r3, #12
 8017722:	d005      	beq.n	8017730 <RadioSetRxConfig+0x2f0>
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d116      	bne.n	8017758 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2b0c      	cmp	r3, #12
 801772e:	d113      	bne.n	8017758 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017730:	4b02      	ldr	r3, [pc, #8]	@ (801773c <RadioSetRxConfig+0x2fc>)
 8017732:	2201      	movs	r2, #1
 8017734:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017738:	e012      	b.n	8017760 <RadioSetRxConfig+0x320>
 801773a:	bf00      	nop
 801773c:	20001cd8 	.word	0x20001cd8
 8017740:	2000012c 	.word	0x2000012c
 8017744:	20001d10 	.word	0x20001d10
 8017748:	20001ce6 	.word	0x20001ce6
 801774c:	0801efa0 	.word	0x0801efa0
 8017750:	0801efa8 	.word	0x0801efa8
 8017754:	0801f5f8 	.word	0x0801f5f8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017758:	4b35      	ldr	r3, [pc, #212]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 801775a:	2200      	movs	r2, #0
 801775c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017760:	4b33      	ldr	r3, [pc, #204]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 8017762:	2201      	movs	r2, #1
 8017764:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017766:	4b32      	ldr	r3, [pc, #200]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 8017768:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801776c:	2b05      	cmp	r3, #5
 801776e:	d004      	beq.n	801777a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017770:	4b2f      	ldr	r3, [pc, #188]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 8017772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017776:	2b06      	cmp	r3, #6
 8017778:	d10a      	bne.n	8017790 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801777a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801777c:	2b0b      	cmp	r3, #11
 801777e:	d803      	bhi.n	8017788 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017780:	4b2b      	ldr	r3, [pc, #172]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 8017782:	220c      	movs	r2, #12
 8017784:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017786:	e006      	b.n	8017796 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017788:	4a29      	ldr	r2, [pc, #164]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 801778a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801778c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801778e:	e002      	b.n	8017796 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017790:	4a27      	ldr	r2, [pc, #156]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 8017792:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017794:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017796:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801779a:	4b25      	ldr	r3, [pc, #148]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 801779c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801779e:	4b25      	ldr	r3, [pc, #148]	@ (8017834 <RadioSetRxConfig+0x3f4>)
 80177a0:	781a      	ldrb	r2, [r3, #0]
 80177a2:	4b23      	ldr	r3, [pc, #140]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 80177a4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80177a6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80177aa:	4b21      	ldr	r3, [pc, #132]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 80177ac:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80177b0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80177b4:	4b1e      	ldr	r3, [pc, #120]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 80177b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80177ba:	f000 fbc0 	bl	8017f3e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80177be:	2001      	movs	r0, #1
 80177c0:	f7ff fd6a 	bl	8017298 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80177c4:	481c      	ldr	r0, [pc, #112]	@ (8017838 <RadioSetRxConfig+0x3f8>)
 80177c6:	f002 f991 	bl	8019aec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177ca:	481c      	ldr	r0, [pc, #112]	@ (801783c <RadioSetRxConfig+0x3fc>)
 80177cc:	f002 fa5c 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80177d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	4618      	mov	r0, r3
 80177d6:	f001 fef8 	bl	80195ca <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80177da:	4b15      	ldr	r3, [pc, #84]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 80177dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d10d      	bne.n	8017800 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80177e4:	f240 7036 	movw	r0, #1846	@ 0x736
 80177e8:	f002 fba8 	bl	8019f3c <SUBGRF_ReadRegister>
 80177ec:	4603      	mov	r3, r0
 80177ee:	f023 0304 	bic.w	r3, r3, #4
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	4619      	mov	r1, r3
 80177f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80177fa:	f002 fb8b 	bl	8019f14 <SUBGRF_WriteRegister>
 80177fe:	e00c      	b.n	801781a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017800:	f240 7036 	movw	r0, #1846	@ 0x736
 8017804:	f002 fb9a 	bl	8019f3c <SUBGRF_ReadRegister>
 8017808:	4603      	mov	r3, r0
 801780a:	f043 0304 	orr.w	r3, r3, #4
 801780e:	b2db      	uxtb	r3, r3
 8017810:	4619      	mov	r1, r3
 8017812:	f240 7036 	movw	r0, #1846	@ 0x736
 8017816:	f002 fb7d 	bl	8019f14 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801781a:	4b05      	ldr	r3, [pc, #20]	@ (8017830 <RadioSetRxConfig+0x3f0>)
 801781c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017820:	609a      	str	r2, [r3, #8]
            break;
 8017822:	e000      	b.n	8017826 <RadioSetRxConfig+0x3e6>
            break;
 8017824:	bf00      	nop
    }
}
 8017826:	bf00      	nop
 8017828:	3728      	adds	r7, #40	@ 0x28
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	20001cd8 	.word	0x20001cd8
 8017834:	2000012c 	.word	0x2000012c
 8017838:	20001d10 	.word	0x20001d10
 801783c:	20001ce6 	.word	0x20001ce6

08017840 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b086      	sub	sp, #24
 8017844:	af00      	add	r7, sp, #0
 8017846:	60ba      	str	r2, [r7, #8]
 8017848:	607b      	str	r3, [r7, #4]
 801784a:	4603      	mov	r3, r0
 801784c:	73fb      	strb	r3, [r7, #15]
 801784e:	460b      	mov	r3, r1
 8017850:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017852:	f002 fe36 	bl	801a4c2 <RFW_DeInit>
    switch( modem )
 8017856:	7bfb      	ldrb	r3, [r7, #15]
 8017858:	2b04      	cmp	r3, #4
 801785a:	f000 80c7 	beq.w	80179ec <RadioSetTxConfig+0x1ac>
 801785e:	2b04      	cmp	r3, #4
 8017860:	f300 80d6 	bgt.w	8017a10 <RadioSetTxConfig+0x1d0>
 8017864:	2b00      	cmp	r3, #0
 8017866:	d002      	beq.n	801786e <RadioSetTxConfig+0x2e>
 8017868:	2b01      	cmp	r3, #1
 801786a:	d059      	beq.n	8017920 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801786c:	e0d0      	b.n	8017a10 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801786e:	4b74      	ldr	r3, [pc, #464]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017870:	2200      	movs	r2, #0
 8017872:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017876:	4a72      	ldr	r2, [pc, #456]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017878:	6a3b      	ldr	r3, [r7, #32]
 801787a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801787c:	4b70      	ldr	r3, [pc, #448]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801787e:	220b      	movs	r2, #11
 8017880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f002 fd4f 	bl	801a328 <SUBGRF_GetFskBandwidthRegValue>
 801788a:	4603      	mov	r3, r0
 801788c:	461a      	mov	r2, r3
 801788e:	4b6c      	ldr	r3, [pc, #432]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017894:	4a6a      	ldr	r2, [pc, #424]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801789a:	4b69      	ldr	r3, [pc, #420]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801789c:	2200      	movs	r2, #0
 801789e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80178a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80178a2:	00db      	lsls	r3, r3, #3
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	4b66      	ldr	r3, [pc, #408]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80178aa:	4b65      	ldr	r3, [pc, #404]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178ac:	2204      	movs	r2, #4
 80178ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80178b0:	4b63      	ldr	r3, [pc, #396]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178b2:	2218      	movs	r2, #24
 80178b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80178b6:	4b62      	ldr	r3, [pc, #392]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178b8:	2200      	movs	r2, #0
 80178ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80178bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80178c0:	f083 0301 	eor.w	r3, r3, #1
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	461a      	mov	r2, r3
 80178c8:	4b5d      	ldr	r3, [pc, #372]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178ca:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80178cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d003      	beq.n	80178dc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80178d4:	4b5a      	ldr	r3, [pc, #360]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178d6:	22f2      	movs	r2, #242	@ 0xf2
 80178d8:	75da      	strb	r2, [r3, #23]
 80178da:	e002      	b.n	80178e2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80178dc:	4b58      	ldr	r3, [pc, #352]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178de:	2201      	movs	r2, #1
 80178e0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80178e2:	4b57      	ldr	r3, [pc, #348]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80178e4:	2201      	movs	r2, #1
 80178e6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80178e8:	f000 fb29 	bl	8017f3e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80178ec:	2000      	movs	r0, #0
 80178ee:	f7ff fcd3 	bl	8017298 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80178f2:	4854      	ldr	r0, [pc, #336]	@ (8017a44 <RadioSetTxConfig+0x204>)
 80178f4:	f002 f8fa 	bl	8019aec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178f8:	4853      	ldr	r0, [pc, #332]	@ (8017a48 <RadioSetTxConfig+0x208>)
 80178fa:	f002 f9c5 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80178fe:	4a53      	ldr	r2, [pc, #332]	@ (8017a4c <RadioSetTxConfig+0x20c>)
 8017900:	f107 0310 	add.w	r3, r7, #16
 8017904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017908:	e883 0003 	stmia.w	r3, {r0, r1}
 801790c:	f107 0310 	add.w	r3, r7, #16
 8017910:	4618      	mov	r0, r3
 8017912:	f001 fc82 	bl	801921a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017916:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801791a:	f001 fccd 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
            break;
 801791e:	e078      	b.n	8017a12 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017920:	4b47      	ldr	r3, [pc, #284]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017922:	2201      	movs	r2, #1
 8017924:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017928:	6a3b      	ldr	r3, [r7, #32]
 801792a:	b2da      	uxtb	r2, r3
 801792c:	4b44      	ldr	r3, [pc, #272]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801792e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017932:	4a47      	ldr	r2, [pc, #284]	@ (8017a50 <RadioSetTxConfig+0x210>)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	4413      	add	r3, r2
 8017938:	781a      	ldrb	r2, [r3, #0]
 801793a:	4b41      	ldr	r3, [pc, #260]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801793c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017940:	4a3f      	ldr	r2, [pc, #252]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017946:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d105      	bne.n	801795c <RadioSetTxConfig+0x11c>
 8017950:	6a3b      	ldr	r3, [r7, #32]
 8017952:	2b0b      	cmp	r3, #11
 8017954:	d008      	beq.n	8017968 <RadioSetTxConfig+0x128>
 8017956:	6a3b      	ldr	r3, [r7, #32]
 8017958:	2b0c      	cmp	r3, #12
 801795a:	d005      	beq.n	8017968 <RadioSetTxConfig+0x128>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2b01      	cmp	r3, #1
 8017960:	d107      	bne.n	8017972 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017962:	6a3b      	ldr	r3, [r7, #32]
 8017964:	2b0c      	cmp	r3, #12
 8017966:	d104      	bne.n	8017972 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017968:	4b35      	ldr	r3, [pc, #212]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801796a:	2201      	movs	r2, #1
 801796c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017970:	e003      	b.n	801797a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017972:	4b33      	ldr	r3, [pc, #204]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017974:	2200      	movs	r2, #0
 8017976:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801797a:	4b31      	ldr	r3, [pc, #196]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801797c:	2201      	movs	r2, #1
 801797e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017980:	4b2f      	ldr	r3, [pc, #188]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017986:	2b05      	cmp	r3, #5
 8017988:	d004      	beq.n	8017994 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801798a:	4b2d      	ldr	r3, [pc, #180]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801798c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017990:	2b06      	cmp	r3, #6
 8017992:	d10a      	bne.n	80179aa <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017994:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017996:	2b0b      	cmp	r3, #11
 8017998:	d803      	bhi.n	80179a2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801799a:	4b29      	ldr	r3, [pc, #164]	@ (8017a40 <RadioSetTxConfig+0x200>)
 801799c:	220c      	movs	r2, #12
 801799e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80179a0:	e006      	b.n	80179b0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80179a2:	4a27      	ldr	r2, [pc, #156]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80179a6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80179a8:	e002      	b.n	80179b0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80179aa:	4a25      	ldr	r2, [pc, #148]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80179ae:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80179b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80179b4:	4b22      	ldr	r3, [pc, #136]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179b6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80179b8:	4b26      	ldr	r3, [pc, #152]	@ (8017a54 <RadioSetTxConfig+0x214>)
 80179ba:	781a      	ldrb	r2, [r3, #0]
 80179bc:	4b20      	ldr	r3, [pc, #128]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179be:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80179c0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80179c4:	4b1e      	ldr	r3, [pc, #120]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179c6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80179ca:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80179ce:	4b1c      	ldr	r3, [pc, #112]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80179d4:	f000 fab3 	bl	8017f3e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80179d8:	2001      	movs	r0, #1
 80179da:	f7ff fc5d 	bl	8017298 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80179de:	4819      	ldr	r0, [pc, #100]	@ (8017a44 <RadioSetTxConfig+0x204>)
 80179e0:	f002 f884 	bl	8019aec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179e4:	4818      	ldr	r0, [pc, #96]	@ (8017a48 <RadioSetTxConfig+0x208>)
 80179e6:	f002 f94f 	bl	8019c88 <SUBGRF_SetPacketParams>
            break;
 80179ea:	e012      	b.n	8017a12 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80179ec:	2004      	movs	r0, #4
 80179ee:	f7ff fc53 	bl	8017298 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80179f2:	4b13      	ldr	r3, [pc, #76]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179f4:	2202      	movs	r2, #2
 80179f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80179fa:	4a11      	ldr	r2, [pc, #68]	@ (8017a40 <RadioSetTxConfig+0x200>)
 80179fc:	6a3b      	ldr	r3, [r7, #32]
 80179fe:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017a00:	4b0f      	ldr	r3, [pc, #60]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017a02:	2216      	movs	r2, #22
 8017a04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a08:	480e      	ldr	r0, [pc, #56]	@ (8017a44 <RadioSetTxConfig+0x204>)
 8017a0a:	f002 f86f 	bl	8019aec <SUBGRF_SetModulationParams>
            break;
 8017a0e:	e000      	b.n	8017a12 <RadioSetTxConfig+0x1d2>
            break;
 8017a10:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f002 fb98 	bl	801a14c <SUBGRF_SetRfTxPower>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	461a      	mov	r2, r3
 8017a20:	4b07      	ldr	r3, [pc, #28]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017a22:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017a26:	4b06      	ldr	r3, [pc, #24]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017a28:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f002 fd5c 	bl	801a4ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017a32:	4a03      	ldr	r2, [pc, #12]	@ (8017a40 <RadioSetTxConfig+0x200>)
 8017a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a36:	6053      	str	r3, [r2, #4]
}
 8017a38:	bf00      	nop
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	20001cd8 	.word	0x20001cd8
 8017a44:	20001d10 	.word	0x20001d10
 8017a48:	20001ce6 	.word	0x20001ce6
 8017a4c:	0801efa8 	.word	0x0801efa8
 8017a50:	0801f5f8 	.word	0x0801f5f8
 8017a54:	2000012c 	.word	0x2000012c

08017a58 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b083      	sub	sp, #12
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
    return true;
 8017a60:	2301      	movs	r3, #1
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	370c      	adds	r7, #12
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bc80      	pop	{r7}
 8017a6a:	4770      	bx	lr

08017a6c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b085      	sub	sp, #20
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	4603      	mov	r3, r0
 8017a74:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017a76:	2300      	movs	r3, #0
 8017a78:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017a7a:	79fb      	ldrb	r3, [r7, #7]
 8017a7c:	2b0a      	cmp	r3, #10
 8017a7e:	d83e      	bhi.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
 8017a80:	a201      	add	r2, pc, #4	@ (adr r2, 8017a88 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a86:	bf00      	nop
 8017a88:	08017ab5 	.word	0x08017ab5
 8017a8c:	08017ac5 	.word	0x08017ac5
 8017a90:	08017ad5 	.word	0x08017ad5
 8017a94:	08017ae5 	.word	0x08017ae5
 8017a98:	08017aed 	.word	0x08017aed
 8017a9c:	08017af3 	.word	0x08017af3
 8017aa0:	08017af9 	.word	0x08017af9
 8017aa4:	08017aff 	.word	0x08017aff
 8017aa8:	08017abd 	.word	0x08017abd
 8017aac:	08017acd 	.word	0x08017acd
 8017ab0:	08017add 	.word	0x08017add
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017ab4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017ab8:	60fb      	str	r3, [r7, #12]
        break;
 8017aba:	e020      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017abc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017ac0:	60fb      	str	r3, [r7, #12]
        break;
 8017ac2:	e01c      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017ac4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017ac8:	60fb      	str	r3, [r7, #12]
        break;
 8017aca:	e018      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017acc:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017ad0:	60fb      	str	r3, [r7, #12]
        break;
 8017ad2:	e014      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017ad4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017ad8:	60fb      	str	r3, [r7, #12]
        break;
 8017ada:	e010      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017adc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017ae0:	60fb      	str	r3, [r7, #12]
        break;
 8017ae2:	e00c      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017ae4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017ae8:	60fb      	str	r3, [r7, #12]
        break;
 8017aea:	e008      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017aec:	4b07      	ldr	r3, [pc, #28]	@ (8017b0c <RadioGetLoRaBandwidthInHz+0xa0>)
 8017aee:	60fb      	str	r3, [r7, #12]
        break;
 8017af0:	e005      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017af2:	4b07      	ldr	r3, [pc, #28]	@ (8017b10 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017af4:	60fb      	str	r3, [r7, #12]
        break;
 8017af6:	e002      	b.n	8017afe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017af8:	4b06      	ldr	r3, [pc, #24]	@ (8017b14 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017afa:	60fb      	str	r3, [r7, #12]
        break;
 8017afc:	bf00      	nop
    }

    return bandwidthInHz;
 8017afe:	68fb      	ldr	r3, [r7, #12]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3714      	adds	r7, #20
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bc80      	pop	{r7}
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	0001e848 	.word	0x0001e848
 8017b10:	0003d090 	.word	0x0003d090
 8017b14:	0007a120 	.word	0x0007a120

08017b18 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017b18:	b480      	push	{r7}
 8017b1a:	b083      	sub	sp, #12
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	4608      	mov	r0, r1
 8017b22:	4611      	mov	r1, r2
 8017b24:	461a      	mov	r2, r3
 8017b26:	4603      	mov	r3, r0
 8017b28:	70fb      	strb	r3, [r7, #3]
 8017b2a:	460b      	mov	r3, r1
 8017b2c:	803b      	strh	r3, [r7, #0]
 8017b2e:	4613      	mov	r3, r2
 8017b30:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017b32:	883b      	ldrh	r3, [r7, #0]
 8017b34:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b36:	78ba      	ldrb	r2, [r7, #2]
 8017b38:	f082 0201 	eor.w	r2, r2, #1
 8017b3c:	b2d2      	uxtb	r2, r2
 8017b3e:	2a00      	cmp	r2, #0
 8017b40:	d001      	beq.n	8017b46 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017b42:	2208      	movs	r2, #8
 8017b44:	e000      	b.n	8017b48 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017b46:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017b48:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b4a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017b4e:	7c3b      	ldrb	r3, [r7, #16]
 8017b50:	7d39      	ldrb	r1, [r7, #20]
 8017b52:	2900      	cmp	r1, #0
 8017b54:	d001      	beq.n	8017b5a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017b56:	2102      	movs	r1, #2
 8017b58:	e000      	b.n	8017b5c <RadioGetGfskTimeOnAirNumerator+0x44>
 8017b5a:	2100      	movs	r1, #0
 8017b5c:	440b      	add	r3, r1
 8017b5e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017b60:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	370c      	adds	r7, #12
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bc80      	pop	{r7}
 8017b6a:	4770      	bx	lr

08017b6c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b08b      	sub	sp, #44	@ 0x2c
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	4611      	mov	r1, r2
 8017b78:	461a      	mov	r2, r3
 8017b7a:	460b      	mov	r3, r1
 8017b7c:	71fb      	strb	r3, [r7, #7]
 8017b7e:	4613      	mov	r3, r2
 8017b80:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017b82:	79fb      	ldrb	r3, [r7, #7]
 8017b84:	3304      	adds	r3, #4
 8017b86:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017b88:	2300      	movs	r3, #0
 8017b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	2b05      	cmp	r3, #5
 8017b92:	d002      	beq.n	8017b9a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	2b06      	cmp	r3, #6
 8017b98:	d104      	bne.n	8017ba4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017b9a:	88bb      	ldrh	r3, [r7, #4]
 8017b9c:	2b0b      	cmp	r3, #11
 8017b9e:	d801      	bhi.n	8017ba4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017ba0:	230c      	movs	r3, #12
 8017ba2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d105      	bne.n	8017bb6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	2b0b      	cmp	r3, #11
 8017bae:	d008      	beq.n	8017bc2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	2b0c      	cmp	r3, #12
 8017bb4:	d005      	beq.n	8017bc2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	d105      	bne.n	8017bc8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017bbc:	68bb      	ldr	r3, [r7, #8]
 8017bbe:	2b0c      	cmp	r3, #12
 8017bc0:	d102      	bne.n	8017bc8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017bc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017bcc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017bce:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017bd2:	2a00      	cmp	r2, #0
 8017bd4:	d001      	beq.n	8017bda <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017bd6:	2210      	movs	r2, #16
 8017bd8:	e000      	b.n	8017bdc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017bda:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017bdc:	4413      	add	r3, r2
 8017bde:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017be4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017be6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017bea:	2a00      	cmp	r2, #0
 8017bec:	d001      	beq.n	8017bf2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017bee:	2200      	movs	r2, #0
 8017bf0:	e000      	b.n	8017bf4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017bf2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017bf4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017bf6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	2b06      	cmp	r3, #6
 8017bfc:	d803      	bhi.n	8017c06 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017bfe:	68bb      	ldr	r3, [r7, #8]
 8017c00:	009b      	lsls	r3, r3, #2
 8017c02:	623b      	str	r3, [r7, #32]
 8017c04:	e00e      	b.n	8017c24 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	3308      	adds	r3, #8
 8017c0a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d004      	beq.n	8017c1e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	3b02      	subs	r3, #2
 8017c18:	009b      	lsls	r3, r3, #2
 8017c1a:	623b      	str	r3, [r7, #32]
 8017c1c:	e002      	b.n	8017c24 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	009b      	lsls	r3, r3, #2
 8017c22:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017c24:	69fb      	ldr	r3, [r7, #28]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	da01      	bge.n	8017c2e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017c2e:	69fa      	ldr	r2, [r7, #28]
 8017c30:	6a3b      	ldr	r3, [r7, #32]
 8017c32:	4413      	add	r3, r2
 8017c34:	1e5a      	subs	r2, r3, #1
 8017c36:	6a3b      	ldr	r3, [r7, #32]
 8017c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c3c:	697a      	ldr	r2, [r7, #20]
 8017c3e:	fb03 f202 	mul.w	r2, r3, r2
 8017c42:	88bb      	ldrh	r3, [r7, #4]
 8017c44:	4413      	add	r3, r2
    int32_t intermediate =
 8017c46:	330c      	adds	r3, #12
 8017c48:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	2b06      	cmp	r3, #6
 8017c4e:	d802      	bhi.n	8017c56 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017c50:	69bb      	ldr	r3, [r7, #24]
 8017c52:	3302      	adds	r3, #2
 8017c54:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017c56:	69bb      	ldr	r3, [r7, #24]
 8017c58:	009b      	lsls	r3, r3, #2
 8017c5a:	1c5a      	adds	r2, r3, #1
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	3b02      	subs	r3, #2
 8017c60:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	372c      	adds	r7, #44	@ 0x2c
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bc80      	pop	{r7}
 8017c6c:	4770      	bx	lr
	...

08017c70 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b08a      	sub	sp, #40	@ 0x28
 8017c74:	af04      	add	r7, sp, #16
 8017c76:	60b9      	str	r1, [r7, #8]
 8017c78:	607a      	str	r2, [r7, #4]
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	73fb      	strb	r3, [r7, #15]
 8017c80:	4613      	mov	r3, r2
 8017c82:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017c84:	2300      	movs	r3, #0
 8017c86:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017c8c:	7bfb      	ldrb	r3, [r7, #15]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d002      	beq.n	8017c98 <RadioTimeOnAir+0x28>
 8017c92:	2b01      	cmp	r3, #1
 8017c94:	d017      	beq.n	8017cc6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017c96:	e035      	b.n	8017d04 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017c98:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017c9c:	8c3a      	ldrh	r2, [r7, #32]
 8017c9e:	7bb9      	ldrb	r1, [r7, #14]
 8017ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017caa:	9300      	str	r3, [sp, #0]
 8017cac:	4603      	mov	r3, r0
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f7ff ff32 	bl	8017b18 <RadioGetGfskTimeOnAirNumerator>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017cba:	fb02 f303 	mul.w	r3, r2, r3
 8017cbe:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	613b      	str	r3, [r7, #16]
        break;
 8017cc4:	e01e      	b.n	8017d04 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017cc6:	8c39      	ldrh	r1, [r7, #32]
 8017cc8:	7bba      	ldrb	r2, [r7, #14]
 8017cca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017cce:	9302      	str	r3, [sp, #8]
 8017cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017cd4:	9301      	str	r3, [sp, #4]
 8017cd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017cda:	9300      	str	r3, [sp, #0]
 8017cdc:	460b      	mov	r3, r1
 8017cde:	6879      	ldr	r1, [r7, #4]
 8017ce0:	68b8      	ldr	r0, [r7, #8]
 8017ce2:	f7ff ff43 	bl	8017b6c <RadioGetLoRaTimeOnAirNumerator>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017cec:	fb02 f303 	mul.w	r3, r2, r3
 8017cf0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8017d1c <RadioTimeOnAir+0xac>)
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff feb6 	bl	8017a6c <RadioGetLoRaBandwidthInHz>
 8017d00:	6138      	str	r0, [r7, #16]
        break;
 8017d02:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017d04:	697a      	ldr	r2, [r7, #20]
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	4413      	add	r3, r2
 8017d0a:	1e5a      	subs	r2, r3, #1
 8017d0c:	693b      	ldr	r3, [r7, #16]
 8017d0e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3718      	adds	r7, #24
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	0801f5f8 	.word	0x0801f5f8

08017d20 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b084      	sub	sp, #16
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	460b      	mov	r3, r1
 8017d2a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	2200      	movs	r2, #0
 8017d30:	f240 2101 	movw	r1, #513	@ 0x201
 8017d34:	f240 2001 	movw	r0, #513	@ 0x201
 8017d38:	f001 fd42 	bl	80197c0 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017d3c:	4b71      	ldr	r3, [pc, #452]	@ (8017f04 <RadioSend+0x1e4>)
 8017d3e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017d42:	2101      	movs	r1, #1
 8017d44:	4618      	mov	r0, r3
 8017d46:	f002 f9d9 	bl	801a0fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8017f04 <RadioSend+0x1e4>)
 8017d4c:	781b      	ldrb	r3, [r3, #0]
 8017d4e:	2b01      	cmp	r3, #1
 8017d50:	d112      	bne.n	8017d78 <RadioSend+0x58>
 8017d52:	4b6c      	ldr	r3, [pc, #432]	@ (8017f04 <RadioSend+0x1e4>)
 8017d54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017d58:	2b06      	cmp	r3, #6
 8017d5a:	d10d      	bne.n	8017d78 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017d5c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d60:	f002 f8ec 	bl	8019f3c <SUBGRF_ReadRegister>
 8017d64:	4603      	mov	r3, r0
 8017d66:	f023 0304 	bic.w	r3, r3, #4
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	4619      	mov	r1, r3
 8017d6e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d72:	f002 f8cf 	bl	8019f14 <SUBGRF_WriteRegister>
 8017d76:	e00c      	b.n	8017d92 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017d78:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d7c:	f002 f8de 	bl	8019f3c <SUBGRF_ReadRegister>
 8017d80:	4603      	mov	r3, r0
 8017d82:	f043 0304 	orr.w	r3, r3, #4
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	4619      	mov	r1, r3
 8017d8a:	f640 0089 	movw	r0, #2185	@ 0x889
 8017d8e:	f002 f8c1 	bl	8019f14 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017d92:	4b5c      	ldr	r3, [pc, #368]	@ (8017f04 <RadioSend+0x1e4>)
 8017d94:	781b      	ldrb	r3, [r3, #0]
 8017d96:	2b04      	cmp	r3, #4
 8017d98:	f200 80a7 	bhi.w	8017eea <RadioSend+0x1ca>
 8017d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8017da4 <RadioSend+0x84>)
 8017d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017da2:	bf00      	nop
 8017da4:	08017dd3 	.word	0x08017dd3
 8017da8:	08017db9 	.word	0x08017db9
 8017dac:	08017dd3 	.word	0x08017dd3
 8017db0:	08017e33 	.word	0x08017e33
 8017db4:	08017e53 	.word	0x08017e53
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017db8:	4a52      	ldr	r2, [pc, #328]	@ (8017f04 <RadioSend+0x1e4>)
 8017dba:	78fb      	ldrb	r3, [r7, #3]
 8017dbc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017dbe:	4852      	ldr	r0, [pc, #328]	@ (8017f08 <RadioSend+0x1e8>)
 8017dc0:	f001 ff62 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017dc4:	78fb      	ldrb	r3, [r7, #3]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	4619      	mov	r1, r3
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f001 fa12 	bl	80191f4 <SUBGRF_SendPayload>
            break;
 8017dd0:	e08c      	b.n	8017eec <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017dd2:	f002 fb7c 	bl	801a4ce <RFW_Is_Init>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	d11d      	bne.n	8017e18 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017ddc:	f107 020d 	add.w	r2, r7, #13
 8017de0:	78fb      	ldrb	r3, [r7, #3]
 8017de2:	4619      	mov	r1, r3
 8017de4:	6878      	ldr	r0, [r7, #4]
 8017de6:	f002 fb8a 	bl	801a4fe <RFW_TransmitInit>
 8017dea:	4603      	mov	r3, r0
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d10c      	bne.n	8017e0a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017df0:	7b7a      	ldrb	r2, [r7, #13]
 8017df2:	4b44      	ldr	r3, [pc, #272]	@ (8017f04 <RadioSend+0x1e4>)
 8017df4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017df6:	4844      	ldr	r0, [pc, #272]	@ (8017f08 <RadioSend+0x1e8>)
 8017df8:	f001 ff46 	bl	8019c88 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017dfc:	7b7b      	ldrb	r3, [r7, #13]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	4619      	mov	r1, r3
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f001 f9f6 	bl	80191f4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017e08:	e070      	b.n	8017eec <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017e0a:	4b40      	ldr	r3, [pc, #256]	@ (8017f0c <RadioSend+0x1ec>)
 8017e0c:	2201      	movs	r2, #1
 8017e0e:	2100      	movs	r1, #0
 8017e10:	2002      	movs	r0, #2
 8017e12:	f003 fc93 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
 8017e16:	e072      	b.n	8017efe <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017e18:	4a3a      	ldr	r2, [pc, #232]	@ (8017f04 <RadioSend+0x1e4>)
 8017e1a:	78fb      	ldrb	r3, [r7, #3]
 8017e1c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e1e:	483a      	ldr	r0, [pc, #232]	@ (8017f08 <RadioSend+0x1e8>)
 8017e20:	f001 ff32 	bl	8019c88 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017e24:	78fb      	ldrb	r3, [r7, #3]
 8017e26:	2200      	movs	r2, #0
 8017e28:	4619      	mov	r1, r3
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f001 f9e2 	bl	80191f4 <SUBGRF_SendPayload>
            break;
 8017e30:	e05c      	b.n	8017eec <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017e32:	4b34      	ldr	r3, [pc, #208]	@ (8017f04 <RadioSend+0x1e4>)
 8017e34:	2202      	movs	r2, #2
 8017e36:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017e38:	4a32      	ldr	r2, [pc, #200]	@ (8017f04 <RadioSend+0x1e4>)
 8017e3a:	78fb      	ldrb	r3, [r7, #3]
 8017e3c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e3e:	4832      	ldr	r0, [pc, #200]	@ (8017f08 <RadioSend+0x1e8>)
 8017e40:	f001 ff22 	bl	8019c88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017e44:	78fb      	ldrb	r3, [r7, #3]
 8017e46:	2200      	movs	r2, #0
 8017e48:	4619      	mov	r1, r3
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f001 f9d2 	bl	80191f4 <SUBGRF_SendPayload>
            break;
 8017e50:	e04c      	b.n	8017eec <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017e52:	78fb      	ldrb	r3, [r7, #3]
 8017e54:	461a      	mov	r2, r3
 8017e56:	6879      	ldr	r1, [r7, #4]
 8017e58:	482d      	ldr	r0, [pc, #180]	@ (8017f10 <RadioSend+0x1f0>)
 8017e5a:	f000 fcbc 	bl	80187d6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017e5e:	4b29      	ldr	r3, [pc, #164]	@ (8017f04 <RadioSend+0x1e4>)
 8017e60:	2202      	movs	r2, #2
 8017e62:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017e64:	78fb      	ldrb	r3, [r7, #3]
 8017e66:	3301      	adds	r3, #1
 8017e68:	b2da      	uxtb	r2, r3
 8017e6a:	4b26      	ldr	r3, [pc, #152]	@ (8017f04 <RadioSend+0x1e4>)
 8017e6c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e6e:	4826      	ldr	r0, [pc, #152]	@ (8017f08 <RadioSend+0x1e8>)
 8017e70:	f001 ff0a 	bl	8019c88 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017e74:	2100      	movs	r1, #0
 8017e76:	20f1      	movs	r0, #241	@ 0xf1
 8017e78:	f000 f95c 	bl	8018134 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017e7c:	2100      	movs	r1, #0
 8017e7e:	20f0      	movs	r0, #240	@ 0xf0
 8017e80:	f000 f958 	bl	8018134 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017e84:	4b1f      	ldr	r3, [pc, #124]	@ (8017f04 <RadioSend+0x1e4>)
 8017e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017e88:	2b64      	cmp	r3, #100	@ 0x64
 8017e8a:	d108      	bne.n	8017e9e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017e8c:	2170      	movs	r1, #112	@ 0x70
 8017e8e:	20f3      	movs	r0, #243	@ 0xf3
 8017e90:	f000 f950 	bl	8018134 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017e94:	211d      	movs	r1, #29
 8017e96:	20f2      	movs	r0, #242	@ 0xf2
 8017e98:	f000 f94c 	bl	8018134 <RadioWrite>
 8017e9c:	e007      	b.n	8017eae <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017e9e:	21e1      	movs	r1, #225	@ 0xe1
 8017ea0:	20f3      	movs	r0, #243	@ 0xf3
 8017ea2:	f000 f947 	bl	8018134 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017ea6:	2104      	movs	r1, #4
 8017ea8:	20f2      	movs	r0, #242	@ 0xf2
 8017eaa:	f000 f943 	bl	8018134 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017eae:	78fb      	ldrb	r3, [r7, #3]
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	00db      	lsls	r3, r3, #3
 8017eb4:	b29b      	uxth	r3, r3
 8017eb6:	3302      	adds	r3, #2
 8017eb8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017eba:	89fb      	ldrh	r3, [r7, #14]
 8017ebc:	0a1b      	lsrs	r3, r3, #8
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	20f4      	movs	r0, #244	@ 0xf4
 8017ec6:	f000 f935 	bl	8018134 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8017eca:	89fb      	ldrh	r3, [r7, #14]
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	4619      	mov	r1, r3
 8017ed0:	20f5      	movs	r0, #245	@ 0xf5
 8017ed2:	f000 f92f 	bl	8018134 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017ed6:	78fb      	ldrb	r3, [r7, #3]
 8017ed8:	3301      	adds	r3, #1
 8017eda:	b2db      	uxtb	r3, r3
 8017edc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	480b      	ldr	r0, [pc, #44]	@ (8017f10 <RadioSend+0x1f0>)
 8017ee4:	f001 f986 	bl	80191f4 <SUBGRF_SendPayload>
            break;
 8017ee8:	e000      	b.n	8017eec <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017eea:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017eec:	4b05      	ldr	r3, [pc, #20]	@ (8017f04 <RadioSend+0x1e4>)
 8017eee:	685b      	ldr	r3, [r3, #4]
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	4808      	ldr	r0, [pc, #32]	@ (8017f14 <RadioSend+0x1f4>)
 8017ef4:	f003 fa88 	bl	801b408 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017ef8:	4806      	ldr	r0, [pc, #24]	@ (8017f14 <RadioSend+0x1f4>)
 8017efa:	f003 f9a7 	bl	801b24c <UTIL_TIMER_Start>
}
 8017efe:	3710      	adds	r7, #16
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}
 8017f04:	20001cd8 	.word	0x20001cd8
 8017f08:	20001ce6 	.word	0x20001ce6
 8017f0c:	0801efb0 	.word	0x0801efb0
 8017f10:	20001bd4 	.word	0x20001bd4
 8017f14:	20001d34 	.word	0x20001d34

08017f18 <RadioSleep>:

static void RadioSleep( void )
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b082      	sub	sp, #8
 8017f1c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017f1e:	2300      	movs	r3, #0
 8017f20:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017f22:	793b      	ldrb	r3, [r7, #4]
 8017f24:	f043 0304 	orr.w	r3, r3, #4
 8017f28:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017f2a:	7938      	ldrb	r0, [r7, #4]
 8017f2c:	f001 fa3e 	bl	80193ac <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017f30:	2002      	movs	r0, #2
 8017f32:	f7ea f905 	bl	8002140 <HAL_Delay>
}
 8017f36:	bf00      	nop
 8017f38:	3708      	adds	r7, #8
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}

08017f3e <RadioStandby>:

static void RadioStandby( void )
{
 8017f3e:	b580      	push	{r7, lr}
 8017f40:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017f42:	2000      	movs	r0, #0
 8017f44:	f001 fa66 	bl	8019414 <SUBGRF_SetStandby>
}
 8017f48:	bf00      	nop
 8017f4a:	bd80      	pop	{r7, pc}

08017f4c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017f54:	f002 fabb 	bl	801a4ce <RFW_Is_Init>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	d102      	bne.n	8017f64 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017f5e:	f002 fade 	bl	801a51e <RFW_ReceiveInit>
 8017f62:	e007      	b.n	8017f74 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017f64:	2300      	movs	r3, #0
 8017f66:	2200      	movs	r2, #0
 8017f68:	f240 2162 	movw	r1, #610	@ 0x262
 8017f6c:	f240 2062 	movw	r0, #610	@ 0x262
 8017f70:	f001 fc26 	bl	80197c0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d006      	beq.n	8017f88 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017f7a:	6879      	ldr	r1, [r7, #4]
 8017f7c:	4811      	ldr	r0, [pc, #68]	@ (8017fc4 <RadioRx+0x78>)
 8017f7e:	f003 fa43 	bl	801b408 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017f82:	4810      	ldr	r0, [pc, #64]	@ (8017fc4 <RadioRx+0x78>)
 8017f84:	f003 f962 	bl	801b24c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017f88:	4b0f      	ldr	r3, [pc, #60]	@ (8017fc8 <RadioRx+0x7c>)
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8017fc8 <RadioRx+0x7c>)
 8017f90:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017f94:	2100      	movs	r1, #0
 8017f96:	4618      	mov	r0, r3
 8017f98:	f002 f8b0 	bl	801a0fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8017fc8 <RadioRx+0x7c>)
 8017f9e:	785b      	ldrb	r3, [r3, #1]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d004      	beq.n	8017fae <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017fa4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017fa8:	f001 fa70 	bl	801948c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017fac:	e005      	b.n	8017fba <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017fae:	4b06      	ldr	r3, [pc, #24]	@ (8017fc8 <RadioRx+0x7c>)
 8017fb0:	689b      	ldr	r3, [r3, #8]
 8017fb2:	019b      	lsls	r3, r3, #6
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f001 fa69 	bl	801948c <SUBGRF_SetRx>
}
 8017fba:	bf00      	nop
 8017fbc:	3708      	adds	r7, #8
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	20001d4c 	.word	0x20001d4c
 8017fc8:	20001cd8 	.word	0x20001cd8

08017fcc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8017fd4:	f002 fa7b 	bl	801a4ce <RFW_Is_Init>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d102      	bne.n	8017fe4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8017fde:	f002 fa9e 	bl	801a51e <RFW_ReceiveInit>
 8017fe2:	e007      	b.n	8017ff4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	f240 2162 	movw	r1, #610	@ 0x262
 8017fec:	f240 2062 	movw	r0, #610	@ 0x262
 8017ff0:	f001 fbe6 	bl	80197c0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d006      	beq.n	8018008 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017ffa:	6879      	ldr	r1, [r7, #4]
 8017ffc:	4811      	ldr	r0, [pc, #68]	@ (8018044 <RadioRxBoosted+0x78>)
 8017ffe:	f003 fa03 	bl	801b408 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018002:	4810      	ldr	r0, [pc, #64]	@ (8018044 <RadioRxBoosted+0x78>)
 8018004:	f003 f922 	bl	801b24c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018008:	4b0f      	ldr	r3, [pc, #60]	@ (8018048 <RadioRxBoosted+0x7c>)
 801800a:	2200      	movs	r2, #0
 801800c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801800e:	4b0e      	ldr	r3, [pc, #56]	@ (8018048 <RadioRxBoosted+0x7c>)
 8018010:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018014:	2100      	movs	r1, #0
 8018016:	4618      	mov	r0, r3
 8018018:	f002 f870 	bl	801a0fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801801c:	4b0a      	ldr	r3, [pc, #40]	@ (8018048 <RadioRxBoosted+0x7c>)
 801801e:	785b      	ldrb	r3, [r3, #1]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d004      	beq.n	801802e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018024:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018028:	f001 fa50 	bl	80194cc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801802c:	e005      	b.n	801803a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801802e:	4b06      	ldr	r3, [pc, #24]	@ (8018048 <RadioRxBoosted+0x7c>)
 8018030:	689b      	ldr	r3, [r3, #8]
 8018032:	019b      	lsls	r3, r3, #6
 8018034:	4618      	mov	r0, r3
 8018036:	f001 fa49 	bl	80194cc <SUBGRF_SetRxBoosted>
}
 801803a:	bf00      	nop
 801803c:	3708      	adds	r7, #8
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}
 8018042:	bf00      	nop
 8018044:	20001d4c 	.word	0x20001d4c
 8018048:	20001cd8 	.word	0x20001cd8

0801804c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	005a      	lsls	r2, r3, #1
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	4413      	add	r3, r2
 801805e:	4a0c      	ldr	r2, [pc, #48]	@ (8018090 <RadioSetRxDutyCycle+0x44>)
 8018060:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018062:	2300      	movs	r3, #0
 8018064:	2200      	movs	r2, #0
 8018066:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801806a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801806e:	f001 fba7 	bl	80197c0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018072:	4b07      	ldr	r3, [pc, #28]	@ (8018090 <RadioSetRxDutyCycle+0x44>)
 8018074:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018078:	2100      	movs	r1, #0
 801807a:	4618      	mov	r0, r3
 801807c:	f002 f83e 	bl	801a0fc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018080:	6839      	ldr	r1, [r7, #0]
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f001 fa46 	bl	8019514 <SUBGRF_SetRxDutyCycle>
}
 8018088:	bf00      	nop
 801808a:	3708      	adds	r7, #8
 801808c:	46bd      	mov	sp, r7
 801808e:	bd80      	pop	{r7, pc}
 8018090:	20001cd8 	.word	0x20001cd8

08018094 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018094:	b580      	push	{r7, lr}
 8018096:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018098:	4b09      	ldr	r3, [pc, #36]	@ (80180c0 <RadioStartCad+0x2c>)
 801809a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801809e:	2100      	movs	r1, #0
 80180a0:	4618      	mov	r0, r3
 80180a2:	f002 f82b 	bl	801a0fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80180a6:	2300      	movs	r3, #0
 80180a8:	2200      	movs	r2, #0
 80180aa:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80180ae:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80180b2:	f001 fb85 	bl	80197c0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80180b6:	f001 fa59 	bl	801956c <SUBGRF_SetCad>
}
 80180ba:	bf00      	nop
 80180bc:	bd80      	pop	{r7, pc}
 80180be:	bf00      	nop
 80180c0:	20001cd8 	.word	0x20001cd8

080180c4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b084      	sub	sp, #16
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	460b      	mov	r3, r1
 80180ce:	70fb      	strb	r3, [r7, #3]
 80180d0:	4613      	mov	r3, r2
 80180d2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80180d4:	883b      	ldrh	r3, [r7, #0]
 80180d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80180da:	fb02 f303 	mul.w	r3, r2, r3
 80180de:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80180e0:	6878      	ldr	r0, [r7, #4]
 80180e2:	f001 fbc9 	bl	8019878 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80180e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f002 f82e 	bl	801a14c <SUBGRF_SetRfTxPower>
 80180f0:	4603      	mov	r3, r0
 80180f2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80180f4:	7afb      	ldrb	r3, [r7, #11]
 80180f6:	2101      	movs	r1, #1
 80180f8:	4618      	mov	r0, r3
 80180fa:	f001 ffff 	bl	801a0fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80180fe:	f001 fa43 	bl	8019588 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018102:	68f9      	ldr	r1, [r7, #12]
 8018104:	4804      	ldr	r0, [pc, #16]	@ (8018118 <RadioSetTxContinuousWave+0x54>)
 8018106:	f003 f97f 	bl	801b408 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801810a:	4803      	ldr	r0, [pc, #12]	@ (8018118 <RadioSetTxContinuousWave+0x54>)
 801810c:	f003 f89e 	bl	801b24c <UTIL_TIMER_Start>
}
 8018110:	bf00      	nop
 8018112:	3710      	adds	r7, #16
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	20001d34 	.word	0x20001d34

0801811c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	4603      	mov	r3, r0
 8018124:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018126:	f001 fe62 	bl	8019dee <SUBGRF_GetRssiInst>
 801812a:	4603      	mov	r3, r0
}
 801812c:	4618      	mov	r0, r3
 801812e:	3708      	adds	r7, #8
 8018130:	46bd      	mov	sp, r7
 8018132:	bd80      	pop	{r7, pc}

08018134 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b082      	sub	sp, #8
 8018138:	af00      	add	r7, sp, #0
 801813a:	4603      	mov	r3, r0
 801813c:	460a      	mov	r2, r1
 801813e:	80fb      	strh	r3, [r7, #6]
 8018140:	4613      	mov	r3, r2
 8018142:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018144:	797a      	ldrb	r2, [r7, #5]
 8018146:	88fb      	ldrh	r3, [r7, #6]
 8018148:	4611      	mov	r1, r2
 801814a:	4618      	mov	r0, r3
 801814c:	f001 fee2 	bl	8019f14 <SUBGRF_WriteRegister>
}
 8018150:	bf00      	nop
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	4603      	mov	r3, r0
 8018160:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018162:	88fb      	ldrh	r3, [r7, #6]
 8018164:	4618      	mov	r0, r3
 8018166:	f001 fee9 	bl	8019f3c <SUBGRF_ReadRegister>
 801816a:	4603      	mov	r3, r0
}
 801816c:	4618      	mov	r0, r3
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	4603      	mov	r3, r0
 801817c:	6039      	str	r1, [r7, #0]
 801817e:	80fb      	strh	r3, [r7, #6]
 8018180:	4613      	mov	r3, r2
 8018182:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018184:	797b      	ldrb	r3, [r7, #5]
 8018186:	b29a      	uxth	r2, r3
 8018188:	88fb      	ldrh	r3, [r7, #6]
 801818a:	6839      	ldr	r1, [r7, #0]
 801818c:	4618      	mov	r0, r3
 801818e:	f001 fee9 	bl	8019f64 <SUBGRF_WriteRegisters>
}
 8018192:	bf00      	nop
 8018194:	3708      	adds	r7, #8
 8018196:	46bd      	mov	sp, r7
 8018198:	bd80      	pop	{r7, pc}

0801819a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801819a:	b580      	push	{r7, lr}
 801819c:	b082      	sub	sp, #8
 801819e:	af00      	add	r7, sp, #0
 80181a0:	4603      	mov	r3, r0
 80181a2:	6039      	str	r1, [r7, #0]
 80181a4:	80fb      	strh	r3, [r7, #6]
 80181a6:	4613      	mov	r3, r2
 80181a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80181aa:	797b      	ldrb	r3, [r7, #5]
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	88fb      	ldrh	r3, [r7, #6]
 80181b0:	6839      	ldr	r1, [r7, #0]
 80181b2:	4618      	mov	r0, r3
 80181b4:	f001 fef8 	bl	8019fa8 <SUBGRF_ReadRegisters>
}
 80181b8:	bf00      	nop
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	4603      	mov	r3, r0
 80181c8:	460a      	mov	r2, r1
 80181ca:	71fb      	strb	r3, [r7, #7]
 80181cc:	4613      	mov	r3, r2
 80181ce:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80181d0:	79fb      	ldrb	r3, [r7, #7]
 80181d2:	2b01      	cmp	r3, #1
 80181d4:	d10a      	bne.n	80181ec <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80181d6:	4a0e      	ldr	r2, [pc, #56]	@ (8018210 <RadioSetMaxPayloadLength+0x50>)
 80181d8:	79bb      	ldrb	r3, [r7, #6]
 80181da:	7013      	strb	r3, [r2, #0]
 80181dc:	4b0c      	ldr	r3, [pc, #48]	@ (8018210 <RadioSetMaxPayloadLength+0x50>)
 80181de:	781a      	ldrb	r2, [r3, #0]
 80181e0:	4b0c      	ldr	r3, [pc, #48]	@ (8018214 <RadioSetMaxPayloadLength+0x54>)
 80181e2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181e4:	480c      	ldr	r0, [pc, #48]	@ (8018218 <RadioSetMaxPayloadLength+0x58>)
 80181e6:	f001 fd4f 	bl	8019c88 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80181ea:	e00d      	b.n	8018208 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80181ec:	4b09      	ldr	r3, [pc, #36]	@ (8018214 <RadioSetMaxPayloadLength+0x54>)
 80181ee:	7d5b      	ldrb	r3, [r3, #21]
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	d109      	bne.n	8018208 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80181f4:	4a06      	ldr	r2, [pc, #24]	@ (8018210 <RadioSetMaxPayloadLength+0x50>)
 80181f6:	79bb      	ldrb	r3, [r7, #6]
 80181f8:	7013      	strb	r3, [r2, #0]
 80181fa:	4b05      	ldr	r3, [pc, #20]	@ (8018210 <RadioSetMaxPayloadLength+0x50>)
 80181fc:	781a      	ldrb	r2, [r3, #0]
 80181fe:	4b05      	ldr	r3, [pc, #20]	@ (8018214 <RadioSetMaxPayloadLength+0x54>)
 8018200:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018202:	4805      	ldr	r0, [pc, #20]	@ (8018218 <RadioSetMaxPayloadLength+0x58>)
 8018204:	f001 fd40 	bl	8019c88 <SUBGRF_SetPacketParams>
}
 8018208:	bf00      	nop
 801820a:	3708      	adds	r7, #8
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	2000012c 	.word	0x2000012c
 8018214:	20001cd8 	.word	0x20001cd8
 8018218:	20001ce6 	.word	0x20001ce6

0801821c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b082      	sub	sp, #8
 8018220:	af00      	add	r7, sp, #0
 8018222:	4603      	mov	r3, r0
 8018224:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018226:	4a13      	ldr	r2, [pc, #76]	@ (8018274 <RadioSetPublicNetwork+0x58>)
 8018228:	79fb      	ldrb	r3, [r7, #7]
 801822a:	7313      	strb	r3, [r2, #12]
 801822c:	4b11      	ldr	r3, [pc, #68]	@ (8018274 <RadioSetPublicNetwork+0x58>)
 801822e:	7b1a      	ldrb	r2, [r3, #12]
 8018230:	4b10      	ldr	r3, [pc, #64]	@ (8018274 <RadioSetPublicNetwork+0x58>)
 8018232:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018234:	2001      	movs	r0, #1
 8018236:	f7ff f82f 	bl	8017298 <RadioSetModem>
    if( enable == true )
 801823a:	79fb      	ldrb	r3, [r7, #7]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d00a      	beq.n	8018256 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018240:	2134      	movs	r1, #52	@ 0x34
 8018242:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018246:	f001 fe65 	bl	8019f14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801824a:	2144      	movs	r1, #68	@ 0x44
 801824c:	f240 7041 	movw	r0, #1857	@ 0x741
 8018250:	f001 fe60 	bl	8019f14 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018254:	e009      	b.n	801826a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018256:	2114      	movs	r1, #20
 8018258:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801825c:	f001 fe5a 	bl	8019f14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018260:	2124      	movs	r1, #36	@ 0x24
 8018262:	f240 7041 	movw	r0, #1857	@ 0x741
 8018266:	f001 fe55 	bl	8019f14 <SUBGRF_WriteRegister>
}
 801826a:	bf00      	nop
 801826c:	3708      	adds	r7, #8
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}
 8018272:	bf00      	nop
 8018274:	20001cd8 	.word	0x20001cd8

08018278 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018278:	b580      	push	{r7, lr}
 801827a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801827c:	f001 ff9a 	bl	801a1b4 <SUBGRF_GetRadioWakeUpTime>
 8018280:	4603      	mov	r3, r0
 8018282:	3303      	adds	r3, #3
}
 8018284:	4618      	mov	r0, r3
 8018286:	bd80      	pop	{r7, pc}

08018288 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018290:	f000 f80e 	bl	80182b0 <RadioOnTxTimeoutProcess>
}
 8018294:	bf00      	nop
 8018296:	3708      	adds	r7, #8
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}

0801829c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80182a4:	f000 f818 	bl	80182d8 <RadioOnRxTimeoutProcess>
}
 80182a8:	bf00      	nop
 80182aa:	3708      	adds	r7, #8
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80182b4:	4b07      	ldr	r3, [pc, #28]	@ (80182d4 <RadioOnTxTimeoutProcess+0x24>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d008      	beq.n	80182ce <RadioOnTxTimeoutProcess+0x1e>
 80182bc:	4b05      	ldr	r3, [pc, #20]	@ (80182d4 <RadioOnTxTimeoutProcess+0x24>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d003      	beq.n	80182ce <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80182c6:	4b03      	ldr	r3, [pc, #12]	@ (80182d4 <RadioOnTxTimeoutProcess+0x24>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	685b      	ldr	r3, [r3, #4]
 80182cc:	4798      	blx	r3
    }
}
 80182ce:	bf00      	nop
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	20001cd4 	.word	0x20001cd4

080182d8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80182dc:	4b07      	ldr	r3, [pc, #28]	@ (80182fc <RadioOnRxTimeoutProcess+0x24>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d008      	beq.n	80182f6 <RadioOnRxTimeoutProcess+0x1e>
 80182e4:	4b05      	ldr	r3, [pc, #20]	@ (80182fc <RadioOnRxTimeoutProcess+0x24>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	68db      	ldr	r3, [r3, #12]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d003      	beq.n	80182f6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80182ee:	4b03      	ldr	r3, [pc, #12]	@ (80182fc <RadioOnRxTimeoutProcess+0x24>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	68db      	ldr	r3, [r3, #12]
 80182f4:	4798      	blx	r3
    }
}
 80182f6:	bf00      	nop
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	20001cd4 	.word	0x20001cd4

08018300 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b082      	sub	sp, #8
 8018304:	af00      	add	r7, sp, #0
 8018306:	4603      	mov	r3, r0
 8018308:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801830a:	4a05      	ldr	r2, [pc, #20]	@ (8018320 <RadioOnDioIrq+0x20>)
 801830c:	88fb      	ldrh	r3, [r7, #6]
 801830e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8018312:	f000 f807 	bl	8018324 <RadioIrqProcess>
}
 8018316:	bf00      	nop
 8018318:	3708      	adds	r7, #8
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}
 801831e:	bf00      	nop
 8018320:	20001cd8 	.word	0x20001cd8

08018324 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018324:	b5b0      	push	{r4, r5, r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801832a:	2300      	movs	r3, #0
 801832c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801832e:	2300      	movs	r3, #0
 8018330:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018332:	4ba8      	ldr	r3, [pc, #672]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 8018334:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801833c:	f000 810d 	beq.w	801855a <RadioIrqProcess+0x236>
 8018340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018344:	f300 81e8 	bgt.w	8018718 <RadioIrqProcess+0x3f4>
 8018348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801834c:	f000 80f1 	beq.w	8018532 <RadioIrqProcess+0x20e>
 8018350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018354:	f300 81e0 	bgt.w	8018718 <RadioIrqProcess+0x3f4>
 8018358:	2b80      	cmp	r3, #128	@ 0x80
 801835a:	f000 80d6 	beq.w	801850a <RadioIrqProcess+0x1e6>
 801835e:	2b80      	cmp	r3, #128	@ 0x80
 8018360:	f300 81da 	bgt.w	8018718 <RadioIrqProcess+0x3f4>
 8018364:	2b20      	cmp	r3, #32
 8018366:	dc49      	bgt.n	80183fc <RadioIrqProcess+0xd8>
 8018368:	2b00      	cmp	r3, #0
 801836a:	f340 81d5 	ble.w	8018718 <RadioIrqProcess+0x3f4>
 801836e:	3b01      	subs	r3, #1
 8018370:	2b1f      	cmp	r3, #31
 8018372:	f200 81d1 	bhi.w	8018718 <RadioIrqProcess+0x3f4>
 8018376:	a201      	add	r2, pc, #4	@ (adr r2, 801837c <RadioIrqProcess+0x58>)
 8018378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801837c:	08018405 	.word	0x08018405
 8018380:	0801843f 	.word	0x0801843f
 8018384:	08018719 	.word	0x08018719
 8018388:	080185f5 	.word	0x080185f5
 801838c:	08018719 	.word	0x08018719
 8018390:	08018719 	.word	0x08018719
 8018394:	08018719 	.word	0x08018719
 8018398:	08018671 	.word	0x08018671
 801839c:	08018719 	.word	0x08018719
 80183a0:	08018719 	.word	0x08018719
 80183a4:	08018719 	.word	0x08018719
 80183a8:	08018719 	.word	0x08018719
 80183ac:	08018719 	.word	0x08018719
 80183b0:	08018719 	.word	0x08018719
 80183b4:	08018719 	.word	0x08018719
 80183b8:	0801868d 	.word	0x0801868d
 80183bc:	08018719 	.word	0x08018719
 80183c0:	08018719 	.word	0x08018719
 80183c4:	08018719 	.word	0x08018719
 80183c8:	08018719 	.word	0x08018719
 80183cc:	08018719 	.word	0x08018719
 80183d0:	08018719 	.word	0x08018719
 80183d4:	08018719 	.word	0x08018719
 80183d8:	08018719 	.word	0x08018719
 80183dc:	08018719 	.word	0x08018719
 80183e0:	08018719 	.word	0x08018719
 80183e4:	08018719 	.word	0x08018719
 80183e8:	08018719 	.word	0x08018719
 80183ec:	08018719 	.word	0x08018719
 80183f0:	08018719 	.word	0x08018719
 80183f4:	08018719 	.word	0x08018719
 80183f8:	0801869b 	.word	0x0801869b
 80183fc:	2b40      	cmp	r3, #64	@ 0x40
 80183fe:	f000 816d 	beq.w	80186dc <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8018402:	e189      	b.n	8018718 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018404:	4874      	ldr	r0, [pc, #464]	@ (80185d8 <RadioIrqProcess+0x2b4>)
 8018406:	f002 ff8f 	bl	801b328 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801840a:	2000      	movs	r0, #0
 801840c:	f001 f802 	bl	8019414 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018410:	f002 f864 	bl	801a4dc <RFW_Is_LongPacketModeEnabled>
 8018414:	4603      	mov	r3, r0
 8018416:	2b01      	cmp	r3, #1
 8018418:	d101      	bne.n	801841e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801841a:	f002 f888 	bl	801a52e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801841e:	4b6f      	ldr	r3, [pc, #444]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	2b00      	cmp	r3, #0
 8018424:	f000 817a 	beq.w	801871c <RadioIrqProcess+0x3f8>
 8018428:	4b6c      	ldr	r3, [pc, #432]	@ (80185dc <RadioIrqProcess+0x2b8>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	2b00      	cmp	r3, #0
 8018430:	f000 8174 	beq.w	801871c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018434:	4b69      	ldr	r3, [pc, #420]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	4798      	blx	r3
        break;
 801843c:	e16e      	b.n	801871c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801843e:	4868      	ldr	r0, [pc, #416]	@ (80185e0 <RadioIrqProcess+0x2bc>)
 8018440:	f002 ff72 	bl	801b328 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018444:	4b63      	ldr	r3, [pc, #396]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 8018446:	785b      	ldrb	r3, [r3, #1]
 8018448:	f083 0301 	eor.w	r3, r3, #1
 801844c:	b2db      	uxtb	r3, r3
 801844e:	2b00      	cmp	r3, #0
 8018450:	d014      	beq.n	801847c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018452:	2000      	movs	r0, #0
 8018454:	f000 ffde 	bl	8019414 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018458:	2100      	movs	r1, #0
 801845a:	f640 1002 	movw	r0, #2306	@ 0x902
 801845e:	f001 fd59 	bl	8019f14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018462:	f640 1044 	movw	r0, #2372	@ 0x944
 8018466:	f001 fd69 	bl	8019f3c <SUBGRF_ReadRegister>
 801846a:	4603      	mov	r3, r0
 801846c:	f043 0302 	orr.w	r3, r3, #2
 8018470:	b2db      	uxtb	r3, r3
 8018472:	4619      	mov	r1, r3
 8018474:	f640 1044 	movw	r0, #2372	@ 0x944
 8018478:	f001 fd4c 	bl	8019f14 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801847c:	1dfb      	adds	r3, r7, #7
 801847e:	22ff      	movs	r2, #255	@ 0xff
 8018480:	4619      	mov	r1, r3
 8018482:	4858      	ldr	r0, [pc, #352]	@ (80185e4 <RadioIrqProcess+0x2c0>)
 8018484:	f000 fe94 	bl	80191b0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018488:	4857      	ldr	r0, [pc, #348]	@ (80185e8 <RadioIrqProcess+0x2c4>)
 801848a:	f001 fcf1 	bl	8019e70 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801848e:	4b53      	ldr	r3, [pc, #332]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	f000 8144 	beq.w	8018720 <RadioIrqProcess+0x3fc>
 8018498:	4b50      	ldr	r3, [pc, #320]	@ (80185dc <RadioIrqProcess+0x2b8>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	689b      	ldr	r3, [r3, #8]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f000 813e 	beq.w	8018720 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 80184a4:	4b4b      	ldr	r3, [pc, #300]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 80184a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80184aa:	2b01      	cmp	r3, #1
 80184ac:	d10e      	bne.n	80184cc <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80184ae:	4b4b      	ldr	r3, [pc, #300]	@ (80185dc <RadioIrqProcess+0x2b8>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	689c      	ldr	r4, [r3, #8]
 80184b4:	79fb      	ldrb	r3, [r7, #7]
 80184b6:	4619      	mov	r1, r3
 80184b8:	4b46      	ldr	r3, [pc, #280]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 80184ba:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80184be:	461a      	mov	r2, r3
 80184c0:	4b44      	ldr	r3, [pc, #272]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 80184c2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80184c6:	4847      	ldr	r0, [pc, #284]	@ (80185e4 <RadioIrqProcess+0x2c0>)
 80184c8:	47a0      	blx	r4
                break;
 80184ca:	e01d      	b.n	8018508 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80184cc:	4b41      	ldr	r3, [pc, #260]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 80184ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184d0:	463a      	mov	r2, r7
 80184d2:	4611      	mov	r1, r2
 80184d4:	4618      	mov	r0, r3
 80184d6:	f001 ff4f 	bl	801a378 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80184da:	4b40      	ldr	r3, [pc, #256]	@ (80185dc <RadioIrqProcess+0x2b8>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	689c      	ldr	r4, [r3, #8]
 80184e0:	79fb      	ldrb	r3, [r7, #7]
 80184e2:	4619      	mov	r1, r3
 80184e4:	4b3b      	ldr	r3, [pc, #236]	@ (80185d4 <RadioIrqProcess+0x2b0>)
 80184e6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80184ea:	4618      	mov	r0, r3
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80184f2:	4a3e      	ldr	r2, [pc, #248]	@ (80185ec <RadioIrqProcess+0x2c8>)
 80184f4:	fb82 5203 	smull	r5, r2, r2, r3
 80184f8:	1192      	asrs	r2, r2, #6
 80184fa:	17db      	asrs	r3, r3, #31
 80184fc:	1ad3      	subs	r3, r2, r3
 80184fe:	b25b      	sxtb	r3, r3
 8018500:	4602      	mov	r2, r0
 8018502:	4838      	ldr	r0, [pc, #224]	@ (80185e4 <RadioIrqProcess+0x2c0>)
 8018504:	47a0      	blx	r4
                break;
 8018506:	bf00      	nop
        break;
 8018508:	e10a      	b.n	8018720 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801850a:	2000      	movs	r0, #0
 801850c:	f000 ff82 	bl	8019414 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018510:	4b32      	ldr	r3, [pc, #200]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	f000 8105 	beq.w	8018724 <RadioIrqProcess+0x400>
 801851a:	4b30      	ldr	r3, [pc, #192]	@ (80185dc <RadioIrqProcess+0x2b8>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	699b      	ldr	r3, [r3, #24]
 8018520:	2b00      	cmp	r3, #0
 8018522:	f000 80ff 	beq.w	8018724 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018526:	4b2d      	ldr	r3, [pc, #180]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	699b      	ldr	r3, [r3, #24]
 801852c:	2000      	movs	r0, #0
 801852e:	4798      	blx	r3
        break;
 8018530:	e0f8      	b.n	8018724 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018532:	2000      	movs	r0, #0
 8018534:	f000 ff6e 	bl	8019414 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018538:	4b28      	ldr	r3, [pc, #160]	@ (80185dc <RadioIrqProcess+0x2b8>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f000 80f3 	beq.w	8018728 <RadioIrqProcess+0x404>
 8018542:	4b26      	ldr	r3, [pc, #152]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	699b      	ldr	r3, [r3, #24]
 8018548:	2b00      	cmp	r3, #0
 801854a:	f000 80ed 	beq.w	8018728 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801854e:	4b23      	ldr	r3, [pc, #140]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	699b      	ldr	r3, [r3, #24]
 8018554:	2001      	movs	r0, #1
 8018556:	4798      	blx	r3
        break;
 8018558:	e0e6      	b.n	8018728 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801855a:	4b25      	ldr	r3, [pc, #148]	@ (80185f0 <RadioIrqProcess+0x2cc>)
 801855c:	2201      	movs	r2, #1
 801855e:	2100      	movs	r1, #0
 8018560:	2002      	movs	r0, #2
 8018562:	f003 f8eb 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018566:	f000 fe09 	bl	801917c <SUBGRF_GetOperatingMode>
 801856a:	4603      	mov	r3, r0
 801856c:	2b04      	cmp	r3, #4
 801856e:	d115      	bne.n	801859c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018570:	4819      	ldr	r0, [pc, #100]	@ (80185d8 <RadioIrqProcess+0x2b4>)
 8018572:	f002 fed9 	bl	801b328 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018576:	2000      	movs	r0, #0
 8018578:	f000 ff4c 	bl	8019414 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801857c:	4b17      	ldr	r3, [pc, #92]	@ (80185dc <RadioIrqProcess+0x2b8>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	f000 80d3 	beq.w	801872c <RadioIrqProcess+0x408>
 8018586:	4b15      	ldr	r3, [pc, #84]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	685b      	ldr	r3, [r3, #4]
 801858c:	2b00      	cmp	r3, #0
 801858e:	f000 80cd 	beq.w	801872c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018592:	4b12      	ldr	r3, [pc, #72]	@ (80185dc <RadioIrqProcess+0x2b8>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	4798      	blx	r3
        break;
 801859a:	e0c7      	b.n	801872c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801859c:	f000 fdee 	bl	801917c <SUBGRF_GetOperatingMode>
 80185a0:	4603      	mov	r3, r0
 80185a2:	2b05      	cmp	r3, #5
 80185a4:	f040 80c2 	bne.w	801872c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 80185a8:	480d      	ldr	r0, [pc, #52]	@ (80185e0 <RadioIrqProcess+0x2bc>)
 80185aa:	f002 febd 	bl	801b328 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80185ae:	2000      	movs	r0, #0
 80185b0:	f000 ff30 	bl	8019414 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80185b4:	4b09      	ldr	r3, [pc, #36]	@ (80185dc <RadioIrqProcess+0x2b8>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	f000 80b7 	beq.w	801872c <RadioIrqProcess+0x408>
 80185be:	4b07      	ldr	r3, [pc, #28]	@ (80185dc <RadioIrqProcess+0x2b8>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	68db      	ldr	r3, [r3, #12]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 80b1 	beq.w	801872c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 80185ca:	4b04      	ldr	r3, [pc, #16]	@ (80185dc <RadioIrqProcess+0x2b8>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	68db      	ldr	r3, [r3, #12]
 80185d0:	4798      	blx	r3
        break;
 80185d2:	e0ab      	b.n	801872c <RadioIrqProcess+0x408>
 80185d4:	20001cd8 	.word	0x20001cd8
 80185d8:	20001d34 	.word	0x20001d34
 80185dc:	20001cd4 	.word	0x20001cd4
 80185e0:	20001d4c 	.word	0x20001d4c
 80185e4:	20001bd4 	.word	0x20001bd4
 80185e8:	20001cfc 	.word	0x20001cfc
 80185ec:	10624dd3 	.word	0x10624dd3
 80185f0:	0801efc8 	.word	0x0801efc8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80185f4:	4b54      	ldr	r3, [pc, #336]	@ (8018748 <RadioIrqProcess+0x424>)
 80185f6:	2201      	movs	r2, #1
 80185f8:	2100      	movs	r1, #0
 80185fa:	2002      	movs	r0, #2
 80185fc:	f003 f89e 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018600:	4b52      	ldr	r3, [pc, #328]	@ (801874c <RadioIrqProcess+0x428>)
 8018602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018604:	2b00      	cmp	r3, #0
 8018606:	f000 8093 	beq.w	8018730 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801860a:	4a51      	ldr	r2, [pc, #324]	@ (8018750 <RadioIrqProcess+0x42c>)
 801860c:	4b4f      	ldr	r3, [pc, #316]	@ (801874c <RadioIrqProcess+0x428>)
 801860e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018610:	0c1b      	lsrs	r3, r3, #16
 8018612:	b2db      	uxtb	r3, r3
 8018614:	4619      	mov	r1, r3
 8018616:	f640 1003 	movw	r0, #2307	@ 0x903
 801861a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801861c:	4a4c      	ldr	r2, [pc, #304]	@ (8018750 <RadioIrqProcess+0x42c>)
 801861e:	4b4b      	ldr	r3, [pc, #300]	@ (801874c <RadioIrqProcess+0x428>)
 8018620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018622:	0a1b      	lsrs	r3, r3, #8
 8018624:	b2db      	uxtb	r3, r3
 8018626:	4619      	mov	r1, r3
 8018628:	f640 1004 	movw	r0, #2308	@ 0x904
 801862c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801862e:	4a48      	ldr	r2, [pc, #288]	@ (8018750 <RadioIrqProcess+0x42c>)
 8018630:	4b46      	ldr	r3, [pc, #280]	@ (801874c <RadioIrqProcess+0x428>)
 8018632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018634:	b2db      	uxtb	r3, r3
 8018636:	4619      	mov	r1, r3
 8018638:	f640 1005 	movw	r0, #2309	@ 0x905
 801863c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801863e:	4c44      	ldr	r4, [pc, #272]	@ (8018750 <RadioIrqProcess+0x42c>)
 8018640:	4b44      	ldr	r3, [pc, #272]	@ (8018754 <RadioIrqProcess+0x430>)
 8018642:	f640 1002 	movw	r0, #2306	@ 0x902
 8018646:	4798      	blx	r3
 8018648:	4603      	mov	r3, r0
 801864a:	f043 0301 	orr.w	r3, r3, #1
 801864e:	b2db      	uxtb	r3, r3
 8018650:	4619      	mov	r1, r3
 8018652:	f640 1002 	movw	r0, #2306	@ 0x902
 8018656:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018658:	4b3c      	ldr	r3, [pc, #240]	@ (801874c <RadioIrqProcess+0x428>)
 801865a:	2200      	movs	r2, #0
 801865c:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801865e:	2300      	movs	r3, #0
 8018660:	2200      	movs	r2, #0
 8018662:	f240 2162 	movw	r1, #610	@ 0x262
 8018666:	f240 2062 	movw	r0, #610	@ 0x262
 801866a:	f001 f8a9 	bl	80197c0 <SUBGRF_SetDioIrqParams>
        break;
 801866e:	e05f      	b.n	8018730 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018670:	4b39      	ldr	r3, [pc, #228]	@ (8018758 <RadioIrqProcess+0x434>)
 8018672:	2201      	movs	r2, #1
 8018674:	2100      	movs	r1, #0
 8018676:	2002      	movs	r0, #2
 8018678:	f003 f860 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801867c:	f001 ff27 	bl	801a4ce <RFW_Is_Init>
 8018680:	4603      	mov	r3, r0
 8018682:	2b01      	cmp	r3, #1
 8018684:	d156      	bne.n	8018734 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018686:	f001 ff58 	bl	801a53a <RFW_ReceivePayload>
        break;
 801868a:	e053      	b.n	8018734 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801868c:	4b33      	ldr	r3, [pc, #204]	@ (801875c <RadioIrqProcess+0x438>)
 801868e:	2201      	movs	r2, #1
 8018690:	2100      	movs	r1, #0
 8018692:	2002      	movs	r0, #2
 8018694:	f003 f852 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018698:	e051      	b.n	801873e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801869a:	4831      	ldr	r0, [pc, #196]	@ (8018760 <RadioIrqProcess+0x43c>)
 801869c:	f002 fe44 	bl	801b328 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80186a0:	4b2a      	ldr	r3, [pc, #168]	@ (801874c <RadioIrqProcess+0x428>)
 80186a2:	785b      	ldrb	r3, [r3, #1]
 80186a4:	f083 0301 	eor.w	r3, r3, #1
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d002      	beq.n	80186b4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80186ae:	2000      	movs	r0, #0
 80186b0:	f000 feb0 	bl	8019414 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80186b4:	4b2b      	ldr	r3, [pc, #172]	@ (8018764 <RadioIrqProcess+0x440>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d03d      	beq.n	8018738 <RadioIrqProcess+0x414>
 80186bc:	4b29      	ldr	r3, [pc, #164]	@ (8018764 <RadioIrqProcess+0x440>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	68db      	ldr	r3, [r3, #12]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d038      	beq.n	8018738 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 80186c6:	4b27      	ldr	r3, [pc, #156]	@ (8018764 <RadioIrqProcess+0x440>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80186ce:	4b26      	ldr	r3, [pc, #152]	@ (8018768 <RadioIrqProcess+0x444>)
 80186d0:	2201      	movs	r2, #1
 80186d2:	2100      	movs	r1, #0
 80186d4:	2002      	movs	r0, #2
 80186d6:	f003 f831 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80186da:	e02d      	b.n	8018738 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80186dc:	4b23      	ldr	r3, [pc, #140]	@ (801876c <RadioIrqProcess+0x448>)
 80186de:	2201      	movs	r2, #1
 80186e0:	2100      	movs	r1, #0
 80186e2:	2002      	movs	r0, #2
 80186e4:	f003 f82a 	bl	801b73c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80186e8:	4b18      	ldr	r3, [pc, #96]	@ (801874c <RadioIrqProcess+0x428>)
 80186ea:	785b      	ldrb	r3, [r3, #1]
 80186ec:	f083 0301 	eor.w	r3, r3, #1
 80186f0:	b2db      	uxtb	r3, r3
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d002      	beq.n	80186fc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80186f6:	2000      	movs	r0, #0
 80186f8:	f000 fe8c 	bl	8019414 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80186fc:	4b19      	ldr	r3, [pc, #100]	@ (8018764 <RadioIrqProcess+0x440>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d01b      	beq.n	801873c <RadioIrqProcess+0x418>
 8018704:	4b17      	ldr	r3, [pc, #92]	@ (8018764 <RadioIrqProcess+0x440>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	691b      	ldr	r3, [r3, #16]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d016      	beq.n	801873c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801870e:	4b15      	ldr	r3, [pc, #84]	@ (8018764 <RadioIrqProcess+0x440>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	691b      	ldr	r3, [r3, #16]
 8018714:	4798      	blx	r3
        break;
 8018716:	e011      	b.n	801873c <RadioIrqProcess+0x418>
        break;
 8018718:	bf00      	nop
 801871a:	e010      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 801871c:	bf00      	nop
 801871e:	e00e      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018720:	bf00      	nop
 8018722:	e00c      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018724:	bf00      	nop
 8018726:	e00a      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018728:	bf00      	nop
 801872a:	e008      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 801872c:	bf00      	nop
 801872e:	e006      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018730:	bf00      	nop
 8018732:	e004      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018734:	bf00      	nop
 8018736:	e002      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 8018738:	bf00      	nop
 801873a:	e000      	b.n	801873e <RadioIrqProcess+0x41a>
        break;
 801873c:	bf00      	nop
    }
}
 801873e:	bf00      	nop
 8018740:	3708      	adds	r7, #8
 8018742:	46bd      	mov	sp, r7
 8018744:	bdb0      	pop	{r4, r5, r7, pc}
 8018746:	bf00      	nop
 8018748:	0801efdc 	.word	0x0801efdc
 801874c:	20001cd8 	.word	0x20001cd8
 8018750:	08018135 	.word	0x08018135
 8018754:	08018159 	.word	0x08018159
 8018758:	0801efe8 	.word	0x0801efe8
 801875c:	0801eff4 	.word	0x0801eff4
 8018760:	20001d4c 	.word	0x20001d4c
 8018764:	20001cd4 	.word	0x20001cd4
 8018768:	0801f000 	.word	0x0801f000
 801876c:	0801f00c 	.word	0x0801f00c

08018770 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018774:	4b09      	ldr	r3, [pc, #36]	@ (801879c <RadioTxPrbs+0x2c>)
 8018776:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801877a:	2101      	movs	r1, #1
 801877c:	4618      	mov	r0, r3
 801877e:	f001 fcbd 	bl	801a0fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018782:	4b07      	ldr	r3, [pc, #28]	@ (80187a0 <RadioTxPrbs+0x30>)
 8018784:	212d      	movs	r1, #45	@ 0x2d
 8018786:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801878a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801878c:	f000 ff05 	bl	801959a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018790:	4804      	ldr	r0, [pc, #16]	@ (80187a4 <RadioTxPrbs+0x34>)
 8018792:	f000 fe5b 	bl	801944c <SUBGRF_SetTx>
}
 8018796:	bf00      	nop
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	20001cd8 	.word	0x20001cd8
 80187a0:	08018135 	.word	0x08018135
 80187a4:	000fffff 	.word	0x000fffff

080187a8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b084      	sub	sp, #16
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	4603      	mov	r3, r0
 80187b0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80187b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187b6:	4618      	mov	r0, r3
 80187b8:	f001 fcc8 	bl	801a14c <SUBGRF_SetRfTxPower>
 80187bc:	4603      	mov	r3, r0
 80187be:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80187c0:	7bfb      	ldrb	r3, [r7, #15]
 80187c2:	2101      	movs	r1, #1
 80187c4:	4618      	mov	r0, r3
 80187c6:	f001 fc99 	bl	801a0fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80187ca:	f000 fedd 	bl	8019588 <SUBGRF_SetTxContinuousWave>
}
 80187ce:	bf00      	nop
 80187d0:	3710      	adds	r7, #16
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}

080187d6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80187d6:	b480      	push	{r7}
 80187d8:	b089      	sub	sp, #36	@ 0x24
 80187da:	af00      	add	r7, sp, #0
 80187dc:	60f8      	str	r0, [r7, #12]
 80187de:	60b9      	str	r1, [r7, #8]
 80187e0:	4613      	mov	r3, r2
 80187e2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80187e4:	2300      	movs	r3, #0
 80187e6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80187e8:	2300      	movs	r3, #0
 80187ea:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80187ec:	2300      	movs	r3, #0
 80187ee:	61bb      	str	r3, [r7, #24]
 80187f0:	e011      	b.n	8018816 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	68ba      	ldr	r2, [r7, #8]
 80187f6:	4413      	add	r3, r2
 80187f8:	781a      	ldrb	r2, [r3, #0]
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	68b9      	ldr	r1, [r7, #8]
 80187fe:	440b      	add	r3, r1
 8018800:	43d2      	mvns	r2, r2
 8018802:	b2d2      	uxtb	r2, r2
 8018804:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018806:	69bb      	ldr	r3, [r7, #24]
 8018808:	68fa      	ldr	r2, [r7, #12]
 801880a:	4413      	add	r3, r2
 801880c:	2200      	movs	r2, #0
 801880e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018810:	69bb      	ldr	r3, [r7, #24]
 8018812:	3301      	adds	r3, #1
 8018814:	61bb      	str	r3, [r7, #24]
 8018816:	79fb      	ldrb	r3, [r7, #7]
 8018818:	69ba      	ldr	r2, [r7, #24]
 801881a:	429a      	cmp	r2, r3
 801881c:	dbe9      	blt.n	80187f2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801881e:	2300      	movs	r3, #0
 8018820:	61bb      	str	r3, [r7, #24]
 8018822:	e049      	b.n	80188b8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018824:	69bb      	ldr	r3, [r7, #24]
 8018826:	425a      	negs	r2, r3
 8018828:	f003 0307 	and.w	r3, r3, #7
 801882c:	f002 0207 	and.w	r2, r2, #7
 8018830:	bf58      	it	pl
 8018832:	4253      	negpl	r3, r2
 8018834:	b2db      	uxtb	r3, r3
 8018836:	f1c3 0307 	rsb	r3, r3, #7
 801883a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801883c:	69bb      	ldr	r3, [r7, #24]
 801883e:	2b00      	cmp	r3, #0
 8018840:	da00      	bge.n	8018844 <payload_integration+0x6e>
 8018842:	3307      	adds	r3, #7
 8018844:	10db      	asrs	r3, r3, #3
 8018846:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018848:	69bb      	ldr	r3, [r7, #24]
 801884a:	3301      	adds	r3, #1
 801884c:	425a      	negs	r2, r3
 801884e:	f003 0307 	and.w	r3, r3, #7
 8018852:	f002 0207 	and.w	r2, r2, #7
 8018856:	bf58      	it	pl
 8018858:	4253      	negpl	r3, r2
 801885a:	b2db      	uxtb	r3, r3
 801885c:	f1c3 0307 	rsb	r3, r3, #7
 8018860:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018862:	69bb      	ldr	r3, [r7, #24]
 8018864:	3301      	adds	r3, #1
 8018866:	2b00      	cmp	r3, #0
 8018868:	da00      	bge.n	801886c <payload_integration+0x96>
 801886a:	3307      	adds	r3, #7
 801886c:	10db      	asrs	r3, r3, #3
 801886e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018870:	7dbb      	ldrb	r3, [r7, #22]
 8018872:	68ba      	ldr	r2, [r7, #8]
 8018874:	4413      	add	r3, r2
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	461a      	mov	r2, r3
 801887a:	7dfb      	ldrb	r3, [r7, #23]
 801887c:	fa42 f303 	asr.w	r3, r2, r3
 8018880:	b2db      	uxtb	r3, r3
 8018882:	f003 0301 	and.w	r3, r3, #1
 8018886:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018888:	7ffa      	ldrb	r2, [r7, #31]
 801888a:	7cfb      	ldrb	r3, [r7, #19]
 801888c:	4053      	eors	r3, r2
 801888e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018890:	7d3b      	ldrb	r3, [r7, #20]
 8018892:	68fa      	ldr	r2, [r7, #12]
 8018894:	4413      	add	r3, r2
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	b25a      	sxtb	r2, r3
 801889a:	7ff9      	ldrb	r1, [r7, #31]
 801889c:	7d7b      	ldrb	r3, [r7, #21]
 801889e:	fa01 f303 	lsl.w	r3, r1, r3
 80188a2:	b25b      	sxtb	r3, r3
 80188a4:	4313      	orrs	r3, r2
 80188a6:	b259      	sxtb	r1, r3
 80188a8:	7d3b      	ldrb	r3, [r7, #20]
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	4413      	add	r3, r2
 80188ae:	b2ca      	uxtb	r2, r1
 80188b0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80188b2:	69bb      	ldr	r3, [r7, #24]
 80188b4:	3301      	adds	r3, #1
 80188b6:	61bb      	str	r3, [r7, #24]
 80188b8:	79fb      	ldrb	r3, [r7, #7]
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	69ba      	ldr	r2, [r7, #24]
 80188be:	429a      	cmp	r2, r3
 80188c0:	dbb0      	blt.n	8018824 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80188c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80188c6:	01db      	lsls	r3, r3, #7
 80188c8:	b25a      	sxtb	r2, r3
 80188ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80188ce:	019b      	lsls	r3, r3, #6
 80188d0:	b25b      	sxtb	r3, r3
 80188d2:	4313      	orrs	r3, r2
 80188d4:	b25b      	sxtb	r3, r3
 80188d6:	7ffa      	ldrb	r2, [r7, #31]
 80188d8:	2a00      	cmp	r2, #0
 80188da:	d101      	bne.n	80188e0 <payload_integration+0x10a>
 80188dc:	2220      	movs	r2, #32
 80188de:	e000      	b.n	80188e2 <payload_integration+0x10c>
 80188e0:	2200      	movs	r2, #0
 80188e2:	4313      	orrs	r3, r2
 80188e4:	b259      	sxtb	r1, r3
 80188e6:	79fb      	ldrb	r3, [r7, #7]
 80188e8:	68fa      	ldr	r2, [r7, #12]
 80188ea:	4413      	add	r3, r2
 80188ec:	b2ca      	uxtb	r2, r1
 80188ee:	701a      	strb	r2, [r3, #0]
}
 80188f0:	bf00      	nop
 80188f2:	3724      	adds	r7, #36	@ 0x24
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bc80      	pop	{r7}
 80188f8:	4770      	bx	lr
	...

080188fc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b08c      	sub	sp, #48	@ 0x30
 8018900:	af00      	add	r7, sp, #0
 8018902:	60b9      	str	r1, [r7, #8]
 8018904:	607a      	str	r2, [r7, #4]
 8018906:	603b      	str	r3, [r7, #0]
 8018908:	4603      	mov	r3, r0
 801890a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801890c:	2300      	movs	r3, #0
 801890e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018910:	f107 0320 	add.w	r3, r7, #32
 8018914:	2200      	movs	r2, #0
 8018916:	601a      	str	r2, [r3, #0]
 8018918:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801891a:	f001 fdd2 	bl	801a4c2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d001      	beq.n	8018928 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8018924:	2300      	movs	r3, #0
 8018926:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2b00      	cmp	r3, #0
 801892c:	bf14      	ite	ne
 801892e:	2301      	movne	r3, #1
 8018930:	2300      	moveq	r3, #0
 8018932:	b2da      	uxtb	r2, r3
 8018934:	4ba3      	ldr	r3, [pc, #652]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018936:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018938:	7bfb      	ldrb	r3, [r7, #15]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d003      	beq.n	8018946 <RadioSetRxGenericConfig+0x4a>
 801893e:	2b01      	cmp	r3, #1
 8018940:	f000 80dc 	beq.w	8018afc <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018944:	e195      	b.n	8018c72 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	689b      	ldr	r3, [r3, #8]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d003      	beq.n	8018956 <RadioSetRxGenericConfig+0x5a>
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	68db      	ldr	r3, [r3, #12]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d102      	bne.n	801895c <RadioSetRxGenericConfig+0x60>
            return -1;
 8018956:	f04f 33ff 	mov.w	r3, #4294967295
 801895a:	e18b      	b.n	8018c74 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801895c:	68bb      	ldr	r3, [r7, #8]
 801895e:	7f9b      	ldrb	r3, [r3, #30]
 8018960:	2b08      	cmp	r3, #8
 8018962:	d902      	bls.n	801896a <RadioSetRxGenericConfig+0x6e>
            return -1;
 8018964:	f04f 33ff 	mov.w	r3, #4294967295
 8018968:	e184      	b.n	8018c74 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	6919      	ldr	r1, [r3, #16]
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	7f9b      	ldrb	r3, [r3, #30]
 8018972:	461a      	mov	r2, r3
 8018974:	f107 0320 	add.w	r3, r7, #32
 8018978:	4618      	mov	r0, r3
 801897a:	f001 fe95 	bl	801a6a8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	2b00      	cmp	r3, #0
 8018984:	bf14      	ite	ne
 8018986:	2301      	movne	r3, #1
 8018988:	2300      	moveq	r3, #0
 801898a:	b2db      	uxtb	r3, r3
 801898c:	4618      	mov	r0, r3
 801898e:	f000 fe0d 	bl	80195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018992:	4b8c      	ldr	r3, [pc, #560]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018994:	2200      	movs	r2, #0
 8018996:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801899a:	68bb      	ldr	r3, [r7, #8]
 801899c:	689b      	ldr	r3, [r3, #8]
 801899e:	4a89      	ldr	r2, [pc, #548]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80189a8:	4b86      	ldr	r3, [pc, #536]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80189ae:	68bb      	ldr	r3, [r7, #8]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	4618      	mov	r0, r3
 80189b4:	f001 fcb8 	bl	801a328 <SUBGRF_GetFskBandwidthRegValue>
 80189b8:	4603      	mov	r3, r0
 80189ba:	461a      	mov	r2, r3
 80189bc:	4b81      	ldr	r3, [pc, #516]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80189c2:	4b80      	ldr	r3, [pc, #512]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189c4:	2200      	movs	r2, #0
 80189c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	68db      	ldr	r3, [r3, #12]
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	00db      	lsls	r3, r3, #3
 80189d0:	b29a      	uxth	r2, r3
 80189d2:	4b7c      	ldr	r3, [pc, #496]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189d4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	7fda      	ldrb	r2, [r3, #31]
 80189da:	4b7a      	ldr	r3, [pc, #488]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189dc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	7f9b      	ldrb	r3, [r3, #30]
 80189e2:	00db      	lsls	r3, r3, #3
 80189e4:	b2da      	uxtb	r2, r3
 80189e6:	4b77      	ldr	r3, [pc, #476]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189e8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80189f0:	4b74      	ldr	r3, [pc, #464]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 80189f2:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d105      	bne.n	8018a0a <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	695b      	ldr	r3, [r3, #20]
 8018a02:	b2da      	uxtb	r2, r3
 8018a04:	4b6f      	ldr	r3, [pc, #444]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a06:	759a      	strb	r2, [r3, #22]
 8018a08:	e00b      	b.n	8018a22 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018a0a:	68bb      	ldr	r3, [r7, #8]
 8018a0c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a10:	2b02      	cmp	r3, #2
 8018a12:	d103      	bne.n	8018a1c <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018a14:	4b6b      	ldr	r3, [pc, #428]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a16:	22ff      	movs	r2, #255	@ 0xff
 8018a18:	759a      	strb	r2, [r3, #22]
 8018a1a:	e002      	b.n	8018a22 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018a1c:	4b69      	ldr	r3, [pc, #420]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a1e:	22ff      	movs	r2, #255	@ 0xff
 8018a20:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018a28:	2b02      	cmp	r3, #2
 8018a2a:	d004      	beq.n	8018a36 <RadioSetRxGenericConfig+0x13a>
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018a32:	2b02      	cmp	r3, #2
 8018a34:	d12d      	bne.n	8018a92 <RadioSetRxGenericConfig+0x196>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a3c:	2bf1      	cmp	r3, #241	@ 0xf1
 8018a3e:	d00c      	beq.n	8018a5a <RadioSetRxGenericConfig+0x15e>
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a46:	2bf2      	cmp	r3, #242	@ 0xf2
 8018a48:	d007      	beq.n	8018a5a <RadioSetRxGenericConfig+0x15e>
 8018a4a:	68bb      	ldr	r3, [r7, #8]
 8018a4c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018a50:	2b01      	cmp	r3, #1
 8018a52:	d002      	beq.n	8018a5a <RadioSetRxGenericConfig+0x15e>
            return -1;
 8018a54:	f04f 33ff 	mov.w	r3, #4294967295
 8018a58:	e10c      	b.n	8018c74 <RadioSetRxGenericConfig+0x378>
          ConfigGeneric.rtx = CONFIG_RX;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018a62:	4b59      	ldr	r3, [pc, #356]	@ (8018bc8 <RadioSetRxGenericConfig+0x2cc>)
 8018a64:	6819      	ldr	r1, [r3, #0]
 8018a66:	f107 0314 	add.w	r3, r7, #20
 8018a6a:	4a58      	ldr	r2, [pc, #352]	@ (8018bcc <RadioSetRxGenericConfig+0x2d0>)
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f001 fd1b 	bl	801a4a8 <RFW_Init>
 8018a72:	4603      	mov	r3, r0
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d002      	beq.n	8018a7e <RadioSetRxGenericConfig+0x182>
            return -1;
 8018a78:	f04f 33ff 	mov.w	r3, #4294967295
 8018a7c:	e0fa      	b.n	8018c74 <RadioSetRxGenericConfig+0x378>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018a7e:	4b51      	ldr	r3, [pc, #324]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a80:	2200      	movs	r2, #0
 8018a82:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018a84:	4b4f      	ldr	r3, [pc, #316]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a86:	2201      	movs	r2, #1
 8018a88:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	755a      	strb	r2, [r3, #21]
        {
 8018a90:	e00e      	b.n	8018ab0 <RadioSetRxGenericConfig+0x1b4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018a92:	68bb      	ldr	r3, [r7, #8]
 8018a94:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018a98:	4b4a      	ldr	r3, [pc, #296]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018a9a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018aa2:	4b48      	ldr	r3, [pc, #288]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018aa4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018aac:	4b45      	ldr	r3, [pc, #276]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018aae:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018ab0:	f7ff fa45 	bl	8017f3e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	f7fe fbef 	bl	8017298 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018aba:	4845      	ldr	r0, [pc, #276]	@ (8018bd0 <RadioSetRxGenericConfig+0x2d4>)
 8018abc:	f001 f816 	bl	8019aec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ac0:	4844      	ldr	r0, [pc, #272]	@ (8018bd4 <RadioSetRxGenericConfig+0x2d8>)
 8018ac2:	f001 f8e1 	bl	8019c88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018ac6:	f107 0320 	add.w	r3, r7, #32
 8018aca:	4618      	mov	r0, r3
 8018acc:	f000 fba5 	bl	801921a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	8b9b      	ldrh	r3, [r3, #28]
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f000 fbef 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	8b1b      	ldrh	r3, [r3, #24]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f000 fbca 	bl	8019278 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018aea:	fb03 f202 	mul.w	r2, r3, r2
 8018aee:	68bb      	ldr	r3, [r7, #8]
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018af6:	4a33      	ldr	r2, [pc, #204]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018af8:	6093      	str	r3, [r2, #8]
        break;
 8018afa:	e0ba      	b.n	8018c72 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8018afc:	68bb      	ldr	r3, [r7, #8]
 8018afe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d102      	bne.n	8018b0a <RadioSetRxGenericConfig+0x20e>
            return -1;
 8018b04:	f04f 33ff 	mov.w	r3, #4294967295
 8018b08:	e0b4      	b.n	8018c74 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018b0a:	68bb      	ldr	r3, [r7, #8]
 8018b0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018b10:	2b01      	cmp	r3, #1
 8018b12:	d104      	bne.n	8018b1e <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018b14:	68bb      	ldr	r3, [r7, #8]
 8018b16:	695b      	ldr	r3, [r3, #20]
 8018b18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018b1c:	e002      	b.n	8018b24 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8018b1e:	23ff      	movs	r3, #255	@ 0xff
 8018b20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018b24:	68bb      	ldr	r3, [r7, #8]
 8018b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	bf14      	ite	ne
 8018b2c:	2301      	movne	r3, #1
 8018b2e:	2300      	moveq	r3, #0
 8018b30:	b2db      	uxtb	r3, r3
 8018b32:	4618      	mov	r0, r3
 8018b34:	f000 fd3a 	bl	80195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f000 fd44 	bl	80195ca <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018b42:	4b20      	ldr	r3, [pc, #128]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b44:	2201      	movs	r2, #1
 8018b46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018b4a:	68bb      	ldr	r3, [r7, #8]
 8018b4c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018b50:	4b1c      	ldr	r3, [pc, #112]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018b56:	68bb      	ldr	r3, [r7, #8]
 8018b58:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018b5c:	4b19      	ldr	r3, [pc, #100]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018b68:	4b16      	ldr	r3, [pc, #88]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b6a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018b6e:	68bb      	ldr	r3, [r7, #8]
 8018b70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018b74:	2b02      	cmp	r3, #2
 8018b76:	d010      	beq.n	8018b9a <RadioSetRxGenericConfig+0x29e>
 8018b78:	2b02      	cmp	r3, #2
 8018b7a:	dc2d      	bgt.n	8018bd8 <RadioSetRxGenericConfig+0x2dc>
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d002      	beq.n	8018b86 <RadioSetRxGenericConfig+0x28a>
 8018b80:	2b01      	cmp	r3, #1
 8018b82:	d005      	beq.n	8018b90 <RadioSetRxGenericConfig+0x294>
            break;
 8018b84:	e028      	b.n	8018bd8 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018b86:	4b0f      	ldr	r3, [pc, #60]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b88:	2200      	movs	r2, #0
 8018b8a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018b8e:	e024      	b.n	8018bda <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018b90:	4b0c      	ldr	r3, [pc, #48]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018b92:	2201      	movs	r2, #1
 8018b94:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018b98:	e01f      	b.n	8018bda <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018ba0:	2b0b      	cmp	r3, #11
 8018ba2:	d004      	beq.n	8018bae <RadioSetRxGenericConfig+0x2b2>
 8018ba4:	68bb      	ldr	r3, [r7, #8]
 8018ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018baa:	2b0c      	cmp	r3, #12
 8018bac:	d104      	bne.n	8018bb8 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018bae:	4b05      	ldr	r3, [pc, #20]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018bb0:	2201      	movs	r2, #1
 8018bb2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018bb6:	e010      	b.n	8018bda <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018bb8:	4b02      	ldr	r3, [pc, #8]	@ (8018bc4 <RadioSetRxGenericConfig+0x2c8>)
 8018bba:	2200      	movs	r2, #0
 8018bbc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018bc0:	e00b      	b.n	8018bda <RadioSetRxGenericConfig+0x2de>
 8018bc2:	bf00      	nop
 8018bc4:	20001cd8 	.word	0x20001cd8
 8018bc8:	20001cd4 	.word	0x20001cd4
 8018bcc:	20001d4c 	.word	0x20001d4c
 8018bd0:	20001d10 	.word	0x20001d10
 8018bd4:	20001ce6 	.word	0x20001ce6
            break;
 8018bd8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018bda:	4b28      	ldr	r3, [pc, #160]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018bdc:	2201      	movs	r2, #1
 8018bde:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018be4:	4b25      	ldr	r3, [pc, #148]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018be6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018bee:	4b23      	ldr	r3, [pc, #140]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018bf0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018bf2:	4a22      	ldr	r2, [pc, #136]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018bf8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018bfa:	68bb      	ldr	r3, [r7, #8]
 8018bfc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018c00:	4b1e      	ldr	r3, [pc, #120]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018c02:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018c0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018c12:	f7ff f994 	bl	8017f3e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018c16:	2001      	movs	r0, #1
 8018c18:	f7fe fb3e 	bl	8017298 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c1c:	4818      	ldr	r0, [pc, #96]	@ (8018c80 <RadioSetRxGenericConfig+0x384>)
 8018c1e:	f000 ff65 	bl	8019aec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c22:	4818      	ldr	r0, [pc, #96]	@ (8018c84 <RadioSetRxGenericConfig+0x388>)
 8018c24:	f001 f830 	bl	8019c88 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018c28:	4b14      	ldr	r3, [pc, #80]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018c2e:	2b01      	cmp	r3, #1
 8018c30:	d10d      	bne.n	8018c4e <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018c32:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c36:	f001 f981 	bl	8019f3c <SUBGRF_ReadRegister>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	f023 0304 	bic.w	r3, r3, #4
 8018c40:	b2db      	uxtb	r3, r3
 8018c42:	4619      	mov	r1, r3
 8018c44:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c48:	f001 f964 	bl	8019f14 <SUBGRF_WriteRegister>
 8018c4c:	e00c      	b.n	8018c68 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018c4e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c52:	f001 f973 	bl	8019f3c <SUBGRF_ReadRegister>
 8018c56:	4603      	mov	r3, r0
 8018c58:	f043 0304 	orr.w	r3, r3, #4
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	4619      	mov	r1, r3
 8018c60:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c64:	f001 f956 	bl	8019f14 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018c68:	4b04      	ldr	r3, [pc, #16]	@ (8018c7c <RadioSetRxGenericConfig+0x380>)
 8018c6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c6e:	609a      	str	r2, [r3, #8]
        break;
 8018c70:	bf00      	nop
    }
    return status;
 8018c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3730      	adds	r7, #48	@ 0x30
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}
 8018c7c:	20001cd8 	.word	0x20001cd8
 8018c80:	20001d10 	.word	0x20001d10
 8018c84:	20001ce6 	.word	0x20001ce6

08018c88 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b08e      	sub	sp, #56	@ 0x38
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60b9      	str	r1, [r7, #8]
 8018c90:	607b      	str	r3, [r7, #4]
 8018c92:	4603      	mov	r3, r0
 8018c94:	73fb      	strb	r3, [r7, #15]
 8018c96:	4613      	mov	r3, r2
 8018c98:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	601a      	str	r2, [r3, #0]
 8018ca2:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018ca4:	f001 fc0d 	bl	801a4c2 <RFW_DeInit>
    switch( modem )
 8018ca8:	7bfb      	ldrb	r3, [r7, #15]
 8018caa:	2b03      	cmp	r3, #3
 8018cac:	f200 8205 	bhi.w	80190ba <RadioSetTxGenericConfig+0x432>
 8018cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8018cb8 <RadioSetTxGenericConfig+0x30>)
 8018cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cb6:	bf00      	nop
 8018cb8:	08018e3d 	.word	0x08018e3d
 8018cbc:	08018f85 	.word	0x08018f85
 8018cc0:	0801907d 	.word	0x0801907d
 8018cc4:	08018cc9 	.word	0x08018cc9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	7c9b      	ldrb	r3, [r3, #18]
 8018ccc:	2b08      	cmp	r3, #8
 8018cce:	d902      	bls.n	8018cd6 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8018cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd4:	e206      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	6899      	ldr	r1, [r3, #8]
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	7c9b      	ldrb	r3, [r3, #18]
 8018cde:	461a      	mov	r2, r3
 8018ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f001 fcdf 	bl	801a6a8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d102      	bne.n	8018cf8 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8018cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8018cf6:	e1f5      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
        }
        else if (config->msk.BitRate<= 10000)
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018d00:	4293      	cmp	r3, r2
 8018d02:	d813      	bhi.n	8018d2c <RadioSetTxGenericConfig+0xa4>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018d04:	2302      	movs	r3, #2
 8018d06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018d0a:	4b99      	ldr	r3, [pc, #612]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d0c:	2203      	movs	r2, #3
 8018d0e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018d10:	4b97      	ldr	r3, [pc, #604]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d12:	2203      	movs	r2, #3
 8018d14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	4a94      	ldr	r2, [pc, #592]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	7cda      	ldrb	r2, [r3, #19]
 8018d24:	4b92      	ldr	r3, [pc, #584]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018d2a:	e017      	b.n	8018d5c <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d32:	4b8f      	ldr	r3, [pc, #572]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d34:	2200      	movs	r2, #0
 8018d36:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d38:	4b8d      	ldr	r3, [pc, #564]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	4a8a      	ldr	r2, [pc, #552]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d46:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	7cda      	ldrb	r2, [r3, #19]
 8018d4c:	4b88      	ldr	r3, [pc, #544]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018d52:	68bb      	ldr	r3, [r7, #8]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	089b      	lsrs	r3, r3, #2
 8018d58:	4a85      	ldr	r2, [pc, #532]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d5a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018d5c:	68bb      	ldr	r3, [r7, #8]
 8018d5e:	685b      	ldr	r3, [r3, #4]
 8018d60:	b29b      	uxth	r3, r3
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	4b82      	ldr	r3, [pc, #520]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d68:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018d6a:	4b81      	ldr	r3, [pc, #516]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d6c:	2204      	movs	r2, #4
 8018d6e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018d70:	68bb      	ldr	r3, [r7, #8]
 8018d72:	7c9b      	ldrb	r3, [r3, #18]
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	4b7d      	ldr	r3, [pc, #500]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d7a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018d7e:	2200      	movs	r2, #0
 8018d80:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	7d9b      	ldrb	r3, [r3, #22]
 8018d86:	2b02      	cmp	r3, #2
 8018d88:	d003      	beq.n	8018d92 <RadioSetTxGenericConfig+0x10a>
 8018d8a:	68bb      	ldr	r3, [r7, #8]
 8018d8c:	7d1b      	ldrb	r3, [r3, #20]
 8018d8e:	2b02      	cmp	r3, #2
 8018d90:	d12b      	bne.n	8018dea <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	7d5b      	ldrb	r3, [r3, #21]
 8018d96:	2bf1      	cmp	r3, #241	@ 0xf1
 8018d98:	d00a      	beq.n	8018db0 <RadioSetTxGenericConfig+0x128>
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	7d5b      	ldrb	r3, [r3, #21]
 8018d9e:	2bf2      	cmp	r3, #242	@ 0xf2
 8018da0:	d006      	beq.n	8018db0 <RadioSetTxGenericConfig+0x128>
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	7d5b      	ldrb	r3, [r3, #21]
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d002      	beq.n	8018db0 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8018daa:	f04f 33ff 	mov.w	r3, #4294967295
 8018dae:	e199      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018db4:	2301      	movs	r3, #1
 8018db6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018dba:	4b6e      	ldr	r3, [pc, #440]	@ (8018f74 <RadioSetTxGenericConfig+0x2ec>)
 8018dbc:	6819      	ldr	r1, [r3, #0]
 8018dbe:	f107 0320 	add.w	r3, r7, #32
 8018dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8018f78 <RadioSetTxGenericConfig+0x2f0>)
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	f001 fb6f 	bl	801a4a8 <RFW_Init>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d002      	beq.n	8018dd6 <RadioSetTxGenericConfig+0x14e>
            {
              return -1;
 8018dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd4:	e186      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018dd6:	4b66      	ldr	r3, [pc, #408]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018dd8:	2200      	movs	r2, #0
 8018dda:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018ddc:	4b64      	ldr	r3, [pc, #400]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018dde:	2201      	movs	r2, #1
 8018de0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018de2:	4b63      	ldr	r3, [pc, #396]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018de4:	2200      	movs	r2, #0
 8018de6:	755a      	strb	r2, [r3, #21]
        {
 8018de8:	e00b      	b.n	8018e02 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	7d5a      	ldrb	r2, [r3, #21]
 8018dee:	4b60      	ldr	r3, [pc, #384]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018df0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	7d9a      	ldrb	r2, [r3, #22]
 8018df6:	4b5e      	ldr	r3, [pc, #376]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018df8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	7d1a      	ldrb	r2, [r3, #20]
 8018dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e00:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018e02:	f7ff f89c 	bl	8017f3e <RadioStandby>
        RadioSetModem( radio_modem );
 8018e06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7fe fa44 	bl	8017298 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e10:	485a      	ldr	r0, [pc, #360]	@ (8018f7c <RadioSetTxGenericConfig+0x2f4>)
 8018e12:	f000 fe6b 	bl	8019aec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e16:	485a      	ldr	r0, [pc, #360]	@ (8018f80 <RadioSetTxGenericConfig+0x2f8>)
 8018e18:	f000 ff36 	bl	8019c88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018e20:	4618      	mov	r0, r3
 8018e22:	f000 f9fa 	bl	801921a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	8a1b      	ldrh	r3, [r3, #16]
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f000 fa44 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018e30:	68bb      	ldr	r3, [r7, #8]
 8018e32:	899b      	ldrh	r3, [r3, #12]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f000 fa1f 	bl	8019278 <SUBGRF_SetCrcPolynomial>
        break;
 8018e3a:	e13f      	b.n	80190bc <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d102      	bne.n	8018e4a <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018e44:	f04f 33ff 	mov.w	r3, #4294967295
 8018e48:	e14c      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	7c9b      	ldrb	r3, [r3, #18]
 8018e4e:	2b08      	cmp	r3, #8
 8018e50:	d902      	bls.n	8018e58 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018e52:	f04f 33ff 	mov.w	r3, #4294967295
 8018e56:	e145      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8018e58:	68bb      	ldr	r3, [r7, #8]
 8018e5a:	6899      	ldr	r1, [r3, #8]
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	7c9b      	ldrb	r3, [r3, #18]
 8018e60:	461a      	mov	r2, r3
 8018e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018e66:	4618      	mov	r0, r3
 8018e68:	f001 fc1e 	bl	801a6a8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018e6c:	4b40      	ldr	r3, [pc, #256]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e6e:	2200      	movs	r2, #0
 8018e70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	4a3d      	ldr	r2, [pc, #244]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	7cda      	ldrb	r2, [r3, #19]
 8018e80:	4b3b      	ldr	r3, [pc, #236]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	699b      	ldr	r3, [r3, #24]
 8018e8a:	4a39      	ldr	r2, [pc, #228]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e8c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018e8e:	4b38      	ldr	r3, [pc, #224]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018e90:	2200      	movs	r2, #0
 8018e92:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	685b      	ldr	r3, [r3, #4]
 8018e98:	b29b      	uxth	r3, r3
 8018e9a:	00db      	lsls	r3, r3, #3
 8018e9c:	b29a      	uxth	r2, r3
 8018e9e:	4b34      	ldr	r3, [pc, #208]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018ea0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018ea2:	4b33      	ldr	r3, [pc, #204]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018ea4:	2204      	movs	r2, #4
 8018ea6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	7c9b      	ldrb	r3, [r3, #18]
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	b2da      	uxtb	r2, r3
 8018eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018eb2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	7d9b      	ldrb	r3, [r3, #22]
 8018ebe:	2b02      	cmp	r3, #2
 8018ec0:	d003      	beq.n	8018eca <RadioSetTxGenericConfig+0x242>
 8018ec2:	68bb      	ldr	r3, [r7, #8]
 8018ec4:	7d1b      	ldrb	r3, [r3, #20]
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	d12a      	bne.n	8018f20 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	7d5b      	ldrb	r3, [r3, #21]
 8018ece:	2bf1      	cmp	r3, #241	@ 0xf1
 8018ed0:	d00a      	beq.n	8018ee8 <RadioSetTxGenericConfig+0x260>
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	7d5b      	ldrb	r3, [r3, #21]
 8018ed6:	2bf2      	cmp	r3, #242	@ 0xf2
 8018ed8:	d006      	beq.n	8018ee8 <RadioSetTxGenericConfig+0x260>
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	7d5b      	ldrb	r3, [r3, #21]
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	d002      	beq.n	8018ee8 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8018ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee6:	e0fd      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018ef0:	4b20      	ldr	r3, [pc, #128]	@ (8018f74 <RadioSetTxGenericConfig+0x2ec>)
 8018ef2:	6819      	ldr	r1, [r3, #0]
 8018ef4:	f107 0314 	add.w	r3, r7, #20
 8018ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8018f78 <RadioSetTxGenericConfig+0x2f0>)
 8018efa:	4618      	mov	r0, r3
 8018efc:	f001 fad4 	bl	801a4a8 <RFW_Init>
 8018f00:	4603      	mov	r3, r0
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d002      	beq.n	8018f0c <RadioSetTxGenericConfig+0x284>
            {
              return -1;
 8018f06:	f04f 33ff 	mov.w	r3, #4294967295
 8018f0a:	e0eb      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018f0c:	4b18      	ldr	r3, [pc, #96]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f0e:	2200      	movs	r2, #0
 8018f10:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018f12:	4b17      	ldr	r3, [pc, #92]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f14:	2201      	movs	r2, #1
 8018f16:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018f18:	4b15      	ldr	r3, [pc, #84]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	755a      	strb	r2, [r3, #21]
        {
 8018f1e:	e00b      	b.n	8018f38 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	7d5a      	ldrb	r2, [r3, #21]
 8018f24:	4b12      	ldr	r3, [pc, #72]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f26:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	7d9a      	ldrb	r2, [r3, #22]
 8018f2c:	4b10      	ldr	r3, [pc, #64]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f2e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	7d1a      	ldrb	r2, [r3, #20]
 8018f34:	4b0e      	ldr	r3, [pc, #56]	@ (8018f70 <RadioSetTxGenericConfig+0x2e8>)
 8018f36:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018f38:	f7ff f801 	bl	8017f3e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018f3c:	2000      	movs	r0, #0
 8018f3e:	f7fe f9ab 	bl	8017298 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f42:	480e      	ldr	r0, [pc, #56]	@ (8018f7c <RadioSetTxGenericConfig+0x2f4>)
 8018f44:	f000 fdd2 	bl	8019aec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f48:	480d      	ldr	r0, [pc, #52]	@ (8018f80 <RadioSetTxGenericConfig+0x2f8>)
 8018f4a:	f000 fe9d 	bl	8019c88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f52:	4618      	mov	r0, r3
 8018f54:	f000 f961 	bl	801921a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018f58:	68bb      	ldr	r3, [r7, #8]
 8018f5a:	8a1b      	ldrh	r3, [r3, #16]
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f000 f9ab 	bl	80192b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	899b      	ldrh	r3, [r3, #12]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f000 f986 	bl	8019278 <SUBGRF_SetCrcPolynomial>
        break;
 8018f6c:	e0a6      	b.n	80190bc <RadioSetTxGenericConfig+0x434>
 8018f6e:	bf00      	nop
 8018f70:	20001cd8 	.word	0x20001cd8
 8018f74:	20001cd4 	.word	0x20001cd4
 8018f78:	20001d34 	.word	0x20001d34
 8018f7c:	20001d10 	.word	0x20001d10
 8018f80:	20001ce6 	.word	0x20001ce6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018f84:	4b59      	ldr	r3, [pc, #356]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018f86:	2201      	movs	r2, #1
 8018f88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	781a      	ldrb	r2, [r3, #0]
 8018f90:	4b56      	ldr	r3, [pc, #344]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	785a      	ldrb	r2, [r3, #1]
 8018f9a:	4b54      	ldr	r3, [pc, #336]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	789a      	ldrb	r2, [r3, #2]
 8018fa4:	4b51      	ldr	r3, [pc, #324]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018fa6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	78db      	ldrb	r3, [r3, #3]
 8018fae:	2b02      	cmp	r3, #2
 8018fb0:	d010      	beq.n	8018fd4 <RadioSetTxGenericConfig+0x34c>
 8018fb2:	2b02      	cmp	r3, #2
 8018fb4:	dc20      	bgt.n	8018ff8 <RadioSetTxGenericConfig+0x370>
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d002      	beq.n	8018fc0 <RadioSetTxGenericConfig+0x338>
 8018fba:	2b01      	cmp	r3, #1
 8018fbc:	d005      	beq.n	8018fca <RadioSetTxGenericConfig+0x342>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018fbe:	e01b      	b.n	8018ff8 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018fc8:	e017      	b.n	8018ffa <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018fca:	4b48      	ldr	r3, [pc, #288]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018fcc:	2201      	movs	r2, #1
 8018fce:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018fd2:	e012      	b.n	8018ffa <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	781b      	ldrb	r3, [r3, #0]
 8018fd8:	2b0b      	cmp	r3, #11
 8018fda:	d003      	beq.n	8018fe4 <RadioSetTxGenericConfig+0x35c>
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	781b      	ldrb	r3, [r3, #0]
 8018fe0:	2b0c      	cmp	r3, #12
 8018fe2:	d104      	bne.n	8018fee <RadioSetTxGenericConfig+0x366>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018fe4:	4b41      	ldr	r3, [pc, #260]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018fe6:	2201      	movs	r2, #1
 8018fe8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018fec:	e005      	b.n	8018ffa <RadioSetTxGenericConfig+0x372>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018fee:	4b3f      	ldr	r3, [pc, #252]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018ff6:	e000      	b.n	8018ffa <RadioSetTxGenericConfig+0x372>
            break;
 8018ff8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8018ffc:	2201      	movs	r2, #1
 8018ffe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	889a      	ldrh	r2, [r3, #4]
 8019004:	4b39      	ldr	r3, [pc, #228]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8019006:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	799a      	ldrb	r2, [r3, #6]
 801900c:	4b37      	ldr	r3, [pc, #220]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 801900e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	79da      	ldrb	r2, [r3, #7]
 8019014:	4b35      	ldr	r3, [pc, #212]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8019016:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	7a1a      	ldrb	r2, [r3, #8]
 801901e:	4b33      	ldr	r3, [pc, #204]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 8019020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8019024:	f7fe ff8b 	bl	8017f3e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019028:	2001      	movs	r0, #1
 801902a:	f7fe f935 	bl	8017298 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801902e:	4830      	ldr	r0, [pc, #192]	@ (80190f0 <RadioSetTxGenericConfig+0x468>)
 8019030:	f000 fd5c 	bl	8019aec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019034:	482f      	ldr	r0, [pc, #188]	@ (80190f4 <RadioSetTxGenericConfig+0x46c>)
 8019036:	f000 fe27 	bl	8019c88 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801903a:	4b2c      	ldr	r3, [pc, #176]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 801903c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019040:	2b06      	cmp	r3, #6
 8019042:	d10d      	bne.n	8019060 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019044:	f640 0089 	movw	r0, #2185	@ 0x889
 8019048:	f000 ff78 	bl	8019f3c <SUBGRF_ReadRegister>
 801904c:	4603      	mov	r3, r0
 801904e:	f023 0304 	bic.w	r3, r3, #4
 8019052:	b2db      	uxtb	r3, r3
 8019054:	4619      	mov	r1, r3
 8019056:	f640 0089 	movw	r0, #2185	@ 0x889
 801905a:	f000 ff5b 	bl	8019f14 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801905e:	e02d      	b.n	80190bc <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019060:	f640 0089 	movw	r0, #2185	@ 0x889
 8019064:	f000 ff6a 	bl	8019f3c <SUBGRF_ReadRegister>
 8019068:	4603      	mov	r3, r0
 801906a:	f043 0304 	orr.w	r3, r3, #4
 801906e:	b2db      	uxtb	r3, r3
 8019070:	4619      	mov	r1, r3
 8019072:	f640 0089 	movw	r0, #2185	@ 0x889
 8019076:	f000 ff4d 	bl	8019f14 <SUBGRF_WriteRegister>
        break;
 801907a:	e01f      	b.n	80190bc <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d004      	beq.n	801908e <RadioSetTxGenericConfig+0x406>
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801908c:	d902      	bls.n	8019094 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801908e:	f04f 33ff 	mov.w	r3, #4294967295
 8019092:	e027      	b.n	80190e4 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8019094:	2003      	movs	r0, #3
 8019096:	f7fe f8ff 	bl	8017298 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801909a:	4b14      	ldr	r3, [pc, #80]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 801909c:	2202      	movs	r2, #2
 801909e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a11      	ldr	r2, [pc, #68]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 80190a8:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80190aa:	4b10      	ldr	r3, [pc, #64]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 80190ac:	2216      	movs	r2, #22
 80190ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190b2:	480f      	ldr	r0, [pc, #60]	@ (80190f0 <RadioSetTxGenericConfig+0x468>)
 80190b4:	f000 fd1a 	bl	8019aec <SUBGRF_SetModulationParams>
        break;
 80190b8:	e000      	b.n	80190bc <RadioSetTxGenericConfig+0x434>
    default:
        break;
 80190ba:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80190bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f001 f843 	bl	801a14c <SUBGRF_SetRfTxPower>
 80190c6:	4603      	mov	r3, r0
 80190c8:	461a      	mov	r2, r3
 80190ca:	4b08      	ldr	r3, [pc, #32]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 80190cc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80190d0:	4b06      	ldr	r3, [pc, #24]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 80190d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190d6:	4618      	mov	r0, r3
 80190d8:	f001 fa07 	bl	801a4ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80190dc:	4a03      	ldr	r2, [pc, #12]	@ (80190ec <RadioSetTxGenericConfig+0x464>)
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	6053      	str	r3, [r2, #4]
    return 0;
 80190e2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80190e4:	4618      	mov	r0, r3
 80190e6:	3738      	adds	r7, #56	@ 0x38
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	20001cd8 	.word	0x20001cd8
 80190f0:	20001d10 	.word	0x20001d10
 80190f4:	20001ce6 	.word	0x20001ce6

080190f8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d002      	beq.n	801910c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019106:	4a1a      	ldr	r2, [pc, #104]	@ (8019170 <SUBGRF_Init+0x78>)
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801910c:	f7e8 fe4a 	bl	8001da4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019110:	2002      	movs	r0, #2
 8019112:	f001 f8e7 	bl	801a2e4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019116:	4b17      	ldr	r3, [pc, #92]	@ (8019174 <SUBGRF_Init+0x7c>)
 8019118:	2200      	movs	r2, #0
 801911a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801911c:	2000      	movs	r0, #0
 801911e:	f000 f979 	bl	8019414 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019122:	f7f1 fd8f 	bl	800ac44 <RBI_IsTCXO>
 8019126:	4603      	mov	r3, r0
 8019128:	2b01      	cmp	r3, #1
 801912a:	d10e      	bne.n	801914a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801912c:	2140      	movs	r1, #64	@ 0x40
 801912e:	2001      	movs	r0, #1
 8019130:	f000 fb80 	bl	8019834 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019134:	2100      	movs	r1, #0
 8019136:	f640 1011 	movw	r0, #2321	@ 0x911
 801913a:	f000 feeb 	bl	8019f14 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801913e:	237f      	movs	r3, #127	@ 0x7f
 8019140:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019142:	7b38      	ldrb	r0, [r7, #12]
 8019144:	f000 fa87 	bl	8019656 <SUBGRF_Calibrate>
 8019148:	e009      	b.n	801915e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801914a:	2120      	movs	r1, #32
 801914c:	f640 1011 	movw	r0, #2321	@ 0x911
 8019150:	f000 fee0 	bl	8019f14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019154:	2120      	movs	r1, #32
 8019156:	f640 1012 	movw	r0, #2322	@ 0x912
 801915a:	f000 fedb 	bl	8019f14 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801915e:	f7f1 fd55 	bl	800ac0c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019162:	4b05      	ldr	r3, [pc, #20]	@ (8019178 <SUBGRF_Init+0x80>)
 8019164:	2201      	movs	r2, #1
 8019166:	701a      	strb	r2, [r3, #0]
}
 8019168:	bf00      	nop
 801916a:	3710      	adds	r7, #16
 801916c:	46bd      	mov	sp, r7
 801916e:	bd80      	pop	{r7, pc}
 8019170:	20001d70 	.word	0x20001d70
 8019174:	20001d6c 	.word	0x20001d6c
 8019178:	20001d64 	.word	0x20001d64

0801917c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801917c:	b480      	push	{r7}
 801917e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019180:	4b02      	ldr	r3, [pc, #8]	@ (801918c <SUBGRF_GetOperatingMode+0x10>)
 8019182:	781b      	ldrb	r3, [r3, #0]
}
 8019184:	4618      	mov	r0, r3
 8019186:	46bd      	mov	sp, r7
 8019188:	bc80      	pop	{r7}
 801918a:	4770      	bx	lr
 801918c:	20001d64 	.word	0x20001d64

08019190 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
 8019198:	460b      	mov	r3, r1
 801919a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801919c:	78fb      	ldrb	r3, [r7, #3]
 801919e:	461a      	mov	r2, r3
 80191a0:	6879      	ldr	r1, [r7, #4]
 80191a2:	2000      	movs	r0, #0
 80191a4:	f000 ff22 	bl	8019fec <SUBGRF_WriteBuffer>
}
 80191a8:	bf00      	nop
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b086      	sub	sp, #24
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	60f8      	str	r0, [r7, #12]
 80191b8:	60b9      	str	r1, [r7, #8]
 80191ba:	4613      	mov	r3, r2
 80191bc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80191be:	2300      	movs	r3, #0
 80191c0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80191c2:	f107 0317 	add.w	r3, r7, #23
 80191c6:	4619      	mov	r1, r3
 80191c8:	68b8      	ldr	r0, [r7, #8]
 80191ca:	f000 fe25 	bl	8019e18 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	781b      	ldrb	r3, [r3, #0]
 80191d2:	79fa      	ldrb	r2, [r7, #7]
 80191d4:	429a      	cmp	r2, r3
 80191d6:	d201      	bcs.n	80191dc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80191d8:	2301      	movs	r3, #1
 80191da:	e007      	b.n	80191ec <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80191dc:	7df8      	ldrb	r0, [r7, #23]
 80191de:	68bb      	ldr	r3, [r7, #8]
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	461a      	mov	r2, r3
 80191e4:	68f9      	ldr	r1, [r7, #12]
 80191e6:	f000 ff23 	bl	801a030 <SUBGRF_ReadBuffer>

    return 0;
 80191ea:	2300      	movs	r3, #0
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	3718      	adds	r7, #24
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}

080191f4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b084      	sub	sp, #16
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	60f8      	str	r0, [r7, #12]
 80191fc:	460b      	mov	r3, r1
 80191fe:	607a      	str	r2, [r7, #4]
 8019200:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019202:	7afb      	ldrb	r3, [r7, #11]
 8019204:	4619      	mov	r1, r3
 8019206:	68f8      	ldr	r0, [r7, #12]
 8019208:	f7ff ffc2 	bl	8019190 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f000 f91d 	bl	801944c <SUBGRF_SetTx>
}
 8019212:	bf00      	nop
 8019214:	3710      	adds	r7, #16
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}

0801921a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801921a:	b580      	push	{r7, lr}
 801921c:	b082      	sub	sp, #8
 801921e:	af00      	add	r7, sp, #0
 8019220:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019222:	2208      	movs	r2, #8
 8019224:	6879      	ldr	r1, [r7, #4]
 8019226:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801922a:	f000 fe9b 	bl	8019f64 <SUBGRF_WriteRegisters>
    return 0;
 801922e:	2300      	movs	r3, #0
}
 8019230:	4618      	mov	r0, r3
 8019232:	3708      	adds	r7, #8
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}

08019238 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b084      	sub	sp, #16
 801923c:	af00      	add	r7, sp, #0
 801923e:	4603      	mov	r3, r0
 8019240:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019242:	88fb      	ldrh	r3, [r7, #6]
 8019244:	0a1b      	lsrs	r3, r3, #8
 8019246:	b29b      	uxth	r3, r3
 8019248:	b2db      	uxtb	r3, r3
 801924a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801924c:	88fb      	ldrh	r3, [r7, #6]
 801924e:	b2db      	uxtb	r3, r3
 8019250:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019252:	f000 fb73 	bl	801993c <SUBGRF_GetPacketType>
 8019256:	4603      	mov	r3, r0
 8019258:	2b00      	cmp	r3, #0
 801925a:	d108      	bne.n	801926e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801925c:	f107 030c 	add.w	r3, r7, #12
 8019260:	2202      	movs	r2, #2
 8019262:	4619      	mov	r1, r3
 8019264:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019268:	f000 fe7c 	bl	8019f64 <SUBGRF_WriteRegisters>
            break;
 801926c:	e000      	b.n	8019270 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801926e:	bf00      	nop
    }
}
 8019270:	bf00      	nop
 8019272:	3710      	adds	r7, #16
 8019274:	46bd      	mov	sp, r7
 8019276:	bd80      	pop	{r7, pc}

08019278 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b084      	sub	sp, #16
 801927c:	af00      	add	r7, sp, #0
 801927e:	4603      	mov	r3, r0
 8019280:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019282:	88fb      	ldrh	r3, [r7, #6]
 8019284:	0a1b      	lsrs	r3, r3, #8
 8019286:	b29b      	uxth	r3, r3
 8019288:	b2db      	uxtb	r3, r3
 801928a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801928c:	88fb      	ldrh	r3, [r7, #6]
 801928e:	b2db      	uxtb	r3, r3
 8019290:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019292:	f000 fb53 	bl	801993c <SUBGRF_GetPacketType>
 8019296:	4603      	mov	r3, r0
 8019298:	2b00      	cmp	r3, #0
 801929a:	d108      	bne.n	80192ae <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801929c:	f107 030c 	add.w	r3, r7, #12
 80192a0:	2202      	movs	r2, #2
 80192a2:	4619      	mov	r1, r3
 80192a4:	f240 60be 	movw	r0, #1726	@ 0x6be
 80192a8:	f000 fe5c 	bl	8019f64 <SUBGRF_WriteRegisters>
            break;
 80192ac:	e000      	b.n	80192b0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80192ae:	bf00      	nop
    }
}
 80192b0:	bf00      	nop
 80192b2:	3710      	adds	r7, #16
 80192b4:	46bd      	mov	sp, r7
 80192b6:	bd80      	pop	{r7, pc}

080192b8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80192c2:	2300      	movs	r3, #0
 80192c4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80192c6:	f000 fb39 	bl	801993c <SUBGRF_GetPacketType>
 80192ca:	4603      	mov	r3, r0
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d121      	bne.n	8019314 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80192d0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80192d4:	f000 fe32 	bl	8019f3c <SUBGRF_ReadRegister>
 80192d8:	4603      	mov	r3, r0
 80192da:	f023 0301 	bic.w	r3, r3, #1
 80192de:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80192e0:	88fb      	ldrh	r3, [r7, #6]
 80192e2:	0a1b      	lsrs	r3, r3, #8
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	b25b      	sxtb	r3, r3
 80192e8:	f003 0301 	and.w	r3, r3, #1
 80192ec:	b25a      	sxtb	r2, r3
 80192ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192f2:	4313      	orrs	r3, r2
 80192f4:	b25b      	sxtb	r3, r3
 80192f6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80192f8:	7bfb      	ldrb	r3, [r7, #15]
 80192fa:	4619      	mov	r1, r3
 80192fc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019300:	f000 fe08 	bl	8019f14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019304:	88fb      	ldrh	r3, [r7, #6]
 8019306:	b2db      	uxtb	r3, r3
 8019308:	4619      	mov	r1, r3
 801930a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801930e:	f000 fe01 	bl	8019f14 <SUBGRF_WriteRegister>
            break;
 8019312:	e000      	b.n	8019316 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019314:	bf00      	nop
    }
}
 8019316:	bf00      	nop
 8019318:	3710      	adds	r7, #16
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}

0801931e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801931e:	b580      	push	{r7, lr}
 8019320:	b082      	sub	sp, #8
 8019322:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019328:	2300      	movs	r3, #0
 801932a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801932c:	2300      	movs	r3, #0
 801932e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019330:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019334:	f000 fe02 	bl	8019f3c <SUBGRF_ReadRegister>
 8019338:	4603      	mov	r3, r0
 801933a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801933c:	79fb      	ldrb	r3, [r7, #7]
 801933e:	f023 0301 	bic.w	r3, r3, #1
 8019342:	b2db      	uxtb	r3, r3
 8019344:	4619      	mov	r1, r3
 8019346:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801934a:	f000 fde3 	bl	8019f14 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801934e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019352:	f000 fdf3 	bl	8019f3c <SUBGRF_ReadRegister>
 8019356:	4603      	mov	r3, r0
 8019358:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801935a:	79bb      	ldrb	r3, [r7, #6]
 801935c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019360:	b2db      	uxtb	r3, r3
 8019362:	4619      	mov	r1, r3
 8019364:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019368:	f000 fdd4 	bl	8019f14 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801936c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019370:	f000 f88c 	bl	801948c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019374:	463b      	mov	r3, r7
 8019376:	2204      	movs	r2, #4
 8019378:	4619      	mov	r1, r3
 801937a:	f640 0019 	movw	r0, #2073	@ 0x819
 801937e:	f000 fe13 	bl	8019fa8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019382:	2000      	movs	r0, #0
 8019384:	f000 f846 	bl	8019414 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019388:	79fb      	ldrb	r3, [r7, #7]
 801938a:	4619      	mov	r1, r3
 801938c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019390:	f000 fdc0 	bl	8019f14 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019394:	79bb      	ldrb	r3, [r7, #6]
 8019396:	4619      	mov	r1, r3
 8019398:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801939c:	f000 fdba 	bl	8019f14 <SUBGRF_WriteRegister>

    return number;
 80193a0:	683b      	ldr	r3, [r7, #0]
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3708      	adds	r7, #8
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
	...

080193ac <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b084      	sub	sp, #16
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80193b4:	2000      	movs	r0, #0
 80193b6:	f7f1 fc30 	bl	800ac1a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80193ba:	2002      	movs	r0, #2
 80193bc:	f000 ff92 	bl	801a2e4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193c0:	793b      	ldrb	r3, [r7, #4]
 80193c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	b25b      	sxtb	r3, r3
 80193ca:	009b      	lsls	r3, r3, #2
 80193cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80193ce:	793b      	ldrb	r3, [r7, #4]
 80193d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80193d4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193d6:	b25b      	sxtb	r3, r3
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	b25b      	sxtb	r3, r3
 80193dc:	4313      	orrs	r3, r2
 80193de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80193e0:	793b      	ldrb	r3, [r7, #4]
 80193e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80193ea:	4313      	orrs	r3, r2
 80193ec:	b25b      	sxtb	r3, r3
 80193ee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80193f0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80193f2:	f107 030f 	add.w	r3, r7, #15
 80193f6:	2201      	movs	r2, #1
 80193f8:	4619      	mov	r1, r3
 80193fa:	2084      	movs	r0, #132	@ 0x84
 80193fc:	f000 fe3a 	bl	801a074 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019400:	4b03      	ldr	r3, [pc, #12]	@ (8019410 <SUBGRF_SetSleep+0x64>)
 8019402:	2200      	movs	r2, #0
 8019404:	701a      	strb	r2, [r3, #0]
}
 8019406:	bf00      	nop
 8019408:	3710      	adds	r7, #16
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
 801940e:	bf00      	nop
 8019410:	20001d64 	.word	0x20001d64

08019414 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	4603      	mov	r3, r0
 801941c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801941e:	1dfb      	adds	r3, r7, #7
 8019420:	2201      	movs	r2, #1
 8019422:	4619      	mov	r1, r3
 8019424:	2080      	movs	r0, #128	@ 0x80
 8019426:	f000 fe25 	bl	801a074 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801942a:	79fb      	ldrb	r3, [r7, #7]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d103      	bne.n	8019438 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019430:	4b05      	ldr	r3, [pc, #20]	@ (8019448 <SUBGRF_SetStandby+0x34>)
 8019432:	2201      	movs	r2, #1
 8019434:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019436:	e002      	b.n	801943e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019438:	4b03      	ldr	r3, [pc, #12]	@ (8019448 <SUBGRF_SetStandby+0x34>)
 801943a:	2202      	movs	r2, #2
 801943c:	701a      	strb	r2, [r3, #0]
}
 801943e:	bf00      	nop
 8019440:	3708      	adds	r7, #8
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}
 8019446:	bf00      	nop
 8019448:	20001d64 	.word	0x20001d64

0801944c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019454:	4b0c      	ldr	r3, [pc, #48]	@ (8019488 <SUBGRF_SetTx+0x3c>)
 8019456:	2204      	movs	r2, #4
 8019458:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	0c1b      	lsrs	r3, r3, #16
 801945e:	b2db      	uxtb	r3, r3
 8019460:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	0a1b      	lsrs	r3, r3, #8
 8019466:	b2db      	uxtb	r3, r3
 8019468:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	b2db      	uxtb	r3, r3
 801946e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019470:	f107 030c 	add.w	r3, r7, #12
 8019474:	2203      	movs	r2, #3
 8019476:	4619      	mov	r1, r3
 8019478:	2083      	movs	r0, #131	@ 0x83
 801947a:	f000 fdfb 	bl	801a074 <SUBGRF_WriteCommand>
}
 801947e:	bf00      	nop
 8019480:	3710      	adds	r7, #16
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	20001d64 	.word	0x20001d64

0801948c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019494:	4b0c      	ldr	r3, [pc, #48]	@ (80194c8 <SUBGRF_SetRx+0x3c>)
 8019496:	2205      	movs	r2, #5
 8019498:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	0c1b      	lsrs	r3, r3, #16
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	0a1b      	lsrs	r3, r3, #8
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80194b0:	f107 030c 	add.w	r3, r7, #12
 80194b4:	2203      	movs	r2, #3
 80194b6:	4619      	mov	r1, r3
 80194b8:	2082      	movs	r0, #130	@ 0x82
 80194ba:	f000 fddb 	bl	801a074 <SUBGRF_WriteCommand>
}
 80194be:	bf00      	nop
 80194c0:	3710      	adds	r7, #16
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	bf00      	nop
 80194c8:	20001d64 	.word	0x20001d64

080194cc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b084      	sub	sp, #16
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80194d4:	4b0e      	ldr	r3, [pc, #56]	@ (8019510 <SUBGRF_SetRxBoosted+0x44>)
 80194d6:	2205      	movs	r2, #5
 80194d8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80194da:	2197      	movs	r1, #151	@ 0x97
 80194dc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80194e0:	f000 fd18 	bl	8019f14 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	0c1b      	lsrs	r3, r3, #16
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	0a1b      	lsrs	r3, r3, #8
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80194fa:	f107 030c 	add.w	r3, r7, #12
 80194fe:	2203      	movs	r2, #3
 8019500:	4619      	mov	r1, r3
 8019502:	2082      	movs	r0, #130	@ 0x82
 8019504:	f000 fdb6 	bl	801a074 <SUBGRF_WriteCommand>
}
 8019508:	bf00      	nop
 801950a:	3710      	adds	r7, #16
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	20001d64 	.word	0x20001d64

08019514 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b084      	sub	sp, #16
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	0c1b      	lsrs	r3, r3, #16
 8019522:	b2db      	uxtb	r3, r3
 8019524:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	0a1b      	lsrs	r3, r3, #8
 801952a:	b2db      	uxtb	r3, r3
 801952c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	b2db      	uxtb	r3, r3
 8019532:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	0c1b      	lsrs	r3, r3, #16
 8019538:	b2db      	uxtb	r3, r3
 801953a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	0a1b      	lsrs	r3, r3, #8
 8019540:	b2db      	uxtb	r3, r3
 8019542:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	b2db      	uxtb	r3, r3
 8019548:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801954a:	f107 0308 	add.w	r3, r7, #8
 801954e:	2206      	movs	r2, #6
 8019550:	4619      	mov	r1, r3
 8019552:	2094      	movs	r0, #148	@ 0x94
 8019554:	f000 fd8e 	bl	801a074 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019558:	4b03      	ldr	r3, [pc, #12]	@ (8019568 <SUBGRF_SetRxDutyCycle+0x54>)
 801955a:	2206      	movs	r2, #6
 801955c:	701a      	strb	r2, [r3, #0]
}
 801955e:	bf00      	nop
 8019560:	3710      	adds	r7, #16
 8019562:	46bd      	mov	sp, r7
 8019564:	bd80      	pop	{r7, pc}
 8019566:	bf00      	nop
 8019568:	20001d64 	.word	0x20001d64

0801956c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801956c:	b580      	push	{r7, lr}
 801956e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019570:	2200      	movs	r2, #0
 8019572:	2100      	movs	r1, #0
 8019574:	20c5      	movs	r0, #197	@ 0xc5
 8019576:	f000 fd7d 	bl	801a074 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801957a:	4b02      	ldr	r3, [pc, #8]	@ (8019584 <SUBGRF_SetCad+0x18>)
 801957c:	2207      	movs	r2, #7
 801957e:	701a      	strb	r2, [r3, #0]
}
 8019580:	bf00      	nop
 8019582:	bd80      	pop	{r7, pc}
 8019584:	20001d64 	.word	0x20001d64

08019588 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019588:	b580      	push	{r7, lr}
 801958a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801958c:	2200      	movs	r2, #0
 801958e:	2100      	movs	r1, #0
 8019590:	20d1      	movs	r0, #209	@ 0xd1
 8019592:	f000 fd6f 	bl	801a074 <SUBGRF_WriteCommand>
}
 8019596:	bf00      	nop
 8019598:	bd80      	pop	{r7, pc}

0801959a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801959a:	b580      	push	{r7, lr}
 801959c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801959e:	2200      	movs	r2, #0
 80195a0:	2100      	movs	r1, #0
 80195a2:	20d2      	movs	r0, #210	@ 0xd2
 80195a4:	f000 fd66 	bl	801a074 <SUBGRF_WriteCommand>
}
 80195a8:	bf00      	nop
 80195aa:	bd80      	pop	{r7, pc}

080195ac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b082      	sub	sp, #8
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	4603      	mov	r3, r0
 80195b4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80195b6:	1dfb      	adds	r3, r7, #7
 80195b8:	2201      	movs	r2, #1
 80195ba:	4619      	mov	r1, r3
 80195bc:	209f      	movs	r0, #159	@ 0x9f
 80195be:	f000 fd59 	bl	801a074 <SUBGRF_WriteCommand>
}
 80195c2:	bf00      	nop
 80195c4:	3708      	adds	r7, #8
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}

080195ca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80195ca:	b580      	push	{r7, lr}
 80195cc:	b084      	sub	sp, #16
 80195ce:	af00      	add	r7, sp, #0
 80195d0:	4603      	mov	r3, r0
 80195d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80195d4:	1dfb      	adds	r3, r7, #7
 80195d6:	2201      	movs	r2, #1
 80195d8:	4619      	mov	r1, r3
 80195da:	20a0      	movs	r0, #160	@ 0xa0
 80195dc:	f000 fd4a 	bl	801a074 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80195e0:	79fb      	ldrb	r3, [r7, #7]
 80195e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80195e4:	d91c      	bls.n	8019620 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80195e6:	79fb      	ldrb	r3, [r7, #7]
 80195e8:	085b      	lsrs	r3, r3, #1
 80195ea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80195ec:	2300      	movs	r3, #0
 80195ee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80195f0:	2300      	movs	r3, #0
 80195f2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80195f4:	e005      	b.n	8019602 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80195f6:	7bfb      	ldrb	r3, [r7, #15]
 80195f8:	089b      	lsrs	r3, r3, #2
 80195fa:	73fb      	strb	r3, [r7, #15]
            exp++;
 80195fc:	7bbb      	ldrb	r3, [r7, #14]
 80195fe:	3301      	adds	r3, #1
 8019600:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019602:	7bfb      	ldrb	r3, [r7, #15]
 8019604:	2b1f      	cmp	r3, #31
 8019606:	d8f6      	bhi.n	80195f6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019608:	7bfb      	ldrb	r3, [r7, #15]
 801960a:	00db      	lsls	r3, r3, #3
 801960c:	b2da      	uxtb	r2, r3
 801960e:	7bbb      	ldrb	r3, [r7, #14]
 8019610:	4413      	add	r3, r2
 8019612:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019614:	7b7b      	ldrb	r3, [r7, #13]
 8019616:	4619      	mov	r1, r3
 8019618:	f240 7006 	movw	r0, #1798	@ 0x706
 801961c:	f000 fc7a 	bl	8019f14 <SUBGRF_WriteRegister>
    }
}
 8019620:	bf00      	nop
 8019622:	3710      	adds	r7, #16
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}

08019628 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801962e:	f7f1 fb10 	bl	800ac52 <RBI_IsDCDC>
 8019632:	4603      	mov	r3, r0
 8019634:	2b01      	cmp	r3, #1
 8019636:	d102      	bne.n	801963e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019638:	2301      	movs	r3, #1
 801963a:	71fb      	strb	r3, [r7, #7]
 801963c:	e001      	b.n	8019642 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801963e:	2300      	movs	r3, #0
 8019640:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019642:	1dfb      	adds	r3, r7, #7
 8019644:	2201      	movs	r2, #1
 8019646:	4619      	mov	r1, r3
 8019648:	2096      	movs	r0, #150	@ 0x96
 801964a:	f000 fd13 	bl	801a074 <SUBGRF_WriteCommand>
}
 801964e:	bf00      	nop
 8019650:	3708      	adds	r7, #8
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}

08019656 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019656:	b580      	push	{r7, lr}
 8019658:	b084      	sub	sp, #16
 801965a:	af00      	add	r7, sp, #0
 801965c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801965e:	793b      	ldrb	r3, [r7, #4]
 8019660:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019664:	b2db      	uxtb	r3, r3
 8019666:	b25b      	sxtb	r3, r3
 8019668:	019b      	lsls	r3, r3, #6
 801966a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801966c:	793b      	ldrb	r3, [r7, #4]
 801966e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019672:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019674:	b25b      	sxtb	r3, r3
 8019676:	015b      	lsls	r3, r3, #5
 8019678:	b25b      	sxtb	r3, r3
 801967a:	4313      	orrs	r3, r2
 801967c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801967e:	793b      	ldrb	r3, [r7, #4]
 8019680:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019684:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019686:	b25b      	sxtb	r3, r3
 8019688:	011b      	lsls	r3, r3, #4
 801968a:	b25b      	sxtb	r3, r3
 801968c:	4313      	orrs	r3, r2
 801968e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019690:	793b      	ldrb	r3, [r7, #4]
 8019692:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019696:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019698:	b25b      	sxtb	r3, r3
 801969a:	00db      	lsls	r3, r3, #3
 801969c:	b25b      	sxtb	r3, r3
 801969e:	4313      	orrs	r3, r2
 80196a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80196a2:	793b      	ldrb	r3, [r7, #4]
 80196a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80196a8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80196aa:	b25b      	sxtb	r3, r3
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	b25b      	sxtb	r3, r3
 80196b0:	4313      	orrs	r3, r2
 80196b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80196b4:	793b      	ldrb	r3, [r7, #4]
 80196b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80196ba:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80196bc:	b25b      	sxtb	r3, r3
 80196be:	005b      	lsls	r3, r3, #1
 80196c0:	b25b      	sxtb	r3, r3
 80196c2:	4313      	orrs	r3, r2
 80196c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80196c6:	793b      	ldrb	r3, [r7, #4]
 80196c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80196d0:	4313      	orrs	r3, r2
 80196d2:	b25b      	sxtb	r3, r3
 80196d4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80196d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80196d8:	f107 030f 	add.w	r3, r7, #15
 80196dc:	2201      	movs	r2, #1
 80196de:	4619      	mov	r1, r3
 80196e0:	2089      	movs	r0, #137	@ 0x89
 80196e2:	f000 fcc7 	bl	801a074 <SUBGRF_WriteCommand>
}
 80196e6:	bf00      	nop
 80196e8:	3710      	adds	r7, #16
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
	...

080196f0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	4a1b      	ldr	r2, [pc, #108]	@ (8019768 <SUBGRF_CalibrateImage+0x78>)
 80196fc:	4293      	cmp	r3, r2
 80196fe:	d904      	bls.n	801970a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019700:	23e1      	movs	r3, #225	@ 0xe1
 8019702:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019704:	23e9      	movs	r3, #233	@ 0xe9
 8019706:	737b      	strb	r3, [r7, #13]
 8019708:	e022      	b.n	8019750 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	4a17      	ldr	r2, [pc, #92]	@ (801976c <SUBGRF_CalibrateImage+0x7c>)
 801970e:	4293      	cmp	r3, r2
 8019710:	d904      	bls.n	801971c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019712:	23d7      	movs	r3, #215	@ 0xd7
 8019714:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019716:	23db      	movs	r3, #219	@ 0xdb
 8019718:	737b      	strb	r3, [r7, #13]
 801971a:	e019      	b.n	8019750 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	4a14      	ldr	r2, [pc, #80]	@ (8019770 <SUBGRF_CalibrateImage+0x80>)
 8019720:	4293      	cmp	r3, r2
 8019722:	d904      	bls.n	801972e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019724:	23c1      	movs	r3, #193	@ 0xc1
 8019726:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019728:	23c5      	movs	r3, #197	@ 0xc5
 801972a:	737b      	strb	r3, [r7, #13]
 801972c:	e010      	b.n	8019750 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	4a10      	ldr	r2, [pc, #64]	@ (8019774 <SUBGRF_CalibrateImage+0x84>)
 8019732:	4293      	cmp	r3, r2
 8019734:	d904      	bls.n	8019740 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019736:	2375      	movs	r3, #117	@ 0x75
 8019738:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801973a:	2381      	movs	r3, #129	@ 0x81
 801973c:	737b      	strb	r3, [r7, #13]
 801973e:	e007      	b.n	8019750 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	4a0d      	ldr	r2, [pc, #52]	@ (8019778 <SUBGRF_CalibrateImage+0x88>)
 8019744:	4293      	cmp	r3, r2
 8019746:	d903      	bls.n	8019750 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8019748:	236b      	movs	r3, #107	@ 0x6b
 801974a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801974c:	236f      	movs	r3, #111	@ 0x6f
 801974e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019750:	f107 030c 	add.w	r3, r7, #12
 8019754:	2202      	movs	r2, #2
 8019756:	4619      	mov	r1, r3
 8019758:	2098      	movs	r0, #152	@ 0x98
 801975a:	f000 fc8b 	bl	801a074 <SUBGRF_WriteCommand>
}
 801975e:	bf00      	nop
 8019760:	3710      	adds	r7, #16
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	35a4e900 	.word	0x35a4e900
 801976c:	32a9f880 	.word	0x32a9f880
 8019770:	2de54480 	.word	0x2de54480
 8019774:	1b6b0b00 	.word	0x1b6b0b00
 8019778:	1954fc40 	.word	0x1954fc40

0801977c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801977c:	b590      	push	{r4, r7, lr}
 801977e:	b085      	sub	sp, #20
 8019780:	af00      	add	r7, sp, #0
 8019782:	4604      	mov	r4, r0
 8019784:	4608      	mov	r0, r1
 8019786:	4611      	mov	r1, r2
 8019788:	461a      	mov	r2, r3
 801978a:	4623      	mov	r3, r4
 801978c:	71fb      	strb	r3, [r7, #7]
 801978e:	4603      	mov	r3, r0
 8019790:	71bb      	strb	r3, [r7, #6]
 8019792:	460b      	mov	r3, r1
 8019794:	717b      	strb	r3, [r7, #5]
 8019796:	4613      	mov	r3, r2
 8019798:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801979a:	79fb      	ldrb	r3, [r7, #7]
 801979c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801979e:	79bb      	ldrb	r3, [r7, #6]
 80197a0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80197a2:	797b      	ldrb	r3, [r7, #5]
 80197a4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80197a6:	793b      	ldrb	r3, [r7, #4]
 80197a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80197aa:	f107 030c 	add.w	r3, r7, #12
 80197ae:	2204      	movs	r2, #4
 80197b0:	4619      	mov	r1, r3
 80197b2:	2095      	movs	r0, #149	@ 0x95
 80197b4:	f000 fc5e 	bl	801a074 <SUBGRF_WriteCommand>
}
 80197b8:	bf00      	nop
 80197ba:	3714      	adds	r7, #20
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd90      	pop	{r4, r7, pc}

080197c0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80197c0:	b590      	push	{r4, r7, lr}
 80197c2:	b085      	sub	sp, #20
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	4604      	mov	r4, r0
 80197c8:	4608      	mov	r0, r1
 80197ca:	4611      	mov	r1, r2
 80197cc:	461a      	mov	r2, r3
 80197ce:	4623      	mov	r3, r4
 80197d0:	80fb      	strh	r3, [r7, #6]
 80197d2:	4603      	mov	r3, r0
 80197d4:	80bb      	strh	r3, [r7, #4]
 80197d6:	460b      	mov	r3, r1
 80197d8:	807b      	strh	r3, [r7, #2]
 80197da:	4613      	mov	r3, r2
 80197dc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80197de:	88fb      	ldrh	r3, [r7, #6]
 80197e0:	0a1b      	lsrs	r3, r3, #8
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80197e8:	88fb      	ldrh	r3, [r7, #6]
 80197ea:	b2db      	uxtb	r3, r3
 80197ec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80197ee:	88bb      	ldrh	r3, [r7, #4]
 80197f0:	0a1b      	lsrs	r3, r3, #8
 80197f2:	b29b      	uxth	r3, r3
 80197f4:	b2db      	uxtb	r3, r3
 80197f6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80197f8:	88bb      	ldrh	r3, [r7, #4]
 80197fa:	b2db      	uxtb	r3, r3
 80197fc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80197fe:	887b      	ldrh	r3, [r7, #2]
 8019800:	0a1b      	lsrs	r3, r3, #8
 8019802:	b29b      	uxth	r3, r3
 8019804:	b2db      	uxtb	r3, r3
 8019806:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019808:	887b      	ldrh	r3, [r7, #2]
 801980a:	b2db      	uxtb	r3, r3
 801980c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801980e:	883b      	ldrh	r3, [r7, #0]
 8019810:	0a1b      	lsrs	r3, r3, #8
 8019812:	b29b      	uxth	r3, r3
 8019814:	b2db      	uxtb	r3, r3
 8019816:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019818:	883b      	ldrh	r3, [r7, #0]
 801981a:	b2db      	uxtb	r3, r3
 801981c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801981e:	f107 0308 	add.w	r3, r7, #8
 8019822:	2208      	movs	r2, #8
 8019824:	4619      	mov	r1, r3
 8019826:	2008      	movs	r0, #8
 8019828:	f000 fc24 	bl	801a074 <SUBGRF_WriteCommand>
}
 801982c:	bf00      	nop
 801982e:	3714      	adds	r7, #20
 8019830:	46bd      	mov	sp, r7
 8019832:	bd90      	pop	{r4, r7, pc}

08019834 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	4603      	mov	r3, r0
 801983c:	6039      	str	r1, [r7, #0]
 801983e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019840:	79fb      	ldrb	r3, [r7, #7]
 8019842:	f003 0307 	and.w	r3, r3, #7
 8019846:	b2db      	uxtb	r3, r3
 8019848:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	0c1b      	lsrs	r3, r3, #16
 801984e:	b2db      	uxtb	r3, r3
 8019850:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	0a1b      	lsrs	r3, r3, #8
 8019856:	b2db      	uxtb	r3, r3
 8019858:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	b2db      	uxtb	r3, r3
 801985e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019860:	f107 030c 	add.w	r3, r7, #12
 8019864:	2204      	movs	r2, #4
 8019866:	4619      	mov	r1, r3
 8019868:	2097      	movs	r0, #151	@ 0x97
 801986a:	f000 fc03 	bl	801a074 <SUBGRF_WriteCommand>
}
 801986e:	bf00      	nop
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
	...

08019878 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801987c:	b084      	sub	sp, #16
 801987e:	af00      	add	r7, sp, #0
 8019880:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019882:	2300      	movs	r3, #0
 8019884:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019886:	4b1d      	ldr	r3, [pc, #116]	@ (80198fc <SUBGRF_SetRfFrequency+0x84>)
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	f083 0301 	eor.w	r3, r3, #1
 801988e:	b2db      	uxtb	r3, r3
 8019890:	2b00      	cmp	r3, #0
 8019892:	d005      	beq.n	80198a0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f7ff ff2b 	bl	80196f0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801989a:	4b18      	ldr	r3, [pc, #96]	@ (80198fc <SUBGRF_SetRfFrequency+0x84>)
 801989c:	2201      	movs	r2, #1
 801989e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	2200      	movs	r2, #0
 80198a4:	461c      	mov	r4, r3
 80198a6:	4615      	mov	r5, r2
 80198a8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80198ac:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80198b0:	4a13      	ldr	r2, [pc, #76]	@ (8019900 <SUBGRF_SetRfFrequency+0x88>)
 80198b2:	f04f 0300 	mov.w	r3, #0
 80198b6:	4640      	mov	r0, r8
 80198b8:	4649      	mov	r1, r9
 80198ba:	f7e7 fa81 	bl	8000dc0 <__aeabi_uldivmod>
 80198be:	4602      	mov	r2, r0
 80198c0:	460b      	mov	r3, r1
 80198c2:	4613      	mov	r3, r2
 80198c4:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	0e1b      	lsrs	r3, r3, #24
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	0c1b      	lsrs	r3, r3, #16
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	0a1b      	lsrs	r3, r3, #8
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80198e4:	f107 0308 	add.w	r3, r7, #8
 80198e8:	2204      	movs	r2, #4
 80198ea:	4619      	mov	r1, r3
 80198ec:	2086      	movs	r0, #134	@ 0x86
 80198ee:	f000 fbc1 	bl	801a074 <SUBGRF_WriteCommand>
}
 80198f2:	bf00      	nop
 80198f4:	3710      	adds	r7, #16
 80198f6:	46bd      	mov	sp, r7
 80198f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80198fc:	20001d6c 	.word	0x20001d6c
 8019900:	01e84800 	.word	0x01e84800

08019904 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	4603      	mov	r3, r0
 801990c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801990e:	79fa      	ldrb	r2, [r7, #7]
 8019910:	4b09      	ldr	r3, [pc, #36]	@ (8019938 <SUBGRF_SetPacketType+0x34>)
 8019912:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019914:	79fb      	ldrb	r3, [r7, #7]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d104      	bne.n	8019924 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801991a:	2100      	movs	r1, #0
 801991c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019920:	f000 faf8 	bl	8019f14 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019924:	1dfb      	adds	r3, r7, #7
 8019926:	2201      	movs	r2, #1
 8019928:	4619      	mov	r1, r3
 801992a:	208a      	movs	r0, #138	@ 0x8a
 801992c:	f000 fba2 	bl	801a074 <SUBGRF_WriteCommand>
}
 8019930:	bf00      	nop
 8019932:	3708      	adds	r7, #8
 8019934:	46bd      	mov	sp, r7
 8019936:	bd80      	pop	{r7, pc}
 8019938:	20001d65 	.word	0x20001d65

0801993c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801993c:	b480      	push	{r7}
 801993e:	af00      	add	r7, sp, #0
    return PacketType;
 8019940:	4b02      	ldr	r3, [pc, #8]	@ (801994c <SUBGRF_GetPacketType+0x10>)
 8019942:	781b      	ldrb	r3, [r3, #0]
}
 8019944:	4618      	mov	r0, r3
 8019946:	46bd      	mov	sp, r7
 8019948:	bc80      	pop	{r7}
 801994a:	4770      	bx	lr
 801994c:	20001d65 	.word	0x20001d65

08019950 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	4603      	mov	r3, r0
 8019958:	71fb      	strb	r3, [r7, #7]
 801995a:	460b      	mov	r3, r1
 801995c:	71bb      	strb	r3, [r7, #6]
 801995e:	4613      	mov	r3, r2
 8019960:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019962:	79fb      	ldrb	r3, [r7, #7]
 8019964:	2b01      	cmp	r3, #1
 8019966:	d149      	bne.n	80199fc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019968:	2000      	movs	r0, #0
 801996a:	f7f1 f979 	bl	800ac60 <RBI_GetRFOMaxPowerConfig>
 801996e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019970:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019974:	68fa      	ldr	r2, [r7, #12]
 8019976:	429a      	cmp	r2, r3
 8019978:	da01      	bge.n	801997e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	2b0e      	cmp	r3, #14
 8019982:	d10e      	bne.n	80199a2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019984:	2301      	movs	r3, #1
 8019986:	2201      	movs	r2, #1
 8019988:	2100      	movs	r1, #0
 801998a:	2004      	movs	r0, #4
 801998c:	f7ff fef6 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019990:	79ba      	ldrb	r2, [r7, #6]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	b2db      	uxtb	r3, r3
 8019996:	1ad3      	subs	r3, r2, r3
 8019998:	b2db      	uxtb	r3, r3
 801999a:	330e      	adds	r3, #14
 801999c:	b2db      	uxtb	r3, r3
 801999e:	71bb      	strb	r3, [r7, #6]
 80199a0:	e01f      	b.n	80199e2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	2b0a      	cmp	r3, #10
 80199a6:	d10e      	bne.n	80199c6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80199a8:	2301      	movs	r3, #1
 80199aa:	2201      	movs	r2, #1
 80199ac:	2100      	movs	r1, #0
 80199ae:	2001      	movs	r0, #1
 80199b0:	f7ff fee4 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80199b4:	79ba      	ldrb	r2, [r7, #6]
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	b2db      	uxtb	r3, r3
 80199ba:	1ad3      	subs	r3, r2, r3
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	330d      	adds	r3, #13
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	71bb      	strb	r3, [r7, #6]
 80199c4:	e00d      	b.n	80199e2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80199c6:	2301      	movs	r3, #1
 80199c8:	2201      	movs	r2, #1
 80199ca:	2100      	movs	r1, #0
 80199cc:	2006      	movs	r0, #6
 80199ce:	f7ff fed5 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80199d2:	79ba      	ldrb	r2, [r7, #6]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	b2db      	uxtb	r3, r3
 80199d8:	1ad3      	subs	r3, r2, r3
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	330e      	adds	r3, #14
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80199e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80199e6:	f113 0f11 	cmn.w	r3, #17
 80199ea:	da01      	bge.n	80199f0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80199ec:	23ef      	movs	r3, #239	@ 0xef
 80199ee:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80199f0:	2118      	movs	r1, #24
 80199f2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80199f6:	f000 fa8d 	bl	8019f14 <SUBGRF_WriteRegister>
 80199fa:	e067      	b.n	8019acc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80199fc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019a00:	f000 fa9c 	bl	8019f3c <SUBGRF_ReadRegister>
 8019a04:	4603      	mov	r3, r0
 8019a06:	f043 031e 	orr.w	r3, r3, #30
 8019a0a:	b2db      	uxtb	r3, r3
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019a12:	f000 fa7f 	bl	8019f14 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019a16:	2001      	movs	r0, #1
 8019a18:	f7f1 f922 	bl	800ac60 <RBI_GetRFOMaxPowerConfig>
 8019a1c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019a1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019a22:	68fa      	ldr	r2, [r7, #12]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	da01      	bge.n	8019a2c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	2b14      	cmp	r3, #20
 8019a30:	d10e      	bne.n	8019a50 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019a32:	2301      	movs	r3, #1
 8019a34:	2200      	movs	r2, #0
 8019a36:	2105      	movs	r1, #5
 8019a38:	2003      	movs	r0, #3
 8019a3a:	f7ff fe9f 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019a3e:	79ba      	ldrb	r2, [r7, #6]
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	b2db      	uxtb	r3, r3
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	b2db      	uxtb	r3, r3
 8019a48:	3316      	adds	r3, #22
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	71bb      	strb	r3, [r7, #6]
 8019a4e:	e031      	b.n	8019ab4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	2b11      	cmp	r3, #17
 8019a54:	d10e      	bne.n	8019a74 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019a56:	2301      	movs	r3, #1
 8019a58:	2200      	movs	r2, #0
 8019a5a:	2103      	movs	r1, #3
 8019a5c:	2002      	movs	r0, #2
 8019a5e:	f7ff fe8d 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019a62:	79ba      	ldrb	r2, [r7, #6]
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	1ad3      	subs	r3, r2, r3
 8019a6a:	b2db      	uxtb	r3, r3
 8019a6c:	3316      	adds	r3, #22
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	71bb      	strb	r3, [r7, #6]
 8019a72:	e01f      	b.n	8019ab4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2b0e      	cmp	r3, #14
 8019a78:	d10e      	bne.n	8019a98 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019a7a:	2301      	movs	r3, #1
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	2102      	movs	r1, #2
 8019a80:	2002      	movs	r0, #2
 8019a82:	f7ff fe7b 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019a86:	79ba      	ldrb	r2, [r7, #6]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	b2db      	uxtb	r3, r3
 8019a8c:	1ad3      	subs	r3, r2, r3
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	330e      	adds	r3, #14
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	71bb      	strb	r3, [r7, #6]
 8019a96:	e00d      	b.n	8019ab4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019a98:	2301      	movs	r3, #1
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	2107      	movs	r1, #7
 8019a9e:	2004      	movs	r0, #4
 8019aa0:	f7ff fe6c 	bl	801977c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019aa4:	79ba      	ldrb	r2, [r7, #6]
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	1ad3      	subs	r3, r2, r3
 8019aac:	b2db      	uxtb	r3, r3
 8019aae:	3316      	adds	r3, #22
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019ab4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019ab8:	f113 0f09 	cmn.w	r3, #9
 8019abc:	da01      	bge.n	8019ac2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019abe:	23f7      	movs	r3, #247	@ 0xf7
 8019ac0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019ac2:	2138      	movs	r1, #56	@ 0x38
 8019ac4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019ac8:	f000 fa24 	bl	8019f14 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019acc:	79bb      	ldrb	r3, [r7, #6]
 8019ace:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019ad0:	797b      	ldrb	r3, [r7, #5]
 8019ad2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019ad4:	f107 0308 	add.w	r3, r7, #8
 8019ad8:	2202      	movs	r2, #2
 8019ada:	4619      	mov	r1, r3
 8019adc:	208e      	movs	r0, #142	@ 0x8e
 8019ade:	f000 fac9 	bl	801a074 <SUBGRF_WriteCommand>
}
 8019ae2:	bf00      	nop
 8019ae4:	3710      	adds	r7, #16
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
	...

08019aec <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019af0:	b086      	sub	sp, #24
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019af6:	2300      	movs	r3, #0
 8019af8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019afa:	f107 0308 	add.w	r3, r7, #8
 8019afe:	2200      	movs	r2, #0
 8019b00:	601a      	str	r2, [r3, #0]
 8019b02:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	781a      	ldrb	r2, [r3, #0]
 8019b08:	4b5c      	ldr	r3, [pc, #368]	@ (8019c7c <SUBGRF_SetModulationParams+0x190>)
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d004      	beq.n	8019b1a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7ff fef5 	bl	8019904 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	2b03      	cmp	r3, #3
 8019b20:	f200 80a5 	bhi.w	8019c6e <SUBGRF_SetModulationParams+0x182>
 8019b24:	a201      	add	r2, pc, #4	@ (adr r2, 8019b2c <SUBGRF_SetModulationParams+0x40>)
 8019b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b2a:	bf00      	nop
 8019b2c:	08019b3d 	.word	0x08019b3d
 8019b30:	08019bfd 	.word	0x08019bfd
 8019b34:	08019bbf 	.word	0x08019bbf
 8019b38:	08019c2b 	.word	0x08019c2b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019b3c:	2308      	movs	r3, #8
 8019b3e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	685b      	ldr	r3, [r3, #4]
 8019b44:	4a4e      	ldr	r2, [pc, #312]	@ (8019c80 <SUBGRF_SetModulationParams+0x194>)
 8019b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b4a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019b4c:	697b      	ldr	r3, [r7, #20]
 8019b4e:	0c1b      	lsrs	r3, r3, #16
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019b54:	697b      	ldr	r3, [r7, #20]
 8019b56:	0a1b      	lsrs	r3, r3, #8
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019b5c:	697b      	ldr	r3, [r7, #20]
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	7b1b      	ldrb	r3, [r3, #12]
 8019b66:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	7b5b      	ldrb	r3, [r3, #13]
 8019b6c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	689b      	ldr	r3, [r3, #8]
 8019b72:	2200      	movs	r2, #0
 8019b74:	461c      	mov	r4, r3
 8019b76:	4615      	mov	r5, r2
 8019b78:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019b7c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019b80:	4a40      	ldr	r2, [pc, #256]	@ (8019c84 <SUBGRF_SetModulationParams+0x198>)
 8019b82:	f04f 0300 	mov.w	r3, #0
 8019b86:	4640      	mov	r0, r8
 8019b88:	4649      	mov	r1, r9
 8019b8a:	f7e7 f919 	bl	8000dc0 <__aeabi_uldivmod>
 8019b8e:	4602      	mov	r2, r0
 8019b90:	460b      	mov	r3, r1
 8019b92:	4613      	mov	r3, r2
 8019b94:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	0c1b      	lsrs	r3, r3, #16
 8019b9a:	b2db      	uxtb	r3, r3
 8019b9c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	0a1b      	lsrs	r3, r3, #8
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	b2db      	uxtb	r3, r3
 8019baa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019bac:	7cfb      	ldrb	r3, [r7, #19]
 8019bae:	b29a      	uxth	r2, r3
 8019bb0:	f107 0308 	add.w	r3, r7, #8
 8019bb4:	4619      	mov	r1, r3
 8019bb6:	208b      	movs	r0, #139	@ 0x8b
 8019bb8:	f000 fa5c 	bl	801a074 <SUBGRF_WriteCommand>
        break;
 8019bbc:	e058      	b.n	8019c70 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019bbe:	2304      	movs	r3, #4
 8019bc0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	691b      	ldr	r3, [r3, #16]
 8019bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8019c80 <SUBGRF_SetModulationParams+0x194>)
 8019bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bcc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	0c1b      	lsrs	r3, r3, #16
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	0a1b      	lsrs	r3, r3, #8
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019bde:	697b      	ldr	r3, [r7, #20]
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	7d1b      	ldrb	r3, [r3, #20]
 8019be8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019bea:	7cfb      	ldrb	r3, [r7, #19]
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	f107 0308 	add.w	r3, r7, #8
 8019bf2:	4619      	mov	r1, r3
 8019bf4:	208b      	movs	r0, #139	@ 0x8b
 8019bf6:	f000 fa3d 	bl	801a074 <SUBGRF_WriteCommand>
        break;
 8019bfa:	e039      	b.n	8019c70 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019bfc:	2304      	movs	r3, #4
 8019bfe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	7e1b      	ldrb	r3, [r3, #24]
 8019c04:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	7e5b      	ldrb	r3, [r3, #25]
 8019c0a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	7e9b      	ldrb	r3, [r3, #26]
 8019c10:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	7edb      	ldrb	r3, [r3, #27]
 8019c16:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c18:	7cfb      	ldrb	r3, [r7, #19]
 8019c1a:	b29a      	uxth	r2, r3
 8019c1c:	f107 0308 	add.w	r3, r7, #8
 8019c20:	4619      	mov	r1, r3
 8019c22:	208b      	movs	r0, #139	@ 0x8b
 8019c24:	f000 fa26 	bl	801a074 <SUBGRF_WriteCommand>

        break;
 8019c28:	e022      	b.n	8019c70 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019c2a:	2305      	movs	r3, #5
 8019c2c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	4a13      	ldr	r2, [pc, #76]	@ (8019c80 <SUBGRF_SetModulationParams+0x194>)
 8019c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c38:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	0c1b      	lsrs	r3, r3, #16
 8019c3e:	b2db      	uxtb	r3, r3
 8019c40:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	0a1b      	lsrs	r3, r3, #8
 8019c46:	b2db      	uxtb	r3, r3
 8019c48:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019c4a:	697b      	ldr	r3, [r7, #20]
 8019c4c:	b2db      	uxtb	r3, r3
 8019c4e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	7b1b      	ldrb	r3, [r3, #12]
 8019c54:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	7b5b      	ldrb	r3, [r3, #13]
 8019c5a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019c5c:	7cfb      	ldrb	r3, [r7, #19]
 8019c5e:	b29a      	uxth	r2, r3
 8019c60:	f107 0308 	add.w	r3, r7, #8
 8019c64:	4619      	mov	r1, r3
 8019c66:	208b      	movs	r0, #139	@ 0x8b
 8019c68:	f000 fa04 	bl	801a074 <SUBGRF_WriteCommand>
        break;
 8019c6c:	e000      	b.n	8019c70 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019c6e:	bf00      	nop
    }
}
 8019c70:	bf00      	nop
 8019c72:	3718      	adds	r7, #24
 8019c74:	46bd      	mov	sp, r7
 8019c76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019c7a:	bf00      	nop
 8019c7c:	20001d65 	.word	0x20001d65
 8019c80:	3d090000 	.word	0x3d090000
 8019c84:	01e84800 	.word	0x01e84800

08019c88 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b086      	sub	sp, #24
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019c90:	2300      	movs	r3, #0
 8019c92:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019c94:	f107 030c 	add.w	r3, r7, #12
 8019c98:	2200      	movs	r2, #0
 8019c9a:	601a      	str	r2, [r3, #0]
 8019c9c:	605a      	str	r2, [r3, #4]
 8019c9e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	781a      	ldrb	r2, [r3, #0]
 8019ca4:	4b44      	ldr	r3, [pc, #272]	@ (8019db8 <SUBGRF_SetPacketParams+0x130>)
 8019ca6:	781b      	ldrb	r3, [r3, #0]
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d004      	beq.n	8019cb6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f7ff fe27 	bl	8019904 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	2b03      	cmp	r3, #3
 8019cbc:	d878      	bhi.n	8019db0 <SUBGRF_SetPacketParams+0x128>
 8019cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8019cc4 <SUBGRF_SetPacketParams+0x3c>)
 8019cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cc4:	08019cd5 	.word	0x08019cd5
 8019cc8:	08019d65 	.word	0x08019d65
 8019ccc:	08019d59 	.word	0x08019d59
 8019cd0:	08019cd5 	.word	0x08019cd5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	7a5b      	ldrb	r3, [r3, #9]
 8019cd8:	2bf1      	cmp	r3, #241	@ 0xf1
 8019cda:	d10a      	bne.n	8019cf2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019cdc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019ce0:	f7ff faaa 	bl	8019238 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019ce4:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019ce8:	f7ff fac6 	bl	8019278 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019cec:	2302      	movs	r3, #2
 8019cee:	75bb      	strb	r3, [r7, #22]
 8019cf0:	e011      	b.n	8019d16 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	7a5b      	ldrb	r3, [r3, #9]
 8019cf6:	2bf2      	cmp	r3, #242	@ 0xf2
 8019cf8:	d10a      	bne.n	8019d10 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019cfa:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019cfe:	f7ff fa9b 	bl	8019238 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019d02:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019d06:	f7ff fab7 	bl	8019278 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019d0a:	2306      	movs	r3, #6
 8019d0c:	75bb      	strb	r3, [r7, #22]
 8019d0e:	e002      	b.n	8019d16 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	7a5b      	ldrb	r3, [r3, #9]
 8019d14:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019d16:	2309      	movs	r3, #9
 8019d18:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	885b      	ldrh	r3, [r3, #2]
 8019d1e:	0a1b      	lsrs	r3, r3, #8
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	b2db      	uxtb	r3, r3
 8019d24:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	885b      	ldrh	r3, [r3, #2]
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	791b      	ldrb	r3, [r3, #4]
 8019d32:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	795b      	ldrb	r3, [r3, #5]
 8019d38:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	799b      	ldrb	r3, [r3, #6]
 8019d3e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	79db      	ldrb	r3, [r3, #7]
 8019d44:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	7a1b      	ldrb	r3, [r3, #8]
 8019d4a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019d4c:	7dbb      	ldrb	r3, [r7, #22]
 8019d4e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	7a9b      	ldrb	r3, [r3, #10]
 8019d54:	753b      	strb	r3, [r7, #20]
        break;
 8019d56:	e022      	b.n	8019d9e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019d58:	2301      	movs	r3, #1
 8019d5a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	7b1b      	ldrb	r3, [r3, #12]
 8019d60:	733b      	strb	r3, [r7, #12]
        break;
 8019d62:	e01c      	b.n	8019d9e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019d64:	2306      	movs	r3, #6
 8019d66:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	89db      	ldrh	r3, [r3, #14]
 8019d6c:	0a1b      	lsrs	r3, r3, #8
 8019d6e:	b29b      	uxth	r3, r3
 8019d70:	b2db      	uxtb	r3, r3
 8019d72:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	89db      	ldrh	r3, [r3, #14]
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	7c1a      	ldrb	r2, [r3, #16]
 8019d80:	4b0e      	ldr	r3, [pc, #56]	@ (8019dbc <SUBGRF_SetPacketParams+0x134>)
 8019d82:	4611      	mov	r1, r2
 8019d84:	7019      	strb	r1, [r3, #0]
 8019d86:	4613      	mov	r3, r2
 8019d88:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	7c5b      	ldrb	r3, [r3, #17]
 8019d8e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	7c9b      	ldrb	r3, [r3, #18]
 8019d94:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	7cdb      	ldrb	r3, [r3, #19]
 8019d9a:	747b      	strb	r3, [r7, #17]
        break;
 8019d9c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019d9e:	7dfb      	ldrb	r3, [r7, #23]
 8019da0:	b29a      	uxth	r2, r3
 8019da2:	f107 030c 	add.w	r3, r7, #12
 8019da6:	4619      	mov	r1, r3
 8019da8:	208c      	movs	r0, #140	@ 0x8c
 8019daa:	f000 f963 	bl	801a074 <SUBGRF_WriteCommand>
 8019dae:	e000      	b.n	8019db2 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019db0:	bf00      	nop
}
 8019db2:	3718      	adds	r7, #24
 8019db4:	46bd      	mov	sp, r7
 8019db6:	bd80      	pop	{r7, pc}
 8019db8:	20001d65 	.word	0x20001d65
 8019dbc:	20001d66 	.word	0x20001d66

08019dc0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b084      	sub	sp, #16
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	460a      	mov	r2, r1
 8019dca:	71fb      	strb	r3, [r7, #7]
 8019dcc:	4613      	mov	r3, r2
 8019dce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019dd0:	79fb      	ldrb	r3, [r7, #7]
 8019dd2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019dd4:	79bb      	ldrb	r3, [r7, #6]
 8019dd6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019dd8:	f107 030c 	add.w	r3, r7, #12
 8019ddc:	2202      	movs	r2, #2
 8019dde:	4619      	mov	r1, r3
 8019de0:	208f      	movs	r0, #143	@ 0x8f
 8019de2:	f000 f947 	bl	801a074 <SUBGRF_WriteCommand>
}
 8019de6:	bf00      	nop
 8019de8:	3710      	adds	r7, #16
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}

08019dee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019dee:	b580      	push	{r7, lr}
 8019df0:	b082      	sub	sp, #8
 8019df2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019df4:	2300      	movs	r3, #0
 8019df6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019df8:	1d3b      	adds	r3, r7, #4
 8019dfa:	2201      	movs	r2, #1
 8019dfc:	4619      	mov	r1, r3
 8019dfe:	2015      	movs	r0, #21
 8019e00:	f000 f95a 	bl	801a0b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019e04:	793b      	ldrb	r3, [r7, #4]
 8019e06:	425b      	negs	r3, r3
 8019e08:	105b      	asrs	r3, r3, #1
 8019e0a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019e10:	4618      	mov	r0, r3
 8019e12:	3708      	adds	r7, #8
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}

08019e18 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b084      	sub	sp, #16
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
 8019e20:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019e22:	f107 030c 	add.w	r3, r7, #12
 8019e26:	2202      	movs	r2, #2
 8019e28:	4619      	mov	r1, r3
 8019e2a:	2013      	movs	r0, #19
 8019e2c:	f000 f944 	bl	801a0b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019e30:	f7ff fd84 	bl	801993c <SUBGRF_GetPacketType>
 8019e34:	4603      	mov	r3, r0
 8019e36:	2b01      	cmp	r3, #1
 8019e38:	d10d      	bne.n	8019e56 <SUBGRF_GetRxBufferStatus+0x3e>
 8019e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8019e6c <SUBGRF_GetRxBufferStatus+0x54>)
 8019e3c:	781b      	ldrb	r3, [r3, #0]
 8019e3e:	b2db      	uxtb	r3, r3
 8019e40:	2b01      	cmp	r3, #1
 8019e42:	d108      	bne.n	8019e56 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019e44:	f240 7002 	movw	r0, #1794	@ 0x702
 8019e48:	f000 f878 	bl	8019f3c <SUBGRF_ReadRegister>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	461a      	mov	r2, r3
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	701a      	strb	r2, [r3, #0]
 8019e54:	e002      	b.n	8019e5c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019e56:	7b3a      	ldrb	r2, [r7, #12]
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019e5c:	7b7a      	ldrb	r2, [r7, #13]
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	701a      	strb	r2, [r3, #0]
}
 8019e62:	bf00      	nop
 8019e64:	3710      	adds	r7, #16
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}
 8019e6a:	bf00      	nop
 8019e6c:	20001d66 	.word	0x20001d66

08019e70 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b084      	sub	sp, #16
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019e78:	f107 030c 	add.w	r3, r7, #12
 8019e7c:	2203      	movs	r2, #3
 8019e7e:	4619      	mov	r1, r3
 8019e80:	2014      	movs	r0, #20
 8019e82:	f000 f919 	bl	801a0b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019e86:	f7ff fd59 	bl	801993c <SUBGRF_GetPacketType>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	781b      	ldrb	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d002      	beq.n	8019ea0 <SUBGRF_GetPacketStatus+0x30>
 8019e9a:	2b01      	cmp	r3, #1
 8019e9c:	d013      	beq.n	8019ec6 <SUBGRF_GetPacketStatus+0x56>
 8019e9e:	e02a      	b.n	8019ef6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019ea0:	7b3a      	ldrb	r2, [r7, #12]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019ea6:	7b7b      	ldrb	r3, [r7, #13]
 8019ea8:	425b      	negs	r3, r3
 8019eaa:	105b      	asrs	r3, r3, #1
 8019eac:	b25a      	sxtb	r2, r3
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019eb2:	7bbb      	ldrb	r3, [r7, #14]
 8019eb4:	425b      	negs	r3, r3
 8019eb6:	105b      	asrs	r3, r3, #1
 8019eb8:	b25a      	sxtb	r2, r3
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	609a      	str	r2, [r3, #8]
            break;
 8019ec4:	e020      	b.n	8019f08 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019ec6:	7b3b      	ldrb	r3, [r7, #12]
 8019ec8:	425b      	negs	r3, r3
 8019eca:	105b      	asrs	r3, r3, #1
 8019ecc:	b25a      	sxtb	r2, r3
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019ed2:	7b7b      	ldrb	r3, [r7, #13]
 8019ed4:	b25b      	sxtb	r3, r3
 8019ed6:	3302      	adds	r3, #2
 8019ed8:	109b      	asrs	r3, r3, #2
 8019eda:	b25a      	sxtb	r2, r3
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019ee0:	7bbb      	ldrb	r3, [r7, #14]
 8019ee2:	425b      	negs	r3, r3
 8019ee4:	105b      	asrs	r3, r3, #1
 8019ee6:	b25a      	sxtb	r2, r3
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019eec:	4b08      	ldr	r3, [pc, #32]	@ (8019f10 <SUBGRF_GetPacketStatus+0xa0>)
 8019eee:	681a      	ldr	r2, [r3, #0]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	611a      	str	r2, [r3, #16]
            break;
 8019ef4:	e008      	b.n	8019f08 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019ef6:	2214      	movs	r2, #20
 8019ef8:	2100      	movs	r1, #0
 8019efa:	6878      	ldr	r0, [r7, #4]
 8019efc:	f000 fbf3 	bl	801a6e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	220f      	movs	r2, #15
 8019f04:	701a      	strb	r2, [r3, #0]
            break;
 8019f06:	bf00      	nop
    }
}
 8019f08:	bf00      	nop
 8019f0a:	3710      	adds	r7, #16
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	20001d68 	.word	0x20001d68

08019f14 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	460a      	mov	r2, r1
 8019f1e:	80fb      	strh	r3, [r7, #6]
 8019f20:	4613      	mov	r3, r2
 8019f22:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019f24:	1d7a      	adds	r2, r7, #5
 8019f26:	88f9      	ldrh	r1, [r7, #6]
 8019f28:	2301      	movs	r3, #1
 8019f2a:	4803      	ldr	r0, [pc, #12]	@ (8019f38 <SUBGRF_WriteRegister+0x24>)
 8019f2c:	f7ed fb8e 	bl	800764c <HAL_SUBGHZ_WriteRegisters>
}
 8019f30:	bf00      	nop
 8019f32:	3708      	adds	r7, #8
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}
 8019f38:	200003c4 	.word	0x200003c4

08019f3c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b084      	sub	sp, #16
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	4603      	mov	r3, r0
 8019f44:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019f46:	f107 020f 	add.w	r2, r7, #15
 8019f4a:	88f9      	ldrh	r1, [r7, #6]
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	4804      	ldr	r0, [pc, #16]	@ (8019f60 <SUBGRF_ReadRegister+0x24>)
 8019f50:	f7ed fbdb 	bl	800770a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3710      	adds	r7, #16
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bd80      	pop	{r7, pc}
 8019f5e:	bf00      	nop
 8019f60:	200003c4 	.word	0x200003c4

08019f64 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b086      	sub	sp, #24
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	6039      	str	r1, [r7, #0]
 8019f6e:	80fb      	strh	r3, [r7, #6]
 8019f70:	4613      	mov	r3, r2
 8019f72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f74:	f3ef 8310 	mrs	r3, PRIMASK
 8019f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8019f7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019f7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f7e:	b672      	cpsid	i
}
 8019f80:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019f82:	88bb      	ldrh	r3, [r7, #4]
 8019f84:	88f9      	ldrh	r1, [r7, #6]
 8019f86:	683a      	ldr	r2, [r7, #0]
 8019f88:	4806      	ldr	r0, [pc, #24]	@ (8019fa4 <SUBGRF_WriteRegisters+0x40>)
 8019f8a:	f7ed fb5f 	bl	800764c <HAL_SUBGHZ_WriteRegisters>
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f92:	693b      	ldr	r3, [r7, #16]
 8019f94:	f383 8810 	msr	PRIMASK, r3
}
 8019f98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019f9a:	bf00      	nop
 8019f9c:	3718      	adds	r7, #24
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	bd80      	pop	{r7, pc}
 8019fa2:	bf00      	nop
 8019fa4:	200003c4 	.word	0x200003c4

08019fa8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b086      	sub	sp, #24
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	4603      	mov	r3, r0
 8019fb0:	6039      	str	r1, [r7, #0]
 8019fb2:	80fb      	strh	r3, [r7, #6]
 8019fb4:	4613      	mov	r3, r2
 8019fb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8019fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8019fbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019fc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fc2:	b672      	cpsid	i
}
 8019fc4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019fc6:	88bb      	ldrh	r3, [r7, #4]
 8019fc8:	88f9      	ldrh	r1, [r7, #6]
 8019fca:	683a      	ldr	r2, [r7, #0]
 8019fcc:	4806      	ldr	r0, [pc, #24]	@ (8019fe8 <SUBGRF_ReadRegisters+0x40>)
 8019fce:	f7ed fb9c 	bl	800770a <HAL_SUBGHZ_ReadRegisters>
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fd6:	693b      	ldr	r3, [r7, #16]
 8019fd8:	f383 8810 	msr	PRIMASK, r3
}
 8019fdc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019fde:	bf00      	nop
 8019fe0:	3718      	adds	r7, #24
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}
 8019fe6:	bf00      	nop
 8019fe8:	200003c4 	.word	0x200003c4

08019fec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b086      	sub	sp, #24
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	6039      	str	r1, [r7, #0]
 8019ff6:	71fb      	strb	r3, [r7, #7]
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ffc:	f3ef 8310 	mrs	r3, PRIMASK
 801a000:	60fb      	str	r3, [r7, #12]
  return(result);
 801a002:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a006:	b672      	cpsid	i
}
 801a008:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a00a:	79bb      	ldrb	r3, [r7, #6]
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	79f9      	ldrb	r1, [r7, #7]
 801a010:	683a      	ldr	r2, [r7, #0]
 801a012:	4806      	ldr	r0, [pc, #24]	@ (801a02c <SUBGRF_WriteBuffer+0x40>)
 801a014:	f7ed fc8d 	bl	8007932 <HAL_SUBGHZ_WriteBuffer>
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a01c:	693b      	ldr	r3, [r7, #16]
 801a01e:	f383 8810 	msr	PRIMASK, r3
}
 801a022:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a024:	bf00      	nop
 801a026:	3718      	adds	r7, #24
 801a028:	46bd      	mov	sp, r7
 801a02a:	bd80      	pop	{r7, pc}
 801a02c:	200003c4 	.word	0x200003c4

0801a030 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b086      	sub	sp, #24
 801a034:	af00      	add	r7, sp, #0
 801a036:	4603      	mov	r3, r0
 801a038:	6039      	str	r1, [r7, #0]
 801a03a:	71fb      	strb	r3, [r7, #7]
 801a03c:	4613      	mov	r3, r2
 801a03e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a040:	f3ef 8310 	mrs	r3, PRIMASK
 801a044:	60fb      	str	r3, [r7, #12]
  return(result);
 801a046:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a04a:	b672      	cpsid	i
}
 801a04c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a04e:	79bb      	ldrb	r3, [r7, #6]
 801a050:	b29b      	uxth	r3, r3
 801a052:	79f9      	ldrb	r1, [r7, #7]
 801a054:	683a      	ldr	r2, [r7, #0]
 801a056:	4806      	ldr	r0, [pc, #24]	@ (801a070 <SUBGRF_ReadBuffer+0x40>)
 801a058:	f7ed fcbe 	bl	80079d8 <HAL_SUBGHZ_ReadBuffer>
 801a05c:	697b      	ldr	r3, [r7, #20]
 801a05e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a060:	693b      	ldr	r3, [r7, #16]
 801a062:	f383 8810 	msr	PRIMASK, r3
}
 801a066:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a068:	bf00      	nop
 801a06a:	3718      	adds	r7, #24
 801a06c:	46bd      	mov	sp, r7
 801a06e:	bd80      	pop	{r7, pc}
 801a070:	200003c4 	.word	0x200003c4

0801a074 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b086      	sub	sp, #24
 801a078:	af00      	add	r7, sp, #0
 801a07a:	4603      	mov	r3, r0
 801a07c:	6039      	str	r1, [r7, #0]
 801a07e:	71fb      	strb	r3, [r7, #7]
 801a080:	4613      	mov	r3, r2
 801a082:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a084:	f3ef 8310 	mrs	r3, PRIMASK
 801a088:	60fb      	str	r3, [r7, #12]
  return(result);
 801a08a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a08e:	b672      	cpsid	i
}
 801a090:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a092:	88bb      	ldrh	r3, [r7, #4]
 801a094:	79f9      	ldrb	r1, [r7, #7]
 801a096:	683a      	ldr	r2, [r7, #0]
 801a098:	4806      	ldr	r0, [pc, #24]	@ (801a0b4 <SUBGRF_WriteCommand+0x40>)
 801a09a:	f7ed fb97 	bl	80077cc <HAL_SUBGHZ_ExecSetCmd>
 801a09e:	697b      	ldr	r3, [r7, #20]
 801a0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0a2:	693b      	ldr	r3, [r7, #16]
 801a0a4:	f383 8810 	msr	PRIMASK, r3
}
 801a0a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0aa:	bf00      	nop
 801a0ac:	3718      	adds	r7, #24
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}
 801a0b2:	bf00      	nop
 801a0b4:	200003c4 	.word	0x200003c4

0801a0b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b086      	sub	sp, #24
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	4603      	mov	r3, r0
 801a0c0:	6039      	str	r1, [r7, #0]
 801a0c2:	71fb      	strb	r3, [r7, #7]
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0c8:	f3ef 8310 	mrs	r3, PRIMASK
 801a0cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a0d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0d2:	b672      	cpsid	i
}
 801a0d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a0d6:	88bb      	ldrh	r3, [r7, #4]
 801a0d8:	79f9      	ldrb	r1, [r7, #7]
 801a0da:	683a      	ldr	r2, [r7, #0]
 801a0dc:	4806      	ldr	r0, [pc, #24]	@ (801a0f8 <SUBGRF_ReadCommand+0x40>)
 801a0de:	f7ed fbd4 	bl	800788a <HAL_SUBGHZ_ExecGetCmd>
 801a0e2:	697b      	ldr	r3, [r7, #20]
 801a0e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	f383 8810 	msr	PRIMASK, r3
}
 801a0ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0ee:	bf00      	nop
 801a0f0:	3718      	adds	r7, #24
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}
 801a0f6:	bf00      	nop
 801a0f8:	200003c4 	.word	0x200003c4

0801a0fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	4603      	mov	r3, r0
 801a104:	460a      	mov	r2, r1
 801a106:	71fb      	strb	r3, [r7, #7]
 801a108:	4613      	mov	r3, r2
 801a10a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a10c:	2301      	movs	r3, #1
 801a10e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a110:	79bb      	ldrb	r3, [r7, #6]
 801a112:	2b01      	cmp	r3, #1
 801a114:	d10d      	bne.n	801a132 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a116:	79fb      	ldrb	r3, [r7, #7]
 801a118:	2b01      	cmp	r3, #1
 801a11a:	d104      	bne.n	801a126 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a11c:	2302      	movs	r3, #2
 801a11e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a120:	2004      	movs	r0, #4
 801a122:	f000 f8df 	bl	801a2e4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a126:	79fb      	ldrb	r3, [r7, #7]
 801a128:	2b02      	cmp	r3, #2
 801a12a:	d107      	bne.n	801a13c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a12c:	2303      	movs	r3, #3
 801a12e:	73fb      	strb	r3, [r7, #15]
 801a130:	e004      	b.n	801a13c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a132:	79bb      	ldrb	r3, [r7, #6]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d101      	bne.n	801a13c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a138:	2301      	movs	r3, #1
 801a13a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a13c:	7bfb      	ldrb	r3, [r7, #15]
 801a13e:	4618      	mov	r0, r3
 801a140:	f7f0 fd6b 	bl	800ac1a <RBI_ConfigRFSwitch>
}
 801a144:	bf00      	nop
 801a146:	3710      	adds	r7, #16
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}

0801a14c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b084      	sub	sp, #16
 801a150:	af00      	add	r7, sp, #0
 801a152:	4603      	mov	r3, r0
 801a154:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a156:	2301      	movs	r3, #1
 801a158:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a15a:	f7f0 fd6c 	bl	800ac36 <RBI_GetTxConfig>
 801a15e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a160:	68bb      	ldr	r3, [r7, #8]
 801a162:	2b02      	cmp	r3, #2
 801a164:	d016      	beq.n	801a194 <SUBGRF_SetRfTxPower+0x48>
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	2b02      	cmp	r3, #2
 801a16a:	dc16      	bgt.n	801a19a <SUBGRF_SetRfTxPower+0x4e>
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d003      	beq.n	801a17a <SUBGRF_SetRfTxPower+0x2e>
 801a172:	68bb      	ldr	r3, [r7, #8]
 801a174:	2b01      	cmp	r3, #1
 801a176:	d00a      	beq.n	801a18e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a178:	e00f      	b.n	801a19a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a17e:	2b0f      	cmp	r3, #15
 801a180:	dd02      	ble.n	801a188 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a182:	2302      	movs	r3, #2
 801a184:	73fb      	strb	r3, [r7, #15]
            break;
 801a186:	e009      	b.n	801a19c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a188:	2301      	movs	r3, #1
 801a18a:	73fb      	strb	r3, [r7, #15]
            break;
 801a18c:	e006      	b.n	801a19c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a18e:	2301      	movs	r3, #1
 801a190:	73fb      	strb	r3, [r7, #15]
            break;
 801a192:	e003      	b.n	801a19c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a194:	2302      	movs	r3, #2
 801a196:	73fb      	strb	r3, [r7, #15]
            break;
 801a198:	e000      	b.n	801a19c <SUBGRF_SetRfTxPower+0x50>
            break;
 801a19a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a19c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a1a0:	7bfb      	ldrb	r3, [r7, #15]
 801a1a2:	2202      	movs	r2, #2
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7ff fbd3 	bl	8019950 <SUBGRF_SetTxParams>

    return paSelect;
 801a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3710      	adds	r7, #16
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}

0801a1b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a1b4:	b480      	push	{r7}
 801a1b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a1b8:	2301      	movs	r3, #1
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bc80      	pop	{r7}
 801a1c0:	4770      	bx	lr
	...

0801a1c4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b082      	sub	sp, #8
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a1cc:	4b03      	ldr	r3, [pc, #12]	@ (801a1dc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2001      	movs	r0, #1
 801a1d2:	4798      	blx	r3
}
 801a1d4:	bf00      	nop
 801a1d6:	3708      	adds	r7, #8
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	bd80      	pop	{r7, pc}
 801a1dc:	20001d70 	.word	0x20001d70

0801a1e0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a1e8:	4b03      	ldr	r3, [pc, #12]	@ (801a1f8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	2002      	movs	r0, #2
 801a1ee:	4798      	blx	r3
}
 801a1f0:	bf00      	nop
 801a1f2:	3708      	adds	r7, #8
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	20001d70 	.word	0x20001d70

0801a1fc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a204:	4b03      	ldr	r3, [pc, #12]	@ (801a214 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	2040      	movs	r0, #64	@ 0x40
 801a20a:	4798      	blx	r3
}
 801a20c:	bf00      	nop
 801a20e:	3708      	adds	r7, #8
 801a210:	46bd      	mov	sp, r7
 801a212:	bd80      	pop	{r7, pc}
 801a214:	20001d70 	.word	0x20001d70

0801a218 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	b082      	sub	sp, #8
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
 801a220:	460b      	mov	r3, r1
 801a222:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a224:	78fb      	ldrb	r3, [r7, #3]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d002      	beq.n	801a230 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a22a:	2b01      	cmp	r3, #1
 801a22c:	d005      	beq.n	801a23a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a22e:	e00a      	b.n	801a246 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a230:	4b07      	ldr	r3, [pc, #28]	@ (801a250 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	2080      	movs	r0, #128	@ 0x80
 801a236:	4798      	blx	r3
            break;
 801a238:	e005      	b.n	801a246 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a23a:	4b05      	ldr	r3, [pc, #20]	@ (801a250 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a242:	4798      	blx	r3
            break;
 801a244:	bf00      	nop
    }
}
 801a246:	bf00      	nop
 801a248:	3708      	adds	r7, #8
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}
 801a24e:	bf00      	nop
 801a250:	20001d70 	.word	0x20001d70

0801a254 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a25c:	4b04      	ldr	r3, [pc, #16]	@ (801a270 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a264:	4798      	blx	r3
}
 801a266:	bf00      	nop
 801a268:	3708      	adds	r7, #8
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}
 801a26e:	bf00      	nop
 801a270:	20001d70 	.word	0x20001d70

0801a274 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b082      	sub	sp, #8
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a27c:	4b03      	ldr	r3, [pc, #12]	@ (801a28c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	2020      	movs	r0, #32
 801a282:	4798      	blx	r3
}
 801a284:	bf00      	nop
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}
 801a28c:	20001d70 	.word	0x20001d70

0801a290 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a298:	4b03      	ldr	r3, [pc, #12]	@ (801a2a8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	2004      	movs	r0, #4
 801a29e:	4798      	blx	r3
}
 801a2a0:	bf00      	nop
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	20001d70 	.word	0x20001d70

0801a2ac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a2b4:	4b03      	ldr	r3, [pc, #12]	@ (801a2c4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	2008      	movs	r0, #8
 801a2ba:	4798      	blx	r3
}
 801a2bc:	bf00      	nop
 801a2be:	3708      	adds	r7, #8
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}
 801a2c4:	20001d70 	.word	0x20001d70

0801a2c8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b082      	sub	sp, #8
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a2d0:	4b03      	ldr	r3, [pc, #12]	@ (801a2e0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	2010      	movs	r0, #16
 801a2d6:	4798      	blx	r3
}
 801a2d8:	bf00      	nop
 801a2da:	3708      	adds	r7, #8
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}
 801a2e0:	20001d70 	.word	0x20001d70

0801a2e4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b084      	sub	sp, #16
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a2ee:	f7f0 fcb0 	bl	800ac52 <RBI_IsDCDC>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	2b01      	cmp	r3, #1
 801a2f6:	d112      	bne.n	801a31e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a2f8:	f640 1023 	movw	r0, #2339	@ 0x923
 801a2fc:	f7ff fe1e 	bl	8019f3c <SUBGRF_ReadRegister>
 801a300:	4603      	mov	r3, r0
 801a302:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a304:	7bfb      	ldrb	r3, [r7, #15]
 801a306:	f023 0306 	bic.w	r3, r3, #6
 801a30a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a30c:	7bfa      	ldrb	r2, [r7, #15]
 801a30e:	79fb      	ldrb	r3, [r7, #7]
 801a310:	4313      	orrs	r3, r2
 801a312:	b2db      	uxtb	r3, r3
 801a314:	4619      	mov	r1, r3
 801a316:	f640 1023 	movw	r0, #2339	@ 0x923
 801a31a:	f7ff fdfb 	bl	8019f14 <SUBGRF_WriteRegister>
  }
}
 801a31e:	bf00      	nop
 801a320:	3710      	adds	r7, #16
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}
	...

0801a328 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a328:	b480      	push	{r7}
 801a32a:	b085      	sub	sp, #20
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d101      	bne.n	801a33a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a336:	231f      	movs	r3, #31
 801a338:	e017      	b.n	801a36a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a33a:	2300      	movs	r3, #0
 801a33c:	73fb      	strb	r3, [r7, #15]
 801a33e:	e00f      	b.n	801a360 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a340:	7bfb      	ldrb	r3, [r7, #15]
 801a342:	4a0c      	ldr	r2, [pc, #48]	@ (801a374 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a348:	687a      	ldr	r2, [r7, #4]
 801a34a:	429a      	cmp	r2, r3
 801a34c:	d205      	bcs.n	801a35a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a34e:	7bfb      	ldrb	r3, [r7, #15]
 801a350:	4a08      	ldr	r2, [pc, #32]	@ (801a374 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a352:	00db      	lsls	r3, r3, #3
 801a354:	4413      	add	r3, r2
 801a356:	791b      	ldrb	r3, [r3, #4]
 801a358:	e007      	b.n	801a36a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a35a:	7bfb      	ldrb	r3, [r7, #15]
 801a35c:	3301      	adds	r3, #1
 801a35e:	73fb      	strb	r3, [r7, #15]
 801a360:	7bfb      	ldrb	r3, [r7, #15]
 801a362:	2b15      	cmp	r3, #21
 801a364:	d9ec      	bls.n	801a340 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801a366:	bf00      	nop
 801a368:	e7fd      	b.n	801a366 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a36a:	4618      	mov	r0, r3
 801a36c:	3714      	adds	r7, #20
 801a36e:	46bd      	mov	sp, r7
 801a370:	bc80      	pop	{r7}
 801a372:	4770      	bx	lr
 801a374:	0801f5fc 	.word	0x0801f5fc

0801a378 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b08a      	sub	sp, #40	@ 0x28
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
 801a380:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a382:	4b35      	ldr	r3, [pc, #212]	@ (801a458 <SUBGRF_GetCFO+0xe0>)
 801a384:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a386:	f640 0007 	movw	r0, #2055	@ 0x807
 801a38a:	f7ff fdd7 	bl	8019f3c <SUBGRF_ReadRegister>
 801a38e:	4603      	mov	r3, r0
 801a390:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a392:	7ffb      	ldrb	r3, [r7, #31]
 801a394:	08db      	lsrs	r3, r3, #3
 801a396:	b2db      	uxtb	r3, r3
 801a398:	f003 0303 	and.w	r3, r3, #3
 801a39c:	3328      	adds	r3, #40	@ 0x28
 801a39e:	443b      	add	r3, r7
 801a3a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a3a4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a3a6:	7ffb      	ldrb	r3, [r7, #31]
 801a3a8:	f003 0307 	and.w	r3, r3, #7
 801a3ac:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801a3ae:	7fba      	ldrb	r2, [r7, #30]
 801a3b0:	7f7b      	ldrb	r3, [r7, #29]
 801a3b2:	3b01      	subs	r3, #1
 801a3b4:	fa02 f303 	lsl.w	r3, r2, r3
 801a3b8:	461a      	mov	r2, r3
 801a3ba:	4b28      	ldr	r3, [pc, #160]	@ (801a45c <SUBGRF_GetCFO+0xe4>)
 801a3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3c0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a3c2:	69ba      	ldr	r2, [r7, #24]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3ca:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3d6:	697a      	ldr	r2, [r7, #20]
 801a3d8:	fb02 f303 	mul.w	r3, r2, r3
 801a3dc:	2b07      	cmp	r3, #7
 801a3de:	d802      	bhi.n	801a3e6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a3e0:	2302      	movs	r3, #2
 801a3e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a3e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3ea:	697a      	ldr	r2, [r7, #20]
 801a3ec:	fb02 f303 	mul.w	r3, r2, r3
 801a3f0:	2b03      	cmp	r3, #3
 801a3f2:	d802      	bhi.n	801a3fa <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a3f4:	2304      	movs	r3, #4
 801a3f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a3fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a3fe:	69bb      	ldr	r3, [r7, #24]
 801a400:	fb02 f303 	mul.w	r3, r2, r3
 801a404:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a406:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a40a:	f7ff fd97 	bl	8019f3c <SUBGRF_ReadRegister>
 801a40e:	4603      	mov	r3, r0
 801a410:	021b      	lsls	r3, r3, #8
 801a412:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a416:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a418:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a41c:	f7ff fd8e 	bl	8019f3c <SUBGRF_ReadRegister>
 801a420:	4603      	mov	r3, r0
 801a422:	461a      	mov	r2, r3
 801a424:	6a3b      	ldr	r3, [r7, #32]
 801a426:	4313      	orrs	r3, r2
 801a428:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a42a:	6a3b      	ldr	r3, [r7, #32]
 801a42c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a430:	2b00      	cmp	r3, #0
 801a432:	d005      	beq.n	801a440 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a434:	6a3b      	ldr	r3, [r7, #32]
 801a436:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a43a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a43e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a440:	693b      	ldr	r3, [r7, #16]
 801a442:	095b      	lsrs	r3, r3, #5
 801a444:	6a3a      	ldr	r2, [r7, #32]
 801a446:	fb02 f303 	mul.w	r3, r2, r3
 801a44a:	11da      	asrs	r2, r3, #7
 801a44c:	683b      	ldr	r3, [r7, #0]
 801a44e:	601a      	str	r2, [r3, #0]
}
 801a450:	bf00      	nop
 801a452:	3728      	adds	r7, #40	@ 0x28
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	0c0a0804 	.word	0x0c0a0804
 801a45c:	01e84800 	.word	0x01e84800

0801a460 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801a460:	b480      	push	{r7}
 801a462:	b087      	sub	sp, #28
 801a464:	af00      	add	r7, sp, #0
 801a466:	4603      	mov	r3, r0
 801a468:	60b9      	str	r1, [r7, #8]
 801a46a:	607a      	str	r2, [r7, #4]
 801a46c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801a46e:	2300      	movs	r3, #0
 801a470:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801a472:	f04f 33ff 	mov.w	r3, #4294967295
 801a476:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a478:	697b      	ldr	r3, [r7, #20]
}
 801a47a:	4618      	mov	r0, r3
 801a47c:	371c      	adds	r7, #28
 801a47e:	46bd      	mov	sp, r7
 801a480:	bc80      	pop	{r7}
 801a482:	4770      	bx	lr

0801a484 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801a484:	b480      	push	{r7}
 801a486:	b087      	sub	sp, #28
 801a488:	af00      	add	r7, sp, #0
 801a48a:	4603      	mov	r3, r0
 801a48c:	60b9      	str	r1, [r7, #8]
 801a48e:	607a      	str	r2, [r7, #4]
 801a490:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801a492:	2300      	movs	r3, #0
 801a494:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801a496:	f04f 33ff 	mov.w	r3, #4294967295
 801a49a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a49c:	697b      	ldr	r3, [r7, #20]
}
 801a49e:	4618      	mov	r0, r3
 801a4a0:	371c      	adds	r7, #28
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bc80      	pop	{r7}
 801a4a6:	4770      	bx	lr

0801a4a8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801a4a8:	b480      	push	{r7}
 801a4aa:	b085      	sub	sp, #20
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	60f8      	str	r0, [r7, #12]
 801a4b0:	60b9      	str	r1, [r7, #8]
 801a4b2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801a4b4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3714      	adds	r7, #20
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bc80      	pop	{r7}
 801a4c0:	4770      	bx	lr

0801a4c2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801a4c2:	b480      	push	{r7}
 801a4c4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801a4c6:	bf00      	nop
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bc80      	pop	{r7}
 801a4cc:	4770      	bx	lr

0801a4ce <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801a4ce:	b480      	push	{r7}
 801a4d0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801a4d2:	2300      	movs	r3, #0
#endif
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bc80      	pop	{r7}
 801a4da:	4770      	bx	lr

0801a4dc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801a4e0:	2300      	movs	r3, #0
#endif
}
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bc80      	pop	{r7}
 801a4e8:	4770      	bx	lr

0801a4ea <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801a4ea:	b480      	push	{r7}
 801a4ec:	b083      	sub	sp, #12
 801a4ee:	af00      	add	r7, sp, #0
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801a4f4:	bf00      	nop
 801a4f6:	370c      	adds	r7, #12
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bc80      	pop	{r7}
 801a4fc:	4770      	bx	lr

0801a4fe <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801a4fe:	b480      	push	{r7}
 801a500:	b087      	sub	sp, #28
 801a502:	af00      	add	r7, sp, #0
 801a504:	60f8      	str	r0, [r7, #12]
 801a506:	460b      	mov	r3, r1
 801a508:	607a      	str	r2, [r7, #4]
 801a50a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801a50c:	f04f 33ff 	mov.w	r3, #4294967295
 801a510:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801a512:	697b      	ldr	r3, [r7, #20]
}
 801a514:	4618      	mov	r0, r3
 801a516:	371c      	adds	r7, #28
 801a518:	46bd      	mov	sp, r7
 801a51a:	bc80      	pop	{r7}
 801a51c:	4770      	bx	lr

0801a51e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a51e:	b480      	push	{r7}
 801a520:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801a522:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a526:	4618      	mov	r0, r3
 801a528:	46bd      	mov	sp, r7
 801a52a:	bc80      	pop	{r7}
 801a52c:	4770      	bx	lr

0801a52e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801a52e:	b480      	push	{r7}
 801a530:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801a532:	bf00      	nop
 801a534:	46bd      	mov	sp, r7
 801a536:	bc80      	pop	{r7}
 801a538:	4770      	bx	lr

0801a53a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a53a:	b480      	push	{r7}
 801a53c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801a53e:	bf00      	nop
 801a540:	46bd      	mov	sp, r7
 801a542:	bc80      	pop	{r7}
 801a544:	4770      	bx	lr

0801a546 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801a546:	b480      	push	{r7}
 801a548:	b083      	sub	sp, #12
 801a54a:	af00      	add	r7, sp, #0
 801a54c:	4603      	mov	r3, r0
 801a54e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801a550:	bf00      	nop
 801a552:	370c      	adds	r7, #12
 801a554:	46bd      	mov	sp, r7
 801a556:	bc80      	pop	{r7}
 801a558:	4770      	bx	lr
	...

0801a55c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a55c:	b480      	push	{r7}
 801a55e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a560:	4b04      	ldr	r3, [pc, #16]	@ (801a574 <UTIL_LPM_Init+0x18>)
 801a562:	2200      	movs	r2, #0
 801a564:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a566:	4b04      	ldr	r3, [pc, #16]	@ (801a578 <UTIL_LPM_Init+0x1c>)
 801a568:	2200      	movs	r2, #0
 801a56a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a56c:	bf00      	nop
 801a56e:	46bd      	mov	sp, r7
 801a570:	bc80      	pop	{r7}
 801a572:	4770      	bx	lr
 801a574:	20001d74 	.word	0x20001d74
 801a578:	20001d78 	.word	0x20001d78

0801a57c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a57c:	b480      	push	{r7}
 801a57e:	b087      	sub	sp, #28
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	460b      	mov	r3, r1
 801a586:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a588:	f3ef 8310 	mrs	r3, PRIMASK
 801a58c:	613b      	str	r3, [r7, #16]
  return(result);
 801a58e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a592:	b672      	cpsid	i
}
 801a594:	bf00      	nop
  
  switch( state )
 801a596:	78fb      	ldrb	r3, [r7, #3]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d008      	beq.n	801a5ae <UTIL_LPM_SetStopMode+0x32>
 801a59c:	2b01      	cmp	r3, #1
 801a59e:	d10e      	bne.n	801a5be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a5a0:	4b0d      	ldr	r3, [pc, #52]	@ (801a5d8 <UTIL_LPM_SetStopMode+0x5c>)
 801a5a2:	681a      	ldr	r2, [r3, #0]
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	4313      	orrs	r3, r2
 801a5a8:	4a0b      	ldr	r2, [pc, #44]	@ (801a5d8 <UTIL_LPM_SetStopMode+0x5c>)
 801a5aa:	6013      	str	r3, [r2, #0]
      break;
 801a5ac:	e008      	b.n	801a5c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	43da      	mvns	r2, r3
 801a5b2:	4b09      	ldr	r3, [pc, #36]	@ (801a5d8 <UTIL_LPM_SetStopMode+0x5c>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4013      	ands	r3, r2
 801a5b8:	4a07      	ldr	r2, [pc, #28]	@ (801a5d8 <UTIL_LPM_SetStopMode+0x5c>)
 801a5ba:	6013      	str	r3, [r2, #0]
      break;
 801a5bc:	e000      	b.n	801a5c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a5be:	bf00      	nop
 801a5c0:	697b      	ldr	r3, [r7, #20]
 801a5c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	f383 8810 	msr	PRIMASK, r3
}
 801a5ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a5cc:	bf00      	nop
 801a5ce:	371c      	adds	r7, #28
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bc80      	pop	{r7}
 801a5d4:	4770      	bx	lr
 801a5d6:	bf00      	nop
 801a5d8:	20001d74 	.word	0x20001d74

0801a5dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a5dc:	b480      	push	{r7}
 801a5de:	b087      	sub	sp, #28
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	460b      	mov	r3, r1
 801a5e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5e8:	f3ef 8310 	mrs	r3, PRIMASK
 801a5ec:	613b      	str	r3, [r7, #16]
  return(result);
 801a5ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a5f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5f2:	b672      	cpsid	i
}
 801a5f4:	bf00      	nop
  
  switch(state)
 801a5f6:	78fb      	ldrb	r3, [r7, #3]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d008      	beq.n	801a60e <UTIL_LPM_SetOffMode+0x32>
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d10e      	bne.n	801a61e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a600:	4b0d      	ldr	r3, [pc, #52]	@ (801a638 <UTIL_LPM_SetOffMode+0x5c>)
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	4313      	orrs	r3, r2
 801a608:	4a0b      	ldr	r2, [pc, #44]	@ (801a638 <UTIL_LPM_SetOffMode+0x5c>)
 801a60a:	6013      	str	r3, [r2, #0]
      break;
 801a60c:	e008      	b.n	801a620 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	43da      	mvns	r2, r3
 801a612:	4b09      	ldr	r3, [pc, #36]	@ (801a638 <UTIL_LPM_SetOffMode+0x5c>)
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	4013      	ands	r3, r2
 801a618:	4a07      	ldr	r2, [pc, #28]	@ (801a638 <UTIL_LPM_SetOffMode+0x5c>)
 801a61a:	6013      	str	r3, [r2, #0]
      break;
 801a61c:	e000      	b.n	801a620 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a61e:	bf00      	nop
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	f383 8810 	msr	PRIMASK, r3
}
 801a62a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a62c:	bf00      	nop
 801a62e:	371c      	adds	r7, #28
 801a630:	46bd      	mov	sp, r7
 801a632:	bc80      	pop	{r7}
 801a634:	4770      	bx	lr
 801a636:	bf00      	nop
 801a638:	20001d78 	.word	0x20001d78

0801a63c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b084      	sub	sp, #16
 801a640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a642:	f3ef 8310 	mrs	r3, PRIMASK
 801a646:	60bb      	str	r3, [r7, #8]
  return(result);
 801a648:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a64a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a64c:	b672      	cpsid	i
}
 801a64e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a650:	4b12      	ldr	r3, [pc, #72]	@ (801a69c <UTIL_LPM_EnterLowPower+0x60>)
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d006      	beq.n	801a666 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a658:	4b11      	ldr	r3, [pc, #68]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a65e:	4b10      	ldr	r3, [pc, #64]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a660:	685b      	ldr	r3, [r3, #4]
 801a662:	4798      	blx	r3
 801a664:	e010      	b.n	801a688 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a666:	4b0f      	ldr	r3, [pc, #60]	@ (801a6a4 <UTIL_LPM_EnterLowPower+0x68>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d006      	beq.n	801a67c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a66e:	4b0c      	ldr	r3, [pc, #48]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a670:	689b      	ldr	r3, [r3, #8]
 801a672:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a674:	4b0a      	ldr	r3, [pc, #40]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a676:	68db      	ldr	r3, [r3, #12]
 801a678:	4798      	blx	r3
 801a67a:	e005      	b.n	801a688 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a67c:	4b08      	ldr	r3, [pc, #32]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a67e:	691b      	ldr	r3, [r3, #16]
 801a680:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a682:	4b07      	ldr	r3, [pc, #28]	@ (801a6a0 <UTIL_LPM_EnterLowPower+0x64>)
 801a684:	695b      	ldr	r3, [r3, #20]
 801a686:	4798      	blx	r3
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	f383 8810 	msr	PRIMASK, r3
}
 801a692:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a694:	bf00      	nop
 801a696:	3710      	adds	r7, #16
 801a698:	46bd      	mov	sp, r7
 801a69a:	bd80      	pop	{r7, pc}
 801a69c:	20001d74 	.word	0x20001d74
 801a6a0:	0801f074 	.word	0x0801f074
 801a6a4:	20001d78 	.word	0x20001d78

0801a6a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b087      	sub	sp, #28
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	60b9      	str	r1, [r7, #8]
 801a6b2:	4613      	mov	r3, r2
 801a6b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a6be:	e007      	b.n	801a6d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a6c0:	693a      	ldr	r2, [r7, #16]
 801a6c2:	1c53      	adds	r3, r2, #1
 801a6c4:	613b      	str	r3, [r7, #16]
 801a6c6:	697b      	ldr	r3, [r7, #20]
 801a6c8:	1c59      	adds	r1, r3, #1
 801a6ca:	6179      	str	r1, [r7, #20]
 801a6cc:	7812      	ldrb	r2, [r2, #0]
 801a6ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a6d0:	88fb      	ldrh	r3, [r7, #6]
 801a6d2:	1e5a      	subs	r2, r3, #1
 801a6d4:	80fa      	strh	r2, [r7, #6]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d1f2      	bne.n	801a6c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a6da:	bf00      	nop
 801a6dc:	bf00      	nop
 801a6de:	371c      	adds	r7, #28
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bc80      	pop	{r7}
 801a6e4:	4770      	bx	lr

0801a6e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a6e6:	b480      	push	{r7}
 801a6e8:	b085      	sub	sp, #20
 801a6ea:	af00      	add	r7, sp, #0
 801a6ec:	6078      	str	r0, [r7, #4]
 801a6ee:	460b      	mov	r3, r1
 801a6f0:	70fb      	strb	r3, [r7, #3]
 801a6f2:	4613      	mov	r3, r2
 801a6f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a6fa:	e004      	b.n	801a706 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	1c5a      	adds	r2, r3, #1
 801a700:	60fa      	str	r2, [r7, #12]
 801a702:	78fa      	ldrb	r2, [r7, #3]
 801a704:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a706:	883b      	ldrh	r3, [r7, #0]
 801a708:	1e5a      	subs	r2, r3, #1
 801a70a:	803a      	strh	r2, [r7, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d1f5      	bne.n	801a6fc <UTIL_MEM_set_8+0x16>
  }
}
 801a710:	bf00      	nop
 801a712:	bf00      	nop
 801a714:	3714      	adds	r7, #20
 801a716:	46bd      	mov	sp, r7
 801a718:	bc80      	pop	{r7}
 801a71a:	4770      	bx	lr

0801a71c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a71c:	b082      	sub	sp, #8
 801a71e:	b480      	push	{r7}
 801a720:	b087      	sub	sp, #28
 801a722:	af00      	add	r7, sp, #0
 801a724:	60f8      	str	r0, [r7, #12]
 801a726:	1d38      	adds	r0, r7, #4
 801a728:	e880 0006 	stmia.w	r0, {r1, r2}
 801a72c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a72e:	2300      	movs	r3, #0
 801a730:	613b      	str	r3, [r7, #16]
 801a732:	2300      	movs	r3, #0
 801a734:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a736:	687a      	ldr	r2, [r7, #4]
 801a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a73a:	4413      	add	r3, r2
 801a73c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a73e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a742:	b29a      	uxth	r2, r3
 801a744:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a748:	b29b      	uxth	r3, r3
 801a74a:	4413      	add	r3, r2
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	b21b      	sxth	r3, r3
 801a750:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a752:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a75a:	db0a      	blt.n	801a772 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a75c:	693b      	ldr	r3, [r7, #16]
 801a75e:	3301      	adds	r3, #1
 801a760:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a762:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a766:	b29b      	uxth	r3, r3
 801a768:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	b21b      	sxth	r3, r3
 801a770:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	461a      	mov	r2, r3
 801a776:	f107 0310 	add.w	r3, r7, #16
 801a77a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a77e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a782:	68f8      	ldr	r0, [r7, #12]
 801a784:	371c      	adds	r7, #28
 801a786:	46bd      	mov	sp, r7
 801a788:	bc80      	pop	{r7}
 801a78a:	b002      	add	sp, #8
 801a78c:	4770      	bx	lr

0801a78e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a78e:	b082      	sub	sp, #8
 801a790:	b480      	push	{r7}
 801a792:	b087      	sub	sp, #28
 801a794:	af00      	add	r7, sp, #0
 801a796:	60f8      	str	r0, [r7, #12]
 801a798:	1d38      	adds	r0, r7, #4
 801a79a:	e880 0006 	stmia.w	r0, {r1, r2}
 801a79e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	613b      	str	r3, [r7, #16]
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a7a8:	687a      	ldr	r2, [r7, #4]
 801a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ac:	1ad3      	subs	r3, r2, r3
 801a7ae:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a7b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a7b4:	b29a      	uxth	r2, r3
 801a7b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	b29b      	uxth	r3, r3
 801a7c0:	b21b      	sxth	r3, r3
 801a7c2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a7c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	da0a      	bge.n	801a7e2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a7cc:	693b      	ldr	r3, [r7, #16]
 801a7ce:	3b01      	subs	r3, #1
 801a7d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a7d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a7dc:	b29b      	uxth	r3, r3
 801a7de:	b21b      	sxth	r3, r3
 801a7e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	461a      	mov	r2, r3
 801a7e6:	f107 0310 	add.w	r3, r7, #16
 801a7ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a7ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a7f2:	68f8      	ldr	r0, [r7, #12]
 801a7f4:	371c      	adds	r7, #28
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bc80      	pop	{r7}
 801a7fa:	b002      	add	sp, #8
 801a7fc:	4770      	bx	lr
	...

0801a800 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b088      	sub	sp, #32
 801a804:	af02      	add	r7, sp, #8
 801a806:	463b      	mov	r3, r7
 801a808:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a80c:	2300      	movs	r3, #0
 801a80e:	60bb      	str	r3, [r7, #8]
 801a810:	2300      	movs	r3, #0
 801a812:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a814:	4b10      	ldr	r3, [pc, #64]	@ (801a858 <SysTimeSet+0x58>)
 801a816:	691b      	ldr	r3, [r3, #16]
 801a818:	f107 0208 	add.w	r2, r7, #8
 801a81c:	3204      	adds	r2, #4
 801a81e:	4610      	mov	r0, r2
 801a820:	4798      	blx	r3
 801a822:	4603      	mov	r3, r0
 801a824:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a826:	f107 0010 	add.w	r0, r7, #16
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	9300      	str	r3, [sp, #0]
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	463a      	mov	r2, r7
 801a832:	ca06      	ldmia	r2, {r1, r2}
 801a834:	f7ff ffab 	bl	801a78e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a838:	4b07      	ldr	r3, [pc, #28]	@ (801a858 <SysTimeSet+0x58>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	693a      	ldr	r2, [r7, #16]
 801a83e:	4610      	mov	r0, r2
 801a840:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a842:	4b05      	ldr	r3, [pc, #20]	@ (801a858 <SysTimeSet+0x58>)
 801a844:	689b      	ldr	r3, [r3, #8]
 801a846:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a84a:	4610      	mov	r0, r2
 801a84c:	4798      	blx	r3
}
 801a84e:	bf00      	nop
 801a850:	3718      	adds	r7, #24
 801a852:	46bd      	mov	sp, r7
 801a854:	bd80      	pop	{r7, pc}
 801a856:	bf00      	nop
 801a858:	0801f158 	.word	0x0801f158

0801a85c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b08a      	sub	sp, #40	@ 0x28
 801a860:	af02      	add	r7, sp, #8
 801a862:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a864:	2300      	movs	r3, #0
 801a866:	61bb      	str	r3, [r7, #24]
 801a868:	2300      	movs	r3, #0
 801a86a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a86c:	2300      	movs	r3, #0
 801a86e:	613b      	str	r3, [r7, #16]
 801a870:	2300      	movs	r3, #0
 801a872:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a874:	4b14      	ldr	r3, [pc, #80]	@ (801a8c8 <SysTimeGet+0x6c>)
 801a876:	691b      	ldr	r3, [r3, #16]
 801a878:	f107 0218 	add.w	r2, r7, #24
 801a87c:	3204      	adds	r2, #4
 801a87e:	4610      	mov	r0, r2
 801a880:	4798      	blx	r3
 801a882:	4603      	mov	r3, r0
 801a884:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a886:	4b10      	ldr	r3, [pc, #64]	@ (801a8c8 <SysTimeGet+0x6c>)
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	4798      	blx	r3
 801a88c:	4603      	mov	r3, r0
 801a88e:	b21b      	sxth	r3, r3
 801a890:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a892:	4b0d      	ldr	r3, [pc, #52]	@ (801a8c8 <SysTimeGet+0x6c>)
 801a894:	685b      	ldr	r3, [r3, #4]
 801a896:	4798      	blx	r3
 801a898:	4603      	mov	r3, r0
 801a89a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a89c:	f107 0010 	add.w	r0, r7, #16
 801a8a0:	69fb      	ldr	r3, [r7, #28]
 801a8a2:	9300      	str	r3, [sp, #0]
 801a8a4:	69bb      	ldr	r3, [r7, #24]
 801a8a6:	f107 0208 	add.w	r2, r7, #8
 801a8aa:	ca06      	ldmia	r2, {r1, r2}
 801a8ac:	f7ff ff36 	bl	801a71c <SysTimeAdd>

  return sysTime;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	461a      	mov	r2, r3
 801a8b4:	f107 0310 	add.w	r3, r7, #16
 801a8b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	3720      	adds	r7, #32
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}
 801a8c8:	0801f158 	.word	0x0801f158

0801a8cc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b084      	sub	sp, #16
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	60bb      	str	r3, [r7, #8]
 801a8d8:	2300      	movs	r3, #0
 801a8da:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a8dc:	4b0a      	ldr	r3, [pc, #40]	@ (801a908 <SysTimeGetMcuTime+0x3c>)
 801a8de:	691b      	ldr	r3, [r3, #16]
 801a8e0:	f107 0208 	add.w	r2, r7, #8
 801a8e4:	3204      	adds	r2, #4
 801a8e6:	4610      	mov	r0, r2
 801a8e8:	4798      	blx	r3
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	461a      	mov	r2, r3
 801a8f2:	f107 0308 	add.w	r3, r7, #8
 801a8f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a8fe:	6878      	ldr	r0, [r7, #4]
 801a900:	3710      	adds	r7, #16
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
 801a906:	bf00      	nop
 801a908:	0801f158 	.word	0x0801f158

0801a90c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b088      	sub	sp, #32
 801a910:	af02      	add	r7, sp, #8
 801a912:	463b      	mov	r3, r7
 801a914:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a918:	4b0f      	ldr	r3, [pc, #60]	@ (801a958 <SysTimeToMs+0x4c>)
 801a91a:	68db      	ldr	r3, [r3, #12]
 801a91c:	4798      	blx	r3
 801a91e:	4603      	mov	r3, r0
 801a920:	b21b      	sxth	r3, r3
 801a922:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a924:	4b0c      	ldr	r3, [pc, #48]	@ (801a958 <SysTimeToMs+0x4c>)
 801a926:	685b      	ldr	r3, [r3, #4]
 801a928:	4798      	blx	r3
 801a92a:	4603      	mov	r3, r0
 801a92c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a92e:	f107 0008 	add.w	r0, r7, #8
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	9300      	str	r3, [sp, #0]
 801a936:	693b      	ldr	r3, [r7, #16]
 801a938:	463a      	mov	r2, r7
 801a93a:	ca06      	ldmia	r2, {r1, r2}
 801a93c:	f7ff ff27 	bl	801a78e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a946:	fb02 f303 	mul.w	r3, r2, r3
 801a94a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a94e:	4413      	add	r3, r2
}
 801a950:	4618      	mov	r0, r3
 801a952:	3718      	adds	r7, #24
 801a954:	46bd      	mov	sp, r7
 801a956:	bd80      	pop	{r7, pc}
 801a958:	0801f158 	.word	0x0801f158

0801a95c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b08a      	sub	sp, #40	@ 0x28
 801a960:	af02      	add	r7, sp, #8
 801a962:	6078      	str	r0, [r7, #4]
 801a964:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a966:	683b      	ldr	r3, [r7, #0]
 801a968:	4a19      	ldr	r2, [pc, #100]	@ (801a9d0 <SysTimeFromMs+0x74>)
 801a96a:	fba2 2303 	umull	r2, r3, r2, r3
 801a96e:	099b      	lsrs	r3, r3, #6
 801a970:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	617b      	str	r3, [r7, #20]
 801a976:	683b      	ldr	r3, [r7, #0]
 801a978:	b29a      	uxth	r2, r3
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	b29b      	uxth	r3, r3
 801a97e:	4619      	mov	r1, r3
 801a980:	0149      	lsls	r1, r1, #5
 801a982:	1ac9      	subs	r1, r1, r3
 801a984:	0089      	lsls	r1, r1, #2
 801a986:	440b      	add	r3, r1
 801a988:	00db      	lsls	r3, r3, #3
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	1ad3      	subs	r3, r2, r3
 801a98e:	b29b      	uxth	r3, r3
 801a990:	b21b      	sxth	r3, r3
 801a992:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a994:	f107 030c 	add.w	r3, r7, #12
 801a998:	2200      	movs	r2, #0
 801a99a:	601a      	str	r2, [r3, #0]
 801a99c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a99e:	4b0d      	ldr	r3, [pc, #52]	@ (801a9d4 <SysTimeFromMs+0x78>)
 801a9a0:	68db      	ldr	r3, [r3, #12]
 801a9a2:	4798      	blx	r3
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	b21b      	sxth	r3, r3
 801a9a8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a9aa:	4b0a      	ldr	r3, [pc, #40]	@ (801a9d4 <SysTimeFromMs+0x78>)
 801a9ac:	685b      	ldr	r3, [r3, #4]
 801a9ae:	4798      	blx	r3
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a9b4:	6878      	ldr	r0, [r7, #4]
 801a9b6:	693b      	ldr	r3, [r7, #16]
 801a9b8:	9300      	str	r3, [sp, #0]
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	f107 0214 	add.w	r2, r7, #20
 801a9c0:	ca06      	ldmia	r2, {r1, r2}
 801a9c2:	f7ff feab 	bl	801a71c <SysTimeAdd>
}
 801a9c6:	6878      	ldr	r0, [r7, #4]
 801a9c8:	3720      	adds	r7, #32
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}
 801a9ce:	bf00      	nop
 801a9d0:	10624dd3 	.word	0x10624dd3
 801a9d4:	0801f158 	.word	0x0801f158

0801a9d8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a9d8:	b480      	push	{r7}
 801a9da:	b085      	sub	sp, #20
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a9e4:	e00e      	b.n	801aa04 <ee_skip_atoi+0x2c>
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	4613      	mov	r3, r2
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	4413      	add	r3, r2
 801a9ee:	005b      	lsls	r3, r3, #1
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	1c59      	adds	r1, r3, #1
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	6011      	str	r1, [r2, #0]
 801a9fc:	781b      	ldrb	r3, [r3, #0]
 801a9fe:	4403      	add	r3, r0
 801aa00:	3b30      	subs	r3, #48	@ 0x30
 801aa02:	60fb      	str	r3, [r7, #12]
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa0c:	d904      	bls.n	801aa18 <ee_skip_atoi+0x40>
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	781b      	ldrb	r3, [r3, #0]
 801aa14:	2b39      	cmp	r3, #57	@ 0x39
 801aa16:	d9e6      	bls.n	801a9e6 <ee_skip_atoi+0xe>
  return i;
 801aa18:	68fb      	ldr	r3, [r7, #12]
}
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	3714      	adds	r7, #20
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bc80      	pop	{r7}
 801aa22:	4770      	bx	lr

0801aa24 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801aa24:	b480      	push	{r7}
 801aa26:	b099      	sub	sp, #100	@ 0x64
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	60f8      	str	r0, [r7, #12]
 801aa2c:	60b9      	str	r1, [r7, #8]
 801aa2e:	607a      	str	r2, [r7, #4]
 801aa30:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801aa32:	4b71      	ldr	r3, [pc, #452]	@ (801abf8 <ee_number+0x1d4>)
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801aa38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d002      	beq.n	801aa48 <ee_number+0x24>
 801aa42:	4b6e      	ldr	r3, [pc, #440]	@ (801abfc <ee_number+0x1d8>)
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	2b01      	cmp	r3, #1
 801aa4c:	dd02      	ble.n	801aa54 <ee_number+0x30>
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	2b24      	cmp	r3, #36	@ 0x24
 801aa52:	dd01      	ble.n	801aa58 <ee_number+0x34>
 801aa54:	2300      	movs	r3, #0
 801aa56:	e0ca      	b.n	801abee <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801aa58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa5a:	f003 0301 	and.w	r3, r3, #1
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d001      	beq.n	801aa66 <ee_number+0x42>
 801aa62:	2330      	movs	r3, #48	@ 0x30
 801aa64:	e000      	b.n	801aa68 <ee_number+0x44>
 801aa66:	2320      	movs	r3, #32
 801aa68:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801aa72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa74:	f003 0302 	and.w	r3, r3, #2
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d00b      	beq.n	801aa94 <ee_number+0x70>
  {
    if (num < 0)
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	da08      	bge.n	801aa94 <ee_number+0x70>
    {
      sign = '-';
 801aa82:	232d      	movs	r3, #45	@ 0x2d
 801aa84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	425b      	negs	r3, r3
 801aa8c:	607b      	str	r3, [r7, #4]
      size--;
 801aa8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa90:	3b01      	subs	r3, #1
 801aa92:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801aa94:	2300      	movs	r3, #0
 801aa96:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d11e      	bne.n	801aadc <ee_number+0xb8>
    tmp[i++] = '0';
 801aa9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aaa0:	1c5a      	adds	r2, r3, #1
 801aaa2:	657a      	str	r2, [r7, #84]	@ 0x54
 801aaa4:	3360      	adds	r3, #96	@ 0x60
 801aaa6:	443b      	add	r3, r7
 801aaa8:	2230      	movs	r2, #48	@ 0x30
 801aaaa:	f803 2c50 	strb.w	r2, [r3, #-80]
 801aaae:	e018      	b.n	801aae2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	683a      	ldr	r2, [r7, #0]
 801aab4:	fbb3 f1f2 	udiv	r1, r3, r2
 801aab8:	fb01 f202 	mul.w	r2, r1, r2
 801aabc:	1a9b      	subs	r3, r3, r2
 801aabe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aac0:	441a      	add	r2, r3
 801aac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aac4:	1c59      	adds	r1, r3, #1
 801aac6:	6579      	str	r1, [r7, #84]	@ 0x54
 801aac8:	7812      	ldrb	r2, [r2, #0]
 801aaca:	3360      	adds	r3, #96	@ 0x60
 801aacc:	443b      	add	r3, r7
 801aace:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801aad2:	687a      	ldr	r2, [r7, #4]
 801aad4:	683b      	ldr	r3, [r7, #0]
 801aad6:	fbb2 f3f3 	udiv	r3, r2, r3
 801aada:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d1e6      	bne.n	801aab0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801aae2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aae6:	429a      	cmp	r2, r3
 801aae8:	dd01      	ble.n	801aaee <ee_number+0xca>
 801aaea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aaec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801aaee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801aaf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aaf2:	1ad3      	subs	r3, r2, r3
 801aaf4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801aaf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d112      	bne.n	801ab26 <ee_number+0x102>
 801ab00:	e00c      	b.n	801ab1c <ee_number+0xf8>
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	1c5a      	adds	r2, r3, #1
 801ab06:	60fa      	str	r2, [r7, #12]
 801ab08:	2220      	movs	r2, #32
 801ab0a:	701a      	strb	r2, [r3, #0]
 801ab0c:	68bb      	ldr	r3, [r7, #8]
 801ab0e:	3b01      	subs	r3, #1
 801ab10:	60bb      	str	r3, [r7, #8]
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d101      	bne.n	801ab1c <ee_number+0xf8>
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	e068      	b.n	801abee <ee_number+0x1ca>
 801ab1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab1e:	1e5a      	subs	r2, r3, #1
 801ab20:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	dced      	bgt.n	801ab02 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ab26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d01b      	beq.n	801ab66 <ee_number+0x142>
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	1c5a      	adds	r2, r3, #1
 801ab32:	60fa      	str	r2, [r7, #12]
 801ab34:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801ab38:	701a      	strb	r2, [r3, #0]
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	3b01      	subs	r3, #1
 801ab3e:	60bb      	str	r3, [r7, #8]
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d10f      	bne.n	801ab66 <ee_number+0x142>
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	e051      	b.n	801abee <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	1c5a      	adds	r2, r3, #1
 801ab4e:	60fa      	str	r2, [r7, #12]
 801ab50:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ab54:	701a      	strb	r2, [r3, #0]
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	3b01      	subs	r3, #1
 801ab5a:	60bb      	str	r3, [r7, #8]
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d101      	bne.n	801ab66 <ee_number+0x142>
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	e043      	b.n	801abee <ee_number+0x1ca>
 801ab66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab68:	1e5a      	subs	r2, r3, #1
 801ab6a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	dcec      	bgt.n	801ab4a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ab70:	e00c      	b.n	801ab8c <ee_number+0x168>
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	1c5a      	adds	r2, r3, #1
 801ab76:	60fa      	str	r2, [r7, #12]
 801ab78:	2230      	movs	r2, #48	@ 0x30
 801ab7a:	701a      	strb	r2, [r3, #0]
 801ab7c:	68bb      	ldr	r3, [r7, #8]
 801ab7e:	3b01      	subs	r3, #1
 801ab80:	60bb      	str	r3, [r7, #8]
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d101      	bne.n	801ab8c <ee_number+0x168>
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	e030      	b.n	801abee <ee_number+0x1ca>
 801ab8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ab8e:	1e5a      	subs	r2, r3, #1
 801ab90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ab92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ab94:	429a      	cmp	r2, r3
 801ab96:	dbec      	blt.n	801ab72 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ab98:	e010      	b.n	801abbc <ee_number+0x198>
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	60fa      	str	r2, [r7, #12]
 801aba0:	f107 0110 	add.w	r1, r7, #16
 801aba4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aba6:	440a      	add	r2, r1
 801aba8:	7812      	ldrb	r2, [r2, #0]
 801abaa:	701a      	strb	r2, [r3, #0]
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	3b01      	subs	r3, #1
 801abb0:	60bb      	str	r3, [r7, #8]
 801abb2:	68bb      	ldr	r3, [r7, #8]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d101      	bne.n	801abbc <ee_number+0x198>
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	e018      	b.n	801abee <ee_number+0x1ca>
 801abbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abbe:	1e5a      	subs	r2, r3, #1
 801abc0:	657a      	str	r2, [r7, #84]	@ 0x54
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	dce9      	bgt.n	801ab9a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801abc6:	e00c      	b.n	801abe2 <ee_number+0x1be>
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	1c5a      	adds	r2, r3, #1
 801abcc:	60fa      	str	r2, [r7, #12]
 801abce:	2220      	movs	r2, #32
 801abd0:	701a      	strb	r2, [r3, #0]
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	3b01      	subs	r3, #1
 801abd6:	60bb      	str	r3, [r7, #8]
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d101      	bne.n	801abe2 <ee_number+0x1be>
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	e005      	b.n	801abee <ee_number+0x1ca>
 801abe2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801abe4:	1e5a      	subs	r2, r3, #1
 801abe6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801abe8:	2b00      	cmp	r3, #0
 801abea:	dced      	bgt.n	801abc8 <ee_number+0x1a4>

  return str;
 801abec:	68fb      	ldr	r3, [r7, #12]
}
 801abee:	4618      	mov	r0, r3
 801abf0:	3764      	adds	r7, #100	@ 0x64
 801abf2:	46bd      	mov	sp, r7
 801abf4:	bc80      	pop	{r7}
 801abf6:	4770      	bx	lr
 801abf8:	20000130 	.word	0x20000130
 801abfc:	20000134 	.word	0x20000134

0801ac00 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b092      	sub	sp, #72	@ 0x48
 801ac04:	af04      	add	r7, sp, #16
 801ac06:	60f8      	str	r0, [r7, #12]
 801ac08:	60b9      	str	r1, [r7, #8]
 801ac0a:	607a      	str	r2, [r7, #4]
 801ac0c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ac0e:	68bb      	ldr	r3, [r7, #8]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	dc01      	bgt.n	801ac18 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801ac14:	2300      	movs	r3, #0
 801ac16:	e13e      	b.n	801ae96 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ac1c:	e128      	b.n	801ae70 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801ac1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	1ad2      	subs	r2, r2, r3
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	3b01      	subs	r3, #1
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	f280 812e 	bge.w	801ae8a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	781b      	ldrb	r3, [r3, #0]
 801ac32:	2b25      	cmp	r3, #37	@ 0x25
 801ac34:	d006      	beq.n	801ac44 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac3a:	1c59      	adds	r1, r3, #1
 801ac3c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ac3e:	7812      	ldrb	r2, [r2, #0]
 801ac40:	701a      	strb	r2, [r3, #0]
      continue;
 801ac42:	e112      	b.n	801ae6a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	3301      	adds	r3, #1
 801ac4c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	781b      	ldrb	r3, [r3, #0]
 801ac52:	2b30      	cmp	r3, #48	@ 0x30
 801ac54:	d103      	bne.n	801ac5e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ac56:	6a3b      	ldr	r3, [r7, #32]
 801ac58:	f043 0301 	orr.w	r3, r3, #1
 801ac5c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ac5e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac62:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	781b      	ldrb	r3, [r3, #0]
 801ac68:	2b2f      	cmp	r3, #47	@ 0x2f
 801ac6a:	d908      	bls.n	801ac7e <tiny_vsnprintf_like+0x7e>
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b39      	cmp	r3, #57	@ 0x39
 801ac72:	d804      	bhi.n	801ac7e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ac74:	1d3b      	adds	r3, r7, #4
 801ac76:	4618      	mov	r0, r3
 801ac78:	f7ff feae 	bl	801a9d8 <ee_skip_atoi>
 801ac7c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ac7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac82:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ac84:	f04f 33ff 	mov.w	r3, #4294967295
 801ac88:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ac8a:	230a      	movs	r3, #10
 801ac8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	781b      	ldrb	r3, [r3, #0]
 801ac92:	3b58      	subs	r3, #88	@ 0x58
 801ac94:	2b20      	cmp	r3, #32
 801ac96:	f200 8094 	bhi.w	801adc2 <tiny_vsnprintf_like+0x1c2>
 801ac9a:	a201      	add	r2, pc, #4	@ (adr r2, 801aca0 <tiny_vsnprintf_like+0xa0>)
 801ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aca0:	0801adab 	.word	0x0801adab
 801aca4:	0801adc3 	.word	0x0801adc3
 801aca8:	0801adc3 	.word	0x0801adc3
 801acac:	0801adc3 	.word	0x0801adc3
 801acb0:	0801adc3 	.word	0x0801adc3
 801acb4:	0801adc3 	.word	0x0801adc3
 801acb8:	0801adc3 	.word	0x0801adc3
 801acbc:	0801adc3 	.word	0x0801adc3
 801acc0:	0801adc3 	.word	0x0801adc3
 801acc4:	0801adc3 	.word	0x0801adc3
 801acc8:	0801adc3 	.word	0x0801adc3
 801accc:	0801ad2f 	.word	0x0801ad2f
 801acd0:	0801adb9 	.word	0x0801adb9
 801acd4:	0801adc3 	.word	0x0801adc3
 801acd8:	0801adc3 	.word	0x0801adc3
 801acdc:	0801adc3 	.word	0x0801adc3
 801ace0:	0801adc3 	.word	0x0801adc3
 801ace4:	0801adb9 	.word	0x0801adb9
 801ace8:	0801adc3 	.word	0x0801adc3
 801acec:	0801adc3 	.word	0x0801adc3
 801acf0:	0801adc3 	.word	0x0801adc3
 801acf4:	0801adc3 	.word	0x0801adc3
 801acf8:	0801adc3 	.word	0x0801adc3
 801acfc:	0801adc3 	.word	0x0801adc3
 801ad00:	0801adc3 	.word	0x0801adc3
 801ad04:	0801adc3 	.word	0x0801adc3
 801ad08:	0801adc3 	.word	0x0801adc3
 801ad0c:	0801ad4f 	.word	0x0801ad4f
 801ad10:	0801adc3 	.word	0x0801adc3
 801ad14:	0801ae0f 	.word	0x0801ae0f
 801ad18:	0801adc3 	.word	0x0801adc3
 801ad1c:	0801adc3 	.word	0x0801adc3
 801ad20:	0801adb3 	.word	0x0801adb3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ad24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad26:	1c5a      	adds	r2, r3, #1
 801ad28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad2a:	2220      	movs	r2, #32
 801ad2c:	701a      	strb	r2, [r3, #0]
 801ad2e:	69fb      	ldr	r3, [r7, #28]
 801ad30:	3b01      	subs	r3, #1
 801ad32:	61fb      	str	r3, [r7, #28]
 801ad34:	69fb      	ldr	r3, [r7, #28]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	dcf4      	bgt.n	801ad24 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	1d1a      	adds	r2, r3, #4
 801ad3e:	603a      	str	r2, [r7, #0]
 801ad40:	6819      	ldr	r1, [r3, #0]
 801ad42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad44:	1c5a      	adds	r2, r3, #1
 801ad46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad48:	b2ca      	uxtb	r2, r1
 801ad4a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ad4c:	e08d      	b.n	801ae6a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	1d1a      	adds	r2, r3, #4
 801ad52:	603a      	str	r2, [r7, #0]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d101      	bne.n	801ad62 <tiny_vsnprintf_like+0x162>
 801ad5e:	4b50      	ldr	r3, [pc, #320]	@ (801aea0 <tiny_vsnprintf_like+0x2a0>)
 801ad60:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ad62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad64:	f7e5 fa5c 	bl	8000220 <strlen>
 801ad68:	4603      	mov	r3, r0
 801ad6a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ad6c:	e004      	b.n	801ad78 <tiny_vsnprintf_like+0x178>
 801ad6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad70:	1c5a      	adds	r2, r3, #1
 801ad72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad74:	2220      	movs	r2, #32
 801ad76:	701a      	strb	r2, [r3, #0]
 801ad78:	69fb      	ldr	r3, [r7, #28]
 801ad7a:	1e5a      	subs	r2, r3, #1
 801ad7c:	61fa      	str	r2, [r7, #28]
 801ad7e:	693a      	ldr	r2, [r7, #16]
 801ad80:	429a      	cmp	r2, r3
 801ad82:	dbf4      	blt.n	801ad6e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ad84:	2300      	movs	r3, #0
 801ad86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ad88:	e00a      	b.n	801ada0 <tiny_vsnprintf_like+0x1a0>
 801ad8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad8c:	1c53      	adds	r3, r2, #1
 801ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad92:	1c59      	adds	r1, r3, #1
 801ad94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ad96:	7812      	ldrb	r2, [r2, #0]
 801ad98:	701a      	strb	r2, [r3, #0]
 801ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ada0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ada2:	693b      	ldr	r3, [r7, #16]
 801ada4:	429a      	cmp	r2, r3
 801ada6:	dbf0      	blt.n	801ad8a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ada8:	e05f      	b.n	801ae6a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801adaa:	6a3b      	ldr	r3, [r7, #32]
 801adac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adb0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801adb2:	2310      	movs	r3, #16
 801adb4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801adb6:	e02b      	b.n	801ae10 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801adb8:	6a3b      	ldr	r3, [r7, #32]
 801adba:	f043 0302 	orr.w	r3, r3, #2
 801adbe:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801adc0:	e025      	b.n	801ae0e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	2b25      	cmp	r3, #37	@ 0x25
 801adc8:	d004      	beq.n	801add4 <tiny_vsnprintf_like+0x1d4>
 801adca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adcc:	1c5a      	adds	r2, r3, #1
 801adce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801add0:	2225      	movs	r2, #37	@ 0x25
 801add2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801add4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	1ad2      	subs	r2, r2, r3
 801adda:	68bb      	ldr	r3, [r7, #8]
 801addc:	3b01      	subs	r3, #1
 801adde:	429a      	cmp	r2, r3
 801ade0:	da16      	bge.n	801ae10 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	781b      	ldrb	r3, [r3, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d006      	beq.n	801adf8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801adea:	687a      	ldr	r2, [r7, #4]
 801adec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adee:	1c59      	adds	r1, r3, #1
 801adf0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801adf2:	7812      	ldrb	r2, [r2, #0]
 801adf4:	701a      	strb	r2, [r3, #0]
 801adf6:	e002      	b.n	801adfe <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	3b01      	subs	r3, #1
 801adfc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801adfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	1ad2      	subs	r2, r2, r3
 801ae04:	68bb      	ldr	r3, [r7, #8]
 801ae06:	3b01      	subs	r3, #1
 801ae08:	429a      	cmp	r2, r3
 801ae0a:	db2d      	blt.n	801ae68 <tiny_vsnprintf_like+0x268>
 801ae0c:	e000      	b.n	801ae10 <tiny_vsnprintf_like+0x210>
        break;
 801ae0e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	2b6c      	cmp	r3, #108	@ 0x6c
 801ae14:	d105      	bne.n	801ae22 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	1d1a      	adds	r2, r3, #4
 801ae1a:	603a      	str	r2, [r7, #0]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae20:	e00f      	b.n	801ae42 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ae22:	6a3b      	ldr	r3, [r7, #32]
 801ae24:	f003 0302 	and.w	r3, r3, #2
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d005      	beq.n	801ae38 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801ae2c:	683b      	ldr	r3, [r7, #0]
 801ae2e:	1d1a      	adds	r2, r3, #4
 801ae30:	603a      	str	r2, [r7, #0]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae36:	e004      	b.n	801ae42 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ae38:	683b      	ldr	r3, [r7, #0]
 801ae3a:	1d1a      	adds	r2, r3, #4
 801ae3c:	603a      	str	r2, [r7, #0]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	1e5a      	subs	r2, r3, #1
 801ae46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	1acb      	subs	r3, r1, r3
 801ae4c:	1ad1      	subs	r1, r2, r3
 801ae4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ae50:	6a3b      	ldr	r3, [r7, #32]
 801ae52:	9302      	str	r3, [sp, #8]
 801ae54:	69bb      	ldr	r3, [r7, #24]
 801ae56:	9301      	str	r3, [sp, #4]
 801ae58:	69fb      	ldr	r3, [r7, #28]
 801ae5a:	9300      	str	r3, [sp, #0]
 801ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ae60:	f7ff fde0 	bl	801aa24 <ee_number>
 801ae64:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ae66:	e000      	b.n	801ae6a <tiny_vsnprintf_like+0x26a>
        continue;
 801ae68:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	607b      	str	r3, [r7, #4]
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f47f aed2 	bne.w	801ac1e <tiny_vsnprintf_like+0x1e>
 801ae7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	1ad2      	subs	r2, r2, r3
 801ae80:	68bb      	ldr	r3, [r7, #8]
 801ae82:	3b01      	subs	r3, #1
 801ae84:	429a      	cmp	r2, r3
 801ae86:	f6bf aeca 	bge.w	801ac1e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ae90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	1ad3      	subs	r3, r2, r3
}
 801ae96:	4618      	mov	r0, r3
 801ae98:	3738      	adds	r7, #56	@ 0x38
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}
 801ae9e:	bf00      	nop
 801aea0:	0801f06c 	.word	0x0801f06c

0801aea4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b090      	sub	sp, #64	@ 0x40
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801aeac:	4b73      	ldr	r3, [pc, #460]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801aeb2:	4b72      	ldr	r3, [pc, #456]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801aeb4:	681a      	ldr	r2, [r3, #0]
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	4013      	ands	r3, r2
 801aeba:	4a70      	ldr	r2, [pc, #448]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801aebc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801aebe:	4b70      	ldr	r3, [pc, #448]	@ (801b080 <UTIL_SEQ_Run+0x1dc>)
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801aec4:	4b6f      	ldr	r3, [pc, #444]	@ (801b084 <UTIL_SEQ_Run+0x1e0>)
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801aeca:	4b6f      	ldr	r3, [pc, #444]	@ (801b088 <UTIL_SEQ_Run+0x1e4>)
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801aed0:	4b6e      	ldr	r3, [pc, #440]	@ (801b08c <UTIL_SEQ_Run+0x1e8>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aed6:	e08d      	b.n	801aff4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801aed8:	2300      	movs	r3, #0
 801aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aedc:	e002      	b.n	801aee4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801aede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aee0:	3301      	adds	r3, #1
 801aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aee4:	4a6a      	ldr	r2, [pc, #424]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801aee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aee8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeee:	401a      	ands	r2, r3
 801aef0:	4b62      	ldr	r3, [pc, #392]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	4013      	ands	r3, r2
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d0f1      	beq.n	801aede <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801aefa:	4a65      	ldr	r2, [pc, #404]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801aefc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aefe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af04:	401a      	ands	r2, r3
 801af06:	4b5d      	ldr	r3, [pc, #372]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	4013      	ands	r3, r2
 801af0c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801af0e:	4a60      	ldr	r2, [pc, #384]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af12:	00db      	lsls	r3, r3, #3
 801af14:	4413      	add	r3, r2
 801af16:	685a      	ldr	r2, [r3, #4]
 801af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af1a:	4013      	ands	r3, r2
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d106      	bne.n	801af2e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801af20:	4a5b      	ldr	r2, [pc, #364]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af24:	00db      	lsls	r3, r3, #3
 801af26:	4413      	add	r3, r2
 801af28:	f04f 32ff 	mov.w	r2, #4294967295
 801af2c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801af2e:	4a58      	ldr	r2, [pc, #352]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af32:	00db      	lsls	r3, r3, #3
 801af34:	4413      	add	r3, r2
 801af36:	685a      	ldr	r2, [r3, #4]
 801af38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af3a:	4013      	ands	r3, r2
 801af3c:	4618      	mov	r0, r3
 801af3e:	f000 f907 	bl	801b150 <SEQ_BitPosition>
 801af42:	4603      	mov	r3, r0
 801af44:	461a      	mov	r2, r3
 801af46:	4b53      	ldr	r3, [pc, #332]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801af48:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801af4a:	4a51      	ldr	r2, [pc, #324]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af4e:	00db      	lsls	r3, r3, #3
 801af50:	4413      	add	r3, r2
 801af52:	685a      	ldr	r2, [r3, #4]
 801af54:	4b4f      	ldr	r3, [pc, #316]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	2101      	movs	r1, #1
 801af5a:	fa01 f303 	lsl.w	r3, r1, r3
 801af5e:	43db      	mvns	r3, r3
 801af60:	401a      	ands	r2, r3
 801af62:	494b      	ldr	r1, [pc, #300]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af66:	00db      	lsls	r3, r3, #3
 801af68:	440b      	add	r3, r1
 801af6a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af6c:	f3ef 8310 	mrs	r3, PRIMASK
 801af70:	61bb      	str	r3, [r7, #24]
  return(result);
 801af72:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801af74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801af76:	b672      	cpsid	i
}
 801af78:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801af7a:	4b46      	ldr	r3, [pc, #280]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2201      	movs	r2, #1
 801af80:	fa02 f303 	lsl.w	r3, r2, r3
 801af84:	43da      	mvns	r2, r3
 801af86:	4b3e      	ldr	r3, [pc, #248]	@ (801b080 <UTIL_SEQ_Run+0x1dc>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	4013      	ands	r3, r2
 801af8c:	4a3c      	ldr	r2, [pc, #240]	@ (801b080 <UTIL_SEQ_Run+0x1dc>)
 801af8e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801af90:	2301      	movs	r3, #1
 801af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801af94:	e013      	b.n	801afbe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801af96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af98:	3b01      	subs	r3, #1
 801af9a:	4a3d      	ldr	r2, [pc, #244]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801af9c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801afa0:	4b3c      	ldr	r3, [pc, #240]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2201      	movs	r2, #1
 801afa6:	fa02 f303 	lsl.w	r3, r2, r3
 801afaa:	43da      	mvns	r2, r3
 801afac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afae:	3b01      	subs	r3, #1
 801afb0:	400a      	ands	r2, r1
 801afb2:	4937      	ldr	r1, [pc, #220]	@ (801b090 <UTIL_SEQ_Run+0x1ec>)
 801afb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801afb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afba:	3b01      	subs	r3, #1
 801afbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801afbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d1e8      	bne.n	801af96 <UTIL_SEQ_Run+0xf2>
 801afc4:	6a3b      	ldr	r3, [r7, #32]
 801afc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	f383 8810 	msr	PRIMASK, r3
}
 801afce:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801afd0:	4b30      	ldr	r3, [pc, #192]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	4a30      	ldr	r2, [pc, #192]	@ (801b098 <UTIL_SEQ_Run+0x1f4>)
 801afd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801afda:	4798      	blx	r3

    local_taskset = TaskSet;
 801afdc:	4b28      	ldr	r3, [pc, #160]	@ (801b080 <UTIL_SEQ_Run+0x1dc>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801afe2:	4b28      	ldr	r3, [pc, #160]	@ (801b084 <UTIL_SEQ_Run+0x1e0>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801afe8:	4b27      	ldr	r3, [pc, #156]	@ (801b088 <UTIL_SEQ_Run+0x1e4>)
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801afee:	4b27      	ldr	r3, [pc, #156]	@ (801b08c <UTIL_SEQ_Run+0x1e8>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aff8:	401a      	ands	r2, r3
 801affa:	4b20      	ldr	r3, [pc, #128]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	4013      	ands	r3, r2
 801b000:	2b00      	cmp	r3, #0
 801b002:	d005      	beq.n	801b010 <UTIL_SEQ_Run+0x16c>
 801b004:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b008:	4013      	ands	r3, r2
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	f43f af64 	beq.w	801aed8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b010:	4b20      	ldr	r3, [pc, #128]	@ (801b094 <UTIL_SEQ_Run+0x1f0>)
 801b012:	f04f 32ff 	mov.w	r2, #4294967295
 801b016:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b018:	f000 f88e 	bl	801b138 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b01c:	f3ef 8310 	mrs	r3, PRIMASK
 801b020:	613b      	str	r3, [r7, #16]
  return(result);
 801b022:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b026:	b672      	cpsid	i
}
 801b028:	bf00      	nop
  local_taskset = TaskSet;
 801b02a:	4b15      	ldr	r3, [pc, #84]	@ (801b080 <UTIL_SEQ_Run+0x1dc>)
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b030:	4b14      	ldr	r3, [pc, #80]	@ (801b084 <UTIL_SEQ_Run+0x1e0>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b036:	4b14      	ldr	r3, [pc, #80]	@ (801b088 <UTIL_SEQ_Run+0x1e4>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b040:	401a      	ands	r2, r3
 801b042:	4b0e      	ldr	r3, [pc, #56]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	4013      	ands	r3, r2
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d107      	bne.n	801b05c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b04c:	4b0f      	ldr	r3, [pc, #60]	@ (801b08c <UTIL_SEQ_Run+0x1e8>)
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b052:	4013      	ands	r3, r2
 801b054:	2b00      	cmp	r3, #0
 801b056:	d101      	bne.n	801b05c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b058:	f7e6 ff2c 	bl	8001eb4 <UTIL_SEQ_Idle>
 801b05c:	69fb      	ldr	r3, [r7, #28]
 801b05e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f383 8810 	msr	PRIMASK, r3
}
 801b066:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b068:	f000 f86c 	bl	801b144 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b06c:	4a03      	ldr	r2, [pc, #12]	@ (801b07c <UTIL_SEQ_Run+0x1d8>)
 801b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b070:	6013      	str	r3, [r2, #0]

  return;
 801b072:	bf00      	nop
}
 801b074:	3740      	adds	r7, #64	@ 0x40
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	2000013c 	.word	0x2000013c
 801b080:	20001d7c 	.word	0x20001d7c
 801b084:	20001d80 	.word	0x20001d80
 801b088:	20000138 	.word	0x20000138
 801b08c:	20001d84 	.word	0x20001d84
 801b090:	20001d9c 	.word	0x20001d9c
 801b094:	20001d88 	.word	0x20001d88
 801b098:	20001d8c 	.word	0x20001d8c

0801b09c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b088      	sub	sp, #32
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	60b9      	str	r1, [r7, #8]
 801b0a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0a8:	f3ef 8310 	mrs	r3, PRIMASK
 801b0ac:	617b      	str	r3, [r7, #20]
  return(result);
 801b0ae:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b0b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0b2:	b672      	cpsid	i
}
 801b0b4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b0b6:	68f8      	ldr	r0, [r7, #12]
 801b0b8:	f000 f84a 	bl	801b150 <SEQ_BitPosition>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	4619      	mov	r1, r3
 801b0c0:	4a06      	ldr	r2, [pc, #24]	@ (801b0dc <UTIL_SEQ_RegTask+0x40>)
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0cc:	69bb      	ldr	r3, [r7, #24]
 801b0ce:	f383 8810 	msr	PRIMASK, r3
}
 801b0d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b0d4:	bf00      	nop
}
 801b0d6:	3720      	adds	r7, #32
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}
 801b0dc:	20001d8c 	.word	0x20001d8c

0801b0e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b0e0:	b480      	push	{r7}
 801b0e2:	b087      	sub	sp, #28
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0ea:	f3ef 8310 	mrs	r3, PRIMASK
 801b0ee:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b0f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0f4:	b672      	cpsid	i
}
 801b0f6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b0f8:	4b0d      	ldr	r3, [pc, #52]	@ (801b130 <UTIL_SEQ_SetTask+0x50>)
 801b0fa:	681a      	ldr	r2, [r3, #0]
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	4313      	orrs	r3, r2
 801b100:	4a0b      	ldr	r2, [pc, #44]	@ (801b130 <UTIL_SEQ_SetTask+0x50>)
 801b102:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b104:	4a0b      	ldr	r2, [pc, #44]	@ (801b134 <UTIL_SEQ_SetTask+0x54>)
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	431a      	orrs	r2, r3
 801b110:	4908      	ldr	r1, [pc, #32]	@ (801b134 <UTIL_SEQ_SetTask+0x54>)
 801b112:	683b      	ldr	r3, [r7, #0]
 801b114:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b118:	697b      	ldr	r3, [r7, #20]
 801b11a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b11c:	693b      	ldr	r3, [r7, #16]
 801b11e:	f383 8810 	msr	PRIMASK, r3
}
 801b122:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b124:	bf00      	nop
}
 801b126:	371c      	adds	r7, #28
 801b128:	46bd      	mov	sp, r7
 801b12a:	bc80      	pop	{r7}
 801b12c:	4770      	bx	lr
 801b12e:	bf00      	nop
 801b130:	20001d7c 	.word	0x20001d7c
 801b134:	20001d9c 	.word	0x20001d9c

0801b138 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b138:	b480      	push	{r7}
 801b13a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b13c:	bf00      	nop
}
 801b13e:	46bd      	mov	sp, r7
 801b140:	bc80      	pop	{r7}
 801b142:	4770      	bx	lr

0801b144 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b144:	b480      	push	{r7}
 801b146:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b148:	bf00      	nop
}
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bc80      	pop	{r7}
 801b14e:	4770      	bx	lr

0801b150 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b150:	b480      	push	{r7}
 801b152:	b085      	sub	sp, #20
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b158:	2300      	movs	r3, #0
 801b15a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b166:	d204      	bcs.n	801b172 <SEQ_BitPosition+0x22>
 801b168:	2310      	movs	r3, #16
 801b16a:	73fb      	strb	r3, [r7, #15]
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	041b      	lsls	r3, r3, #16
 801b170:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b178:	d205      	bcs.n	801b186 <SEQ_BitPosition+0x36>
 801b17a:	7bfb      	ldrb	r3, [r7, #15]
 801b17c:	3308      	adds	r3, #8
 801b17e:	73fb      	strb	r3, [r7, #15]
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	021b      	lsls	r3, r3, #8
 801b184:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b186:	68bb      	ldr	r3, [r7, #8]
 801b188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b18c:	d205      	bcs.n	801b19a <SEQ_BitPosition+0x4a>
 801b18e:	7bfb      	ldrb	r3, [r7, #15]
 801b190:	3304      	adds	r3, #4
 801b192:	73fb      	strb	r3, [r7, #15]
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	011b      	lsls	r3, r3, #4
 801b198:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b19a:	68bb      	ldr	r3, [r7, #8]
 801b19c:	0f1b      	lsrs	r3, r3, #28
 801b19e:	4a07      	ldr	r2, [pc, #28]	@ (801b1bc <SEQ_BitPosition+0x6c>)
 801b1a0:	5cd2      	ldrb	r2, [r2, r3]
 801b1a2:	7bfb      	ldrb	r3, [r7, #15]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b1a8:	7bfb      	ldrb	r3, [r7, #15]
 801b1aa:	f1c3 031f 	rsb	r3, r3, #31
 801b1ae:	b2db      	uxtb	r3, r3
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3714      	adds	r7, #20
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bc80      	pop	{r7}
 801b1b8:	4770      	bx	lr
 801b1ba:	bf00      	nop
 801b1bc:	0801f6ac 	.word	0x0801f6ac

0801b1c0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b1c4:	4b04      	ldr	r3, [pc, #16]	@ (801b1d8 <UTIL_TIMER_Init+0x18>)
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b1ca:	4b04      	ldr	r3, [pc, #16]	@ (801b1dc <UTIL_TIMER_Init+0x1c>)
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	4798      	blx	r3
 801b1d0:	4603      	mov	r3, r0
}
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	bd80      	pop	{r7, pc}
 801b1d6:	bf00      	nop
 801b1d8:	20001da4 	.word	0x20001da4
 801b1dc:	0801f12c 	.word	0x0801f12c

0801b1e0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b084      	sub	sp, #16
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	60f8      	str	r0, [r7, #12]
 801b1e8:	60b9      	str	r1, [r7, #8]
 801b1ea:	603b      	str	r3, [r7, #0]
 801b1ec:	4613      	mov	r3, r2
 801b1ee:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d023      	beq.n	801b23e <UTIL_TIMER_Create+0x5e>
 801b1f6:	683b      	ldr	r3, [r7, #0]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d020      	beq.n	801b23e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	2200      	movs	r2, #0
 801b200:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b202:	4b11      	ldr	r3, [pc, #68]	@ (801b248 <UTIL_TIMER_Create+0x68>)
 801b204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b206:	68b8      	ldr	r0, [r7, #8]
 801b208:	4798      	blx	r3
 801b20a:	4602      	mov	r2, r0
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	2200      	movs	r2, #0
 801b214:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	2200      	movs	r2, #0
 801b21a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	2200      	movs	r2, #0
 801b220:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	683a      	ldr	r2, [r7, #0]
 801b226:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	69ba      	ldr	r2, [r7, #24]
 801b22c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	79fa      	ldrb	r2, [r7, #7]
 801b232:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	2200      	movs	r2, #0
 801b238:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b23a:	2300      	movs	r3, #0
 801b23c:	e000      	b.n	801b240 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b23e:	2301      	movs	r3, #1
  }
}
 801b240:	4618      	mov	r0, r3
 801b242:	3710      	adds	r7, #16
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	0801f12c 	.word	0x0801f12c

0801b24c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b08a      	sub	sp, #40	@ 0x28
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b254:	2300      	movs	r3, #0
 801b256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d056      	beq.n	801b30e <UTIL_TIMER_Start+0xc2>
 801b260:	6878      	ldr	r0, [r7, #4]
 801b262:	f000 f9a9 	bl	801b5b8 <TimerExists>
 801b266:	4603      	mov	r3, r0
 801b268:	f083 0301 	eor.w	r3, r3, #1
 801b26c:	b2db      	uxtb	r3, r3
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d04d      	beq.n	801b30e <UTIL_TIMER_Start+0xc2>
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	7a5b      	ldrb	r3, [r3, #9]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d149      	bne.n	801b30e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b27a:	f3ef 8310 	mrs	r3, PRIMASK
 801b27e:	613b      	str	r3, [r7, #16]
  return(result);
 801b280:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b284:	b672      	cpsid	i
}
 801b286:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	685b      	ldr	r3, [r3, #4]
 801b28c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b28e:	4b24      	ldr	r3, [pc, #144]	@ (801b320 <UTIL_TIMER_Start+0xd4>)
 801b290:	6a1b      	ldr	r3, [r3, #32]
 801b292:	4798      	blx	r3
 801b294:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b296:	6a3a      	ldr	r2, [r7, #32]
 801b298:	69bb      	ldr	r3, [r7, #24]
 801b29a:	429a      	cmp	r2, r3
 801b29c:	d201      	bcs.n	801b2a2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b29e:	69bb      	ldr	r3, [r7, #24]
 801b2a0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	6a3a      	ldr	r2, [r7, #32]
 801b2a6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2201      	movs	r2, #1
 801b2b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b2ba:	4b1a      	ldr	r3, [pc, #104]	@ (801b324 <UTIL_TIMER_Start+0xd8>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d106      	bne.n	801b2d0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b2c2:	4b17      	ldr	r3, [pc, #92]	@ (801b320 <UTIL_TIMER_Start+0xd4>)
 801b2c4:	691b      	ldr	r3, [r3, #16]
 801b2c6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b2c8:	6878      	ldr	r0, [r7, #4]
 801b2ca:	f000 f9eb 	bl	801b6a4 <TimerInsertNewHeadTimer>
 801b2ce:	e017      	b.n	801b300 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b2d0:	4b13      	ldr	r3, [pc, #76]	@ (801b320 <UTIL_TIMER_Start+0xd4>)
 801b2d2:	699b      	ldr	r3, [r3, #24]
 801b2d4:	4798      	blx	r3
 801b2d6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681a      	ldr	r2, [r3, #0]
 801b2dc:	697b      	ldr	r3, [r7, #20]
 801b2de:	441a      	add	r2, r3
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681a      	ldr	r2, [r3, #0]
 801b2e8:	4b0e      	ldr	r3, [pc, #56]	@ (801b324 <UTIL_TIMER_Start+0xd8>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d203      	bcs.n	801b2fa <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b2f2:	6878      	ldr	r0, [r7, #4]
 801b2f4:	f000 f9d6 	bl	801b6a4 <TimerInsertNewHeadTimer>
 801b2f8:	e002      	b.n	801b300 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	f000 f9a2 	bl	801b644 <TimerInsertTimer>
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	f383 8810 	msr	PRIMASK, r3
}
 801b30a:	bf00      	nop
  {
 801b30c:	e002      	b.n	801b314 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b30e:	2301      	movs	r3, #1
 801b310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b318:	4618      	mov	r0, r3
 801b31a:	3728      	adds	r7, #40	@ 0x28
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}
 801b320:	0801f12c 	.word	0x0801f12c
 801b324:	20001da4 	.word	0x20001da4

0801b328 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b088      	sub	sp, #32
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b330:	2300      	movs	r3, #0
 801b332:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d05b      	beq.n	801b3f2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b33a:	f3ef 8310 	mrs	r3, PRIMASK
 801b33e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b340:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b344:	b672      	cpsid	i
}
 801b346:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b348:	4b2d      	ldr	r3, [pc, #180]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b34e:	4b2c      	ldr	r3, [pc, #176]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2201      	movs	r2, #1
 801b358:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b35a:	4b29      	ldr	r3, [pc, #164]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d041      	beq.n	801b3e6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	2200      	movs	r2, #0
 801b366:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b368:	4b25      	ldr	r3, [pc, #148]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	429a      	cmp	r2, r3
 801b370:	d134      	bne.n	801b3dc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b372:	4b23      	ldr	r3, [pc, #140]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	2200      	movs	r2, #0
 801b378:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b37a:	4b21      	ldr	r3, [pc, #132]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	695b      	ldr	r3, [r3, #20]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d00a      	beq.n	801b39a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b384:	4b1e      	ldr	r3, [pc, #120]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	695b      	ldr	r3, [r3, #20]
 801b38a:	4a1d      	ldr	r2, [pc, #116]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b38c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b38e:	4b1c      	ldr	r3, [pc, #112]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	4618      	mov	r0, r3
 801b394:	f000 f92c 	bl	801b5f0 <TimerSetTimeout>
 801b398:	e023      	b.n	801b3e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b39a:	4b1a      	ldr	r3, [pc, #104]	@ (801b404 <UTIL_TIMER_Stop+0xdc>)
 801b39c:	68db      	ldr	r3, [r3, #12]
 801b39e:	4798      	blx	r3
            TimerListHead = NULL;
 801b3a0:	4b17      	ldr	r3, [pc, #92]	@ (801b400 <UTIL_TIMER_Stop+0xd8>)
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	601a      	str	r2, [r3, #0]
 801b3a6:	e01c      	b.n	801b3e2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b3a8:	697a      	ldr	r2, [r7, #20]
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	429a      	cmp	r2, r3
 801b3ae:	d110      	bne.n	801b3d2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	695b      	ldr	r3, [r3, #20]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d006      	beq.n	801b3c6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	695b      	ldr	r3, [r3, #20]
 801b3bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b3be:	69bb      	ldr	r3, [r7, #24]
 801b3c0:	697a      	ldr	r2, [r7, #20]
 801b3c2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b3c4:	e00d      	b.n	801b3e2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b3ca:	69bb      	ldr	r3, [r7, #24]
 801b3cc:	697a      	ldr	r2, [r7, #20]
 801b3ce:	615a      	str	r2, [r3, #20]
            break;
 801b3d0:	e007      	b.n	801b3e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b3d2:	697b      	ldr	r3, [r7, #20]
 801b3d4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	695b      	ldr	r3, [r3, #20]
 801b3da:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b3dc:	697b      	ldr	r3, [r7, #20]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d1e2      	bne.n	801b3a8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	77fb      	strb	r3, [r7, #31]
 801b3e6:	693b      	ldr	r3, [r7, #16]
 801b3e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3ea:	68bb      	ldr	r3, [r7, #8]
 801b3ec:	f383 8810 	msr	PRIMASK, r3
}
 801b3f0:	e001      	b.n	801b3f6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b3f2:	2301      	movs	r3, #1
 801b3f4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b3f6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	3720      	adds	r7, #32
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	bd80      	pop	{r7, pc}
 801b400:	20001da4 	.word	0x20001da4
 801b404:	0801f12c 	.word	0x0801f12c

0801b408 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b084      	sub	sp, #16
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b412:	2300      	movs	r3, #0
 801b414:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d102      	bne.n	801b422 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b41c:	2301      	movs	r3, #1
 801b41e:	73fb      	strb	r3, [r7, #15]
 801b420:	e014      	b.n	801b44c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b422:	4b0d      	ldr	r3, [pc, #52]	@ (801b458 <UTIL_TIMER_SetPeriod+0x50>)
 801b424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b426:	6838      	ldr	r0, [r7, #0]
 801b428:	4798      	blx	r3
 801b42a:	4602      	mov	r2, r0
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f000 f8c1 	bl	801b5b8 <TimerExists>
 801b436:	4603      	mov	r3, r0
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d007      	beq.n	801b44c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f7ff ff73 	bl	801b328 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b442:	6878      	ldr	r0, [r7, #4]
 801b444:	f7ff ff02 	bl	801b24c <UTIL_TIMER_Start>
 801b448:	4603      	mov	r3, r0
 801b44a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b44e:	4618      	mov	r0, r3
 801b450:	3710      	adds	r7, #16
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
 801b456:	bf00      	nop
 801b458:	0801f12c 	.word	0x0801f12c

0801b45c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b45c:	b590      	push	{r4, r7, lr}
 801b45e:	b089      	sub	sp, #36	@ 0x24
 801b460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b462:	f3ef 8310 	mrs	r3, PRIMASK
 801b466:	60bb      	str	r3, [r7, #8]
  return(result);
 801b468:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b46a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b46c:	b672      	cpsid	i
}
 801b46e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b470:	4b38      	ldr	r3, [pc, #224]	@ (801b554 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b472:	695b      	ldr	r3, [r3, #20]
 801b474:	4798      	blx	r3
 801b476:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b478:	4b36      	ldr	r3, [pc, #216]	@ (801b554 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b47a:	691b      	ldr	r3, [r3, #16]
 801b47c:	4798      	blx	r3
 801b47e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b480:	693a      	ldr	r2, [r7, #16]
 801b482:	697b      	ldr	r3, [r7, #20]
 801b484:	1ad3      	subs	r3, r2, r3
 801b486:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b488:	4b33      	ldr	r3, [pc, #204]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d037      	beq.n	801b500 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b490:	4b31      	ldr	r3, [pc, #196]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b496:	69fb      	ldr	r3, [r7, #28]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	68fa      	ldr	r2, [r7, #12]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d206      	bcs.n	801b4ae <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b4a0:	69fb      	ldr	r3, [r7, #28]
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	1ad2      	subs	r2, r2, r3
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	601a      	str	r2, [r3, #0]
 801b4ac:	e002      	b.n	801b4b4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b4ae:	69fb      	ldr	r3, [r7, #28]
 801b4b0:	2200      	movs	r2, #0
 801b4b2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b4b4:	69fb      	ldr	r3, [r7, #28]
 801b4b6:	695b      	ldr	r3, [r3, #20]
 801b4b8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b4ba:	69fb      	ldr	r3, [r7, #28]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d1ea      	bne.n	801b496 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b4c0:	e01e      	b.n	801b500 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b4c2:	4b25      	ldr	r3, [pc, #148]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b4c8:	4b23      	ldr	r3, [pc, #140]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	695b      	ldr	r3, [r3, #20]
 801b4ce:	4a22      	ldr	r2, [pc, #136]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b4d0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b4d8:	69fb      	ldr	r3, [r7, #28]
 801b4da:	2200      	movs	r2, #0
 801b4dc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b4de:	69fb      	ldr	r3, [r7, #28]
 801b4e0:	68db      	ldr	r3, [r3, #12]
 801b4e2:	69fa      	ldr	r2, [r7, #28]
 801b4e4:	6912      	ldr	r2, [r2, #16]
 801b4e6:	4610      	mov	r0, r2
 801b4e8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	7adb      	ldrb	r3, [r3, #11]
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d106      	bne.n	801b500 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	7a9b      	ldrb	r3, [r3, #10]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d102      	bne.n	801b500 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b4fa:	69f8      	ldr	r0, [r7, #28]
 801b4fc:	f7ff fea6 	bl	801b24c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b500:	4b15      	ldr	r3, [pc, #84]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d00d      	beq.n	801b524 <UTIL_TIMER_IRQ_Handler+0xc8>
 801b508:	4b13      	ldr	r3, [pc, #76]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d0d7      	beq.n	801b4c2 <UTIL_TIMER_IRQ_Handler+0x66>
 801b512:	4b11      	ldr	r3, [pc, #68]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	681c      	ldr	r4, [r3, #0]
 801b518:	4b0e      	ldr	r3, [pc, #56]	@ (801b554 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b51a:	699b      	ldr	r3, [r3, #24]
 801b51c:	4798      	blx	r3
 801b51e:	4603      	mov	r3, r0
 801b520:	429c      	cmp	r4, r3
 801b522:	d3ce      	bcc.n	801b4c2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b524:	4b0c      	ldr	r3, [pc, #48]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d009      	beq.n	801b540 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b52c:	4b0a      	ldr	r3, [pc, #40]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	7a1b      	ldrb	r3, [r3, #8]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d104      	bne.n	801b540 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b536:	4b08      	ldr	r3, [pc, #32]	@ (801b558 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4618      	mov	r0, r3
 801b53c:	f000 f858 	bl	801b5f0 <TimerSetTimeout>
 801b540:	69bb      	ldr	r3, [r7, #24]
 801b542:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	f383 8810 	msr	PRIMASK, r3
}
 801b54a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b54c:	bf00      	nop
 801b54e:	3724      	adds	r7, #36	@ 0x24
 801b550:	46bd      	mov	sp, r7
 801b552:	bd90      	pop	{r4, r7, pc}
 801b554:	0801f12c 	.word	0x0801f12c
 801b558:	20001da4 	.word	0x20001da4

0801b55c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b082      	sub	sp, #8
 801b560:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b562:	4b06      	ldr	r3, [pc, #24]	@ (801b57c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b564:	69db      	ldr	r3, [r3, #28]
 801b566:	4798      	blx	r3
 801b568:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b56a:	4b04      	ldr	r3, [pc, #16]	@ (801b57c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b56e:	6878      	ldr	r0, [r7, #4]
 801b570:	4798      	blx	r3
 801b572:	4603      	mov	r3, r0
}
 801b574:	4618      	mov	r0, r3
 801b576:	3708      	adds	r7, #8
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}
 801b57c:	0801f12c 	.word	0x0801f12c

0801b580 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b580:	b580      	push	{r7, lr}
 801b582:	b084      	sub	sp, #16
 801b584:	af00      	add	r7, sp, #0
 801b586:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b588:	4b0a      	ldr	r3, [pc, #40]	@ (801b5b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b58a:	69db      	ldr	r3, [r3, #28]
 801b58c:	4798      	blx	r3
 801b58e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b590:	4b08      	ldr	r3, [pc, #32]	@ (801b5b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	4798      	blx	r3
 801b598:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b59a:	4b06      	ldr	r3, [pc, #24]	@ (801b5b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b59e:	68f9      	ldr	r1, [r7, #12]
 801b5a0:	68ba      	ldr	r2, [r7, #8]
 801b5a2:	1a8a      	subs	r2, r1, r2
 801b5a4:	4610      	mov	r0, r2
 801b5a6:	4798      	blx	r3
 801b5a8:	4603      	mov	r3, r0
}
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	3710      	adds	r7, #16
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bd80      	pop	{r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	0801f12c 	.word	0x0801f12c

0801b5b8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b5b8:	b480      	push	{r7}
 801b5ba:	b085      	sub	sp, #20
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b5c0:	4b0a      	ldr	r3, [pc, #40]	@ (801b5ec <TimerExists+0x34>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b5c6:	e008      	b.n	801b5da <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b5c8:	68fa      	ldr	r2, [r7, #12]
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	d101      	bne.n	801b5d4 <TimerExists+0x1c>
    {
      return true;
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	e006      	b.n	801b5e2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	695b      	ldr	r3, [r3, #20]
 801b5d8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d1f3      	bne.n	801b5c8 <TimerExists+0x10>
  }
  return false;
 801b5e0:	2300      	movs	r3, #0
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3714      	adds	r7, #20
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bc80      	pop	{r7}
 801b5ea:	4770      	bx	lr
 801b5ec:	20001da4 	.word	0x20001da4

0801b5f0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b5f0:	b590      	push	{r4, r7, lr}
 801b5f2:	b085      	sub	sp, #20
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b5f8:	4b11      	ldr	r3, [pc, #68]	@ (801b640 <TimerSetTimeout+0x50>)
 801b5fa:	6a1b      	ldr	r3, [r3, #32]
 801b5fc:	4798      	blx	r3
 801b5fe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2201      	movs	r2, #1
 801b604:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	681c      	ldr	r4, [r3, #0]
 801b60a:	4b0d      	ldr	r3, [pc, #52]	@ (801b640 <TimerSetTimeout+0x50>)
 801b60c:	699b      	ldr	r3, [r3, #24]
 801b60e:	4798      	blx	r3
 801b610:	4602      	mov	r2, r0
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	4413      	add	r3, r2
 801b616:	429c      	cmp	r4, r3
 801b618:	d207      	bcs.n	801b62a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b61a:	4b09      	ldr	r3, [pc, #36]	@ (801b640 <TimerSetTimeout+0x50>)
 801b61c:	699b      	ldr	r3, [r3, #24]
 801b61e:	4798      	blx	r3
 801b620:	4602      	mov	r2, r0
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	441a      	add	r2, r3
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b62a:	4b05      	ldr	r3, [pc, #20]	@ (801b640 <TimerSetTimeout+0x50>)
 801b62c:	689b      	ldr	r3, [r3, #8]
 801b62e:	687a      	ldr	r2, [r7, #4]
 801b630:	6812      	ldr	r2, [r2, #0]
 801b632:	4610      	mov	r0, r2
 801b634:	4798      	blx	r3
}
 801b636:	bf00      	nop
 801b638:	3714      	adds	r7, #20
 801b63a:	46bd      	mov	sp, r7
 801b63c:	bd90      	pop	{r4, r7, pc}
 801b63e:	bf00      	nop
 801b640:	0801f12c 	.word	0x0801f12c

0801b644 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b644:	b480      	push	{r7}
 801b646:	b085      	sub	sp, #20
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b64c:	4b14      	ldr	r3, [pc, #80]	@ (801b6a0 <TimerInsertTimer+0x5c>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b652:	4b13      	ldr	r3, [pc, #76]	@ (801b6a0 <TimerInsertTimer+0x5c>)
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	695b      	ldr	r3, [r3, #20]
 801b658:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b65a:	e012      	b.n	801b682 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	429a      	cmp	r2, r3
 801b666:	d905      	bls.n	801b674 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	695b      	ldr	r3, [r3, #20]
 801b670:	60bb      	str	r3, [r7, #8]
 801b672:	e006      	b.n	801b682 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	687a      	ldr	r2, [r7, #4]
 801b678:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	68ba      	ldr	r2, [r7, #8]
 801b67e:	615a      	str	r2, [r3, #20]
        return;
 801b680:	e009      	b.n	801b696 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	695b      	ldr	r3, [r3, #20]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d1e8      	bne.n	801b65c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	687a      	ldr	r2, [r7, #4]
 801b68e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2200      	movs	r2, #0
 801b694:	615a      	str	r2, [r3, #20]
}
 801b696:	3714      	adds	r7, #20
 801b698:	46bd      	mov	sp, r7
 801b69a:	bc80      	pop	{r7}
 801b69c:	4770      	bx	lr
 801b69e:	bf00      	nop
 801b6a0:	20001da4 	.word	0x20001da4

0801b6a4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b084      	sub	sp, #16
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b6ac:	4b0b      	ldr	r3, [pc, #44]	@ (801b6dc <TimerInsertNewHeadTimer+0x38>)
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d002      	beq.n	801b6be <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	2200      	movs	r2, #0
 801b6bc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	68fa      	ldr	r2, [r7, #12]
 801b6c2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b6c4:	4a05      	ldr	r2, [pc, #20]	@ (801b6dc <TimerInsertNewHeadTimer+0x38>)
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b6ca:	4b04      	ldr	r3, [pc, #16]	@ (801b6dc <TimerInsertNewHeadTimer+0x38>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	f7ff ff8e 	bl	801b5f0 <TimerSetTimeout>
}
 801b6d4:	bf00      	nop
 801b6d6:	3710      	adds	r7, #16
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}
 801b6dc:	20001da4 	.word	0x20001da4

0801b6e0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b6e4:	2218      	movs	r2, #24
 801b6e6:	2100      	movs	r1, #0
 801b6e8:	4807      	ldr	r0, [pc, #28]	@ (801b708 <UTIL_ADV_TRACE_Init+0x28>)
 801b6ea:	f7fe fffc 	bl	801a6e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b6ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b6f2:	2100      	movs	r1, #0
 801b6f4:	4805      	ldr	r0, [pc, #20]	@ (801b70c <UTIL_ADV_TRACE_Init+0x2c>)
 801b6f6:	f7fe fff6 	bl	801a6e6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b6fa:	4b05      	ldr	r3, [pc, #20]	@ (801b710 <UTIL_ADV_TRACE_Init+0x30>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	4805      	ldr	r0, [pc, #20]	@ (801b714 <UTIL_ADV_TRACE_Init+0x34>)
 801b700:	4798      	blx	r3
 801b702:	4603      	mov	r3, r0
}
 801b704:	4618      	mov	r0, r3
 801b706:	bd80      	pop	{r7, pc}
 801b708:	20001da8 	.word	0x20001da8
 801b70c:	20001dc0 	.word	0x20001dc0
 801b710:	0801f16c 	.word	0x0801f16c
 801b714:	0801b981 	.word	0x0801b981

0801b718 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b718:	b480      	push	{r7}
 801b71a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b71c:	4b06      	ldr	r3, [pc, #24]	@ (801b738 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b71e:	8a5a      	ldrh	r2, [r3, #18]
 801b720:	4b05      	ldr	r3, [pc, #20]	@ (801b738 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b722:	8a1b      	ldrh	r3, [r3, #16]
 801b724:	429a      	cmp	r2, r3
 801b726:	d101      	bne.n	801b72c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b728:	2301      	movs	r3, #1
 801b72a:	e000      	b.n	801b72e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b72c:	2300      	movs	r3, #0
}
 801b72e:	4618      	mov	r0, r3
 801b730:	46bd      	mov	sp, r7
 801b732:	bc80      	pop	{r7}
 801b734:	4770      	bx	lr
 801b736:	bf00      	nop
 801b738:	20001da8 	.word	0x20001da8

0801b73c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b73c:	b408      	push	{r3}
 801b73e:	b580      	push	{r7, lr}
 801b740:	b08d      	sub	sp, #52	@ 0x34
 801b742:	af00      	add	r7, sp, #0
 801b744:	60f8      	str	r0, [r7, #12]
 801b746:	60b9      	str	r1, [r7, #8]
 801b748:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b74a:	2300      	movs	r3, #0
 801b74c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b74e:	2300      	movs	r3, #0
 801b750:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b752:	4b37      	ldr	r3, [pc, #220]	@ (801b830 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b754:	7a1b      	ldrb	r3, [r3, #8]
 801b756:	461a      	mov	r2, r3
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d902      	bls.n	801b764 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b75e:	f06f 0304 	mvn.w	r3, #4
 801b762:	e05e      	b.n	801b822 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b764:	4b32      	ldr	r3, [pc, #200]	@ (801b830 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b766:	68da      	ldr	r2, [r3, #12]
 801b768:	68bb      	ldr	r3, [r7, #8]
 801b76a:	4013      	ands	r3, r2
 801b76c:	68ba      	ldr	r2, [r7, #8]
 801b76e:	429a      	cmp	r2, r3
 801b770:	d002      	beq.n	801b778 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b772:	f06f 0305 	mvn.w	r3, #5
 801b776:	e054      	b.n	801b822 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b778:	4b2d      	ldr	r3, [pc, #180]	@ (801b830 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b77a:	685b      	ldr	r3, [r3, #4]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d00a      	beq.n	801b796 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d007      	beq.n	801b796 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b786:	4b2a      	ldr	r3, [pc, #168]	@ (801b830 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	f107 0116 	add.w	r1, r7, #22
 801b78e:	f107 0218 	add.w	r2, r7, #24
 801b792:	4610      	mov	r0, r2
 801b794:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b796:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b79a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b79e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b7a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b7a4:	4823      	ldr	r0, [pc, #140]	@ (801b834 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b7a6:	f7ff fa2b 	bl	801ac00 <tiny_vsnprintf_like>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b7ae:	f000 f9f1 	bl	801bb94 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b7b2:	8afa      	ldrh	r2, [r7, #22]
 801b7b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b7b6:	4413      	add	r3, r2
 801b7b8:	b29b      	uxth	r3, r3
 801b7ba:	f107 0214 	add.w	r2, r7, #20
 801b7be:	4611      	mov	r1, r2
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f000 f969 	bl	801ba98 <TRACE_AllocateBufer>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7cc:	d025      	beq.n	801b81a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b7d2:	e00e      	b.n	801b7f2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b7d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b7d6:	8aba      	ldrh	r2, [r7, #20]
 801b7d8:	3330      	adds	r3, #48	@ 0x30
 801b7da:	443b      	add	r3, r7
 801b7dc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b7e0:	4b15      	ldr	r3, [pc, #84]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b7e2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b7e4:	8abb      	ldrh	r3, [r7, #20]
 801b7e6:	3301      	adds	r3, #1
 801b7e8:	b29b      	uxth	r3, r3
 801b7ea:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b7ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b7ee:	3301      	adds	r3, #1
 801b7f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b7f2:	8afb      	ldrh	r3, [r7, #22]
 801b7f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	d3ec      	bcc.n	801b7d4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b7fa:	8abb      	ldrh	r3, [r7, #20]
 801b7fc:	461a      	mov	r2, r3
 801b7fe:	4b0e      	ldr	r3, [pc, #56]	@ (801b838 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b800:	18d0      	adds	r0, r2, r3
 801b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b80a:	f7ff f9f9 	bl	801ac00 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b80e:	f000 f9df 	bl	801bbd0 <TRACE_UnLock>

    return TRACE_Send();
 801b812:	f000 f831 	bl	801b878 <TRACE_Send>
 801b816:	4603      	mov	r3, r0
 801b818:	e003      	b.n	801b822 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b81a:	f000 f9d9 	bl	801bbd0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b81e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b822:	4618      	mov	r0, r3
 801b824:	3734      	adds	r7, #52	@ 0x34
 801b826:	46bd      	mov	sp, r7
 801b828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b82c:	b001      	add	sp, #4
 801b82e:	4770      	bx	lr
 801b830:	20001da8 	.word	0x20001da8
 801b834:	200021c0 	.word	0x200021c0
 801b838:	20001dc0 	.word	0x20001dc0

0801b83c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b83c:	b480      	push	{r7}
 801b83e:	b083      	sub	sp, #12
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b844:	4a03      	ldr	r2, [pc, #12]	@ (801b854 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6053      	str	r3, [r2, #4]
}
 801b84a:	bf00      	nop
 801b84c:	370c      	adds	r7, #12
 801b84e:	46bd      	mov	sp, r7
 801b850:	bc80      	pop	{r7}
 801b852:	4770      	bx	lr
 801b854:	20001da8 	.word	0x20001da8

0801b858 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b858:	b480      	push	{r7}
 801b85a:	b083      	sub	sp, #12
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	4603      	mov	r3, r0
 801b860:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b862:	4a04      	ldr	r2, [pc, #16]	@ (801b874 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b864:	79fb      	ldrb	r3, [r7, #7]
 801b866:	7213      	strb	r3, [r2, #8]
}
 801b868:	bf00      	nop
 801b86a:	370c      	adds	r7, #12
 801b86c:	46bd      	mov	sp, r7
 801b86e:	bc80      	pop	{r7}
 801b870:	4770      	bx	lr
 801b872:	bf00      	nop
 801b874:	20001da8 	.word	0x20001da8

0801b878 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b088      	sub	sp, #32
 801b87c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b87e:	2300      	movs	r3, #0
 801b880:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b882:	2300      	movs	r3, #0
 801b884:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b886:	f3ef 8310 	mrs	r3, PRIMASK
 801b88a:	613b      	str	r3, [r7, #16]
  return(result);
 801b88c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b88e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b890:	b672      	cpsid	i
}
 801b892:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b894:	f000 f9ba 	bl	801bc0c <TRACE_IsLocked>
 801b898:	4603      	mov	r3, r0
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d15d      	bne.n	801b95a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b89e:	f000 f979 	bl	801bb94 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b8a2:	4b34      	ldr	r3, [pc, #208]	@ (801b974 <TRACE_Send+0xfc>)
 801b8a4:	8a1a      	ldrh	r2, [r3, #16]
 801b8a6:	4b33      	ldr	r3, [pc, #204]	@ (801b974 <TRACE_Send+0xfc>)
 801b8a8:	8a5b      	ldrh	r3, [r3, #18]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d04d      	beq.n	801b94a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b8ae:	4b31      	ldr	r3, [pc, #196]	@ (801b974 <TRACE_Send+0xfc>)
 801b8b0:	789b      	ldrb	r3, [r3, #2]
 801b8b2:	2b01      	cmp	r3, #1
 801b8b4:	d117      	bne.n	801b8e6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b8b6:	4b2f      	ldr	r3, [pc, #188]	@ (801b974 <TRACE_Send+0xfc>)
 801b8b8:	881a      	ldrh	r2, [r3, #0]
 801b8ba:	4b2e      	ldr	r3, [pc, #184]	@ (801b974 <TRACE_Send+0xfc>)
 801b8bc:	8a1b      	ldrh	r3, [r3, #16]
 801b8be:	1ad3      	subs	r3, r2, r3
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	4b2c      	ldr	r3, [pc, #176]	@ (801b974 <TRACE_Send+0xfc>)
 801b8c4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b8c6:	4b2b      	ldr	r3, [pc, #172]	@ (801b974 <TRACE_Send+0xfc>)
 801b8c8:	2202      	movs	r2, #2
 801b8ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b8cc:	4b29      	ldr	r3, [pc, #164]	@ (801b974 <TRACE_Send+0xfc>)
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b8d2:	4b28      	ldr	r3, [pc, #160]	@ (801b974 <TRACE_Send+0xfc>)
 801b8d4:	8a9b      	ldrh	r3, [r3, #20]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d105      	bne.n	801b8e6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b8da:	4b26      	ldr	r3, [pc, #152]	@ (801b974 <TRACE_Send+0xfc>)
 801b8dc:	2200      	movs	r2, #0
 801b8de:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b8e0:	4b24      	ldr	r3, [pc, #144]	@ (801b974 <TRACE_Send+0xfc>)
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b8e6:	4b23      	ldr	r3, [pc, #140]	@ (801b974 <TRACE_Send+0xfc>)
 801b8e8:	789b      	ldrb	r3, [r3, #2]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d115      	bne.n	801b91a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b8ee:	4b21      	ldr	r3, [pc, #132]	@ (801b974 <TRACE_Send+0xfc>)
 801b8f0:	8a5a      	ldrh	r2, [r3, #18]
 801b8f2:	4b20      	ldr	r3, [pc, #128]	@ (801b974 <TRACE_Send+0xfc>)
 801b8f4:	8a1b      	ldrh	r3, [r3, #16]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d908      	bls.n	801b90c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b8fa:	4b1e      	ldr	r3, [pc, #120]	@ (801b974 <TRACE_Send+0xfc>)
 801b8fc:	8a5a      	ldrh	r2, [r3, #18]
 801b8fe:	4b1d      	ldr	r3, [pc, #116]	@ (801b974 <TRACE_Send+0xfc>)
 801b900:	8a1b      	ldrh	r3, [r3, #16]
 801b902:	1ad3      	subs	r3, r2, r3
 801b904:	b29a      	uxth	r2, r3
 801b906:	4b1b      	ldr	r3, [pc, #108]	@ (801b974 <TRACE_Send+0xfc>)
 801b908:	829a      	strh	r2, [r3, #20]
 801b90a:	e006      	b.n	801b91a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b90c:	4b19      	ldr	r3, [pc, #100]	@ (801b974 <TRACE_Send+0xfc>)
 801b90e:	8a1b      	ldrh	r3, [r3, #16]
 801b910:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b914:	b29a      	uxth	r2, r3
 801b916:	4b17      	ldr	r3, [pc, #92]	@ (801b974 <TRACE_Send+0xfc>)
 801b918:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b91a:	4b16      	ldr	r3, [pc, #88]	@ (801b974 <TRACE_Send+0xfc>)
 801b91c:	8a1b      	ldrh	r3, [r3, #16]
 801b91e:	461a      	mov	r2, r3
 801b920:	4b15      	ldr	r3, [pc, #84]	@ (801b978 <TRACE_Send+0x100>)
 801b922:	4413      	add	r3, r2
 801b924:	61bb      	str	r3, [r7, #24]
 801b926:	697b      	ldr	r3, [r7, #20]
 801b928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	f383 8810 	msr	PRIMASK, r3
}
 801b930:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b932:	f7e6 fbc1 	bl	80020b8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b936:	4b11      	ldr	r3, [pc, #68]	@ (801b97c <TRACE_Send+0x104>)
 801b938:	68db      	ldr	r3, [r3, #12]
 801b93a:	4a0e      	ldr	r2, [pc, #56]	@ (801b974 <TRACE_Send+0xfc>)
 801b93c:	8a92      	ldrh	r2, [r2, #20]
 801b93e:	4611      	mov	r1, r2
 801b940:	69b8      	ldr	r0, [r7, #24]
 801b942:	4798      	blx	r3
 801b944:	4603      	mov	r3, r0
 801b946:	77fb      	strb	r3, [r7, #31]
 801b948:	e00d      	b.n	801b966 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b94a:	f000 f941 	bl	801bbd0 <TRACE_UnLock>
 801b94e:	697b      	ldr	r3, [r7, #20]
 801b950:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	f383 8810 	msr	PRIMASK, r3
}
 801b958:	e005      	b.n	801b966 <TRACE_Send+0xee>
 801b95a:	697b      	ldr	r3, [r7, #20]
 801b95c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f383 8810 	msr	PRIMASK, r3
}
 801b964:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b966:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b96a:	4618      	mov	r0, r3
 801b96c:	3720      	adds	r7, #32
 801b96e:	46bd      	mov	sp, r7
 801b970:	bd80      	pop	{r7, pc}
 801b972:	bf00      	nop
 801b974:	20001da8 	.word	0x20001da8
 801b978:	20001dc0 	.word	0x20001dc0
 801b97c:	0801f16c 	.word	0x0801f16c

0801b980 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b088      	sub	sp, #32
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b988:	2300      	movs	r3, #0
 801b98a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b98c:	f3ef 8310 	mrs	r3, PRIMASK
 801b990:	617b      	str	r3, [r7, #20]
  return(result);
 801b992:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b994:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b996:	b672      	cpsid	i
}
 801b998:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b99a:	4b3c      	ldr	r3, [pc, #240]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b99c:	789b      	ldrb	r3, [r3, #2]
 801b99e:	2b02      	cmp	r3, #2
 801b9a0:	d106      	bne.n	801b9b0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b9a2:	4b3a      	ldr	r3, [pc, #232]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b9a8:	4b38      	ldr	r3, [pc, #224]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	821a      	strh	r2, [r3, #16]
 801b9ae:	e00a      	b.n	801b9c6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b9b0:	4b36      	ldr	r3, [pc, #216]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9b2:	8a1a      	ldrh	r2, [r3, #16]
 801b9b4:	4b35      	ldr	r3, [pc, #212]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9b6:	8a9b      	ldrh	r3, [r3, #20]
 801b9b8:	4413      	add	r3, r2
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b9c0:	b29a      	uxth	r2, r3
 801b9c2:	4b32      	ldr	r3, [pc, #200]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9c4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b9c6:	4b31      	ldr	r3, [pc, #196]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9c8:	8a1a      	ldrh	r2, [r3, #16]
 801b9ca:	4b30      	ldr	r3, [pc, #192]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9cc:	8a5b      	ldrh	r3, [r3, #18]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d04d      	beq.n	801ba6e <TRACE_TxCpltCallback+0xee>
 801b9d2:	4b2e      	ldr	r3, [pc, #184]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9d4:	8adb      	ldrh	r3, [r3, #22]
 801b9d6:	2b01      	cmp	r3, #1
 801b9d8:	d149      	bne.n	801ba6e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b9da:	4b2c      	ldr	r3, [pc, #176]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9dc:	789b      	ldrb	r3, [r3, #2]
 801b9de:	2b01      	cmp	r3, #1
 801b9e0:	d117      	bne.n	801ba12 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b9e2:	4b2a      	ldr	r3, [pc, #168]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9e4:	881a      	ldrh	r2, [r3, #0]
 801b9e6:	4b29      	ldr	r3, [pc, #164]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9e8:	8a1b      	ldrh	r3, [r3, #16]
 801b9ea:	1ad3      	subs	r3, r2, r3
 801b9ec:	b29a      	uxth	r2, r3
 801b9ee:	4b27      	ldr	r3, [pc, #156]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9f0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b9f2:	4b26      	ldr	r3, [pc, #152]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9f4:	2202      	movs	r2, #2
 801b9f6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b9f8:	4b24      	ldr	r3, [pc, #144]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b9fe:	4b23      	ldr	r3, [pc, #140]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba00:	8a9b      	ldrh	r3, [r3, #20]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d105      	bne.n	801ba12 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ba06:	4b21      	ldr	r3, [pc, #132]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba08:	2200      	movs	r2, #0
 801ba0a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ba0c:	4b1f      	ldr	r3, [pc, #124]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba0e:	2200      	movs	r2, #0
 801ba10:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ba12:	4b1e      	ldr	r3, [pc, #120]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba14:	789b      	ldrb	r3, [r3, #2]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d115      	bne.n	801ba46 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ba1a:	4b1c      	ldr	r3, [pc, #112]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba1c:	8a5a      	ldrh	r2, [r3, #18]
 801ba1e:	4b1b      	ldr	r3, [pc, #108]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba20:	8a1b      	ldrh	r3, [r3, #16]
 801ba22:	429a      	cmp	r2, r3
 801ba24:	d908      	bls.n	801ba38 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ba26:	4b19      	ldr	r3, [pc, #100]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba28:	8a5a      	ldrh	r2, [r3, #18]
 801ba2a:	4b18      	ldr	r3, [pc, #96]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba2c:	8a1b      	ldrh	r3, [r3, #16]
 801ba2e:	1ad3      	subs	r3, r2, r3
 801ba30:	b29a      	uxth	r2, r3
 801ba32:	4b16      	ldr	r3, [pc, #88]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba34:	829a      	strh	r2, [r3, #20]
 801ba36:	e006      	b.n	801ba46 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ba38:	4b14      	ldr	r3, [pc, #80]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba3a:	8a1b      	ldrh	r3, [r3, #16]
 801ba3c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ba40:	b29a      	uxth	r2, r3
 801ba42:	4b12      	ldr	r3, [pc, #72]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba44:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ba46:	4b11      	ldr	r3, [pc, #68]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba48:	8a1b      	ldrh	r3, [r3, #16]
 801ba4a:	461a      	mov	r2, r3
 801ba4c:	4b10      	ldr	r3, [pc, #64]	@ (801ba90 <TRACE_TxCpltCallback+0x110>)
 801ba4e:	4413      	add	r3, r2
 801ba50:	61fb      	str	r3, [r7, #28]
 801ba52:	69bb      	ldr	r3, [r7, #24]
 801ba54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	f383 8810 	msr	PRIMASK, r3
}
 801ba5c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ba5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ba94 <TRACE_TxCpltCallback+0x114>)
 801ba60:	68db      	ldr	r3, [r3, #12]
 801ba62:	4a0a      	ldr	r2, [pc, #40]	@ (801ba8c <TRACE_TxCpltCallback+0x10c>)
 801ba64:	8a92      	ldrh	r2, [r2, #20]
 801ba66:	4611      	mov	r1, r2
 801ba68:	69f8      	ldr	r0, [r7, #28]
 801ba6a:	4798      	blx	r3
 801ba6c:	e00a      	b.n	801ba84 <TRACE_TxCpltCallback+0x104>
 801ba6e:	69bb      	ldr	r3, [r7, #24]
 801ba70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	f383 8810 	msr	PRIMASK, r3
}
 801ba78:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ba7a:	f7e6 fb25 	bl	80020c8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ba7e:	f000 f8a7 	bl	801bbd0 <TRACE_UnLock>
  }
}
 801ba82:	bf00      	nop
 801ba84:	bf00      	nop
 801ba86:	3720      	adds	r7, #32
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	20001da8 	.word	0x20001da8
 801ba90:	20001dc0 	.word	0x20001dc0
 801ba94:	0801f16c 	.word	0x0801f16c

0801ba98 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ba98:	b480      	push	{r7}
 801ba9a:	b087      	sub	sp, #28
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	4603      	mov	r3, r0
 801baa0:	6039      	str	r1, [r7, #0]
 801baa2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801baa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801baa8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baaa:	f3ef 8310 	mrs	r3, PRIMASK
 801baae:	60fb      	str	r3, [r7, #12]
  return(result);
 801bab0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bab4:	b672      	cpsid	i
}
 801bab6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bab8:	4b35      	ldr	r3, [pc, #212]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801baba:	8a5a      	ldrh	r2, [r3, #18]
 801babc:	4b34      	ldr	r3, [pc, #208]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801babe:	8a1b      	ldrh	r3, [r3, #16]
 801bac0:	429a      	cmp	r2, r3
 801bac2:	d11b      	bne.n	801bafc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bac4:	4b32      	ldr	r3, [pc, #200]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bac6:	8a5b      	ldrh	r3, [r3, #18]
 801bac8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bacc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bace:	88fa      	ldrh	r2, [r7, #6]
 801bad0:	8afb      	ldrh	r3, [r7, #22]
 801bad2:	429a      	cmp	r2, r3
 801bad4:	d33a      	bcc.n	801bb4c <TRACE_AllocateBufer+0xb4>
 801bad6:	4b2e      	ldr	r3, [pc, #184]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bad8:	8a1b      	ldrh	r3, [r3, #16]
 801bada:	88fa      	ldrh	r2, [r7, #6]
 801badc:	429a      	cmp	r2, r3
 801bade:	d235      	bcs.n	801bb4c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bae0:	4b2b      	ldr	r3, [pc, #172]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bae2:	2201      	movs	r2, #1
 801bae4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bae6:	4b2a      	ldr	r3, [pc, #168]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bae8:	8a5a      	ldrh	r2, [r3, #18]
 801baea:	4b29      	ldr	r3, [pc, #164]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801baec:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801baee:	4b28      	ldr	r3, [pc, #160]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801baf0:	8a1b      	ldrh	r3, [r3, #16]
 801baf2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801baf4:	4b26      	ldr	r3, [pc, #152]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801baf6:	2200      	movs	r2, #0
 801baf8:	825a      	strh	r2, [r3, #18]
 801bafa:	e027      	b.n	801bb4c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bafc:	4b24      	ldr	r3, [pc, #144]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bafe:	8a5a      	ldrh	r2, [r3, #18]
 801bb00:	4b23      	ldr	r3, [pc, #140]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb02:	8a1b      	ldrh	r3, [r3, #16]
 801bb04:	429a      	cmp	r2, r3
 801bb06:	d91b      	bls.n	801bb40 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bb08:	4b21      	ldr	r3, [pc, #132]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb0a:	8a5b      	ldrh	r3, [r3, #18]
 801bb0c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bb10:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bb12:	88fa      	ldrh	r2, [r7, #6]
 801bb14:	8afb      	ldrh	r3, [r7, #22]
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d318      	bcc.n	801bb4c <TRACE_AllocateBufer+0xb4>
 801bb1a:	4b1d      	ldr	r3, [pc, #116]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb1c:	8a1b      	ldrh	r3, [r3, #16]
 801bb1e:	88fa      	ldrh	r2, [r7, #6]
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d213      	bcs.n	801bb4c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bb24:	4b1a      	ldr	r3, [pc, #104]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb26:	2201      	movs	r2, #1
 801bb28:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bb2a:	4b19      	ldr	r3, [pc, #100]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb2c:	8a5a      	ldrh	r2, [r3, #18]
 801bb2e:	4b18      	ldr	r3, [pc, #96]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb30:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bb32:	4b17      	ldr	r3, [pc, #92]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb34:	8a1b      	ldrh	r3, [r3, #16]
 801bb36:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bb38:	4b15      	ldr	r3, [pc, #84]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	825a      	strh	r2, [r3, #18]
 801bb3e:	e005      	b.n	801bb4c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bb40:	4b13      	ldr	r3, [pc, #76]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb42:	8a1a      	ldrh	r2, [r3, #16]
 801bb44:	4b12      	ldr	r3, [pc, #72]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb46:	8a5b      	ldrh	r3, [r3, #18]
 801bb48:	1ad3      	subs	r3, r2, r3
 801bb4a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bb4c:	8afa      	ldrh	r2, [r7, #22]
 801bb4e:	88fb      	ldrh	r3, [r7, #6]
 801bb50:	429a      	cmp	r2, r3
 801bb52:	d90f      	bls.n	801bb74 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bb54:	4b0e      	ldr	r3, [pc, #56]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb56:	8a5a      	ldrh	r2, [r3, #18]
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bb5c:	4b0c      	ldr	r3, [pc, #48]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb5e:	8a5a      	ldrh	r2, [r3, #18]
 801bb60:	88fb      	ldrh	r3, [r7, #6]
 801bb62:	4413      	add	r3, r2
 801bb64:	b29b      	uxth	r3, r3
 801bb66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bb6a:	b29a      	uxth	r2, r3
 801bb6c:	4b08      	ldr	r3, [pc, #32]	@ (801bb90 <TRACE_AllocateBufer+0xf8>)
 801bb6e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bb70:	2300      	movs	r3, #0
 801bb72:	82bb      	strh	r3, [r7, #20]
 801bb74:	693b      	ldr	r3, [r7, #16]
 801bb76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb78:	68bb      	ldr	r3, [r7, #8]
 801bb7a:	f383 8810 	msr	PRIMASK, r3
}
 801bb7e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bb80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bb84:	4618      	mov	r0, r3
 801bb86:	371c      	adds	r7, #28
 801bb88:	46bd      	mov	sp, r7
 801bb8a:	bc80      	pop	{r7}
 801bb8c:	4770      	bx	lr
 801bb8e:	bf00      	nop
 801bb90:	20001da8 	.word	0x20001da8

0801bb94 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bb94:	b480      	push	{r7}
 801bb96:	b085      	sub	sp, #20
 801bb98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb9a:	f3ef 8310 	mrs	r3, PRIMASK
 801bb9e:	607b      	str	r3, [r7, #4]
  return(result);
 801bba0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bba2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bba4:	b672      	cpsid	i
}
 801bba6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bba8:	4b08      	ldr	r3, [pc, #32]	@ (801bbcc <TRACE_Lock+0x38>)
 801bbaa:	8adb      	ldrh	r3, [r3, #22]
 801bbac:	3301      	adds	r3, #1
 801bbae:	b29a      	uxth	r2, r3
 801bbb0:	4b06      	ldr	r3, [pc, #24]	@ (801bbcc <TRACE_Lock+0x38>)
 801bbb2:	82da      	strh	r2, [r3, #22]
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	f383 8810 	msr	PRIMASK, r3
}
 801bbbe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bbc0:	bf00      	nop
 801bbc2:	3714      	adds	r7, #20
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bc80      	pop	{r7}
 801bbc8:	4770      	bx	lr
 801bbca:	bf00      	nop
 801bbcc:	20001da8 	.word	0x20001da8

0801bbd0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bbd0:	b480      	push	{r7}
 801bbd2:	b085      	sub	sp, #20
 801bbd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbd6:	f3ef 8310 	mrs	r3, PRIMASK
 801bbda:	607b      	str	r3, [r7, #4]
  return(result);
 801bbdc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bbde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbe0:	b672      	cpsid	i
}
 801bbe2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bbe4:	4b08      	ldr	r3, [pc, #32]	@ (801bc08 <TRACE_UnLock+0x38>)
 801bbe6:	8adb      	ldrh	r3, [r3, #22]
 801bbe8:	3b01      	subs	r3, #1
 801bbea:	b29a      	uxth	r2, r3
 801bbec:	4b06      	ldr	r3, [pc, #24]	@ (801bc08 <TRACE_UnLock+0x38>)
 801bbee:	82da      	strh	r2, [r3, #22]
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	f383 8810 	msr	PRIMASK, r3
}
 801bbfa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bbfc:	bf00      	nop
 801bbfe:	3714      	adds	r7, #20
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bc80      	pop	{r7}
 801bc04:	4770      	bx	lr
 801bc06:	bf00      	nop
 801bc08:	20001da8 	.word	0x20001da8

0801bc0c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bc0c:	b480      	push	{r7}
 801bc0e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bc10:	4b05      	ldr	r3, [pc, #20]	@ (801bc28 <TRACE_IsLocked+0x1c>)
 801bc12:	8adb      	ldrh	r3, [r3, #22]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	bf14      	ite	ne
 801bc18:	2301      	movne	r3, #1
 801bc1a:	2300      	moveq	r3, #0
 801bc1c:	b2db      	uxtb	r3, r3
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bc80      	pop	{r7}
 801bc24:	4770      	bx	lr
 801bc26:	bf00      	nop
 801bc28:	20001da8 	.word	0x20001da8

0801bc2c <__cvt>:
 801bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc30:	b088      	sub	sp, #32
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	461d      	mov	r5, r3
 801bc36:	4614      	mov	r4, r2
 801bc38:	bfbc      	itt	lt
 801bc3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801bc3e:	4614      	movlt	r4, r2
 801bc40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bc42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801bc44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801bc48:	bfb6      	itet	lt
 801bc4a:	461d      	movlt	r5, r3
 801bc4c:	2300      	movge	r3, #0
 801bc4e:	232d      	movlt	r3, #45	@ 0x2d
 801bc50:	7013      	strb	r3, [r2, #0]
 801bc52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc54:	f023 0820 	bic.w	r8, r3, #32
 801bc58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bc5c:	d005      	beq.n	801bc6a <__cvt+0x3e>
 801bc5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bc62:	d100      	bne.n	801bc66 <__cvt+0x3a>
 801bc64:	3601      	adds	r6, #1
 801bc66:	2302      	movs	r3, #2
 801bc68:	e000      	b.n	801bc6c <__cvt+0x40>
 801bc6a:	2303      	movs	r3, #3
 801bc6c:	aa07      	add	r2, sp, #28
 801bc6e:	9204      	str	r2, [sp, #16]
 801bc70:	aa06      	add	r2, sp, #24
 801bc72:	e9cd a202 	strd	sl, r2, [sp, #8]
 801bc76:	e9cd 3600 	strd	r3, r6, [sp]
 801bc7a:	4622      	mov	r2, r4
 801bc7c:	462b      	mov	r3, r5
 801bc7e:	f000 fe3b 	bl	801c8f8 <_dtoa_r>
 801bc82:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bc86:	4607      	mov	r7, r0
 801bc88:	d119      	bne.n	801bcbe <__cvt+0x92>
 801bc8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bc8c:	07db      	lsls	r3, r3, #31
 801bc8e:	d50e      	bpl.n	801bcae <__cvt+0x82>
 801bc90:	eb00 0906 	add.w	r9, r0, r6
 801bc94:	2200      	movs	r2, #0
 801bc96:	2300      	movs	r3, #0
 801bc98:	4620      	mov	r0, r4
 801bc9a:	4629      	mov	r1, r5
 801bc9c:	f7e4 feec 	bl	8000a78 <__aeabi_dcmpeq>
 801bca0:	b108      	cbz	r0, 801bca6 <__cvt+0x7a>
 801bca2:	f8cd 901c 	str.w	r9, [sp, #28]
 801bca6:	2230      	movs	r2, #48	@ 0x30
 801bca8:	9b07      	ldr	r3, [sp, #28]
 801bcaa:	454b      	cmp	r3, r9
 801bcac:	d31e      	bcc.n	801bcec <__cvt+0xc0>
 801bcae:	9b07      	ldr	r3, [sp, #28]
 801bcb0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bcb2:	1bdb      	subs	r3, r3, r7
 801bcb4:	4638      	mov	r0, r7
 801bcb6:	6013      	str	r3, [r2, #0]
 801bcb8:	b008      	add	sp, #32
 801bcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcbe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bcc2:	eb00 0906 	add.w	r9, r0, r6
 801bcc6:	d1e5      	bne.n	801bc94 <__cvt+0x68>
 801bcc8:	7803      	ldrb	r3, [r0, #0]
 801bcca:	2b30      	cmp	r3, #48	@ 0x30
 801bccc:	d10a      	bne.n	801bce4 <__cvt+0xb8>
 801bcce:	2200      	movs	r2, #0
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	4629      	mov	r1, r5
 801bcd6:	f7e4 fecf 	bl	8000a78 <__aeabi_dcmpeq>
 801bcda:	b918      	cbnz	r0, 801bce4 <__cvt+0xb8>
 801bcdc:	f1c6 0601 	rsb	r6, r6, #1
 801bce0:	f8ca 6000 	str.w	r6, [sl]
 801bce4:	f8da 3000 	ldr.w	r3, [sl]
 801bce8:	4499      	add	r9, r3
 801bcea:	e7d3      	b.n	801bc94 <__cvt+0x68>
 801bcec:	1c59      	adds	r1, r3, #1
 801bcee:	9107      	str	r1, [sp, #28]
 801bcf0:	701a      	strb	r2, [r3, #0]
 801bcf2:	e7d9      	b.n	801bca8 <__cvt+0x7c>

0801bcf4 <__exponent>:
 801bcf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bcf6:	2900      	cmp	r1, #0
 801bcf8:	bfba      	itte	lt
 801bcfa:	4249      	neglt	r1, r1
 801bcfc:	232d      	movlt	r3, #45	@ 0x2d
 801bcfe:	232b      	movge	r3, #43	@ 0x2b
 801bd00:	2909      	cmp	r1, #9
 801bd02:	7002      	strb	r2, [r0, #0]
 801bd04:	7043      	strb	r3, [r0, #1]
 801bd06:	dd29      	ble.n	801bd5c <__exponent+0x68>
 801bd08:	f10d 0307 	add.w	r3, sp, #7
 801bd0c:	461d      	mov	r5, r3
 801bd0e:	270a      	movs	r7, #10
 801bd10:	461a      	mov	r2, r3
 801bd12:	fbb1 f6f7 	udiv	r6, r1, r7
 801bd16:	fb07 1416 	mls	r4, r7, r6, r1
 801bd1a:	3430      	adds	r4, #48	@ 0x30
 801bd1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bd20:	460c      	mov	r4, r1
 801bd22:	2c63      	cmp	r4, #99	@ 0x63
 801bd24:	f103 33ff 	add.w	r3, r3, #4294967295
 801bd28:	4631      	mov	r1, r6
 801bd2a:	dcf1      	bgt.n	801bd10 <__exponent+0x1c>
 801bd2c:	3130      	adds	r1, #48	@ 0x30
 801bd2e:	1e94      	subs	r4, r2, #2
 801bd30:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bd34:	1c41      	adds	r1, r0, #1
 801bd36:	4623      	mov	r3, r4
 801bd38:	42ab      	cmp	r3, r5
 801bd3a:	d30a      	bcc.n	801bd52 <__exponent+0x5e>
 801bd3c:	f10d 0309 	add.w	r3, sp, #9
 801bd40:	1a9b      	subs	r3, r3, r2
 801bd42:	42ac      	cmp	r4, r5
 801bd44:	bf88      	it	hi
 801bd46:	2300      	movhi	r3, #0
 801bd48:	3302      	adds	r3, #2
 801bd4a:	4403      	add	r3, r0
 801bd4c:	1a18      	subs	r0, r3, r0
 801bd4e:	b003      	add	sp, #12
 801bd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd52:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bd56:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bd5a:	e7ed      	b.n	801bd38 <__exponent+0x44>
 801bd5c:	2330      	movs	r3, #48	@ 0x30
 801bd5e:	3130      	adds	r1, #48	@ 0x30
 801bd60:	7083      	strb	r3, [r0, #2]
 801bd62:	70c1      	strb	r1, [r0, #3]
 801bd64:	1d03      	adds	r3, r0, #4
 801bd66:	e7f1      	b.n	801bd4c <__exponent+0x58>

0801bd68 <_printf_float>:
 801bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd6c:	b091      	sub	sp, #68	@ 0x44
 801bd6e:	460c      	mov	r4, r1
 801bd70:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801bd74:	4616      	mov	r6, r2
 801bd76:	461f      	mov	r7, r3
 801bd78:	4605      	mov	r5, r0
 801bd7a:	f000 fcbb 	bl	801c6f4 <_localeconv_r>
 801bd7e:	6803      	ldr	r3, [r0, #0]
 801bd80:	9308      	str	r3, [sp, #32]
 801bd82:	4618      	mov	r0, r3
 801bd84:	f7e4 fa4c 	bl	8000220 <strlen>
 801bd88:	2300      	movs	r3, #0
 801bd8a:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd8c:	f8d8 3000 	ldr.w	r3, [r8]
 801bd90:	9009      	str	r0, [sp, #36]	@ 0x24
 801bd92:	3307      	adds	r3, #7
 801bd94:	f023 0307 	bic.w	r3, r3, #7
 801bd98:	f103 0208 	add.w	r2, r3, #8
 801bd9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bda0:	f8d4 b000 	ldr.w	fp, [r4]
 801bda4:	f8c8 2000 	str.w	r2, [r8]
 801bda8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bdac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801bdb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdb2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801bdb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801bdba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bdbe:	4b9d      	ldr	r3, [pc, #628]	@ (801c034 <_printf_float+0x2cc>)
 801bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 801bdc4:	f7e4 fe8a 	bl	8000adc <__aeabi_dcmpun>
 801bdc8:	bb70      	cbnz	r0, 801be28 <_printf_float+0xc0>
 801bdca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bdce:	4b99      	ldr	r3, [pc, #612]	@ (801c034 <_printf_float+0x2cc>)
 801bdd0:	f04f 32ff 	mov.w	r2, #4294967295
 801bdd4:	f7e4 fe64 	bl	8000aa0 <__aeabi_dcmple>
 801bdd8:	bb30      	cbnz	r0, 801be28 <_printf_float+0xc0>
 801bdda:	2200      	movs	r2, #0
 801bddc:	2300      	movs	r3, #0
 801bdde:	4640      	mov	r0, r8
 801bde0:	4649      	mov	r1, r9
 801bde2:	f7e4 fe53 	bl	8000a8c <__aeabi_dcmplt>
 801bde6:	b110      	cbz	r0, 801bdee <_printf_float+0x86>
 801bde8:	232d      	movs	r3, #45	@ 0x2d
 801bdea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bdee:	4a92      	ldr	r2, [pc, #584]	@ (801c038 <_printf_float+0x2d0>)
 801bdf0:	4b92      	ldr	r3, [pc, #584]	@ (801c03c <_printf_float+0x2d4>)
 801bdf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bdf6:	bf8c      	ite	hi
 801bdf8:	4690      	movhi	r8, r2
 801bdfa:	4698      	movls	r8, r3
 801bdfc:	2303      	movs	r3, #3
 801bdfe:	6123      	str	r3, [r4, #16]
 801be00:	f02b 0304 	bic.w	r3, fp, #4
 801be04:	6023      	str	r3, [r4, #0]
 801be06:	f04f 0900 	mov.w	r9, #0
 801be0a:	9700      	str	r7, [sp, #0]
 801be0c:	4633      	mov	r3, r6
 801be0e:	aa0f      	add	r2, sp, #60	@ 0x3c
 801be10:	4621      	mov	r1, r4
 801be12:	4628      	mov	r0, r5
 801be14:	f000 f9d4 	bl	801c1c0 <_printf_common>
 801be18:	3001      	adds	r0, #1
 801be1a:	f040 808f 	bne.w	801bf3c <_printf_float+0x1d4>
 801be1e:	f04f 30ff 	mov.w	r0, #4294967295
 801be22:	b011      	add	sp, #68	@ 0x44
 801be24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be28:	4642      	mov	r2, r8
 801be2a:	464b      	mov	r3, r9
 801be2c:	4640      	mov	r0, r8
 801be2e:	4649      	mov	r1, r9
 801be30:	f7e4 fe54 	bl	8000adc <__aeabi_dcmpun>
 801be34:	b140      	cbz	r0, 801be48 <_printf_float+0xe0>
 801be36:	464b      	mov	r3, r9
 801be38:	2b00      	cmp	r3, #0
 801be3a:	bfbc      	itt	lt
 801be3c:	232d      	movlt	r3, #45	@ 0x2d
 801be3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801be42:	4a7f      	ldr	r2, [pc, #508]	@ (801c040 <_printf_float+0x2d8>)
 801be44:	4b7f      	ldr	r3, [pc, #508]	@ (801c044 <_printf_float+0x2dc>)
 801be46:	e7d4      	b.n	801bdf2 <_printf_float+0x8a>
 801be48:	6863      	ldr	r3, [r4, #4]
 801be4a:	1c5a      	adds	r2, r3, #1
 801be4c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801be50:	d13f      	bne.n	801bed2 <_printf_float+0x16a>
 801be52:	2306      	movs	r3, #6
 801be54:	6063      	str	r3, [r4, #4]
 801be56:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801be5a:	2200      	movs	r2, #0
 801be5c:	6023      	str	r3, [r4, #0]
 801be5e:	9206      	str	r2, [sp, #24]
 801be60:	aa0e      	add	r2, sp, #56	@ 0x38
 801be62:	e9cd a204 	strd	sl, r2, [sp, #16]
 801be66:	aa0d      	add	r2, sp, #52	@ 0x34
 801be68:	9203      	str	r2, [sp, #12]
 801be6a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801be6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801be72:	6863      	ldr	r3, [r4, #4]
 801be74:	9300      	str	r3, [sp, #0]
 801be76:	4642      	mov	r2, r8
 801be78:	464b      	mov	r3, r9
 801be7a:	4628      	mov	r0, r5
 801be7c:	910a      	str	r1, [sp, #40]	@ 0x28
 801be7e:	f7ff fed5 	bl	801bc2c <__cvt>
 801be82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be84:	2947      	cmp	r1, #71	@ 0x47
 801be86:	4680      	mov	r8, r0
 801be88:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801be8a:	d128      	bne.n	801bede <_printf_float+0x176>
 801be8c:	1cc8      	adds	r0, r1, #3
 801be8e:	db02      	blt.n	801be96 <_printf_float+0x12e>
 801be90:	6863      	ldr	r3, [r4, #4]
 801be92:	4299      	cmp	r1, r3
 801be94:	dd40      	ble.n	801bf18 <_printf_float+0x1b0>
 801be96:	f1aa 0a02 	sub.w	sl, sl, #2
 801be9a:	fa5f fa8a 	uxtb.w	sl, sl
 801be9e:	3901      	subs	r1, #1
 801bea0:	4652      	mov	r2, sl
 801bea2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bea6:	910d      	str	r1, [sp, #52]	@ 0x34
 801bea8:	f7ff ff24 	bl	801bcf4 <__exponent>
 801beac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801beae:	1813      	adds	r3, r2, r0
 801beb0:	2a01      	cmp	r2, #1
 801beb2:	4681      	mov	r9, r0
 801beb4:	6123      	str	r3, [r4, #16]
 801beb6:	dc02      	bgt.n	801bebe <_printf_float+0x156>
 801beb8:	6822      	ldr	r2, [r4, #0]
 801beba:	07d2      	lsls	r2, r2, #31
 801bebc:	d501      	bpl.n	801bec2 <_printf_float+0x15a>
 801bebe:	3301      	adds	r3, #1
 801bec0:	6123      	str	r3, [r4, #16]
 801bec2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d09f      	beq.n	801be0a <_printf_float+0xa2>
 801beca:	232d      	movs	r3, #45	@ 0x2d
 801becc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bed0:	e79b      	b.n	801be0a <_printf_float+0xa2>
 801bed2:	2947      	cmp	r1, #71	@ 0x47
 801bed4:	d1bf      	bne.n	801be56 <_printf_float+0xee>
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d1bd      	bne.n	801be56 <_printf_float+0xee>
 801beda:	2301      	movs	r3, #1
 801bedc:	e7ba      	b.n	801be54 <_printf_float+0xec>
 801bede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bee2:	d9dc      	bls.n	801be9e <_printf_float+0x136>
 801bee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bee8:	d118      	bne.n	801bf1c <_printf_float+0x1b4>
 801beea:	2900      	cmp	r1, #0
 801beec:	6863      	ldr	r3, [r4, #4]
 801beee:	dd0b      	ble.n	801bf08 <_printf_float+0x1a0>
 801bef0:	6121      	str	r1, [r4, #16]
 801bef2:	b913      	cbnz	r3, 801befa <_printf_float+0x192>
 801bef4:	6822      	ldr	r2, [r4, #0]
 801bef6:	07d0      	lsls	r0, r2, #31
 801bef8:	d502      	bpl.n	801bf00 <_printf_float+0x198>
 801befa:	3301      	adds	r3, #1
 801befc:	440b      	add	r3, r1
 801befe:	6123      	str	r3, [r4, #16]
 801bf00:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bf02:	f04f 0900 	mov.w	r9, #0
 801bf06:	e7dc      	b.n	801bec2 <_printf_float+0x15a>
 801bf08:	b913      	cbnz	r3, 801bf10 <_printf_float+0x1a8>
 801bf0a:	6822      	ldr	r2, [r4, #0]
 801bf0c:	07d2      	lsls	r2, r2, #31
 801bf0e:	d501      	bpl.n	801bf14 <_printf_float+0x1ac>
 801bf10:	3302      	adds	r3, #2
 801bf12:	e7f4      	b.n	801befe <_printf_float+0x196>
 801bf14:	2301      	movs	r3, #1
 801bf16:	e7f2      	b.n	801befe <_printf_float+0x196>
 801bf18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bf1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf1e:	4299      	cmp	r1, r3
 801bf20:	db05      	blt.n	801bf2e <_printf_float+0x1c6>
 801bf22:	6823      	ldr	r3, [r4, #0]
 801bf24:	6121      	str	r1, [r4, #16]
 801bf26:	07d8      	lsls	r0, r3, #31
 801bf28:	d5ea      	bpl.n	801bf00 <_printf_float+0x198>
 801bf2a:	1c4b      	adds	r3, r1, #1
 801bf2c:	e7e7      	b.n	801befe <_printf_float+0x196>
 801bf2e:	2900      	cmp	r1, #0
 801bf30:	bfd4      	ite	le
 801bf32:	f1c1 0202 	rsble	r2, r1, #2
 801bf36:	2201      	movgt	r2, #1
 801bf38:	4413      	add	r3, r2
 801bf3a:	e7e0      	b.n	801befe <_printf_float+0x196>
 801bf3c:	6823      	ldr	r3, [r4, #0]
 801bf3e:	055a      	lsls	r2, r3, #21
 801bf40:	d407      	bmi.n	801bf52 <_printf_float+0x1ea>
 801bf42:	6923      	ldr	r3, [r4, #16]
 801bf44:	4642      	mov	r2, r8
 801bf46:	4631      	mov	r1, r6
 801bf48:	4628      	mov	r0, r5
 801bf4a:	47b8      	blx	r7
 801bf4c:	3001      	adds	r0, #1
 801bf4e:	d12b      	bne.n	801bfa8 <_printf_float+0x240>
 801bf50:	e765      	b.n	801be1e <_printf_float+0xb6>
 801bf52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bf56:	f240 80dd 	bls.w	801c114 <_printf_float+0x3ac>
 801bf5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bf5e:	2200      	movs	r2, #0
 801bf60:	2300      	movs	r3, #0
 801bf62:	f7e4 fd89 	bl	8000a78 <__aeabi_dcmpeq>
 801bf66:	2800      	cmp	r0, #0
 801bf68:	d033      	beq.n	801bfd2 <_printf_float+0x26a>
 801bf6a:	4a37      	ldr	r2, [pc, #220]	@ (801c048 <_printf_float+0x2e0>)
 801bf6c:	2301      	movs	r3, #1
 801bf6e:	4631      	mov	r1, r6
 801bf70:	4628      	mov	r0, r5
 801bf72:	47b8      	blx	r7
 801bf74:	3001      	adds	r0, #1
 801bf76:	f43f af52 	beq.w	801be1e <_printf_float+0xb6>
 801bf7a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801bf7e:	4543      	cmp	r3, r8
 801bf80:	db02      	blt.n	801bf88 <_printf_float+0x220>
 801bf82:	6823      	ldr	r3, [r4, #0]
 801bf84:	07d8      	lsls	r0, r3, #31
 801bf86:	d50f      	bpl.n	801bfa8 <_printf_float+0x240>
 801bf88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bf8c:	4631      	mov	r1, r6
 801bf8e:	4628      	mov	r0, r5
 801bf90:	47b8      	blx	r7
 801bf92:	3001      	adds	r0, #1
 801bf94:	f43f af43 	beq.w	801be1e <_printf_float+0xb6>
 801bf98:	f04f 0900 	mov.w	r9, #0
 801bf9c:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfa0:	f104 0a1a 	add.w	sl, r4, #26
 801bfa4:	45c8      	cmp	r8, r9
 801bfa6:	dc09      	bgt.n	801bfbc <_printf_float+0x254>
 801bfa8:	6823      	ldr	r3, [r4, #0]
 801bfaa:	079b      	lsls	r3, r3, #30
 801bfac:	f100 8103 	bmi.w	801c1b6 <_printf_float+0x44e>
 801bfb0:	68e0      	ldr	r0, [r4, #12]
 801bfb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfb4:	4298      	cmp	r0, r3
 801bfb6:	bfb8      	it	lt
 801bfb8:	4618      	movlt	r0, r3
 801bfba:	e732      	b.n	801be22 <_printf_float+0xba>
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	4652      	mov	r2, sl
 801bfc0:	4631      	mov	r1, r6
 801bfc2:	4628      	mov	r0, r5
 801bfc4:	47b8      	blx	r7
 801bfc6:	3001      	adds	r0, #1
 801bfc8:	f43f af29 	beq.w	801be1e <_printf_float+0xb6>
 801bfcc:	f109 0901 	add.w	r9, r9, #1
 801bfd0:	e7e8      	b.n	801bfa4 <_printf_float+0x23c>
 801bfd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	dc39      	bgt.n	801c04c <_printf_float+0x2e4>
 801bfd8:	4a1b      	ldr	r2, [pc, #108]	@ (801c048 <_printf_float+0x2e0>)
 801bfda:	2301      	movs	r3, #1
 801bfdc:	4631      	mov	r1, r6
 801bfde:	4628      	mov	r0, r5
 801bfe0:	47b8      	blx	r7
 801bfe2:	3001      	adds	r0, #1
 801bfe4:	f43f af1b 	beq.w	801be1e <_printf_float+0xb6>
 801bfe8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801bfec:	ea59 0303 	orrs.w	r3, r9, r3
 801bff0:	d102      	bne.n	801bff8 <_printf_float+0x290>
 801bff2:	6823      	ldr	r3, [r4, #0]
 801bff4:	07d9      	lsls	r1, r3, #31
 801bff6:	d5d7      	bpl.n	801bfa8 <_printf_float+0x240>
 801bff8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bffc:	4631      	mov	r1, r6
 801bffe:	4628      	mov	r0, r5
 801c000:	47b8      	blx	r7
 801c002:	3001      	adds	r0, #1
 801c004:	f43f af0b 	beq.w	801be1e <_printf_float+0xb6>
 801c008:	f04f 0a00 	mov.w	sl, #0
 801c00c:	f104 0b1a 	add.w	fp, r4, #26
 801c010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c012:	425b      	negs	r3, r3
 801c014:	4553      	cmp	r3, sl
 801c016:	dc01      	bgt.n	801c01c <_printf_float+0x2b4>
 801c018:	464b      	mov	r3, r9
 801c01a:	e793      	b.n	801bf44 <_printf_float+0x1dc>
 801c01c:	2301      	movs	r3, #1
 801c01e:	465a      	mov	r2, fp
 801c020:	4631      	mov	r1, r6
 801c022:	4628      	mov	r0, r5
 801c024:	47b8      	blx	r7
 801c026:	3001      	adds	r0, #1
 801c028:	f43f aef9 	beq.w	801be1e <_printf_float+0xb6>
 801c02c:	f10a 0a01 	add.w	sl, sl, #1
 801c030:	e7ee      	b.n	801c010 <_printf_float+0x2a8>
 801c032:	bf00      	nop
 801c034:	7fefffff 	.word	0x7fefffff
 801c038:	0801f6c0 	.word	0x0801f6c0
 801c03c:	0801f6bc 	.word	0x0801f6bc
 801c040:	0801f6c8 	.word	0x0801f6c8
 801c044:	0801f6c4 	.word	0x0801f6c4
 801c048:	0801f6cc 	.word	0x0801f6cc
 801c04c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c04e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c052:	4553      	cmp	r3, sl
 801c054:	bfa8      	it	ge
 801c056:	4653      	movge	r3, sl
 801c058:	2b00      	cmp	r3, #0
 801c05a:	4699      	mov	r9, r3
 801c05c:	dc36      	bgt.n	801c0cc <_printf_float+0x364>
 801c05e:	f04f 0b00 	mov.w	fp, #0
 801c062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c066:	f104 021a 	add.w	r2, r4, #26
 801c06a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c06c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c06e:	eba3 0309 	sub.w	r3, r3, r9
 801c072:	455b      	cmp	r3, fp
 801c074:	dc31      	bgt.n	801c0da <_printf_float+0x372>
 801c076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c078:	459a      	cmp	sl, r3
 801c07a:	dc3a      	bgt.n	801c0f2 <_printf_float+0x38a>
 801c07c:	6823      	ldr	r3, [r4, #0]
 801c07e:	07da      	lsls	r2, r3, #31
 801c080:	d437      	bmi.n	801c0f2 <_printf_float+0x38a>
 801c082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c084:	ebaa 0903 	sub.w	r9, sl, r3
 801c088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c08a:	ebaa 0303 	sub.w	r3, sl, r3
 801c08e:	4599      	cmp	r9, r3
 801c090:	bfa8      	it	ge
 801c092:	4699      	movge	r9, r3
 801c094:	f1b9 0f00 	cmp.w	r9, #0
 801c098:	dc33      	bgt.n	801c102 <_printf_float+0x39a>
 801c09a:	f04f 0800 	mov.w	r8, #0
 801c09e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c0a2:	f104 0b1a 	add.w	fp, r4, #26
 801c0a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0a8:	ebaa 0303 	sub.w	r3, sl, r3
 801c0ac:	eba3 0309 	sub.w	r3, r3, r9
 801c0b0:	4543      	cmp	r3, r8
 801c0b2:	f77f af79 	ble.w	801bfa8 <_printf_float+0x240>
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	465a      	mov	r2, fp
 801c0ba:	4631      	mov	r1, r6
 801c0bc:	4628      	mov	r0, r5
 801c0be:	47b8      	blx	r7
 801c0c0:	3001      	adds	r0, #1
 801c0c2:	f43f aeac 	beq.w	801be1e <_printf_float+0xb6>
 801c0c6:	f108 0801 	add.w	r8, r8, #1
 801c0ca:	e7ec      	b.n	801c0a6 <_printf_float+0x33e>
 801c0cc:	4642      	mov	r2, r8
 801c0ce:	4631      	mov	r1, r6
 801c0d0:	4628      	mov	r0, r5
 801c0d2:	47b8      	blx	r7
 801c0d4:	3001      	adds	r0, #1
 801c0d6:	d1c2      	bne.n	801c05e <_printf_float+0x2f6>
 801c0d8:	e6a1      	b.n	801be1e <_printf_float+0xb6>
 801c0da:	2301      	movs	r3, #1
 801c0dc:	4631      	mov	r1, r6
 801c0de:	4628      	mov	r0, r5
 801c0e0:	920a      	str	r2, [sp, #40]	@ 0x28
 801c0e2:	47b8      	blx	r7
 801c0e4:	3001      	adds	r0, #1
 801c0e6:	f43f ae9a 	beq.w	801be1e <_printf_float+0xb6>
 801c0ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c0ec:	f10b 0b01 	add.w	fp, fp, #1
 801c0f0:	e7bb      	b.n	801c06a <_printf_float+0x302>
 801c0f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0f6:	4631      	mov	r1, r6
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	47b8      	blx	r7
 801c0fc:	3001      	adds	r0, #1
 801c0fe:	d1c0      	bne.n	801c082 <_printf_float+0x31a>
 801c100:	e68d      	b.n	801be1e <_printf_float+0xb6>
 801c102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c104:	464b      	mov	r3, r9
 801c106:	4442      	add	r2, r8
 801c108:	4631      	mov	r1, r6
 801c10a:	4628      	mov	r0, r5
 801c10c:	47b8      	blx	r7
 801c10e:	3001      	adds	r0, #1
 801c110:	d1c3      	bne.n	801c09a <_printf_float+0x332>
 801c112:	e684      	b.n	801be1e <_printf_float+0xb6>
 801c114:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c118:	f1ba 0f01 	cmp.w	sl, #1
 801c11c:	dc01      	bgt.n	801c122 <_printf_float+0x3ba>
 801c11e:	07db      	lsls	r3, r3, #31
 801c120:	d536      	bpl.n	801c190 <_printf_float+0x428>
 801c122:	2301      	movs	r3, #1
 801c124:	4642      	mov	r2, r8
 801c126:	4631      	mov	r1, r6
 801c128:	4628      	mov	r0, r5
 801c12a:	47b8      	blx	r7
 801c12c:	3001      	adds	r0, #1
 801c12e:	f43f ae76 	beq.w	801be1e <_printf_float+0xb6>
 801c132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c136:	4631      	mov	r1, r6
 801c138:	4628      	mov	r0, r5
 801c13a:	47b8      	blx	r7
 801c13c:	3001      	adds	r0, #1
 801c13e:	f43f ae6e 	beq.w	801be1e <_printf_float+0xb6>
 801c142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c146:	2200      	movs	r2, #0
 801c148:	2300      	movs	r3, #0
 801c14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c14e:	f7e4 fc93 	bl	8000a78 <__aeabi_dcmpeq>
 801c152:	b9c0      	cbnz	r0, 801c186 <_printf_float+0x41e>
 801c154:	4653      	mov	r3, sl
 801c156:	f108 0201 	add.w	r2, r8, #1
 801c15a:	4631      	mov	r1, r6
 801c15c:	4628      	mov	r0, r5
 801c15e:	47b8      	blx	r7
 801c160:	3001      	adds	r0, #1
 801c162:	d10c      	bne.n	801c17e <_printf_float+0x416>
 801c164:	e65b      	b.n	801be1e <_printf_float+0xb6>
 801c166:	2301      	movs	r3, #1
 801c168:	465a      	mov	r2, fp
 801c16a:	4631      	mov	r1, r6
 801c16c:	4628      	mov	r0, r5
 801c16e:	47b8      	blx	r7
 801c170:	3001      	adds	r0, #1
 801c172:	f43f ae54 	beq.w	801be1e <_printf_float+0xb6>
 801c176:	f108 0801 	add.w	r8, r8, #1
 801c17a:	45d0      	cmp	r8, sl
 801c17c:	dbf3      	blt.n	801c166 <_printf_float+0x3fe>
 801c17e:	464b      	mov	r3, r9
 801c180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c184:	e6df      	b.n	801bf46 <_printf_float+0x1de>
 801c186:	f04f 0800 	mov.w	r8, #0
 801c18a:	f104 0b1a 	add.w	fp, r4, #26
 801c18e:	e7f4      	b.n	801c17a <_printf_float+0x412>
 801c190:	2301      	movs	r3, #1
 801c192:	4642      	mov	r2, r8
 801c194:	e7e1      	b.n	801c15a <_printf_float+0x3f2>
 801c196:	2301      	movs	r3, #1
 801c198:	464a      	mov	r2, r9
 801c19a:	4631      	mov	r1, r6
 801c19c:	4628      	mov	r0, r5
 801c19e:	47b8      	blx	r7
 801c1a0:	3001      	adds	r0, #1
 801c1a2:	f43f ae3c 	beq.w	801be1e <_printf_float+0xb6>
 801c1a6:	f108 0801 	add.w	r8, r8, #1
 801c1aa:	68e3      	ldr	r3, [r4, #12]
 801c1ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c1ae:	1a5b      	subs	r3, r3, r1
 801c1b0:	4543      	cmp	r3, r8
 801c1b2:	dcf0      	bgt.n	801c196 <_printf_float+0x42e>
 801c1b4:	e6fc      	b.n	801bfb0 <_printf_float+0x248>
 801c1b6:	f04f 0800 	mov.w	r8, #0
 801c1ba:	f104 0919 	add.w	r9, r4, #25
 801c1be:	e7f4      	b.n	801c1aa <_printf_float+0x442>

0801c1c0 <_printf_common>:
 801c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1c4:	4616      	mov	r6, r2
 801c1c6:	4698      	mov	r8, r3
 801c1c8:	688a      	ldr	r2, [r1, #8]
 801c1ca:	690b      	ldr	r3, [r1, #16]
 801c1cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c1d0:	4293      	cmp	r3, r2
 801c1d2:	bfb8      	it	lt
 801c1d4:	4613      	movlt	r3, r2
 801c1d6:	6033      	str	r3, [r6, #0]
 801c1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c1dc:	4607      	mov	r7, r0
 801c1de:	460c      	mov	r4, r1
 801c1e0:	b10a      	cbz	r2, 801c1e6 <_printf_common+0x26>
 801c1e2:	3301      	adds	r3, #1
 801c1e4:	6033      	str	r3, [r6, #0]
 801c1e6:	6823      	ldr	r3, [r4, #0]
 801c1e8:	0699      	lsls	r1, r3, #26
 801c1ea:	bf42      	ittt	mi
 801c1ec:	6833      	ldrmi	r3, [r6, #0]
 801c1ee:	3302      	addmi	r3, #2
 801c1f0:	6033      	strmi	r3, [r6, #0]
 801c1f2:	6825      	ldr	r5, [r4, #0]
 801c1f4:	f015 0506 	ands.w	r5, r5, #6
 801c1f8:	d106      	bne.n	801c208 <_printf_common+0x48>
 801c1fa:	f104 0a19 	add.w	sl, r4, #25
 801c1fe:	68e3      	ldr	r3, [r4, #12]
 801c200:	6832      	ldr	r2, [r6, #0]
 801c202:	1a9b      	subs	r3, r3, r2
 801c204:	42ab      	cmp	r3, r5
 801c206:	dc26      	bgt.n	801c256 <_printf_common+0x96>
 801c208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c20c:	6822      	ldr	r2, [r4, #0]
 801c20e:	3b00      	subs	r3, #0
 801c210:	bf18      	it	ne
 801c212:	2301      	movne	r3, #1
 801c214:	0692      	lsls	r2, r2, #26
 801c216:	d42b      	bmi.n	801c270 <_printf_common+0xb0>
 801c218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c21c:	4641      	mov	r1, r8
 801c21e:	4638      	mov	r0, r7
 801c220:	47c8      	blx	r9
 801c222:	3001      	adds	r0, #1
 801c224:	d01e      	beq.n	801c264 <_printf_common+0xa4>
 801c226:	6823      	ldr	r3, [r4, #0]
 801c228:	6922      	ldr	r2, [r4, #16]
 801c22a:	f003 0306 	and.w	r3, r3, #6
 801c22e:	2b04      	cmp	r3, #4
 801c230:	bf02      	ittt	eq
 801c232:	68e5      	ldreq	r5, [r4, #12]
 801c234:	6833      	ldreq	r3, [r6, #0]
 801c236:	1aed      	subeq	r5, r5, r3
 801c238:	68a3      	ldr	r3, [r4, #8]
 801c23a:	bf0c      	ite	eq
 801c23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c240:	2500      	movne	r5, #0
 801c242:	4293      	cmp	r3, r2
 801c244:	bfc4      	itt	gt
 801c246:	1a9b      	subgt	r3, r3, r2
 801c248:	18ed      	addgt	r5, r5, r3
 801c24a:	2600      	movs	r6, #0
 801c24c:	341a      	adds	r4, #26
 801c24e:	42b5      	cmp	r5, r6
 801c250:	d11a      	bne.n	801c288 <_printf_common+0xc8>
 801c252:	2000      	movs	r0, #0
 801c254:	e008      	b.n	801c268 <_printf_common+0xa8>
 801c256:	2301      	movs	r3, #1
 801c258:	4652      	mov	r2, sl
 801c25a:	4641      	mov	r1, r8
 801c25c:	4638      	mov	r0, r7
 801c25e:	47c8      	blx	r9
 801c260:	3001      	adds	r0, #1
 801c262:	d103      	bne.n	801c26c <_printf_common+0xac>
 801c264:	f04f 30ff 	mov.w	r0, #4294967295
 801c268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c26c:	3501      	adds	r5, #1
 801c26e:	e7c6      	b.n	801c1fe <_printf_common+0x3e>
 801c270:	18e1      	adds	r1, r4, r3
 801c272:	1c5a      	adds	r2, r3, #1
 801c274:	2030      	movs	r0, #48	@ 0x30
 801c276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c27a:	4422      	add	r2, r4
 801c27c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c284:	3302      	adds	r3, #2
 801c286:	e7c7      	b.n	801c218 <_printf_common+0x58>
 801c288:	2301      	movs	r3, #1
 801c28a:	4622      	mov	r2, r4
 801c28c:	4641      	mov	r1, r8
 801c28e:	4638      	mov	r0, r7
 801c290:	47c8      	blx	r9
 801c292:	3001      	adds	r0, #1
 801c294:	d0e6      	beq.n	801c264 <_printf_common+0xa4>
 801c296:	3601      	adds	r6, #1
 801c298:	e7d9      	b.n	801c24e <_printf_common+0x8e>
	...

0801c29c <_printf_i>:
 801c29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c2a0:	7e0f      	ldrb	r7, [r1, #24]
 801c2a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c2a4:	2f78      	cmp	r7, #120	@ 0x78
 801c2a6:	4691      	mov	r9, r2
 801c2a8:	4680      	mov	r8, r0
 801c2aa:	460c      	mov	r4, r1
 801c2ac:	469a      	mov	sl, r3
 801c2ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c2b2:	d807      	bhi.n	801c2c4 <_printf_i+0x28>
 801c2b4:	2f62      	cmp	r7, #98	@ 0x62
 801c2b6:	d80a      	bhi.n	801c2ce <_printf_i+0x32>
 801c2b8:	2f00      	cmp	r7, #0
 801c2ba:	f000 80d1 	beq.w	801c460 <_printf_i+0x1c4>
 801c2be:	2f58      	cmp	r7, #88	@ 0x58
 801c2c0:	f000 80b8 	beq.w	801c434 <_printf_i+0x198>
 801c2c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c2c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c2cc:	e03a      	b.n	801c344 <_printf_i+0xa8>
 801c2ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c2d2:	2b15      	cmp	r3, #21
 801c2d4:	d8f6      	bhi.n	801c2c4 <_printf_i+0x28>
 801c2d6:	a101      	add	r1, pc, #4	@ (adr r1, 801c2dc <_printf_i+0x40>)
 801c2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c2dc:	0801c335 	.word	0x0801c335
 801c2e0:	0801c349 	.word	0x0801c349
 801c2e4:	0801c2c5 	.word	0x0801c2c5
 801c2e8:	0801c2c5 	.word	0x0801c2c5
 801c2ec:	0801c2c5 	.word	0x0801c2c5
 801c2f0:	0801c2c5 	.word	0x0801c2c5
 801c2f4:	0801c349 	.word	0x0801c349
 801c2f8:	0801c2c5 	.word	0x0801c2c5
 801c2fc:	0801c2c5 	.word	0x0801c2c5
 801c300:	0801c2c5 	.word	0x0801c2c5
 801c304:	0801c2c5 	.word	0x0801c2c5
 801c308:	0801c447 	.word	0x0801c447
 801c30c:	0801c373 	.word	0x0801c373
 801c310:	0801c401 	.word	0x0801c401
 801c314:	0801c2c5 	.word	0x0801c2c5
 801c318:	0801c2c5 	.word	0x0801c2c5
 801c31c:	0801c469 	.word	0x0801c469
 801c320:	0801c2c5 	.word	0x0801c2c5
 801c324:	0801c373 	.word	0x0801c373
 801c328:	0801c2c5 	.word	0x0801c2c5
 801c32c:	0801c2c5 	.word	0x0801c2c5
 801c330:	0801c409 	.word	0x0801c409
 801c334:	6833      	ldr	r3, [r6, #0]
 801c336:	1d1a      	adds	r2, r3, #4
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	6032      	str	r2, [r6, #0]
 801c33c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c344:	2301      	movs	r3, #1
 801c346:	e09c      	b.n	801c482 <_printf_i+0x1e6>
 801c348:	6833      	ldr	r3, [r6, #0]
 801c34a:	6820      	ldr	r0, [r4, #0]
 801c34c:	1d19      	adds	r1, r3, #4
 801c34e:	6031      	str	r1, [r6, #0]
 801c350:	0606      	lsls	r6, r0, #24
 801c352:	d501      	bpl.n	801c358 <_printf_i+0xbc>
 801c354:	681d      	ldr	r5, [r3, #0]
 801c356:	e003      	b.n	801c360 <_printf_i+0xc4>
 801c358:	0645      	lsls	r5, r0, #25
 801c35a:	d5fb      	bpl.n	801c354 <_printf_i+0xb8>
 801c35c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c360:	2d00      	cmp	r5, #0
 801c362:	da03      	bge.n	801c36c <_printf_i+0xd0>
 801c364:	232d      	movs	r3, #45	@ 0x2d
 801c366:	426d      	negs	r5, r5
 801c368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c36c:	4858      	ldr	r0, [pc, #352]	@ (801c4d0 <_printf_i+0x234>)
 801c36e:	230a      	movs	r3, #10
 801c370:	e011      	b.n	801c396 <_printf_i+0xfa>
 801c372:	6821      	ldr	r1, [r4, #0]
 801c374:	6833      	ldr	r3, [r6, #0]
 801c376:	0608      	lsls	r0, r1, #24
 801c378:	f853 5b04 	ldr.w	r5, [r3], #4
 801c37c:	d402      	bmi.n	801c384 <_printf_i+0xe8>
 801c37e:	0649      	lsls	r1, r1, #25
 801c380:	bf48      	it	mi
 801c382:	b2ad      	uxthmi	r5, r5
 801c384:	2f6f      	cmp	r7, #111	@ 0x6f
 801c386:	4852      	ldr	r0, [pc, #328]	@ (801c4d0 <_printf_i+0x234>)
 801c388:	6033      	str	r3, [r6, #0]
 801c38a:	bf14      	ite	ne
 801c38c:	230a      	movne	r3, #10
 801c38e:	2308      	moveq	r3, #8
 801c390:	2100      	movs	r1, #0
 801c392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c396:	6866      	ldr	r6, [r4, #4]
 801c398:	60a6      	str	r6, [r4, #8]
 801c39a:	2e00      	cmp	r6, #0
 801c39c:	db05      	blt.n	801c3aa <_printf_i+0x10e>
 801c39e:	6821      	ldr	r1, [r4, #0]
 801c3a0:	432e      	orrs	r6, r5
 801c3a2:	f021 0104 	bic.w	r1, r1, #4
 801c3a6:	6021      	str	r1, [r4, #0]
 801c3a8:	d04b      	beq.n	801c442 <_printf_i+0x1a6>
 801c3aa:	4616      	mov	r6, r2
 801c3ac:	fbb5 f1f3 	udiv	r1, r5, r3
 801c3b0:	fb03 5711 	mls	r7, r3, r1, r5
 801c3b4:	5dc7      	ldrb	r7, [r0, r7]
 801c3b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c3ba:	462f      	mov	r7, r5
 801c3bc:	42bb      	cmp	r3, r7
 801c3be:	460d      	mov	r5, r1
 801c3c0:	d9f4      	bls.n	801c3ac <_printf_i+0x110>
 801c3c2:	2b08      	cmp	r3, #8
 801c3c4:	d10b      	bne.n	801c3de <_printf_i+0x142>
 801c3c6:	6823      	ldr	r3, [r4, #0]
 801c3c8:	07df      	lsls	r7, r3, #31
 801c3ca:	d508      	bpl.n	801c3de <_printf_i+0x142>
 801c3cc:	6923      	ldr	r3, [r4, #16]
 801c3ce:	6861      	ldr	r1, [r4, #4]
 801c3d0:	4299      	cmp	r1, r3
 801c3d2:	bfde      	ittt	le
 801c3d4:	2330      	movle	r3, #48	@ 0x30
 801c3d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c3da:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c3de:	1b92      	subs	r2, r2, r6
 801c3e0:	6122      	str	r2, [r4, #16]
 801c3e2:	f8cd a000 	str.w	sl, [sp]
 801c3e6:	464b      	mov	r3, r9
 801c3e8:	aa03      	add	r2, sp, #12
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4640      	mov	r0, r8
 801c3ee:	f7ff fee7 	bl	801c1c0 <_printf_common>
 801c3f2:	3001      	adds	r0, #1
 801c3f4:	d14a      	bne.n	801c48c <_printf_i+0x1f0>
 801c3f6:	f04f 30ff 	mov.w	r0, #4294967295
 801c3fa:	b004      	add	sp, #16
 801c3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c400:	6823      	ldr	r3, [r4, #0]
 801c402:	f043 0320 	orr.w	r3, r3, #32
 801c406:	6023      	str	r3, [r4, #0]
 801c408:	4832      	ldr	r0, [pc, #200]	@ (801c4d4 <_printf_i+0x238>)
 801c40a:	2778      	movs	r7, #120	@ 0x78
 801c40c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c410:	6823      	ldr	r3, [r4, #0]
 801c412:	6831      	ldr	r1, [r6, #0]
 801c414:	061f      	lsls	r7, r3, #24
 801c416:	f851 5b04 	ldr.w	r5, [r1], #4
 801c41a:	d402      	bmi.n	801c422 <_printf_i+0x186>
 801c41c:	065f      	lsls	r7, r3, #25
 801c41e:	bf48      	it	mi
 801c420:	b2ad      	uxthmi	r5, r5
 801c422:	6031      	str	r1, [r6, #0]
 801c424:	07d9      	lsls	r1, r3, #31
 801c426:	bf44      	itt	mi
 801c428:	f043 0320 	orrmi.w	r3, r3, #32
 801c42c:	6023      	strmi	r3, [r4, #0]
 801c42e:	b11d      	cbz	r5, 801c438 <_printf_i+0x19c>
 801c430:	2310      	movs	r3, #16
 801c432:	e7ad      	b.n	801c390 <_printf_i+0xf4>
 801c434:	4826      	ldr	r0, [pc, #152]	@ (801c4d0 <_printf_i+0x234>)
 801c436:	e7e9      	b.n	801c40c <_printf_i+0x170>
 801c438:	6823      	ldr	r3, [r4, #0]
 801c43a:	f023 0320 	bic.w	r3, r3, #32
 801c43e:	6023      	str	r3, [r4, #0]
 801c440:	e7f6      	b.n	801c430 <_printf_i+0x194>
 801c442:	4616      	mov	r6, r2
 801c444:	e7bd      	b.n	801c3c2 <_printf_i+0x126>
 801c446:	6833      	ldr	r3, [r6, #0]
 801c448:	6825      	ldr	r5, [r4, #0]
 801c44a:	6961      	ldr	r1, [r4, #20]
 801c44c:	1d18      	adds	r0, r3, #4
 801c44e:	6030      	str	r0, [r6, #0]
 801c450:	062e      	lsls	r6, r5, #24
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	d501      	bpl.n	801c45a <_printf_i+0x1be>
 801c456:	6019      	str	r1, [r3, #0]
 801c458:	e002      	b.n	801c460 <_printf_i+0x1c4>
 801c45a:	0668      	lsls	r0, r5, #25
 801c45c:	d5fb      	bpl.n	801c456 <_printf_i+0x1ba>
 801c45e:	8019      	strh	r1, [r3, #0]
 801c460:	2300      	movs	r3, #0
 801c462:	6123      	str	r3, [r4, #16]
 801c464:	4616      	mov	r6, r2
 801c466:	e7bc      	b.n	801c3e2 <_printf_i+0x146>
 801c468:	6833      	ldr	r3, [r6, #0]
 801c46a:	1d1a      	adds	r2, r3, #4
 801c46c:	6032      	str	r2, [r6, #0]
 801c46e:	681e      	ldr	r6, [r3, #0]
 801c470:	6862      	ldr	r2, [r4, #4]
 801c472:	2100      	movs	r1, #0
 801c474:	4630      	mov	r0, r6
 801c476:	f7e3 fe83 	bl	8000180 <memchr>
 801c47a:	b108      	cbz	r0, 801c480 <_printf_i+0x1e4>
 801c47c:	1b80      	subs	r0, r0, r6
 801c47e:	6060      	str	r0, [r4, #4]
 801c480:	6863      	ldr	r3, [r4, #4]
 801c482:	6123      	str	r3, [r4, #16]
 801c484:	2300      	movs	r3, #0
 801c486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c48a:	e7aa      	b.n	801c3e2 <_printf_i+0x146>
 801c48c:	6923      	ldr	r3, [r4, #16]
 801c48e:	4632      	mov	r2, r6
 801c490:	4649      	mov	r1, r9
 801c492:	4640      	mov	r0, r8
 801c494:	47d0      	blx	sl
 801c496:	3001      	adds	r0, #1
 801c498:	d0ad      	beq.n	801c3f6 <_printf_i+0x15a>
 801c49a:	6823      	ldr	r3, [r4, #0]
 801c49c:	079b      	lsls	r3, r3, #30
 801c49e:	d413      	bmi.n	801c4c8 <_printf_i+0x22c>
 801c4a0:	68e0      	ldr	r0, [r4, #12]
 801c4a2:	9b03      	ldr	r3, [sp, #12]
 801c4a4:	4298      	cmp	r0, r3
 801c4a6:	bfb8      	it	lt
 801c4a8:	4618      	movlt	r0, r3
 801c4aa:	e7a6      	b.n	801c3fa <_printf_i+0x15e>
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	4632      	mov	r2, r6
 801c4b0:	4649      	mov	r1, r9
 801c4b2:	4640      	mov	r0, r8
 801c4b4:	47d0      	blx	sl
 801c4b6:	3001      	adds	r0, #1
 801c4b8:	d09d      	beq.n	801c3f6 <_printf_i+0x15a>
 801c4ba:	3501      	adds	r5, #1
 801c4bc:	68e3      	ldr	r3, [r4, #12]
 801c4be:	9903      	ldr	r1, [sp, #12]
 801c4c0:	1a5b      	subs	r3, r3, r1
 801c4c2:	42ab      	cmp	r3, r5
 801c4c4:	dcf2      	bgt.n	801c4ac <_printf_i+0x210>
 801c4c6:	e7eb      	b.n	801c4a0 <_printf_i+0x204>
 801c4c8:	2500      	movs	r5, #0
 801c4ca:	f104 0619 	add.w	r6, r4, #25
 801c4ce:	e7f5      	b.n	801c4bc <_printf_i+0x220>
 801c4d0:	0801f6ce 	.word	0x0801f6ce
 801c4d4:	0801f6df 	.word	0x0801f6df

0801c4d8 <std>:
 801c4d8:	2300      	movs	r3, #0
 801c4da:	b510      	push	{r4, lr}
 801c4dc:	4604      	mov	r4, r0
 801c4de:	e9c0 3300 	strd	r3, r3, [r0]
 801c4e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c4e6:	6083      	str	r3, [r0, #8]
 801c4e8:	8181      	strh	r1, [r0, #12]
 801c4ea:	6643      	str	r3, [r0, #100]	@ 0x64
 801c4ec:	81c2      	strh	r2, [r0, #14]
 801c4ee:	6183      	str	r3, [r0, #24]
 801c4f0:	4619      	mov	r1, r3
 801c4f2:	2208      	movs	r2, #8
 801c4f4:	305c      	adds	r0, #92	@ 0x5c
 801c4f6:	f000 f8f4 	bl	801c6e2 <memset>
 801c4fa:	4b0d      	ldr	r3, [pc, #52]	@ (801c530 <std+0x58>)
 801c4fc:	6263      	str	r3, [r4, #36]	@ 0x24
 801c4fe:	4b0d      	ldr	r3, [pc, #52]	@ (801c534 <std+0x5c>)
 801c500:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c502:	4b0d      	ldr	r3, [pc, #52]	@ (801c538 <std+0x60>)
 801c504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c506:	4b0d      	ldr	r3, [pc, #52]	@ (801c53c <std+0x64>)
 801c508:	6323      	str	r3, [r4, #48]	@ 0x30
 801c50a:	4b0d      	ldr	r3, [pc, #52]	@ (801c540 <std+0x68>)
 801c50c:	6224      	str	r4, [r4, #32]
 801c50e:	429c      	cmp	r4, r3
 801c510:	d006      	beq.n	801c520 <std+0x48>
 801c512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c516:	4294      	cmp	r4, r2
 801c518:	d002      	beq.n	801c520 <std+0x48>
 801c51a:	33d0      	adds	r3, #208	@ 0xd0
 801c51c:	429c      	cmp	r4, r3
 801c51e:	d105      	bne.n	801c52c <std+0x54>
 801c520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c528:	f000 b958 	b.w	801c7dc <__retarget_lock_init_recursive>
 801c52c:	bd10      	pop	{r4, pc}
 801c52e:	bf00      	nop
 801c530:	0801c65d 	.word	0x0801c65d
 801c534:	0801c67f 	.word	0x0801c67f
 801c538:	0801c6b7 	.word	0x0801c6b7
 801c53c:	0801c6db 	.word	0x0801c6db
 801c540:	200023c0 	.word	0x200023c0

0801c544 <stdio_exit_handler>:
 801c544:	4a02      	ldr	r2, [pc, #8]	@ (801c550 <stdio_exit_handler+0xc>)
 801c546:	4903      	ldr	r1, [pc, #12]	@ (801c554 <stdio_exit_handler+0x10>)
 801c548:	4803      	ldr	r0, [pc, #12]	@ (801c558 <stdio_exit_handler+0x14>)
 801c54a:	f000 b869 	b.w	801c620 <_fwalk_sglue>
 801c54e:	bf00      	nop
 801c550:	20000140 	.word	0x20000140
 801c554:	0801de89 	.word	0x0801de89
 801c558:	20000150 	.word	0x20000150

0801c55c <cleanup_stdio>:
 801c55c:	6841      	ldr	r1, [r0, #4]
 801c55e:	4b0c      	ldr	r3, [pc, #48]	@ (801c590 <cleanup_stdio+0x34>)
 801c560:	4299      	cmp	r1, r3
 801c562:	b510      	push	{r4, lr}
 801c564:	4604      	mov	r4, r0
 801c566:	d001      	beq.n	801c56c <cleanup_stdio+0x10>
 801c568:	f001 fc8e 	bl	801de88 <_fflush_r>
 801c56c:	68a1      	ldr	r1, [r4, #8]
 801c56e:	4b09      	ldr	r3, [pc, #36]	@ (801c594 <cleanup_stdio+0x38>)
 801c570:	4299      	cmp	r1, r3
 801c572:	d002      	beq.n	801c57a <cleanup_stdio+0x1e>
 801c574:	4620      	mov	r0, r4
 801c576:	f001 fc87 	bl	801de88 <_fflush_r>
 801c57a:	68e1      	ldr	r1, [r4, #12]
 801c57c:	4b06      	ldr	r3, [pc, #24]	@ (801c598 <cleanup_stdio+0x3c>)
 801c57e:	4299      	cmp	r1, r3
 801c580:	d004      	beq.n	801c58c <cleanup_stdio+0x30>
 801c582:	4620      	mov	r0, r4
 801c584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c588:	f001 bc7e 	b.w	801de88 <_fflush_r>
 801c58c:	bd10      	pop	{r4, pc}
 801c58e:	bf00      	nop
 801c590:	200023c0 	.word	0x200023c0
 801c594:	20002428 	.word	0x20002428
 801c598:	20002490 	.word	0x20002490

0801c59c <global_stdio_init.part.0>:
 801c59c:	b510      	push	{r4, lr}
 801c59e:	4b0b      	ldr	r3, [pc, #44]	@ (801c5cc <global_stdio_init.part.0+0x30>)
 801c5a0:	4c0b      	ldr	r4, [pc, #44]	@ (801c5d0 <global_stdio_init.part.0+0x34>)
 801c5a2:	4a0c      	ldr	r2, [pc, #48]	@ (801c5d4 <global_stdio_init.part.0+0x38>)
 801c5a4:	601a      	str	r2, [r3, #0]
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	2104      	movs	r1, #4
 801c5ac:	f7ff ff94 	bl	801c4d8 <std>
 801c5b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c5b4:	2201      	movs	r2, #1
 801c5b6:	2109      	movs	r1, #9
 801c5b8:	f7ff ff8e 	bl	801c4d8 <std>
 801c5bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c5c0:	2202      	movs	r2, #2
 801c5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5c6:	2112      	movs	r1, #18
 801c5c8:	f7ff bf86 	b.w	801c4d8 <std>
 801c5cc:	200024f8 	.word	0x200024f8
 801c5d0:	200023c0 	.word	0x200023c0
 801c5d4:	0801c545 	.word	0x0801c545

0801c5d8 <__sfp_lock_acquire>:
 801c5d8:	4801      	ldr	r0, [pc, #4]	@ (801c5e0 <__sfp_lock_acquire+0x8>)
 801c5da:	f000 b900 	b.w	801c7de <__retarget_lock_acquire_recursive>
 801c5de:	bf00      	nop
 801c5e0:	20002501 	.word	0x20002501

0801c5e4 <__sfp_lock_release>:
 801c5e4:	4801      	ldr	r0, [pc, #4]	@ (801c5ec <__sfp_lock_release+0x8>)
 801c5e6:	f000 b8fb 	b.w	801c7e0 <__retarget_lock_release_recursive>
 801c5ea:	bf00      	nop
 801c5ec:	20002501 	.word	0x20002501

0801c5f0 <__sinit>:
 801c5f0:	b510      	push	{r4, lr}
 801c5f2:	4604      	mov	r4, r0
 801c5f4:	f7ff fff0 	bl	801c5d8 <__sfp_lock_acquire>
 801c5f8:	6a23      	ldr	r3, [r4, #32]
 801c5fa:	b11b      	cbz	r3, 801c604 <__sinit+0x14>
 801c5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c600:	f7ff bff0 	b.w	801c5e4 <__sfp_lock_release>
 801c604:	4b04      	ldr	r3, [pc, #16]	@ (801c618 <__sinit+0x28>)
 801c606:	6223      	str	r3, [r4, #32]
 801c608:	4b04      	ldr	r3, [pc, #16]	@ (801c61c <__sinit+0x2c>)
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d1f5      	bne.n	801c5fc <__sinit+0xc>
 801c610:	f7ff ffc4 	bl	801c59c <global_stdio_init.part.0>
 801c614:	e7f2      	b.n	801c5fc <__sinit+0xc>
 801c616:	bf00      	nop
 801c618:	0801c55d 	.word	0x0801c55d
 801c61c:	200024f8 	.word	0x200024f8

0801c620 <_fwalk_sglue>:
 801c620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c624:	4607      	mov	r7, r0
 801c626:	4688      	mov	r8, r1
 801c628:	4614      	mov	r4, r2
 801c62a:	2600      	movs	r6, #0
 801c62c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c630:	f1b9 0901 	subs.w	r9, r9, #1
 801c634:	d505      	bpl.n	801c642 <_fwalk_sglue+0x22>
 801c636:	6824      	ldr	r4, [r4, #0]
 801c638:	2c00      	cmp	r4, #0
 801c63a:	d1f7      	bne.n	801c62c <_fwalk_sglue+0xc>
 801c63c:	4630      	mov	r0, r6
 801c63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c642:	89ab      	ldrh	r3, [r5, #12]
 801c644:	2b01      	cmp	r3, #1
 801c646:	d907      	bls.n	801c658 <_fwalk_sglue+0x38>
 801c648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c64c:	3301      	adds	r3, #1
 801c64e:	d003      	beq.n	801c658 <_fwalk_sglue+0x38>
 801c650:	4629      	mov	r1, r5
 801c652:	4638      	mov	r0, r7
 801c654:	47c0      	blx	r8
 801c656:	4306      	orrs	r6, r0
 801c658:	3568      	adds	r5, #104	@ 0x68
 801c65a:	e7e9      	b.n	801c630 <_fwalk_sglue+0x10>

0801c65c <__sread>:
 801c65c:	b510      	push	{r4, lr}
 801c65e:	460c      	mov	r4, r1
 801c660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c664:	f000 f86c 	bl	801c740 <_read_r>
 801c668:	2800      	cmp	r0, #0
 801c66a:	bfab      	itete	ge
 801c66c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c66e:	89a3      	ldrhlt	r3, [r4, #12]
 801c670:	181b      	addge	r3, r3, r0
 801c672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c676:	bfac      	ite	ge
 801c678:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c67a:	81a3      	strhlt	r3, [r4, #12]
 801c67c:	bd10      	pop	{r4, pc}

0801c67e <__swrite>:
 801c67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c682:	461f      	mov	r7, r3
 801c684:	898b      	ldrh	r3, [r1, #12]
 801c686:	05db      	lsls	r3, r3, #23
 801c688:	4605      	mov	r5, r0
 801c68a:	460c      	mov	r4, r1
 801c68c:	4616      	mov	r6, r2
 801c68e:	d505      	bpl.n	801c69c <__swrite+0x1e>
 801c690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c694:	2302      	movs	r3, #2
 801c696:	2200      	movs	r2, #0
 801c698:	f000 f840 	bl	801c71c <_lseek_r>
 801c69c:	89a3      	ldrh	r3, [r4, #12]
 801c69e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c6a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c6a6:	81a3      	strh	r3, [r4, #12]
 801c6a8:	4632      	mov	r2, r6
 801c6aa:	463b      	mov	r3, r7
 801c6ac:	4628      	mov	r0, r5
 801c6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6b2:	f000 b857 	b.w	801c764 <_write_r>

0801c6b6 <__sseek>:
 801c6b6:	b510      	push	{r4, lr}
 801c6b8:	460c      	mov	r4, r1
 801c6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6be:	f000 f82d 	bl	801c71c <_lseek_r>
 801c6c2:	1c43      	adds	r3, r0, #1
 801c6c4:	89a3      	ldrh	r3, [r4, #12]
 801c6c6:	bf15      	itete	ne
 801c6c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c6ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c6ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c6d2:	81a3      	strheq	r3, [r4, #12]
 801c6d4:	bf18      	it	ne
 801c6d6:	81a3      	strhne	r3, [r4, #12]
 801c6d8:	bd10      	pop	{r4, pc}

0801c6da <__sclose>:
 801c6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6de:	f000 b80d 	b.w	801c6fc <_close_r>

0801c6e2 <memset>:
 801c6e2:	4402      	add	r2, r0
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	4293      	cmp	r3, r2
 801c6e8:	d100      	bne.n	801c6ec <memset+0xa>
 801c6ea:	4770      	bx	lr
 801c6ec:	f803 1b01 	strb.w	r1, [r3], #1
 801c6f0:	e7f9      	b.n	801c6e6 <memset+0x4>
	...

0801c6f4 <_localeconv_r>:
 801c6f4:	4800      	ldr	r0, [pc, #0]	@ (801c6f8 <_localeconv_r+0x4>)
 801c6f6:	4770      	bx	lr
 801c6f8:	2000028c 	.word	0x2000028c

0801c6fc <_close_r>:
 801c6fc:	b538      	push	{r3, r4, r5, lr}
 801c6fe:	4d06      	ldr	r5, [pc, #24]	@ (801c718 <_close_r+0x1c>)
 801c700:	2300      	movs	r3, #0
 801c702:	4604      	mov	r4, r0
 801c704:	4608      	mov	r0, r1
 801c706:	602b      	str	r3, [r5, #0]
 801c708:	f7e5 fe2a 	bl	8002360 <_close>
 801c70c:	1c43      	adds	r3, r0, #1
 801c70e:	d102      	bne.n	801c716 <_close_r+0x1a>
 801c710:	682b      	ldr	r3, [r5, #0]
 801c712:	b103      	cbz	r3, 801c716 <_close_r+0x1a>
 801c714:	6023      	str	r3, [r4, #0]
 801c716:	bd38      	pop	{r3, r4, r5, pc}
 801c718:	200024fc 	.word	0x200024fc

0801c71c <_lseek_r>:
 801c71c:	b538      	push	{r3, r4, r5, lr}
 801c71e:	4d07      	ldr	r5, [pc, #28]	@ (801c73c <_lseek_r+0x20>)
 801c720:	4604      	mov	r4, r0
 801c722:	4608      	mov	r0, r1
 801c724:	4611      	mov	r1, r2
 801c726:	2200      	movs	r2, #0
 801c728:	602a      	str	r2, [r5, #0]
 801c72a:	461a      	mov	r2, r3
 801c72c:	f7e5 fe3c 	bl	80023a8 <_lseek>
 801c730:	1c43      	adds	r3, r0, #1
 801c732:	d102      	bne.n	801c73a <_lseek_r+0x1e>
 801c734:	682b      	ldr	r3, [r5, #0]
 801c736:	b103      	cbz	r3, 801c73a <_lseek_r+0x1e>
 801c738:	6023      	str	r3, [r4, #0]
 801c73a:	bd38      	pop	{r3, r4, r5, pc}
 801c73c:	200024fc 	.word	0x200024fc

0801c740 <_read_r>:
 801c740:	b538      	push	{r3, r4, r5, lr}
 801c742:	4d07      	ldr	r5, [pc, #28]	@ (801c760 <_read_r+0x20>)
 801c744:	4604      	mov	r4, r0
 801c746:	4608      	mov	r0, r1
 801c748:	4611      	mov	r1, r2
 801c74a:	2200      	movs	r2, #0
 801c74c:	602a      	str	r2, [r5, #0]
 801c74e:	461a      	mov	r2, r3
 801c750:	f7e5 fdcd 	bl	80022ee <_read>
 801c754:	1c43      	adds	r3, r0, #1
 801c756:	d102      	bne.n	801c75e <_read_r+0x1e>
 801c758:	682b      	ldr	r3, [r5, #0]
 801c75a:	b103      	cbz	r3, 801c75e <_read_r+0x1e>
 801c75c:	6023      	str	r3, [r4, #0]
 801c75e:	bd38      	pop	{r3, r4, r5, pc}
 801c760:	200024fc 	.word	0x200024fc

0801c764 <_write_r>:
 801c764:	b538      	push	{r3, r4, r5, lr}
 801c766:	4d07      	ldr	r5, [pc, #28]	@ (801c784 <_write_r+0x20>)
 801c768:	4604      	mov	r4, r0
 801c76a:	4608      	mov	r0, r1
 801c76c:	4611      	mov	r1, r2
 801c76e:	2200      	movs	r2, #0
 801c770:	602a      	str	r2, [r5, #0]
 801c772:	461a      	mov	r2, r3
 801c774:	f7e5 fdd8 	bl	8002328 <_write>
 801c778:	1c43      	adds	r3, r0, #1
 801c77a:	d102      	bne.n	801c782 <_write_r+0x1e>
 801c77c:	682b      	ldr	r3, [r5, #0]
 801c77e:	b103      	cbz	r3, 801c782 <_write_r+0x1e>
 801c780:	6023      	str	r3, [r4, #0]
 801c782:	bd38      	pop	{r3, r4, r5, pc}
 801c784:	200024fc 	.word	0x200024fc

0801c788 <__errno>:
 801c788:	4b01      	ldr	r3, [pc, #4]	@ (801c790 <__errno+0x8>)
 801c78a:	6818      	ldr	r0, [r3, #0]
 801c78c:	4770      	bx	lr
 801c78e:	bf00      	nop
 801c790:	2000014c 	.word	0x2000014c

0801c794 <__libc_init_array>:
 801c794:	b570      	push	{r4, r5, r6, lr}
 801c796:	4d0d      	ldr	r5, [pc, #52]	@ (801c7cc <__libc_init_array+0x38>)
 801c798:	4c0d      	ldr	r4, [pc, #52]	@ (801c7d0 <__libc_init_array+0x3c>)
 801c79a:	1b64      	subs	r4, r4, r5
 801c79c:	10a4      	asrs	r4, r4, #2
 801c79e:	2600      	movs	r6, #0
 801c7a0:	42a6      	cmp	r6, r4
 801c7a2:	d109      	bne.n	801c7b8 <__libc_init_array+0x24>
 801c7a4:	4d0b      	ldr	r5, [pc, #44]	@ (801c7d4 <__libc_init_array+0x40>)
 801c7a6:	4c0c      	ldr	r4, [pc, #48]	@ (801c7d8 <__libc_init_array+0x44>)
 801c7a8:	f001 ff3a 	bl	801e620 <_init>
 801c7ac:	1b64      	subs	r4, r4, r5
 801c7ae:	10a4      	asrs	r4, r4, #2
 801c7b0:	2600      	movs	r6, #0
 801c7b2:	42a6      	cmp	r6, r4
 801c7b4:	d105      	bne.n	801c7c2 <__libc_init_array+0x2e>
 801c7b6:	bd70      	pop	{r4, r5, r6, pc}
 801c7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7bc:	4798      	blx	r3
 801c7be:	3601      	adds	r6, #1
 801c7c0:	e7ee      	b.n	801c7a0 <__libc_init_array+0xc>
 801c7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7c6:	4798      	blx	r3
 801c7c8:	3601      	adds	r6, #1
 801c7ca:	e7f2      	b.n	801c7b2 <__libc_init_array+0x1e>
 801c7cc:	0801fafc 	.word	0x0801fafc
 801c7d0:	0801fafc 	.word	0x0801fafc
 801c7d4:	0801fafc 	.word	0x0801fafc
 801c7d8:	0801fb00 	.word	0x0801fb00

0801c7dc <__retarget_lock_init_recursive>:
 801c7dc:	4770      	bx	lr

0801c7de <__retarget_lock_acquire_recursive>:
 801c7de:	4770      	bx	lr

0801c7e0 <__retarget_lock_release_recursive>:
 801c7e0:	4770      	bx	lr

0801c7e2 <quorem>:
 801c7e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e6:	6903      	ldr	r3, [r0, #16]
 801c7e8:	690c      	ldr	r4, [r1, #16]
 801c7ea:	42a3      	cmp	r3, r4
 801c7ec:	4607      	mov	r7, r0
 801c7ee:	db7e      	blt.n	801c8ee <quorem+0x10c>
 801c7f0:	3c01      	subs	r4, #1
 801c7f2:	f101 0814 	add.w	r8, r1, #20
 801c7f6:	00a3      	lsls	r3, r4, #2
 801c7f8:	f100 0514 	add.w	r5, r0, #20
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c802:	9301      	str	r3, [sp, #4]
 801c804:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c808:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c80c:	3301      	adds	r3, #1
 801c80e:	429a      	cmp	r2, r3
 801c810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c814:	fbb2 f6f3 	udiv	r6, r2, r3
 801c818:	d32e      	bcc.n	801c878 <quorem+0x96>
 801c81a:	f04f 0a00 	mov.w	sl, #0
 801c81e:	46c4      	mov	ip, r8
 801c820:	46ae      	mov	lr, r5
 801c822:	46d3      	mov	fp, sl
 801c824:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c828:	b298      	uxth	r0, r3
 801c82a:	fb06 a000 	mla	r0, r6, r0, sl
 801c82e:	0c02      	lsrs	r2, r0, #16
 801c830:	0c1b      	lsrs	r3, r3, #16
 801c832:	fb06 2303 	mla	r3, r6, r3, r2
 801c836:	f8de 2000 	ldr.w	r2, [lr]
 801c83a:	b280      	uxth	r0, r0
 801c83c:	b292      	uxth	r2, r2
 801c83e:	1a12      	subs	r2, r2, r0
 801c840:	445a      	add	r2, fp
 801c842:	f8de 0000 	ldr.w	r0, [lr]
 801c846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c84a:	b29b      	uxth	r3, r3
 801c84c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c850:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c854:	b292      	uxth	r2, r2
 801c856:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c85a:	45e1      	cmp	r9, ip
 801c85c:	f84e 2b04 	str.w	r2, [lr], #4
 801c860:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c864:	d2de      	bcs.n	801c824 <quorem+0x42>
 801c866:	9b00      	ldr	r3, [sp, #0]
 801c868:	58eb      	ldr	r3, [r5, r3]
 801c86a:	b92b      	cbnz	r3, 801c878 <quorem+0x96>
 801c86c:	9b01      	ldr	r3, [sp, #4]
 801c86e:	3b04      	subs	r3, #4
 801c870:	429d      	cmp	r5, r3
 801c872:	461a      	mov	r2, r3
 801c874:	d32f      	bcc.n	801c8d6 <quorem+0xf4>
 801c876:	613c      	str	r4, [r7, #16]
 801c878:	4638      	mov	r0, r7
 801c87a:	f001 f97f 	bl	801db7c <__mcmp>
 801c87e:	2800      	cmp	r0, #0
 801c880:	db25      	blt.n	801c8ce <quorem+0xec>
 801c882:	4629      	mov	r1, r5
 801c884:	2000      	movs	r0, #0
 801c886:	f858 2b04 	ldr.w	r2, [r8], #4
 801c88a:	f8d1 c000 	ldr.w	ip, [r1]
 801c88e:	fa1f fe82 	uxth.w	lr, r2
 801c892:	fa1f f38c 	uxth.w	r3, ip
 801c896:	eba3 030e 	sub.w	r3, r3, lr
 801c89a:	4403      	add	r3, r0
 801c89c:	0c12      	lsrs	r2, r2, #16
 801c89e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c8a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c8a6:	b29b      	uxth	r3, r3
 801c8a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8ac:	45c1      	cmp	r9, r8
 801c8ae:	f841 3b04 	str.w	r3, [r1], #4
 801c8b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c8b6:	d2e6      	bcs.n	801c886 <quorem+0xa4>
 801c8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c8c0:	b922      	cbnz	r2, 801c8cc <quorem+0xea>
 801c8c2:	3b04      	subs	r3, #4
 801c8c4:	429d      	cmp	r5, r3
 801c8c6:	461a      	mov	r2, r3
 801c8c8:	d30b      	bcc.n	801c8e2 <quorem+0x100>
 801c8ca:	613c      	str	r4, [r7, #16]
 801c8cc:	3601      	adds	r6, #1
 801c8ce:	4630      	mov	r0, r6
 801c8d0:	b003      	add	sp, #12
 801c8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8d6:	6812      	ldr	r2, [r2, #0]
 801c8d8:	3b04      	subs	r3, #4
 801c8da:	2a00      	cmp	r2, #0
 801c8dc:	d1cb      	bne.n	801c876 <quorem+0x94>
 801c8de:	3c01      	subs	r4, #1
 801c8e0:	e7c6      	b.n	801c870 <quorem+0x8e>
 801c8e2:	6812      	ldr	r2, [r2, #0]
 801c8e4:	3b04      	subs	r3, #4
 801c8e6:	2a00      	cmp	r2, #0
 801c8e8:	d1ef      	bne.n	801c8ca <quorem+0xe8>
 801c8ea:	3c01      	subs	r4, #1
 801c8ec:	e7ea      	b.n	801c8c4 <quorem+0xe2>
 801c8ee:	2000      	movs	r0, #0
 801c8f0:	e7ee      	b.n	801c8d0 <quorem+0xee>
 801c8f2:	0000      	movs	r0, r0
 801c8f4:	0000      	movs	r0, r0
	...

0801c8f8 <_dtoa_r>:
 801c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8fc:	69c7      	ldr	r7, [r0, #28]
 801c8fe:	b097      	sub	sp, #92	@ 0x5c
 801c900:	4614      	mov	r4, r2
 801c902:	461d      	mov	r5, r3
 801c904:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c908:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801c90a:	4681      	mov	r9, r0
 801c90c:	b97f      	cbnz	r7, 801c92e <_dtoa_r+0x36>
 801c90e:	2010      	movs	r0, #16
 801c910:	f000 fe0c 	bl	801d52c <malloc>
 801c914:	4602      	mov	r2, r0
 801c916:	f8c9 001c 	str.w	r0, [r9, #28]
 801c91a:	b920      	cbnz	r0, 801c926 <_dtoa_r+0x2e>
 801c91c:	4baa      	ldr	r3, [pc, #680]	@ (801cbc8 <_dtoa_r+0x2d0>)
 801c91e:	21ef      	movs	r1, #239	@ 0xef
 801c920:	48aa      	ldr	r0, [pc, #680]	@ (801cbcc <_dtoa_r+0x2d4>)
 801c922:	f001 faf7 	bl	801df14 <__assert_func>
 801c926:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c92a:	6007      	str	r7, [r0, #0]
 801c92c:	60c7      	str	r7, [r0, #12]
 801c92e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c932:	6819      	ldr	r1, [r3, #0]
 801c934:	b159      	cbz	r1, 801c94e <_dtoa_r+0x56>
 801c936:	685a      	ldr	r2, [r3, #4]
 801c938:	604a      	str	r2, [r1, #4]
 801c93a:	2301      	movs	r3, #1
 801c93c:	4093      	lsls	r3, r2
 801c93e:	608b      	str	r3, [r1, #8]
 801c940:	4648      	mov	r0, r9
 801c942:	f000 fee9 	bl	801d718 <_Bfree>
 801c946:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801c94a:	2200      	movs	r2, #0
 801c94c:	601a      	str	r2, [r3, #0]
 801c94e:	1e2b      	subs	r3, r5, #0
 801c950:	bfb9      	ittee	lt
 801c952:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c956:	9307      	strlt	r3, [sp, #28]
 801c958:	2300      	movge	r3, #0
 801c95a:	6033      	strge	r3, [r6, #0]
 801c95c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c960:	4b9b      	ldr	r3, [pc, #620]	@ (801cbd0 <_dtoa_r+0x2d8>)
 801c962:	bfbc      	itt	lt
 801c964:	2201      	movlt	r2, #1
 801c966:	6032      	strlt	r2, [r6, #0]
 801c968:	ea33 0308 	bics.w	r3, r3, r8
 801c96c:	d112      	bne.n	801c994 <_dtoa_r+0x9c>
 801c96e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c970:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c974:	6013      	str	r3, [r2, #0]
 801c976:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c97a:	4323      	orrs	r3, r4
 801c97c:	f000 855b 	beq.w	801d436 <_dtoa_r+0xb3e>
 801c980:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c982:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801cbd4 <_dtoa_r+0x2dc>
 801c986:	2b00      	cmp	r3, #0
 801c988:	f000 855d 	beq.w	801d446 <_dtoa_r+0xb4e>
 801c98c:	f10a 0303 	add.w	r3, sl, #3
 801c990:	f000 bd57 	b.w	801d442 <_dtoa_r+0xb4a>
 801c994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c998:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801c99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	f7e4 f868 	bl	8000a78 <__aeabi_dcmpeq>
 801c9a8:	4607      	mov	r7, r0
 801c9aa:	b158      	cbz	r0, 801c9c4 <_dtoa_r+0xcc>
 801c9ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	6013      	str	r3, [r2, #0]
 801c9b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9b4:	b113      	cbz	r3, 801c9bc <_dtoa_r+0xc4>
 801c9b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c9b8:	4b87      	ldr	r3, [pc, #540]	@ (801cbd8 <_dtoa_r+0x2e0>)
 801c9ba:	6013      	str	r3, [r2, #0]
 801c9bc:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801cbdc <_dtoa_r+0x2e4>
 801c9c0:	f000 bd41 	b.w	801d446 <_dtoa_r+0xb4e>
 801c9c4:	ab14      	add	r3, sp, #80	@ 0x50
 801c9c6:	9301      	str	r3, [sp, #4]
 801c9c8:	ab15      	add	r3, sp, #84	@ 0x54
 801c9ca:	9300      	str	r3, [sp, #0]
 801c9cc:	4648      	mov	r0, r9
 801c9ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c9d2:	f001 f981 	bl	801dcd8 <__d2b>
 801c9d6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801c9da:	9003      	str	r0, [sp, #12]
 801c9dc:	2e00      	cmp	r6, #0
 801c9de:	d077      	beq.n	801cad0 <_dtoa_r+0x1d8>
 801c9e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9e2:	9712      	str	r7, [sp, #72]	@ 0x48
 801c9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c9f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c9f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c9f8:	4619      	mov	r1, r3
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	4b78      	ldr	r3, [pc, #480]	@ (801cbe0 <_dtoa_r+0x2e8>)
 801c9fe:	f7e3 fc1b 	bl	8000238 <__aeabi_dsub>
 801ca02:	a36b      	add	r3, pc, #428	@ (adr r3, 801cbb0 <_dtoa_r+0x2b8>)
 801ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca08:	f7e3 fdce 	bl	80005a8 <__aeabi_dmul>
 801ca0c:	a36a      	add	r3, pc, #424	@ (adr r3, 801cbb8 <_dtoa_r+0x2c0>)
 801ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca12:	f7e3 fc13 	bl	800023c <__adddf3>
 801ca16:	4604      	mov	r4, r0
 801ca18:	4630      	mov	r0, r6
 801ca1a:	460d      	mov	r5, r1
 801ca1c:	f7e3 fd5a 	bl	80004d4 <__aeabi_i2d>
 801ca20:	a367      	add	r3, pc, #412	@ (adr r3, 801cbc0 <_dtoa_r+0x2c8>)
 801ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca26:	f7e3 fdbf 	bl	80005a8 <__aeabi_dmul>
 801ca2a:	4602      	mov	r2, r0
 801ca2c:	460b      	mov	r3, r1
 801ca2e:	4620      	mov	r0, r4
 801ca30:	4629      	mov	r1, r5
 801ca32:	f7e3 fc03 	bl	800023c <__adddf3>
 801ca36:	4604      	mov	r4, r0
 801ca38:	460d      	mov	r5, r1
 801ca3a:	f7e4 f865 	bl	8000b08 <__aeabi_d2iz>
 801ca3e:	2200      	movs	r2, #0
 801ca40:	4607      	mov	r7, r0
 801ca42:	2300      	movs	r3, #0
 801ca44:	4620      	mov	r0, r4
 801ca46:	4629      	mov	r1, r5
 801ca48:	f7e4 f820 	bl	8000a8c <__aeabi_dcmplt>
 801ca4c:	b140      	cbz	r0, 801ca60 <_dtoa_r+0x168>
 801ca4e:	4638      	mov	r0, r7
 801ca50:	f7e3 fd40 	bl	80004d4 <__aeabi_i2d>
 801ca54:	4622      	mov	r2, r4
 801ca56:	462b      	mov	r3, r5
 801ca58:	f7e4 f80e 	bl	8000a78 <__aeabi_dcmpeq>
 801ca5c:	b900      	cbnz	r0, 801ca60 <_dtoa_r+0x168>
 801ca5e:	3f01      	subs	r7, #1
 801ca60:	2f16      	cmp	r7, #22
 801ca62:	d853      	bhi.n	801cb0c <_dtoa_r+0x214>
 801ca64:	4b5f      	ldr	r3, [pc, #380]	@ (801cbe4 <_dtoa_r+0x2ec>)
 801ca66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca72:	f7e4 f80b 	bl	8000a8c <__aeabi_dcmplt>
 801ca76:	2800      	cmp	r0, #0
 801ca78:	d04a      	beq.n	801cb10 <_dtoa_r+0x218>
 801ca7a:	3f01      	subs	r7, #1
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ca80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca82:	1b9b      	subs	r3, r3, r6
 801ca84:	1e5a      	subs	r2, r3, #1
 801ca86:	bf45      	ittet	mi
 801ca88:	f1c3 0301 	rsbmi	r3, r3, #1
 801ca8c:	9304      	strmi	r3, [sp, #16]
 801ca8e:	2300      	movpl	r3, #0
 801ca90:	2300      	movmi	r3, #0
 801ca92:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca94:	bf54      	ite	pl
 801ca96:	9304      	strpl	r3, [sp, #16]
 801ca98:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801ca9a:	2f00      	cmp	r7, #0
 801ca9c:	db3a      	blt.n	801cb14 <_dtoa_r+0x21c>
 801ca9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caa0:	970e      	str	r7, [sp, #56]	@ 0x38
 801caa2:	443b      	add	r3, r7
 801caa4:	9309      	str	r3, [sp, #36]	@ 0x24
 801caa6:	2300      	movs	r3, #0
 801caa8:	930a      	str	r3, [sp, #40]	@ 0x28
 801caaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801caac:	2b09      	cmp	r3, #9
 801caae:	d864      	bhi.n	801cb7a <_dtoa_r+0x282>
 801cab0:	2b05      	cmp	r3, #5
 801cab2:	bfc4      	itt	gt
 801cab4:	3b04      	subgt	r3, #4
 801cab6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801cab8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801caba:	f1a3 0302 	sub.w	r3, r3, #2
 801cabe:	bfcc      	ite	gt
 801cac0:	2400      	movgt	r4, #0
 801cac2:	2401      	movle	r4, #1
 801cac4:	2b03      	cmp	r3, #3
 801cac6:	d864      	bhi.n	801cb92 <_dtoa_r+0x29a>
 801cac8:	e8df f003 	tbb	[pc, r3]
 801cacc:	2c385553 	.word	0x2c385553
 801cad0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801cad4:	441e      	add	r6, r3
 801cad6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cada:	2b20      	cmp	r3, #32
 801cadc:	bfc1      	itttt	gt
 801cade:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801cae2:	fa08 f803 	lslgt.w	r8, r8, r3
 801cae6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801caea:	fa24 f303 	lsrgt.w	r3, r4, r3
 801caee:	bfd6      	itet	le
 801caf0:	f1c3 0320 	rsble	r3, r3, #32
 801caf4:	ea48 0003 	orrgt.w	r0, r8, r3
 801caf8:	fa04 f003 	lslle.w	r0, r4, r3
 801cafc:	f7e3 fcda 	bl	80004b4 <__aeabi_ui2d>
 801cb00:	2201      	movs	r2, #1
 801cb02:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cb06:	3e01      	subs	r6, #1
 801cb08:	9212      	str	r2, [sp, #72]	@ 0x48
 801cb0a:	e775      	b.n	801c9f8 <_dtoa_r+0x100>
 801cb0c:	2301      	movs	r3, #1
 801cb0e:	e7b6      	b.n	801ca7e <_dtoa_r+0x186>
 801cb10:	900f      	str	r0, [sp, #60]	@ 0x3c
 801cb12:	e7b5      	b.n	801ca80 <_dtoa_r+0x188>
 801cb14:	9b04      	ldr	r3, [sp, #16]
 801cb16:	1bdb      	subs	r3, r3, r7
 801cb18:	9304      	str	r3, [sp, #16]
 801cb1a:	427b      	negs	r3, r7
 801cb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb1e:	2300      	movs	r3, #0
 801cb20:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb22:	e7c2      	b.n	801caaa <_dtoa_r+0x1b2>
 801cb24:	2301      	movs	r3, #1
 801cb26:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb2a:	eb07 0b03 	add.w	fp, r7, r3
 801cb2e:	f10b 0301 	add.w	r3, fp, #1
 801cb32:	2b01      	cmp	r3, #1
 801cb34:	9308      	str	r3, [sp, #32]
 801cb36:	bfb8      	it	lt
 801cb38:	2301      	movlt	r3, #1
 801cb3a:	e006      	b.n	801cb4a <_dtoa_r+0x252>
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	dd28      	ble.n	801cb98 <_dtoa_r+0x2a0>
 801cb46:	469b      	mov	fp, r3
 801cb48:	9308      	str	r3, [sp, #32]
 801cb4a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cb4e:	2100      	movs	r1, #0
 801cb50:	2204      	movs	r2, #4
 801cb52:	f102 0514 	add.w	r5, r2, #20
 801cb56:	429d      	cmp	r5, r3
 801cb58:	d926      	bls.n	801cba8 <_dtoa_r+0x2b0>
 801cb5a:	6041      	str	r1, [r0, #4]
 801cb5c:	4648      	mov	r0, r9
 801cb5e:	f000 fd9b 	bl	801d698 <_Balloc>
 801cb62:	4682      	mov	sl, r0
 801cb64:	2800      	cmp	r0, #0
 801cb66:	d141      	bne.n	801cbec <_dtoa_r+0x2f4>
 801cb68:	4b1f      	ldr	r3, [pc, #124]	@ (801cbe8 <_dtoa_r+0x2f0>)
 801cb6a:	4602      	mov	r2, r0
 801cb6c:	f240 11af 	movw	r1, #431	@ 0x1af
 801cb70:	e6d6      	b.n	801c920 <_dtoa_r+0x28>
 801cb72:	2300      	movs	r3, #0
 801cb74:	e7e3      	b.n	801cb3e <_dtoa_r+0x246>
 801cb76:	2300      	movs	r3, #0
 801cb78:	e7d5      	b.n	801cb26 <_dtoa_r+0x22e>
 801cb7a:	2401      	movs	r4, #1
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	9320      	str	r3, [sp, #128]	@ 0x80
 801cb80:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cb82:	f04f 3bff 	mov.w	fp, #4294967295
 801cb86:	2200      	movs	r2, #0
 801cb88:	f8cd b020 	str.w	fp, [sp, #32]
 801cb8c:	2312      	movs	r3, #18
 801cb8e:	9221      	str	r2, [sp, #132]	@ 0x84
 801cb90:	e7db      	b.n	801cb4a <_dtoa_r+0x252>
 801cb92:	2301      	movs	r3, #1
 801cb94:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb96:	e7f4      	b.n	801cb82 <_dtoa_r+0x28a>
 801cb98:	f04f 0b01 	mov.w	fp, #1
 801cb9c:	f8cd b020 	str.w	fp, [sp, #32]
 801cba0:	465b      	mov	r3, fp
 801cba2:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801cba6:	e7d0      	b.n	801cb4a <_dtoa_r+0x252>
 801cba8:	3101      	adds	r1, #1
 801cbaa:	0052      	lsls	r2, r2, #1
 801cbac:	e7d1      	b.n	801cb52 <_dtoa_r+0x25a>
 801cbae:	bf00      	nop
 801cbb0:	636f4361 	.word	0x636f4361
 801cbb4:	3fd287a7 	.word	0x3fd287a7
 801cbb8:	8b60c8b3 	.word	0x8b60c8b3
 801cbbc:	3fc68a28 	.word	0x3fc68a28
 801cbc0:	509f79fb 	.word	0x509f79fb
 801cbc4:	3fd34413 	.word	0x3fd34413
 801cbc8:	0801f6fd 	.word	0x0801f6fd
 801cbcc:	0801f714 	.word	0x0801f714
 801cbd0:	7ff00000 	.word	0x7ff00000
 801cbd4:	0801f6f9 	.word	0x0801f6f9
 801cbd8:	0801f6cd 	.word	0x0801f6cd
 801cbdc:	0801f6cc 	.word	0x0801f6cc
 801cbe0:	3ff80000 	.word	0x3ff80000
 801cbe4:	0801f868 	.word	0x0801f868
 801cbe8:	0801f76c 	.word	0x0801f76c
 801cbec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801cbf0:	6018      	str	r0, [r3, #0]
 801cbf2:	9b08      	ldr	r3, [sp, #32]
 801cbf4:	2b0e      	cmp	r3, #14
 801cbf6:	f200 80a1 	bhi.w	801cd3c <_dtoa_r+0x444>
 801cbfa:	2c00      	cmp	r4, #0
 801cbfc:	f000 809e 	beq.w	801cd3c <_dtoa_r+0x444>
 801cc00:	2f00      	cmp	r7, #0
 801cc02:	dd33      	ble.n	801cc6c <_dtoa_r+0x374>
 801cc04:	4b9c      	ldr	r3, [pc, #624]	@ (801ce78 <_dtoa_r+0x580>)
 801cc06:	f007 020f 	and.w	r2, r7, #15
 801cc0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cc12:	05f8      	lsls	r0, r7, #23
 801cc14:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801cc18:	ea4f 1427 	mov.w	r4, r7, asr #4
 801cc1c:	d516      	bpl.n	801cc4c <_dtoa_r+0x354>
 801cc1e:	4b97      	ldr	r3, [pc, #604]	@ (801ce7c <_dtoa_r+0x584>)
 801cc20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cc24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cc28:	f7e3 fde8 	bl	80007fc <__aeabi_ddiv>
 801cc2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc30:	f004 040f 	and.w	r4, r4, #15
 801cc34:	2603      	movs	r6, #3
 801cc36:	4d91      	ldr	r5, [pc, #580]	@ (801ce7c <_dtoa_r+0x584>)
 801cc38:	b954      	cbnz	r4, 801cc50 <_dtoa_r+0x358>
 801cc3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cc3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc42:	f7e3 fddb 	bl	80007fc <__aeabi_ddiv>
 801cc46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc4a:	e028      	b.n	801cc9e <_dtoa_r+0x3a6>
 801cc4c:	2602      	movs	r6, #2
 801cc4e:	e7f2      	b.n	801cc36 <_dtoa_r+0x33e>
 801cc50:	07e1      	lsls	r1, r4, #31
 801cc52:	d508      	bpl.n	801cc66 <_dtoa_r+0x36e>
 801cc54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801cc58:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cc5c:	f7e3 fca4 	bl	80005a8 <__aeabi_dmul>
 801cc60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cc64:	3601      	adds	r6, #1
 801cc66:	1064      	asrs	r4, r4, #1
 801cc68:	3508      	adds	r5, #8
 801cc6a:	e7e5      	b.n	801cc38 <_dtoa_r+0x340>
 801cc6c:	f000 80af 	beq.w	801cdce <_dtoa_r+0x4d6>
 801cc70:	427c      	negs	r4, r7
 801cc72:	4b81      	ldr	r3, [pc, #516]	@ (801ce78 <_dtoa_r+0x580>)
 801cc74:	4d81      	ldr	r5, [pc, #516]	@ (801ce7c <_dtoa_r+0x584>)
 801cc76:	f004 020f 	and.w	r2, r4, #15
 801cc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cc86:	f7e3 fc8f 	bl	80005a8 <__aeabi_dmul>
 801cc8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cc8e:	1124      	asrs	r4, r4, #4
 801cc90:	2300      	movs	r3, #0
 801cc92:	2602      	movs	r6, #2
 801cc94:	2c00      	cmp	r4, #0
 801cc96:	f040 808f 	bne.w	801cdb8 <_dtoa_r+0x4c0>
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d1d3      	bne.n	801cc46 <_dtoa_r+0x34e>
 801cc9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cca0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	f000 8094 	beq.w	801cdd2 <_dtoa_r+0x4da>
 801ccaa:	4b75      	ldr	r3, [pc, #468]	@ (801ce80 <_dtoa_r+0x588>)
 801ccac:	2200      	movs	r2, #0
 801ccae:	4620      	mov	r0, r4
 801ccb0:	4629      	mov	r1, r5
 801ccb2:	f7e3 feeb 	bl	8000a8c <__aeabi_dcmplt>
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	f000 808b 	beq.w	801cdd2 <_dtoa_r+0x4da>
 801ccbc:	9b08      	ldr	r3, [sp, #32]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	f000 8087 	beq.w	801cdd2 <_dtoa_r+0x4da>
 801ccc4:	f1bb 0f00 	cmp.w	fp, #0
 801ccc8:	dd34      	ble.n	801cd34 <_dtoa_r+0x43c>
 801ccca:	4620      	mov	r0, r4
 801cccc:	4b6d      	ldr	r3, [pc, #436]	@ (801ce84 <_dtoa_r+0x58c>)
 801ccce:	2200      	movs	r2, #0
 801ccd0:	4629      	mov	r1, r5
 801ccd2:	f7e3 fc69 	bl	80005a8 <__aeabi_dmul>
 801ccd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ccda:	f107 38ff 	add.w	r8, r7, #4294967295
 801ccde:	3601      	adds	r6, #1
 801cce0:	465c      	mov	r4, fp
 801cce2:	4630      	mov	r0, r6
 801cce4:	f7e3 fbf6 	bl	80004d4 <__aeabi_i2d>
 801cce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ccec:	f7e3 fc5c 	bl	80005a8 <__aeabi_dmul>
 801ccf0:	4b65      	ldr	r3, [pc, #404]	@ (801ce88 <_dtoa_r+0x590>)
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	f7e3 faa2 	bl	800023c <__adddf3>
 801ccf8:	4605      	mov	r5, r0
 801ccfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ccfe:	2c00      	cmp	r4, #0
 801cd00:	d16a      	bne.n	801cdd8 <_dtoa_r+0x4e0>
 801cd02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd06:	4b61      	ldr	r3, [pc, #388]	@ (801ce8c <_dtoa_r+0x594>)
 801cd08:	2200      	movs	r2, #0
 801cd0a:	f7e3 fa95 	bl	8000238 <__aeabi_dsub>
 801cd0e:	4602      	mov	r2, r0
 801cd10:	460b      	mov	r3, r1
 801cd12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cd16:	462a      	mov	r2, r5
 801cd18:	4633      	mov	r3, r6
 801cd1a:	f7e3 fed5 	bl	8000ac8 <__aeabi_dcmpgt>
 801cd1e:	2800      	cmp	r0, #0
 801cd20:	f040 8298 	bne.w	801d254 <_dtoa_r+0x95c>
 801cd24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd28:	462a      	mov	r2, r5
 801cd2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cd2e:	f7e3 fead 	bl	8000a8c <__aeabi_dcmplt>
 801cd32:	bb38      	cbnz	r0, 801cd84 <_dtoa_r+0x48c>
 801cd34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801cd38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cd3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f2c0 8157 	blt.w	801cff2 <_dtoa_r+0x6fa>
 801cd44:	2f0e      	cmp	r7, #14
 801cd46:	f300 8154 	bgt.w	801cff2 <_dtoa_r+0x6fa>
 801cd4a:	4b4b      	ldr	r3, [pc, #300]	@ (801ce78 <_dtoa_r+0x580>)
 801cd4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cd50:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cd54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cd58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	f280 80e5 	bge.w	801cf2a <_dtoa_r+0x632>
 801cd60:	9b08      	ldr	r3, [sp, #32]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f300 80e1 	bgt.w	801cf2a <_dtoa_r+0x632>
 801cd68:	d10c      	bne.n	801cd84 <_dtoa_r+0x48c>
 801cd6a:	4b48      	ldr	r3, [pc, #288]	@ (801ce8c <_dtoa_r+0x594>)
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd72:	f7e3 fc19 	bl	80005a8 <__aeabi_dmul>
 801cd76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd7a:	f7e3 fe9b 	bl	8000ab4 <__aeabi_dcmpge>
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	f000 8266 	beq.w	801d250 <_dtoa_r+0x958>
 801cd84:	2400      	movs	r4, #0
 801cd86:	4625      	mov	r5, r4
 801cd88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cd8a:	4656      	mov	r6, sl
 801cd8c:	ea6f 0803 	mvn.w	r8, r3
 801cd90:	2700      	movs	r7, #0
 801cd92:	4621      	mov	r1, r4
 801cd94:	4648      	mov	r0, r9
 801cd96:	f000 fcbf 	bl	801d718 <_Bfree>
 801cd9a:	2d00      	cmp	r5, #0
 801cd9c:	f000 80bd 	beq.w	801cf1a <_dtoa_r+0x622>
 801cda0:	b12f      	cbz	r7, 801cdae <_dtoa_r+0x4b6>
 801cda2:	42af      	cmp	r7, r5
 801cda4:	d003      	beq.n	801cdae <_dtoa_r+0x4b6>
 801cda6:	4639      	mov	r1, r7
 801cda8:	4648      	mov	r0, r9
 801cdaa:	f000 fcb5 	bl	801d718 <_Bfree>
 801cdae:	4629      	mov	r1, r5
 801cdb0:	4648      	mov	r0, r9
 801cdb2:	f000 fcb1 	bl	801d718 <_Bfree>
 801cdb6:	e0b0      	b.n	801cf1a <_dtoa_r+0x622>
 801cdb8:	07e2      	lsls	r2, r4, #31
 801cdba:	d505      	bpl.n	801cdc8 <_dtoa_r+0x4d0>
 801cdbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cdc0:	f7e3 fbf2 	bl	80005a8 <__aeabi_dmul>
 801cdc4:	3601      	adds	r6, #1
 801cdc6:	2301      	movs	r3, #1
 801cdc8:	1064      	asrs	r4, r4, #1
 801cdca:	3508      	adds	r5, #8
 801cdcc:	e762      	b.n	801cc94 <_dtoa_r+0x39c>
 801cdce:	2602      	movs	r6, #2
 801cdd0:	e765      	b.n	801cc9e <_dtoa_r+0x3a6>
 801cdd2:	9c08      	ldr	r4, [sp, #32]
 801cdd4:	46b8      	mov	r8, r7
 801cdd6:	e784      	b.n	801cce2 <_dtoa_r+0x3ea>
 801cdd8:	4b27      	ldr	r3, [pc, #156]	@ (801ce78 <_dtoa_r+0x580>)
 801cdda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cddc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cde0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cde4:	4454      	add	r4, sl
 801cde6:	2900      	cmp	r1, #0
 801cde8:	d054      	beq.n	801ce94 <_dtoa_r+0x59c>
 801cdea:	4929      	ldr	r1, [pc, #164]	@ (801ce90 <_dtoa_r+0x598>)
 801cdec:	2000      	movs	r0, #0
 801cdee:	f7e3 fd05 	bl	80007fc <__aeabi_ddiv>
 801cdf2:	4633      	mov	r3, r6
 801cdf4:	462a      	mov	r2, r5
 801cdf6:	f7e3 fa1f 	bl	8000238 <__aeabi_dsub>
 801cdfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cdfe:	4656      	mov	r6, sl
 801ce00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce04:	f7e3 fe80 	bl	8000b08 <__aeabi_d2iz>
 801ce08:	4605      	mov	r5, r0
 801ce0a:	f7e3 fb63 	bl	80004d4 <__aeabi_i2d>
 801ce0e:	4602      	mov	r2, r0
 801ce10:	460b      	mov	r3, r1
 801ce12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce16:	f7e3 fa0f 	bl	8000238 <__aeabi_dsub>
 801ce1a:	3530      	adds	r5, #48	@ 0x30
 801ce1c:	4602      	mov	r2, r0
 801ce1e:	460b      	mov	r3, r1
 801ce20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ce24:	f806 5b01 	strb.w	r5, [r6], #1
 801ce28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ce2c:	f7e3 fe2e 	bl	8000a8c <__aeabi_dcmplt>
 801ce30:	2800      	cmp	r0, #0
 801ce32:	d172      	bne.n	801cf1a <_dtoa_r+0x622>
 801ce34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce38:	4911      	ldr	r1, [pc, #68]	@ (801ce80 <_dtoa_r+0x588>)
 801ce3a:	2000      	movs	r0, #0
 801ce3c:	f7e3 f9fc 	bl	8000238 <__aeabi_dsub>
 801ce40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ce44:	f7e3 fe22 	bl	8000a8c <__aeabi_dcmplt>
 801ce48:	2800      	cmp	r0, #0
 801ce4a:	f040 80b4 	bne.w	801cfb6 <_dtoa_r+0x6be>
 801ce4e:	42a6      	cmp	r6, r4
 801ce50:	f43f af70 	beq.w	801cd34 <_dtoa_r+0x43c>
 801ce54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ce58:	4b0a      	ldr	r3, [pc, #40]	@ (801ce84 <_dtoa_r+0x58c>)
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	f7e3 fba4 	bl	80005a8 <__aeabi_dmul>
 801ce60:	4b08      	ldr	r3, [pc, #32]	@ (801ce84 <_dtoa_r+0x58c>)
 801ce62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ce66:	2200      	movs	r2, #0
 801ce68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce6c:	f7e3 fb9c 	bl	80005a8 <__aeabi_dmul>
 801ce70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ce74:	e7c4      	b.n	801ce00 <_dtoa_r+0x508>
 801ce76:	bf00      	nop
 801ce78:	0801f868 	.word	0x0801f868
 801ce7c:	0801f840 	.word	0x0801f840
 801ce80:	3ff00000 	.word	0x3ff00000
 801ce84:	40240000 	.word	0x40240000
 801ce88:	401c0000 	.word	0x401c0000
 801ce8c:	40140000 	.word	0x40140000
 801ce90:	3fe00000 	.word	0x3fe00000
 801ce94:	4631      	mov	r1, r6
 801ce96:	4628      	mov	r0, r5
 801ce98:	f7e3 fb86 	bl	80005a8 <__aeabi_dmul>
 801ce9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801cea0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801cea2:	4656      	mov	r6, sl
 801cea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cea8:	f7e3 fe2e 	bl	8000b08 <__aeabi_d2iz>
 801ceac:	4605      	mov	r5, r0
 801ceae:	f7e3 fb11 	bl	80004d4 <__aeabi_i2d>
 801ceb2:	4602      	mov	r2, r0
 801ceb4:	460b      	mov	r3, r1
 801ceb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ceba:	f7e3 f9bd 	bl	8000238 <__aeabi_dsub>
 801cebe:	3530      	adds	r5, #48	@ 0x30
 801cec0:	f806 5b01 	strb.w	r5, [r6], #1
 801cec4:	4602      	mov	r2, r0
 801cec6:	460b      	mov	r3, r1
 801cec8:	42a6      	cmp	r6, r4
 801ceca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cece:	f04f 0200 	mov.w	r2, #0
 801ced2:	d124      	bne.n	801cf1e <_dtoa_r+0x626>
 801ced4:	4baf      	ldr	r3, [pc, #700]	@ (801d194 <_dtoa_r+0x89c>)
 801ced6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ceda:	f7e3 f9af 	bl	800023c <__adddf3>
 801cede:	4602      	mov	r2, r0
 801cee0:	460b      	mov	r3, r1
 801cee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cee6:	f7e3 fdef 	bl	8000ac8 <__aeabi_dcmpgt>
 801ceea:	2800      	cmp	r0, #0
 801ceec:	d163      	bne.n	801cfb6 <_dtoa_r+0x6be>
 801ceee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801cef2:	49a8      	ldr	r1, [pc, #672]	@ (801d194 <_dtoa_r+0x89c>)
 801cef4:	2000      	movs	r0, #0
 801cef6:	f7e3 f99f 	bl	8000238 <__aeabi_dsub>
 801cefa:	4602      	mov	r2, r0
 801cefc:	460b      	mov	r3, r1
 801cefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf02:	f7e3 fdc3 	bl	8000a8c <__aeabi_dcmplt>
 801cf06:	2800      	cmp	r0, #0
 801cf08:	f43f af14 	beq.w	801cd34 <_dtoa_r+0x43c>
 801cf0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cf0e:	1e73      	subs	r3, r6, #1
 801cf10:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cf12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cf16:	2b30      	cmp	r3, #48	@ 0x30
 801cf18:	d0f8      	beq.n	801cf0c <_dtoa_r+0x614>
 801cf1a:	4647      	mov	r7, r8
 801cf1c:	e03b      	b.n	801cf96 <_dtoa_r+0x69e>
 801cf1e:	4b9e      	ldr	r3, [pc, #632]	@ (801d198 <_dtoa_r+0x8a0>)
 801cf20:	f7e3 fb42 	bl	80005a8 <__aeabi_dmul>
 801cf24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801cf28:	e7bc      	b.n	801cea4 <_dtoa_r+0x5ac>
 801cf2a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801cf2e:	4656      	mov	r6, sl
 801cf30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf34:	4620      	mov	r0, r4
 801cf36:	4629      	mov	r1, r5
 801cf38:	f7e3 fc60 	bl	80007fc <__aeabi_ddiv>
 801cf3c:	f7e3 fde4 	bl	8000b08 <__aeabi_d2iz>
 801cf40:	4680      	mov	r8, r0
 801cf42:	f7e3 fac7 	bl	80004d4 <__aeabi_i2d>
 801cf46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf4a:	f7e3 fb2d 	bl	80005a8 <__aeabi_dmul>
 801cf4e:	4602      	mov	r2, r0
 801cf50:	460b      	mov	r3, r1
 801cf52:	4620      	mov	r0, r4
 801cf54:	4629      	mov	r1, r5
 801cf56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801cf5a:	f7e3 f96d 	bl	8000238 <__aeabi_dsub>
 801cf5e:	f806 4b01 	strb.w	r4, [r6], #1
 801cf62:	9d08      	ldr	r5, [sp, #32]
 801cf64:	eba6 040a 	sub.w	r4, r6, sl
 801cf68:	42a5      	cmp	r5, r4
 801cf6a:	4602      	mov	r2, r0
 801cf6c:	460b      	mov	r3, r1
 801cf6e:	d133      	bne.n	801cfd8 <_dtoa_r+0x6e0>
 801cf70:	f7e3 f964 	bl	800023c <__adddf3>
 801cf74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf78:	4604      	mov	r4, r0
 801cf7a:	460d      	mov	r5, r1
 801cf7c:	f7e3 fda4 	bl	8000ac8 <__aeabi_dcmpgt>
 801cf80:	b9c0      	cbnz	r0, 801cfb4 <_dtoa_r+0x6bc>
 801cf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf86:	4620      	mov	r0, r4
 801cf88:	4629      	mov	r1, r5
 801cf8a:	f7e3 fd75 	bl	8000a78 <__aeabi_dcmpeq>
 801cf8e:	b110      	cbz	r0, 801cf96 <_dtoa_r+0x69e>
 801cf90:	f018 0f01 	tst.w	r8, #1
 801cf94:	d10e      	bne.n	801cfb4 <_dtoa_r+0x6bc>
 801cf96:	9903      	ldr	r1, [sp, #12]
 801cf98:	4648      	mov	r0, r9
 801cf9a:	f000 fbbd 	bl	801d718 <_Bfree>
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	7033      	strb	r3, [r6, #0]
 801cfa2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cfa4:	3701      	adds	r7, #1
 801cfa6:	601f      	str	r7, [r3, #0]
 801cfa8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	f000 824b 	beq.w	801d446 <_dtoa_r+0xb4e>
 801cfb0:	601e      	str	r6, [r3, #0]
 801cfb2:	e248      	b.n	801d446 <_dtoa_r+0xb4e>
 801cfb4:	46b8      	mov	r8, r7
 801cfb6:	4633      	mov	r3, r6
 801cfb8:	461e      	mov	r6, r3
 801cfba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfbe:	2a39      	cmp	r2, #57	@ 0x39
 801cfc0:	d106      	bne.n	801cfd0 <_dtoa_r+0x6d8>
 801cfc2:	459a      	cmp	sl, r3
 801cfc4:	d1f8      	bne.n	801cfb8 <_dtoa_r+0x6c0>
 801cfc6:	2230      	movs	r2, #48	@ 0x30
 801cfc8:	f108 0801 	add.w	r8, r8, #1
 801cfcc:	f88a 2000 	strb.w	r2, [sl]
 801cfd0:	781a      	ldrb	r2, [r3, #0]
 801cfd2:	3201      	adds	r2, #1
 801cfd4:	701a      	strb	r2, [r3, #0]
 801cfd6:	e7a0      	b.n	801cf1a <_dtoa_r+0x622>
 801cfd8:	4b6f      	ldr	r3, [pc, #444]	@ (801d198 <_dtoa_r+0x8a0>)
 801cfda:	2200      	movs	r2, #0
 801cfdc:	f7e3 fae4 	bl	80005a8 <__aeabi_dmul>
 801cfe0:	2200      	movs	r2, #0
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	460d      	mov	r5, r1
 801cfe8:	f7e3 fd46 	bl	8000a78 <__aeabi_dcmpeq>
 801cfec:	2800      	cmp	r0, #0
 801cfee:	d09f      	beq.n	801cf30 <_dtoa_r+0x638>
 801cff0:	e7d1      	b.n	801cf96 <_dtoa_r+0x69e>
 801cff2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cff4:	2a00      	cmp	r2, #0
 801cff6:	f000 80ea 	beq.w	801d1ce <_dtoa_r+0x8d6>
 801cffa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cffc:	2a01      	cmp	r2, #1
 801cffe:	f300 80cd 	bgt.w	801d19c <_dtoa_r+0x8a4>
 801d002:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d004:	2a00      	cmp	r2, #0
 801d006:	f000 80c1 	beq.w	801d18c <_dtoa_r+0x894>
 801d00a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d00e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d010:	9e04      	ldr	r6, [sp, #16]
 801d012:	9a04      	ldr	r2, [sp, #16]
 801d014:	441a      	add	r2, r3
 801d016:	9204      	str	r2, [sp, #16]
 801d018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d01a:	2101      	movs	r1, #1
 801d01c:	441a      	add	r2, r3
 801d01e:	4648      	mov	r0, r9
 801d020:	9209      	str	r2, [sp, #36]	@ 0x24
 801d022:	f000 fc2d 	bl	801d880 <__i2b>
 801d026:	4605      	mov	r5, r0
 801d028:	b166      	cbz	r6, 801d044 <_dtoa_r+0x74c>
 801d02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	dd09      	ble.n	801d044 <_dtoa_r+0x74c>
 801d030:	42b3      	cmp	r3, r6
 801d032:	9a04      	ldr	r2, [sp, #16]
 801d034:	bfa8      	it	ge
 801d036:	4633      	movge	r3, r6
 801d038:	1ad2      	subs	r2, r2, r3
 801d03a:	9204      	str	r2, [sp, #16]
 801d03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d03e:	1af6      	subs	r6, r6, r3
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	9309      	str	r3, [sp, #36]	@ 0x24
 801d044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d046:	b30b      	cbz	r3, 801d08c <_dtoa_r+0x794>
 801d048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	f000 80c6 	beq.w	801d1dc <_dtoa_r+0x8e4>
 801d050:	2c00      	cmp	r4, #0
 801d052:	f000 80c0 	beq.w	801d1d6 <_dtoa_r+0x8de>
 801d056:	4629      	mov	r1, r5
 801d058:	4622      	mov	r2, r4
 801d05a:	4648      	mov	r0, r9
 801d05c:	f000 fcc8 	bl	801d9f0 <__pow5mult>
 801d060:	9a03      	ldr	r2, [sp, #12]
 801d062:	4601      	mov	r1, r0
 801d064:	4605      	mov	r5, r0
 801d066:	4648      	mov	r0, r9
 801d068:	f000 fc20 	bl	801d8ac <__multiply>
 801d06c:	9903      	ldr	r1, [sp, #12]
 801d06e:	4680      	mov	r8, r0
 801d070:	4648      	mov	r0, r9
 801d072:	f000 fb51 	bl	801d718 <_Bfree>
 801d076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d078:	1b1b      	subs	r3, r3, r4
 801d07a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d07c:	f000 80b1 	beq.w	801d1e2 <_dtoa_r+0x8ea>
 801d080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d082:	4641      	mov	r1, r8
 801d084:	4648      	mov	r0, r9
 801d086:	f000 fcb3 	bl	801d9f0 <__pow5mult>
 801d08a:	9003      	str	r0, [sp, #12]
 801d08c:	2101      	movs	r1, #1
 801d08e:	4648      	mov	r0, r9
 801d090:	f000 fbf6 	bl	801d880 <__i2b>
 801d094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d096:	4604      	mov	r4, r0
 801d098:	2b00      	cmp	r3, #0
 801d09a:	f000 81d8 	beq.w	801d44e <_dtoa_r+0xb56>
 801d09e:	461a      	mov	r2, r3
 801d0a0:	4601      	mov	r1, r0
 801d0a2:	4648      	mov	r0, r9
 801d0a4:	f000 fca4 	bl	801d9f0 <__pow5mult>
 801d0a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0aa:	2b01      	cmp	r3, #1
 801d0ac:	4604      	mov	r4, r0
 801d0ae:	f300 809f 	bgt.w	801d1f0 <_dtoa_r+0x8f8>
 801d0b2:	9b06      	ldr	r3, [sp, #24]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f040 8097 	bne.w	801d1e8 <_dtoa_r+0x8f0>
 801d0ba:	9b07      	ldr	r3, [sp, #28]
 801d0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	f040 8093 	bne.w	801d1ec <_dtoa_r+0x8f4>
 801d0c6:	9b07      	ldr	r3, [sp, #28]
 801d0c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d0cc:	0d1b      	lsrs	r3, r3, #20
 801d0ce:	051b      	lsls	r3, r3, #20
 801d0d0:	b133      	cbz	r3, 801d0e0 <_dtoa_r+0x7e8>
 801d0d2:	9b04      	ldr	r3, [sp, #16]
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	9304      	str	r3, [sp, #16]
 801d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0da:	3301      	adds	r3, #1
 801d0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0de:	2301      	movs	r3, #1
 801d0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f000 81b8 	beq.w	801d45a <_dtoa_r+0xb62>
 801d0ea:	6923      	ldr	r3, [r4, #16]
 801d0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d0f0:	6918      	ldr	r0, [r3, #16]
 801d0f2:	f000 fb79 	bl	801d7e8 <__hi0bits>
 801d0f6:	f1c0 0020 	rsb	r0, r0, #32
 801d0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0fc:	4418      	add	r0, r3
 801d0fe:	f010 001f 	ands.w	r0, r0, #31
 801d102:	f000 8082 	beq.w	801d20a <_dtoa_r+0x912>
 801d106:	f1c0 0320 	rsb	r3, r0, #32
 801d10a:	2b04      	cmp	r3, #4
 801d10c:	dd73      	ble.n	801d1f6 <_dtoa_r+0x8fe>
 801d10e:	9b04      	ldr	r3, [sp, #16]
 801d110:	f1c0 001c 	rsb	r0, r0, #28
 801d114:	4403      	add	r3, r0
 801d116:	9304      	str	r3, [sp, #16]
 801d118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d11a:	4403      	add	r3, r0
 801d11c:	4406      	add	r6, r0
 801d11e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d120:	9b04      	ldr	r3, [sp, #16]
 801d122:	2b00      	cmp	r3, #0
 801d124:	dd05      	ble.n	801d132 <_dtoa_r+0x83a>
 801d126:	9903      	ldr	r1, [sp, #12]
 801d128:	461a      	mov	r2, r3
 801d12a:	4648      	mov	r0, r9
 801d12c:	f000 fcba 	bl	801daa4 <__lshift>
 801d130:	9003      	str	r0, [sp, #12]
 801d132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d134:	2b00      	cmp	r3, #0
 801d136:	dd05      	ble.n	801d144 <_dtoa_r+0x84c>
 801d138:	4621      	mov	r1, r4
 801d13a:	461a      	mov	r2, r3
 801d13c:	4648      	mov	r0, r9
 801d13e:	f000 fcb1 	bl	801daa4 <__lshift>
 801d142:	4604      	mov	r4, r0
 801d144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d146:	2b00      	cmp	r3, #0
 801d148:	d061      	beq.n	801d20e <_dtoa_r+0x916>
 801d14a:	9803      	ldr	r0, [sp, #12]
 801d14c:	4621      	mov	r1, r4
 801d14e:	f000 fd15 	bl	801db7c <__mcmp>
 801d152:	2800      	cmp	r0, #0
 801d154:	da5b      	bge.n	801d20e <_dtoa_r+0x916>
 801d156:	2300      	movs	r3, #0
 801d158:	9903      	ldr	r1, [sp, #12]
 801d15a:	220a      	movs	r2, #10
 801d15c:	4648      	mov	r0, r9
 801d15e:	f000 fafd 	bl	801d75c <__multadd>
 801d162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d164:	9003      	str	r0, [sp, #12]
 801d166:	f107 38ff 	add.w	r8, r7, #4294967295
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	f000 8177 	beq.w	801d45e <_dtoa_r+0xb66>
 801d170:	4629      	mov	r1, r5
 801d172:	2300      	movs	r3, #0
 801d174:	220a      	movs	r2, #10
 801d176:	4648      	mov	r0, r9
 801d178:	f000 faf0 	bl	801d75c <__multadd>
 801d17c:	f1bb 0f00 	cmp.w	fp, #0
 801d180:	4605      	mov	r5, r0
 801d182:	dc6f      	bgt.n	801d264 <_dtoa_r+0x96c>
 801d184:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d186:	2b02      	cmp	r3, #2
 801d188:	dc49      	bgt.n	801d21e <_dtoa_r+0x926>
 801d18a:	e06b      	b.n	801d264 <_dtoa_r+0x96c>
 801d18c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d18e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d192:	e73c      	b.n	801d00e <_dtoa_r+0x716>
 801d194:	3fe00000 	.word	0x3fe00000
 801d198:	40240000 	.word	0x40240000
 801d19c:	9b08      	ldr	r3, [sp, #32]
 801d19e:	1e5c      	subs	r4, r3, #1
 801d1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1a2:	42a3      	cmp	r3, r4
 801d1a4:	db09      	blt.n	801d1ba <_dtoa_r+0x8c2>
 801d1a6:	1b1c      	subs	r4, r3, r4
 801d1a8:	9b08      	ldr	r3, [sp, #32]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	f6bf af30 	bge.w	801d010 <_dtoa_r+0x718>
 801d1b0:	9b04      	ldr	r3, [sp, #16]
 801d1b2:	9a08      	ldr	r2, [sp, #32]
 801d1b4:	1a9e      	subs	r6, r3, r2
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	e72b      	b.n	801d012 <_dtoa_r+0x71a>
 801d1ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d1be:	940a      	str	r4, [sp, #40]	@ 0x28
 801d1c0:	1ae3      	subs	r3, r4, r3
 801d1c2:	441a      	add	r2, r3
 801d1c4:	9e04      	ldr	r6, [sp, #16]
 801d1c6:	9b08      	ldr	r3, [sp, #32]
 801d1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801d1ca:	2400      	movs	r4, #0
 801d1cc:	e721      	b.n	801d012 <_dtoa_r+0x71a>
 801d1ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d1d0:	9e04      	ldr	r6, [sp, #16]
 801d1d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d1d4:	e728      	b.n	801d028 <_dtoa_r+0x730>
 801d1d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d1da:	e751      	b.n	801d080 <_dtoa_r+0x788>
 801d1dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1de:	9903      	ldr	r1, [sp, #12]
 801d1e0:	e750      	b.n	801d084 <_dtoa_r+0x78c>
 801d1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1e6:	e751      	b.n	801d08c <_dtoa_r+0x794>
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	e779      	b.n	801d0e0 <_dtoa_r+0x7e8>
 801d1ec:	9b06      	ldr	r3, [sp, #24]
 801d1ee:	e777      	b.n	801d0e0 <_dtoa_r+0x7e8>
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1f4:	e779      	b.n	801d0ea <_dtoa_r+0x7f2>
 801d1f6:	d093      	beq.n	801d120 <_dtoa_r+0x828>
 801d1f8:	9a04      	ldr	r2, [sp, #16]
 801d1fa:	331c      	adds	r3, #28
 801d1fc:	441a      	add	r2, r3
 801d1fe:	9204      	str	r2, [sp, #16]
 801d200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d202:	441a      	add	r2, r3
 801d204:	441e      	add	r6, r3
 801d206:	9209      	str	r2, [sp, #36]	@ 0x24
 801d208:	e78a      	b.n	801d120 <_dtoa_r+0x828>
 801d20a:	4603      	mov	r3, r0
 801d20c:	e7f4      	b.n	801d1f8 <_dtoa_r+0x900>
 801d20e:	9b08      	ldr	r3, [sp, #32]
 801d210:	2b00      	cmp	r3, #0
 801d212:	46b8      	mov	r8, r7
 801d214:	dc20      	bgt.n	801d258 <_dtoa_r+0x960>
 801d216:	469b      	mov	fp, r3
 801d218:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d21a:	2b02      	cmp	r3, #2
 801d21c:	dd1e      	ble.n	801d25c <_dtoa_r+0x964>
 801d21e:	f1bb 0f00 	cmp.w	fp, #0
 801d222:	f47f adb1 	bne.w	801cd88 <_dtoa_r+0x490>
 801d226:	4621      	mov	r1, r4
 801d228:	465b      	mov	r3, fp
 801d22a:	2205      	movs	r2, #5
 801d22c:	4648      	mov	r0, r9
 801d22e:	f000 fa95 	bl	801d75c <__multadd>
 801d232:	4601      	mov	r1, r0
 801d234:	4604      	mov	r4, r0
 801d236:	9803      	ldr	r0, [sp, #12]
 801d238:	f000 fca0 	bl	801db7c <__mcmp>
 801d23c:	2800      	cmp	r0, #0
 801d23e:	f77f ada3 	ble.w	801cd88 <_dtoa_r+0x490>
 801d242:	4656      	mov	r6, sl
 801d244:	2331      	movs	r3, #49	@ 0x31
 801d246:	f806 3b01 	strb.w	r3, [r6], #1
 801d24a:	f108 0801 	add.w	r8, r8, #1
 801d24e:	e59f      	b.n	801cd90 <_dtoa_r+0x498>
 801d250:	9c08      	ldr	r4, [sp, #32]
 801d252:	46b8      	mov	r8, r7
 801d254:	4625      	mov	r5, r4
 801d256:	e7f4      	b.n	801d242 <_dtoa_r+0x94a>
 801d258:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d25c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d25e:	2b00      	cmp	r3, #0
 801d260:	f000 8101 	beq.w	801d466 <_dtoa_r+0xb6e>
 801d264:	2e00      	cmp	r6, #0
 801d266:	dd05      	ble.n	801d274 <_dtoa_r+0x97c>
 801d268:	4629      	mov	r1, r5
 801d26a:	4632      	mov	r2, r6
 801d26c:	4648      	mov	r0, r9
 801d26e:	f000 fc19 	bl	801daa4 <__lshift>
 801d272:	4605      	mov	r5, r0
 801d274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d276:	2b00      	cmp	r3, #0
 801d278:	d05c      	beq.n	801d334 <_dtoa_r+0xa3c>
 801d27a:	6869      	ldr	r1, [r5, #4]
 801d27c:	4648      	mov	r0, r9
 801d27e:	f000 fa0b 	bl	801d698 <_Balloc>
 801d282:	4606      	mov	r6, r0
 801d284:	b928      	cbnz	r0, 801d292 <_dtoa_r+0x99a>
 801d286:	4b82      	ldr	r3, [pc, #520]	@ (801d490 <_dtoa_r+0xb98>)
 801d288:	4602      	mov	r2, r0
 801d28a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d28e:	f7ff bb47 	b.w	801c920 <_dtoa_r+0x28>
 801d292:	692a      	ldr	r2, [r5, #16]
 801d294:	3202      	adds	r2, #2
 801d296:	0092      	lsls	r2, r2, #2
 801d298:	f105 010c 	add.w	r1, r5, #12
 801d29c:	300c      	adds	r0, #12
 801d29e:	f000 fe2b 	bl	801def8 <memcpy>
 801d2a2:	2201      	movs	r2, #1
 801d2a4:	4631      	mov	r1, r6
 801d2a6:	4648      	mov	r0, r9
 801d2a8:	f000 fbfc 	bl	801daa4 <__lshift>
 801d2ac:	f10a 0301 	add.w	r3, sl, #1
 801d2b0:	9304      	str	r3, [sp, #16]
 801d2b2:	eb0a 030b 	add.w	r3, sl, fp
 801d2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d2b8:	9b06      	ldr	r3, [sp, #24]
 801d2ba:	f003 0301 	and.w	r3, r3, #1
 801d2be:	462f      	mov	r7, r5
 801d2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2c2:	4605      	mov	r5, r0
 801d2c4:	9b04      	ldr	r3, [sp, #16]
 801d2c6:	9803      	ldr	r0, [sp, #12]
 801d2c8:	4621      	mov	r1, r4
 801d2ca:	f103 3bff 	add.w	fp, r3, #4294967295
 801d2ce:	f7ff fa88 	bl	801c7e2 <quorem>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	3330      	adds	r3, #48	@ 0x30
 801d2d6:	9006      	str	r0, [sp, #24]
 801d2d8:	4639      	mov	r1, r7
 801d2da:	9803      	ldr	r0, [sp, #12]
 801d2dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2de:	f000 fc4d 	bl	801db7c <__mcmp>
 801d2e2:	462a      	mov	r2, r5
 801d2e4:	9008      	str	r0, [sp, #32]
 801d2e6:	4621      	mov	r1, r4
 801d2e8:	4648      	mov	r0, r9
 801d2ea:	f000 fc63 	bl	801dbb4 <__mdiff>
 801d2ee:	68c2      	ldr	r2, [r0, #12]
 801d2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2f2:	4606      	mov	r6, r0
 801d2f4:	bb02      	cbnz	r2, 801d338 <_dtoa_r+0xa40>
 801d2f6:	4601      	mov	r1, r0
 801d2f8:	9803      	ldr	r0, [sp, #12]
 801d2fa:	f000 fc3f 	bl	801db7c <__mcmp>
 801d2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d300:	4602      	mov	r2, r0
 801d302:	4631      	mov	r1, r6
 801d304:	4648      	mov	r0, r9
 801d306:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801d30a:	f000 fa05 	bl	801d718 <_Bfree>
 801d30e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d310:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d312:	9e04      	ldr	r6, [sp, #16]
 801d314:	ea42 0103 	orr.w	r1, r2, r3
 801d318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d31a:	4319      	orrs	r1, r3
 801d31c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d31e:	d10d      	bne.n	801d33c <_dtoa_r+0xa44>
 801d320:	2b39      	cmp	r3, #57	@ 0x39
 801d322:	d027      	beq.n	801d374 <_dtoa_r+0xa7c>
 801d324:	9a08      	ldr	r2, [sp, #32]
 801d326:	2a00      	cmp	r2, #0
 801d328:	dd01      	ble.n	801d32e <_dtoa_r+0xa36>
 801d32a:	9b06      	ldr	r3, [sp, #24]
 801d32c:	3331      	adds	r3, #49	@ 0x31
 801d32e:	f88b 3000 	strb.w	r3, [fp]
 801d332:	e52e      	b.n	801cd92 <_dtoa_r+0x49a>
 801d334:	4628      	mov	r0, r5
 801d336:	e7b9      	b.n	801d2ac <_dtoa_r+0x9b4>
 801d338:	2201      	movs	r2, #1
 801d33a:	e7e2      	b.n	801d302 <_dtoa_r+0xa0a>
 801d33c:	9908      	ldr	r1, [sp, #32]
 801d33e:	2900      	cmp	r1, #0
 801d340:	db04      	blt.n	801d34c <_dtoa_r+0xa54>
 801d342:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d344:	4301      	orrs	r1, r0
 801d346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d348:	4301      	orrs	r1, r0
 801d34a:	d120      	bne.n	801d38e <_dtoa_r+0xa96>
 801d34c:	2a00      	cmp	r2, #0
 801d34e:	ddee      	ble.n	801d32e <_dtoa_r+0xa36>
 801d350:	9903      	ldr	r1, [sp, #12]
 801d352:	9304      	str	r3, [sp, #16]
 801d354:	2201      	movs	r2, #1
 801d356:	4648      	mov	r0, r9
 801d358:	f000 fba4 	bl	801daa4 <__lshift>
 801d35c:	4621      	mov	r1, r4
 801d35e:	9003      	str	r0, [sp, #12]
 801d360:	f000 fc0c 	bl	801db7c <__mcmp>
 801d364:	2800      	cmp	r0, #0
 801d366:	9b04      	ldr	r3, [sp, #16]
 801d368:	dc02      	bgt.n	801d370 <_dtoa_r+0xa78>
 801d36a:	d1e0      	bne.n	801d32e <_dtoa_r+0xa36>
 801d36c:	07da      	lsls	r2, r3, #31
 801d36e:	d5de      	bpl.n	801d32e <_dtoa_r+0xa36>
 801d370:	2b39      	cmp	r3, #57	@ 0x39
 801d372:	d1da      	bne.n	801d32a <_dtoa_r+0xa32>
 801d374:	2339      	movs	r3, #57	@ 0x39
 801d376:	f88b 3000 	strb.w	r3, [fp]
 801d37a:	4633      	mov	r3, r6
 801d37c:	461e      	mov	r6, r3
 801d37e:	3b01      	subs	r3, #1
 801d380:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d384:	2a39      	cmp	r2, #57	@ 0x39
 801d386:	d04e      	beq.n	801d426 <_dtoa_r+0xb2e>
 801d388:	3201      	adds	r2, #1
 801d38a:	701a      	strb	r2, [r3, #0]
 801d38c:	e501      	b.n	801cd92 <_dtoa_r+0x49a>
 801d38e:	2a00      	cmp	r2, #0
 801d390:	dd03      	ble.n	801d39a <_dtoa_r+0xaa2>
 801d392:	2b39      	cmp	r3, #57	@ 0x39
 801d394:	d0ee      	beq.n	801d374 <_dtoa_r+0xa7c>
 801d396:	3301      	adds	r3, #1
 801d398:	e7c9      	b.n	801d32e <_dtoa_r+0xa36>
 801d39a:	9a04      	ldr	r2, [sp, #16]
 801d39c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d39e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d3a2:	428a      	cmp	r2, r1
 801d3a4:	d028      	beq.n	801d3f8 <_dtoa_r+0xb00>
 801d3a6:	9903      	ldr	r1, [sp, #12]
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	220a      	movs	r2, #10
 801d3ac:	4648      	mov	r0, r9
 801d3ae:	f000 f9d5 	bl	801d75c <__multadd>
 801d3b2:	42af      	cmp	r7, r5
 801d3b4:	9003      	str	r0, [sp, #12]
 801d3b6:	f04f 0300 	mov.w	r3, #0
 801d3ba:	f04f 020a 	mov.w	r2, #10
 801d3be:	4639      	mov	r1, r7
 801d3c0:	4648      	mov	r0, r9
 801d3c2:	d107      	bne.n	801d3d4 <_dtoa_r+0xadc>
 801d3c4:	f000 f9ca 	bl	801d75c <__multadd>
 801d3c8:	4607      	mov	r7, r0
 801d3ca:	4605      	mov	r5, r0
 801d3cc:	9b04      	ldr	r3, [sp, #16]
 801d3ce:	3301      	adds	r3, #1
 801d3d0:	9304      	str	r3, [sp, #16]
 801d3d2:	e777      	b.n	801d2c4 <_dtoa_r+0x9cc>
 801d3d4:	f000 f9c2 	bl	801d75c <__multadd>
 801d3d8:	4629      	mov	r1, r5
 801d3da:	4607      	mov	r7, r0
 801d3dc:	2300      	movs	r3, #0
 801d3de:	220a      	movs	r2, #10
 801d3e0:	4648      	mov	r0, r9
 801d3e2:	f000 f9bb 	bl	801d75c <__multadd>
 801d3e6:	4605      	mov	r5, r0
 801d3e8:	e7f0      	b.n	801d3cc <_dtoa_r+0xad4>
 801d3ea:	f1bb 0f00 	cmp.w	fp, #0
 801d3ee:	bfcc      	ite	gt
 801d3f0:	465e      	movgt	r6, fp
 801d3f2:	2601      	movle	r6, #1
 801d3f4:	4456      	add	r6, sl
 801d3f6:	2700      	movs	r7, #0
 801d3f8:	9903      	ldr	r1, [sp, #12]
 801d3fa:	9304      	str	r3, [sp, #16]
 801d3fc:	2201      	movs	r2, #1
 801d3fe:	4648      	mov	r0, r9
 801d400:	f000 fb50 	bl	801daa4 <__lshift>
 801d404:	4621      	mov	r1, r4
 801d406:	9003      	str	r0, [sp, #12]
 801d408:	f000 fbb8 	bl	801db7c <__mcmp>
 801d40c:	2800      	cmp	r0, #0
 801d40e:	dcb4      	bgt.n	801d37a <_dtoa_r+0xa82>
 801d410:	d102      	bne.n	801d418 <_dtoa_r+0xb20>
 801d412:	9b04      	ldr	r3, [sp, #16]
 801d414:	07db      	lsls	r3, r3, #31
 801d416:	d4b0      	bmi.n	801d37a <_dtoa_r+0xa82>
 801d418:	4633      	mov	r3, r6
 801d41a:	461e      	mov	r6, r3
 801d41c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d420:	2a30      	cmp	r2, #48	@ 0x30
 801d422:	d0fa      	beq.n	801d41a <_dtoa_r+0xb22>
 801d424:	e4b5      	b.n	801cd92 <_dtoa_r+0x49a>
 801d426:	459a      	cmp	sl, r3
 801d428:	d1a8      	bne.n	801d37c <_dtoa_r+0xa84>
 801d42a:	2331      	movs	r3, #49	@ 0x31
 801d42c:	f108 0801 	add.w	r8, r8, #1
 801d430:	f88a 3000 	strb.w	r3, [sl]
 801d434:	e4ad      	b.n	801cd92 <_dtoa_r+0x49a>
 801d436:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d438:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d494 <_dtoa_r+0xb9c>
 801d43c:	b11b      	cbz	r3, 801d446 <_dtoa_r+0xb4e>
 801d43e:	f10a 0308 	add.w	r3, sl, #8
 801d442:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d444:	6013      	str	r3, [r2, #0]
 801d446:	4650      	mov	r0, sl
 801d448:	b017      	add	sp, #92	@ 0x5c
 801d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d44e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d450:	2b01      	cmp	r3, #1
 801d452:	f77f ae2e 	ble.w	801d0b2 <_dtoa_r+0x7ba>
 801d456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d458:	930a      	str	r3, [sp, #40]	@ 0x28
 801d45a:	2001      	movs	r0, #1
 801d45c:	e64d      	b.n	801d0fa <_dtoa_r+0x802>
 801d45e:	f1bb 0f00 	cmp.w	fp, #0
 801d462:	f77f aed9 	ble.w	801d218 <_dtoa_r+0x920>
 801d466:	4656      	mov	r6, sl
 801d468:	9803      	ldr	r0, [sp, #12]
 801d46a:	4621      	mov	r1, r4
 801d46c:	f7ff f9b9 	bl	801c7e2 <quorem>
 801d470:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d474:	f806 3b01 	strb.w	r3, [r6], #1
 801d478:	eba6 020a 	sub.w	r2, r6, sl
 801d47c:	4593      	cmp	fp, r2
 801d47e:	ddb4      	ble.n	801d3ea <_dtoa_r+0xaf2>
 801d480:	9903      	ldr	r1, [sp, #12]
 801d482:	2300      	movs	r3, #0
 801d484:	220a      	movs	r2, #10
 801d486:	4648      	mov	r0, r9
 801d488:	f000 f968 	bl	801d75c <__multadd>
 801d48c:	9003      	str	r0, [sp, #12]
 801d48e:	e7eb      	b.n	801d468 <_dtoa_r+0xb70>
 801d490:	0801f76c 	.word	0x0801f76c
 801d494:	0801f6f0 	.word	0x0801f6f0

0801d498 <_free_r>:
 801d498:	b538      	push	{r3, r4, r5, lr}
 801d49a:	4605      	mov	r5, r0
 801d49c:	2900      	cmp	r1, #0
 801d49e:	d041      	beq.n	801d524 <_free_r+0x8c>
 801d4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4a4:	1f0c      	subs	r4, r1, #4
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	bfb8      	it	lt
 801d4aa:	18e4      	addlt	r4, r4, r3
 801d4ac:	f000 f8e8 	bl	801d680 <__malloc_lock>
 801d4b0:	4a1d      	ldr	r2, [pc, #116]	@ (801d528 <_free_r+0x90>)
 801d4b2:	6813      	ldr	r3, [r2, #0]
 801d4b4:	b933      	cbnz	r3, 801d4c4 <_free_r+0x2c>
 801d4b6:	6063      	str	r3, [r4, #4]
 801d4b8:	6014      	str	r4, [r2, #0]
 801d4ba:	4628      	mov	r0, r5
 801d4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d4c0:	f000 b8e4 	b.w	801d68c <__malloc_unlock>
 801d4c4:	42a3      	cmp	r3, r4
 801d4c6:	d908      	bls.n	801d4da <_free_r+0x42>
 801d4c8:	6820      	ldr	r0, [r4, #0]
 801d4ca:	1821      	adds	r1, r4, r0
 801d4cc:	428b      	cmp	r3, r1
 801d4ce:	bf01      	itttt	eq
 801d4d0:	6819      	ldreq	r1, [r3, #0]
 801d4d2:	685b      	ldreq	r3, [r3, #4]
 801d4d4:	1809      	addeq	r1, r1, r0
 801d4d6:	6021      	streq	r1, [r4, #0]
 801d4d8:	e7ed      	b.n	801d4b6 <_free_r+0x1e>
 801d4da:	461a      	mov	r2, r3
 801d4dc:	685b      	ldr	r3, [r3, #4]
 801d4de:	b10b      	cbz	r3, 801d4e4 <_free_r+0x4c>
 801d4e0:	42a3      	cmp	r3, r4
 801d4e2:	d9fa      	bls.n	801d4da <_free_r+0x42>
 801d4e4:	6811      	ldr	r1, [r2, #0]
 801d4e6:	1850      	adds	r0, r2, r1
 801d4e8:	42a0      	cmp	r0, r4
 801d4ea:	d10b      	bne.n	801d504 <_free_r+0x6c>
 801d4ec:	6820      	ldr	r0, [r4, #0]
 801d4ee:	4401      	add	r1, r0
 801d4f0:	1850      	adds	r0, r2, r1
 801d4f2:	4283      	cmp	r3, r0
 801d4f4:	6011      	str	r1, [r2, #0]
 801d4f6:	d1e0      	bne.n	801d4ba <_free_r+0x22>
 801d4f8:	6818      	ldr	r0, [r3, #0]
 801d4fa:	685b      	ldr	r3, [r3, #4]
 801d4fc:	6053      	str	r3, [r2, #4]
 801d4fe:	4408      	add	r0, r1
 801d500:	6010      	str	r0, [r2, #0]
 801d502:	e7da      	b.n	801d4ba <_free_r+0x22>
 801d504:	d902      	bls.n	801d50c <_free_r+0x74>
 801d506:	230c      	movs	r3, #12
 801d508:	602b      	str	r3, [r5, #0]
 801d50a:	e7d6      	b.n	801d4ba <_free_r+0x22>
 801d50c:	6820      	ldr	r0, [r4, #0]
 801d50e:	1821      	adds	r1, r4, r0
 801d510:	428b      	cmp	r3, r1
 801d512:	bf04      	itt	eq
 801d514:	6819      	ldreq	r1, [r3, #0]
 801d516:	685b      	ldreq	r3, [r3, #4]
 801d518:	6063      	str	r3, [r4, #4]
 801d51a:	bf04      	itt	eq
 801d51c:	1809      	addeq	r1, r1, r0
 801d51e:	6021      	streq	r1, [r4, #0]
 801d520:	6054      	str	r4, [r2, #4]
 801d522:	e7ca      	b.n	801d4ba <_free_r+0x22>
 801d524:	bd38      	pop	{r3, r4, r5, pc}
 801d526:	bf00      	nop
 801d528:	20002508 	.word	0x20002508

0801d52c <malloc>:
 801d52c:	4b02      	ldr	r3, [pc, #8]	@ (801d538 <malloc+0xc>)
 801d52e:	4601      	mov	r1, r0
 801d530:	6818      	ldr	r0, [r3, #0]
 801d532:	f000 b825 	b.w	801d580 <_malloc_r>
 801d536:	bf00      	nop
 801d538:	2000014c 	.word	0x2000014c

0801d53c <sbrk_aligned>:
 801d53c:	b570      	push	{r4, r5, r6, lr}
 801d53e:	4e0f      	ldr	r6, [pc, #60]	@ (801d57c <sbrk_aligned+0x40>)
 801d540:	460c      	mov	r4, r1
 801d542:	6831      	ldr	r1, [r6, #0]
 801d544:	4605      	mov	r5, r0
 801d546:	b911      	cbnz	r1, 801d54e <sbrk_aligned+0x12>
 801d548:	f000 fcc6 	bl	801ded8 <_sbrk_r>
 801d54c:	6030      	str	r0, [r6, #0]
 801d54e:	4621      	mov	r1, r4
 801d550:	4628      	mov	r0, r5
 801d552:	f000 fcc1 	bl	801ded8 <_sbrk_r>
 801d556:	1c43      	adds	r3, r0, #1
 801d558:	d103      	bne.n	801d562 <sbrk_aligned+0x26>
 801d55a:	f04f 34ff 	mov.w	r4, #4294967295
 801d55e:	4620      	mov	r0, r4
 801d560:	bd70      	pop	{r4, r5, r6, pc}
 801d562:	1cc4      	adds	r4, r0, #3
 801d564:	f024 0403 	bic.w	r4, r4, #3
 801d568:	42a0      	cmp	r0, r4
 801d56a:	d0f8      	beq.n	801d55e <sbrk_aligned+0x22>
 801d56c:	1a21      	subs	r1, r4, r0
 801d56e:	4628      	mov	r0, r5
 801d570:	f000 fcb2 	bl	801ded8 <_sbrk_r>
 801d574:	3001      	adds	r0, #1
 801d576:	d1f2      	bne.n	801d55e <sbrk_aligned+0x22>
 801d578:	e7ef      	b.n	801d55a <sbrk_aligned+0x1e>
 801d57a:	bf00      	nop
 801d57c:	20002504 	.word	0x20002504

0801d580 <_malloc_r>:
 801d580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d584:	1ccd      	adds	r5, r1, #3
 801d586:	f025 0503 	bic.w	r5, r5, #3
 801d58a:	3508      	adds	r5, #8
 801d58c:	2d0c      	cmp	r5, #12
 801d58e:	bf38      	it	cc
 801d590:	250c      	movcc	r5, #12
 801d592:	2d00      	cmp	r5, #0
 801d594:	4606      	mov	r6, r0
 801d596:	db01      	blt.n	801d59c <_malloc_r+0x1c>
 801d598:	42a9      	cmp	r1, r5
 801d59a:	d904      	bls.n	801d5a6 <_malloc_r+0x26>
 801d59c:	230c      	movs	r3, #12
 801d59e:	6033      	str	r3, [r6, #0]
 801d5a0:	2000      	movs	r0, #0
 801d5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d67c <_malloc_r+0xfc>
 801d5aa:	f000 f869 	bl	801d680 <__malloc_lock>
 801d5ae:	f8d8 3000 	ldr.w	r3, [r8]
 801d5b2:	461c      	mov	r4, r3
 801d5b4:	bb44      	cbnz	r4, 801d608 <_malloc_r+0x88>
 801d5b6:	4629      	mov	r1, r5
 801d5b8:	4630      	mov	r0, r6
 801d5ba:	f7ff ffbf 	bl	801d53c <sbrk_aligned>
 801d5be:	1c43      	adds	r3, r0, #1
 801d5c0:	4604      	mov	r4, r0
 801d5c2:	d158      	bne.n	801d676 <_malloc_r+0xf6>
 801d5c4:	f8d8 4000 	ldr.w	r4, [r8]
 801d5c8:	4627      	mov	r7, r4
 801d5ca:	2f00      	cmp	r7, #0
 801d5cc:	d143      	bne.n	801d656 <_malloc_r+0xd6>
 801d5ce:	2c00      	cmp	r4, #0
 801d5d0:	d04b      	beq.n	801d66a <_malloc_r+0xea>
 801d5d2:	6823      	ldr	r3, [r4, #0]
 801d5d4:	4639      	mov	r1, r7
 801d5d6:	4630      	mov	r0, r6
 801d5d8:	eb04 0903 	add.w	r9, r4, r3
 801d5dc:	f000 fc7c 	bl	801ded8 <_sbrk_r>
 801d5e0:	4581      	cmp	r9, r0
 801d5e2:	d142      	bne.n	801d66a <_malloc_r+0xea>
 801d5e4:	6821      	ldr	r1, [r4, #0]
 801d5e6:	1a6d      	subs	r5, r5, r1
 801d5e8:	4629      	mov	r1, r5
 801d5ea:	4630      	mov	r0, r6
 801d5ec:	f7ff ffa6 	bl	801d53c <sbrk_aligned>
 801d5f0:	3001      	adds	r0, #1
 801d5f2:	d03a      	beq.n	801d66a <_malloc_r+0xea>
 801d5f4:	6823      	ldr	r3, [r4, #0]
 801d5f6:	442b      	add	r3, r5
 801d5f8:	6023      	str	r3, [r4, #0]
 801d5fa:	f8d8 3000 	ldr.w	r3, [r8]
 801d5fe:	685a      	ldr	r2, [r3, #4]
 801d600:	bb62      	cbnz	r2, 801d65c <_malloc_r+0xdc>
 801d602:	f8c8 7000 	str.w	r7, [r8]
 801d606:	e00f      	b.n	801d628 <_malloc_r+0xa8>
 801d608:	6822      	ldr	r2, [r4, #0]
 801d60a:	1b52      	subs	r2, r2, r5
 801d60c:	d420      	bmi.n	801d650 <_malloc_r+0xd0>
 801d60e:	2a0b      	cmp	r2, #11
 801d610:	d917      	bls.n	801d642 <_malloc_r+0xc2>
 801d612:	1961      	adds	r1, r4, r5
 801d614:	42a3      	cmp	r3, r4
 801d616:	6025      	str	r5, [r4, #0]
 801d618:	bf18      	it	ne
 801d61a:	6059      	strne	r1, [r3, #4]
 801d61c:	6863      	ldr	r3, [r4, #4]
 801d61e:	bf08      	it	eq
 801d620:	f8c8 1000 	streq.w	r1, [r8]
 801d624:	5162      	str	r2, [r4, r5]
 801d626:	604b      	str	r3, [r1, #4]
 801d628:	4630      	mov	r0, r6
 801d62a:	f000 f82f 	bl	801d68c <__malloc_unlock>
 801d62e:	f104 000b 	add.w	r0, r4, #11
 801d632:	1d23      	adds	r3, r4, #4
 801d634:	f020 0007 	bic.w	r0, r0, #7
 801d638:	1ac2      	subs	r2, r0, r3
 801d63a:	bf1c      	itt	ne
 801d63c:	1a1b      	subne	r3, r3, r0
 801d63e:	50a3      	strne	r3, [r4, r2]
 801d640:	e7af      	b.n	801d5a2 <_malloc_r+0x22>
 801d642:	6862      	ldr	r2, [r4, #4]
 801d644:	42a3      	cmp	r3, r4
 801d646:	bf0c      	ite	eq
 801d648:	f8c8 2000 	streq.w	r2, [r8]
 801d64c:	605a      	strne	r2, [r3, #4]
 801d64e:	e7eb      	b.n	801d628 <_malloc_r+0xa8>
 801d650:	4623      	mov	r3, r4
 801d652:	6864      	ldr	r4, [r4, #4]
 801d654:	e7ae      	b.n	801d5b4 <_malloc_r+0x34>
 801d656:	463c      	mov	r4, r7
 801d658:	687f      	ldr	r7, [r7, #4]
 801d65a:	e7b6      	b.n	801d5ca <_malloc_r+0x4a>
 801d65c:	461a      	mov	r2, r3
 801d65e:	685b      	ldr	r3, [r3, #4]
 801d660:	42a3      	cmp	r3, r4
 801d662:	d1fb      	bne.n	801d65c <_malloc_r+0xdc>
 801d664:	2300      	movs	r3, #0
 801d666:	6053      	str	r3, [r2, #4]
 801d668:	e7de      	b.n	801d628 <_malloc_r+0xa8>
 801d66a:	230c      	movs	r3, #12
 801d66c:	6033      	str	r3, [r6, #0]
 801d66e:	4630      	mov	r0, r6
 801d670:	f000 f80c 	bl	801d68c <__malloc_unlock>
 801d674:	e794      	b.n	801d5a0 <_malloc_r+0x20>
 801d676:	6005      	str	r5, [r0, #0]
 801d678:	e7d6      	b.n	801d628 <_malloc_r+0xa8>
 801d67a:	bf00      	nop
 801d67c:	20002508 	.word	0x20002508

0801d680 <__malloc_lock>:
 801d680:	4801      	ldr	r0, [pc, #4]	@ (801d688 <__malloc_lock+0x8>)
 801d682:	f7ff b8ac 	b.w	801c7de <__retarget_lock_acquire_recursive>
 801d686:	bf00      	nop
 801d688:	20002500 	.word	0x20002500

0801d68c <__malloc_unlock>:
 801d68c:	4801      	ldr	r0, [pc, #4]	@ (801d694 <__malloc_unlock+0x8>)
 801d68e:	f7ff b8a7 	b.w	801c7e0 <__retarget_lock_release_recursive>
 801d692:	bf00      	nop
 801d694:	20002500 	.word	0x20002500

0801d698 <_Balloc>:
 801d698:	b570      	push	{r4, r5, r6, lr}
 801d69a:	69c6      	ldr	r6, [r0, #28]
 801d69c:	4604      	mov	r4, r0
 801d69e:	460d      	mov	r5, r1
 801d6a0:	b976      	cbnz	r6, 801d6c0 <_Balloc+0x28>
 801d6a2:	2010      	movs	r0, #16
 801d6a4:	f7ff ff42 	bl	801d52c <malloc>
 801d6a8:	4602      	mov	r2, r0
 801d6aa:	61e0      	str	r0, [r4, #28]
 801d6ac:	b920      	cbnz	r0, 801d6b8 <_Balloc+0x20>
 801d6ae:	4b18      	ldr	r3, [pc, #96]	@ (801d710 <_Balloc+0x78>)
 801d6b0:	4818      	ldr	r0, [pc, #96]	@ (801d714 <_Balloc+0x7c>)
 801d6b2:	216b      	movs	r1, #107	@ 0x6b
 801d6b4:	f000 fc2e 	bl	801df14 <__assert_func>
 801d6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d6bc:	6006      	str	r6, [r0, #0]
 801d6be:	60c6      	str	r6, [r0, #12]
 801d6c0:	69e6      	ldr	r6, [r4, #28]
 801d6c2:	68f3      	ldr	r3, [r6, #12]
 801d6c4:	b183      	cbz	r3, 801d6e8 <_Balloc+0x50>
 801d6c6:	69e3      	ldr	r3, [r4, #28]
 801d6c8:	68db      	ldr	r3, [r3, #12]
 801d6ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d6ce:	b9b8      	cbnz	r0, 801d700 <_Balloc+0x68>
 801d6d0:	2101      	movs	r1, #1
 801d6d2:	fa01 f605 	lsl.w	r6, r1, r5
 801d6d6:	1d72      	adds	r2, r6, #5
 801d6d8:	0092      	lsls	r2, r2, #2
 801d6da:	4620      	mov	r0, r4
 801d6dc:	f000 fc38 	bl	801df50 <_calloc_r>
 801d6e0:	b160      	cbz	r0, 801d6fc <_Balloc+0x64>
 801d6e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d6e6:	e00e      	b.n	801d706 <_Balloc+0x6e>
 801d6e8:	2221      	movs	r2, #33	@ 0x21
 801d6ea:	2104      	movs	r1, #4
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f000 fc2f 	bl	801df50 <_calloc_r>
 801d6f2:	69e3      	ldr	r3, [r4, #28]
 801d6f4:	60f0      	str	r0, [r6, #12]
 801d6f6:	68db      	ldr	r3, [r3, #12]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d1e4      	bne.n	801d6c6 <_Balloc+0x2e>
 801d6fc:	2000      	movs	r0, #0
 801d6fe:	bd70      	pop	{r4, r5, r6, pc}
 801d700:	6802      	ldr	r2, [r0, #0]
 801d702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d706:	2300      	movs	r3, #0
 801d708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d70c:	e7f7      	b.n	801d6fe <_Balloc+0x66>
 801d70e:	bf00      	nop
 801d710:	0801f6fd 	.word	0x0801f6fd
 801d714:	0801f77d 	.word	0x0801f77d

0801d718 <_Bfree>:
 801d718:	b570      	push	{r4, r5, r6, lr}
 801d71a:	69c6      	ldr	r6, [r0, #28]
 801d71c:	4605      	mov	r5, r0
 801d71e:	460c      	mov	r4, r1
 801d720:	b976      	cbnz	r6, 801d740 <_Bfree+0x28>
 801d722:	2010      	movs	r0, #16
 801d724:	f7ff ff02 	bl	801d52c <malloc>
 801d728:	4602      	mov	r2, r0
 801d72a:	61e8      	str	r0, [r5, #28]
 801d72c:	b920      	cbnz	r0, 801d738 <_Bfree+0x20>
 801d72e:	4b09      	ldr	r3, [pc, #36]	@ (801d754 <_Bfree+0x3c>)
 801d730:	4809      	ldr	r0, [pc, #36]	@ (801d758 <_Bfree+0x40>)
 801d732:	218f      	movs	r1, #143	@ 0x8f
 801d734:	f000 fbee 	bl	801df14 <__assert_func>
 801d738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d73c:	6006      	str	r6, [r0, #0]
 801d73e:	60c6      	str	r6, [r0, #12]
 801d740:	b13c      	cbz	r4, 801d752 <_Bfree+0x3a>
 801d742:	69eb      	ldr	r3, [r5, #28]
 801d744:	6862      	ldr	r2, [r4, #4]
 801d746:	68db      	ldr	r3, [r3, #12]
 801d748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d74c:	6021      	str	r1, [r4, #0]
 801d74e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d752:	bd70      	pop	{r4, r5, r6, pc}
 801d754:	0801f6fd 	.word	0x0801f6fd
 801d758:	0801f77d 	.word	0x0801f77d

0801d75c <__multadd>:
 801d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d760:	690d      	ldr	r5, [r1, #16]
 801d762:	4607      	mov	r7, r0
 801d764:	460c      	mov	r4, r1
 801d766:	461e      	mov	r6, r3
 801d768:	f101 0c14 	add.w	ip, r1, #20
 801d76c:	2000      	movs	r0, #0
 801d76e:	f8dc 3000 	ldr.w	r3, [ip]
 801d772:	b299      	uxth	r1, r3
 801d774:	fb02 6101 	mla	r1, r2, r1, r6
 801d778:	0c1e      	lsrs	r6, r3, #16
 801d77a:	0c0b      	lsrs	r3, r1, #16
 801d77c:	fb02 3306 	mla	r3, r2, r6, r3
 801d780:	b289      	uxth	r1, r1
 801d782:	3001      	adds	r0, #1
 801d784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d788:	4285      	cmp	r5, r0
 801d78a:	f84c 1b04 	str.w	r1, [ip], #4
 801d78e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d792:	dcec      	bgt.n	801d76e <__multadd+0x12>
 801d794:	b30e      	cbz	r6, 801d7da <__multadd+0x7e>
 801d796:	68a3      	ldr	r3, [r4, #8]
 801d798:	42ab      	cmp	r3, r5
 801d79a:	dc19      	bgt.n	801d7d0 <__multadd+0x74>
 801d79c:	6861      	ldr	r1, [r4, #4]
 801d79e:	4638      	mov	r0, r7
 801d7a0:	3101      	adds	r1, #1
 801d7a2:	f7ff ff79 	bl	801d698 <_Balloc>
 801d7a6:	4680      	mov	r8, r0
 801d7a8:	b928      	cbnz	r0, 801d7b6 <__multadd+0x5a>
 801d7aa:	4602      	mov	r2, r0
 801d7ac:	4b0c      	ldr	r3, [pc, #48]	@ (801d7e0 <__multadd+0x84>)
 801d7ae:	480d      	ldr	r0, [pc, #52]	@ (801d7e4 <__multadd+0x88>)
 801d7b0:	21ba      	movs	r1, #186	@ 0xba
 801d7b2:	f000 fbaf 	bl	801df14 <__assert_func>
 801d7b6:	6922      	ldr	r2, [r4, #16]
 801d7b8:	3202      	adds	r2, #2
 801d7ba:	f104 010c 	add.w	r1, r4, #12
 801d7be:	0092      	lsls	r2, r2, #2
 801d7c0:	300c      	adds	r0, #12
 801d7c2:	f000 fb99 	bl	801def8 <memcpy>
 801d7c6:	4621      	mov	r1, r4
 801d7c8:	4638      	mov	r0, r7
 801d7ca:	f7ff ffa5 	bl	801d718 <_Bfree>
 801d7ce:	4644      	mov	r4, r8
 801d7d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d7d4:	3501      	adds	r5, #1
 801d7d6:	615e      	str	r6, [r3, #20]
 801d7d8:	6125      	str	r5, [r4, #16]
 801d7da:	4620      	mov	r0, r4
 801d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e0:	0801f76c 	.word	0x0801f76c
 801d7e4:	0801f77d 	.word	0x0801f77d

0801d7e8 <__hi0bits>:
 801d7e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	bf36      	itet	cc
 801d7f0:	0403      	lslcc	r3, r0, #16
 801d7f2:	2000      	movcs	r0, #0
 801d7f4:	2010      	movcc	r0, #16
 801d7f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d7fa:	bf3c      	itt	cc
 801d7fc:	021b      	lslcc	r3, r3, #8
 801d7fe:	3008      	addcc	r0, #8
 801d800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d804:	bf3c      	itt	cc
 801d806:	011b      	lslcc	r3, r3, #4
 801d808:	3004      	addcc	r0, #4
 801d80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d80e:	bf3c      	itt	cc
 801d810:	009b      	lslcc	r3, r3, #2
 801d812:	3002      	addcc	r0, #2
 801d814:	2b00      	cmp	r3, #0
 801d816:	db05      	blt.n	801d824 <__hi0bits+0x3c>
 801d818:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d81c:	f100 0001 	add.w	r0, r0, #1
 801d820:	bf08      	it	eq
 801d822:	2020      	moveq	r0, #32
 801d824:	4770      	bx	lr

0801d826 <__lo0bits>:
 801d826:	6803      	ldr	r3, [r0, #0]
 801d828:	4602      	mov	r2, r0
 801d82a:	f013 0007 	ands.w	r0, r3, #7
 801d82e:	d00b      	beq.n	801d848 <__lo0bits+0x22>
 801d830:	07d9      	lsls	r1, r3, #31
 801d832:	d421      	bmi.n	801d878 <__lo0bits+0x52>
 801d834:	0798      	lsls	r0, r3, #30
 801d836:	bf49      	itett	mi
 801d838:	085b      	lsrmi	r3, r3, #1
 801d83a:	089b      	lsrpl	r3, r3, #2
 801d83c:	2001      	movmi	r0, #1
 801d83e:	6013      	strmi	r3, [r2, #0]
 801d840:	bf5c      	itt	pl
 801d842:	6013      	strpl	r3, [r2, #0]
 801d844:	2002      	movpl	r0, #2
 801d846:	4770      	bx	lr
 801d848:	b299      	uxth	r1, r3
 801d84a:	b909      	cbnz	r1, 801d850 <__lo0bits+0x2a>
 801d84c:	0c1b      	lsrs	r3, r3, #16
 801d84e:	2010      	movs	r0, #16
 801d850:	b2d9      	uxtb	r1, r3
 801d852:	b909      	cbnz	r1, 801d858 <__lo0bits+0x32>
 801d854:	3008      	adds	r0, #8
 801d856:	0a1b      	lsrs	r3, r3, #8
 801d858:	0719      	lsls	r1, r3, #28
 801d85a:	bf04      	itt	eq
 801d85c:	091b      	lsreq	r3, r3, #4
 801d85e:	3004      	addeq	r0, #4
 801d860:	0799      	lsls	r1, r3, #30
 801d862:	bf04      	itt	eq
 801d864:	089b      	lsreq	r3, r3, #2
 801d866:	3002      	addeq	r0, #2
 801d868:	07d9      	lsls	r1, r3, #31
 801d86a:	d403      	bmi.n	801d874 <__lo0bits+0x4e>
 801d86c:	085b      	lsrs	r3, r3, #1
 801d86e:	f100 0001 	add.w	r0, r0, #1
 801d872:	d003      	beq.n	801d87c <__lo0bits+0x56>
 801d874:	6013      	str	r3, [r2, #0]
 801d876:	4770      	bx	lr
 801d878:	2000      	movs	r0, #0
 801d87a:	4770      	bx	lr
 801d87c:	2020      	movs	r0, #32
 801d87e:	4770      	bx	lr

0801d880 <__i2b>:
 801d880:	b510      	push	{r4, lr}
 801d882:	460c      	mov	r4, r1
 801d884:	2101      	movs	r1, #1
 801d886:	f7ff ff07 	bl	801d698 <_Balloc>
 801d88a:	4602      	mov	r2, r0
 801d88c:	b928      	cbnz	r0, 801d89a <__i2b+0x1a>
 801d88e:	4b05      	ldr	r3, [pc, #20]	@ (801d8a4 <__i2b+0x24>)
 801d890:	4805      	ldr	r0, [pc, #20]	@ (801d8a8 <__i2b+0x28>)
 801d892:	f240 1145 	movw	r1, #325	@ 0x145
 801d896:	f000 fb3d 	bl	801df14 <__assert_func>
 801d89a:	2301      	movs	r3, #1
 801d89c:	6144      	str	r4, [r0, #20]
 801d89e:	6103      	str	r3, [r0, #16]
 801d8a0:	bd10      	pop	{r4, pc}
 801d8a2:	bf00      	nop
 801d8a4:	0801f76c 	.word	0x0801f76c
 801d8a8:	0801f77d 	.word	0x0801f77d

0801d8ac <__multiply>:
 801d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b0:	4617      	mov	r7, r2
 801d8b2:	690a      	ldr	r2, [r1, #16]
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	429a      	cmp	r2, r3
 801d8b8:	bfa8      	it	ge
 801d8ba:	463b      	movge	r3, r7
 801d8bc:	4689      	mov	r9, r1
 801d8be:	bfa4      	itt	ge
 801d8c0:	460f      	movge	r7, r1
 801d8c2:	4699      	movge	r9, r3
 801d8c4:	693d      	ldr	r5, [r7, #16]
 801d8c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d8ca:	68bb      	ldr	r3, [r7, #8]
 801d8cc:	6879      	ldr	r1, [r7, #4]
 801d8ce:	eb05 060a 	add.w	r6, r5, sl
 801d8d2:	42b3      	cmp	r3, r6
 801d8d4:	b085      	sub	sp, #20
 801d8d6:	bfb8      	it	lt
 801d8d8:	3101      	addlt	r1, #1
 801d8da:	f7ff fedd 	bl	801d698 <_Balloc>
 801d8de:	b930      	cbnz	r0, 801d8ee <__multiply+0x42>
 801d8e0:	4602      	mov	r2, r0
 801d8e2:	4b41      	ldr	r3, [pc, #260]	@ (801d9e8 <__multiply+0x13c>)
 801d8e4:	4841      	ldr	r0, [pc, #260]	@ (801d9ec <__multiply+0x140>)
 801d8e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d8ea:	f000 fb13 	bl	801df14 <__assert_func>
 801d8ee:	f100 0414 	add.w	r4, r0, #20
 801d8f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801d8f6:	4623      	mov	r3, r4
 801d8f8:	2200      	movs	r2, #0
 801d8fa:	4573      	cmp	r3, lr
 801d8fc:	d320      	bcc.n	801d940 <__multiply+0x94>
 801d8fe:	f107 0814 	add.w	r8, r7, #20
 801d902:	f109 0114 	add.w	r1, r9, #20
 801d906:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801d90a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801d90e:	9302      	str	r3, [sp, #8]
 801d910:	1beb      	subs	r3, r5, r7
 801d912:	3b15      	subs	r3, #21
 801d914:	f023 0303 	bic.w	r3, r3, #3
 801d918:	3304      	adds	r3, #4
 801d91a:	3715      	adds	r7, #21
 801d91c:	42bd      	cmp	r5, r7
 801d91e:	bf38      	it	cc
 801d920:	2304      	movcc	r3, #4
 801d922:	9301      	str	r3, [sp, #4]
 801d924:	9b02      	ldr	r3, [sp, #8]
 801d926:	9103      	str	r1, [sp, #12]
 801d928:	428b      	cmp	r3, r1
 801d92a:	d80c      	bhi.n	801d946 <__multiply+0x9a>
 801d92c:	2e00      	cmp	r6, #0
 801d92e:	dd03      	ble.n	801d938 <__multiply+0x8c>
 801d930:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d934:	2b00      	cmp	r3, #0
 801d936:	d055      	beq.n	801d9e4 <__multiply+0x138>
 801d938:	6106      	str	r6, [r0, #16]
 801d93a:	b005      	add	sp, #20
 801d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d940:	f843 2b04 	str.w	r2, [r3], #4
 801d944:	e7d9      	b.n	801d8fa <__multiply+0x4e>
 801d946:	f8b1 a000 	ldrh.w	sl, [r1]
 801d94a:	f1ba 0f00 	cmp.w	sl, #0
 801d94e:	d01f      	beq.n	801d990 <__multiply+0xe4>
 801d950:	46c4      	mov	ip, r8
 801d952:	46a1      	mov	r9, r4
 801d954:	2700      	movs	r7, #0
 801d956:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d95a:	f8d9 3000 	ldr.w	r3, [r9]
 801d95e:	fa1f fb82 	uxth.w	fp, r2
 801d962:	b29b      	uxth	r3, r3
 801d964:	fb0a 330b 	mla	r3, sl, fp, r3
 801d968:	443b      	add	r3, r7
 801d96a:	f8d9 7000 	ldr.w	r7, [r9]
 801d96e:	0c12      	lsrs	r2, r2, #16
 801d970:	0c3f      	lsrs	r7, r7, #16
 801d972:	fb0a 7202 	mla	r2, sl, r2, r7
 801d976:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801d97a:	b29b      	uxth	r3, r3
 801d97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d980:	4565      	cmp	r5, ip
 801d982:	f849 3b04 	str.w	r3, [r9], #4
 801d986:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801d98a:	d8e4      	bhi.n	801d956 <__multiply+0xaa>
 801d98c:	9b01      	ldr	r3, [sp, #4]
 801d98e:	50e7      	str	r7, [r4, r3]
 801d990:	9b03      	ldr	r3, [sp, #12]
 801d992:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d996:	3104      	adds	r1, #4
 801d998:	f1b9 0f00 	cmp.w	r9, #0
 801d99c:	d020      	beq.n	801d9e0 <__multiply+0x134>
 801d99e:	6823      	ldr	r3, [r4, #0]
 801d9a0:	4647      	mov	r7, r8
 801d9a2:	46a4      	mov	ip, r4
 801d9a4:	f04f 0a00 	mov.w	sl, #0
 801d9a8:	f8b7 b000 	ldrh.w	fp, [r7]
 801d9ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801d9b0:	fb09 220b 	mla	r2, r9, fp, r2
 801d9b4:	4452      	add	r2, sl
 801d9b6:	b29b      	uxth	r3, r3
 801d9b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d9bc:	f84c 3b04 	str.w	r3, [ip], #4
 801d9c0:	f857 3b04 	ldr.w	r3, [r7], #4
 801d9c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d9c8:	f8bc 3000 	ldrh.w	r3, [ip]
 801d9cc:	fb09 330a 	mla	r3, r9, sl, r3
 801d9d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801d9d4:	42bd      	cmp	r5, r7
 801d9d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d9da:	d8e5      	bhi.n	801d9a8 <__multiply+0xfc>
 801d9dc:	9a01      	ldr	r2, [sp, #4]
 801d9de:	50a3      	str	r3, [r4, r2]
 801d9e0:	3404      	adds	r4, #4
 801d9e2:	e79f      	b.n	801d924 <__multiply+0x78>
 801d9e4:	3e01      	subs	r6, #1
 801d9e6:	e7a1      	b.n	801d92c <__multiply+0x80>
 801d9e8:	0801f76c 	.word	0x0801f76c
 801d9ec:	0801f77d 	.word	0x0801f77d

0801d9f0 <__pow5mult>:
 801d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9f4:	4615      	mov	r5, r2
 801d9f6:	f012 0203 	ands.w	r2, r2, #3
 801d9fa:	4607      	mov	r7, r0
 801d9fc:	460e      	mov	r6, r1
 801d9fe:	d007      	beq.n	801da10 <__pow5mult+0x20>
 801da00:	4c25      	ldr	r4, [pc, #148]	@ (801da98 <__pow5mult+0xa8>)
 801da02:	3a01      	subs	r2, #1
 801da04:	2300      	movs	r3, #0
 801da06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801da0a:	f7ff fea7 	bl	801d75c <__multadd>
 801da0e:	4606      	mov	r6, r0
 801da10:	10ad      	asrs	r5, r5, #2
 801da12:	d03d      	beq.n	801da90 <__pow5mult+0xa0>
 801da14:	69fc      	ldr	r4, [r7, #28]
 801da16:	b97c      	cbnz	r4, 801da38 <__pow5mult+0x48>
 801da18:	2010      	movs	r0, #16
 801da1a:	f7ff fd87 	bl	801d52c <malloc>
 801da1e:	4602      	mov	r2, r0
 801da20:	61f8      	str	r0, [r7, #28]
 801da22:	b928      	cbnz	r0, 801da30 <__pow5mult+0x40>
 801da24:	4b1d      	ldr	r3, [pc, #116]	@ (801da9c <__pow5mult+0xac>)
 801da26:	481e      	ldr	r0, [pc, #120]	@ (801daa0 <__pow5mult+0xb0>)
 801da28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801da2c:	f000 fa72 	bl	801df14 <__assert_func>
 801da30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801da34:	6004      	str	r4, [r0, #0]
 801da36:	60c4      	str	r4, [r0, #12]
 801da38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801da3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801da40:	b94c      	cbnz	r4, 801da56 <__pow5mult+0x66>
 801da42:	f240 2171 	movw	r1, #625	@ 0x271
 801da46:	4638      	mov	r0, r7
 801da48:	f7ff ff1a 	bl	801d880 <__i2b>
 801da4c:	2300      	movs	r3, #0
 801da4e:	f8c8 0008 	str.w	r0, [r8, #8]
 801da52:	4604      	mov	r4, r0
 801da54:	6003      	str	r3, [r0, #0]
 801da56:	f04f 0900 	mov.w	r9, #0
 801da5a:	07eb      	lsls	r3, r5, #31
 801da5c:	d50a      	bpl.n	801da74 <__pow5mult+0x84>
 801da5e:	4631      	mov	r1, r6
 801da60:	4622      	mov	r2, r4
 801da62:	4638      	mov	r0, r7
 801da64:	f7ff ff22 	bl	801d8ac <__multiply>
 801da68:	4631      	mov	r1, r6
 801da6a:	4680      	mov	r8, r0
 801da6c:	4638      	mov	r0, r7
 801da6e:	f7ff fe53 	bl	801d718 <_Bfree>
 801da72:	4646      	mov	r6, r8
 801da74:	106d      	asrs	r5, r5, #1
 801da76:	d00b      	beq.n	801da90 <__pow5mult+0xa0>
 801da78:	6820      	ldr	r0, [r4, #0]
 801da7a:	b938      	cbnz	r0, 801da8c <__pow5mult+0x9c>
 801da7c:	4622      	mov	r2, r4
 801da7e:	4621      	mov	r1, r4
 801da80:	4638      	mov	r0, r7
 801da82:	f7ff ff13 	bl	801d8ac <__multiply>
 801da86:	6020      	str	r0, [r4, #0]
 801da88:	f8c0 9000 	str.w	r9, [r0]
 801da8c:	4604      	mov	r4, r0
 801da8e:	e7e4      	b.n	801da5a <__pow5mult+0x6a>
 801da90:	4630      	mov	r0, r6
 801da92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da96:	bf00      	nop
 801da98:	0801f830 	.word	0x0801f830
 801da9c:	0801f6fd 	.word	0x0801f6fd
 801daa0:	0801f77d 	.word	0x0801f77d

0801daa4 <__lshift>:
 801daa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daa8:	460c      	mov	r4, r1
 801daaa:	6849      	ldr	r1, [r1, #4]
 801daac:	6923      	ldr	r3, [r4, #16]
 801daae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dab2:	68a3      	ldr	r3, [r4, #8]
 801dab4:	4607      	mov	r7, r0
 801dab6:	4691      	mov	r9, r2
 801dab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dabc:	f108 0601 	add.w	r6, r8, #1
 801dac0:	42b3      	cmp	r3, r6
 801dac2:	db0b      	blt.n	801dadc <__lshift+0x38>
 801dac4:	4638      	mov	r0, r7
 801dac6:	f7ff fde7 	bl	801d698 <_Balloc>
 801daca:	4605      	mov	r5, r0
 801dacc:	b948      	cbnz	r0, 801dae2 <__lshift+0x3e>
 801dace:	4602      	mov	r2, r0
 801dad0:	4b28      	ldr	r3, [pc, #160]	@ (801db74 <__lshift+0xd0>)
 801dad2:	4829      	ldr	r0, [pc, #164]	@ (801db78 <__lshift+0xd4>)
 801dad4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801dad8:	f000 fa1c 	bl	801df14 <__assert_func>
 801dadc:	3101      	adds	r1, #1
 801dade:	005b      	lsls	r3, r3, #1
 801dae0:	e7ee      	b.n	801dac0 <__lshift+0x1c>
 801dae2:	2300      	movs	r3, #0
 801dae4:	f100 0114 	add.w	r1, r0, #20
 801dae8:	f100 0210 	add.w	r2, r0, #16
 801daec:	4618      	mov	r0, r3
 801daee:	4553      	cmp	r3, sl
 801daf0:	db33      	blt.n	801db5a <__lshift+0xb6>
 801daf2:	6920      	ldr	r0, [r4, #16]
 801daf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801daf8:	f104 0314 	add.w	r3, r4, #20
 801dafc:	f019 091f 	ands.w	r9, r9, #31
 801db00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801db04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801db08:	d02b      	beq.n	801db62 <__lshift+0xbe>
 801db0a:	f1c9 0e20 	rsb	lr, r9, #32
 801db0e:	468a      	mov	sl, r1
 801db10:	2200      	movs	r2, #0
 801db12:	6818      	ldr	r0, [r3, #0]
 801db14:	fa00 f009 	lsl.w	r0, r0, r9
 801db18:	4310      	orrs	r0, r2
 801db1a:	f84a 0b04 	str.w	r0, [sl], #4
 801db1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801db22:	459c      	cmp	ip, r3
 801db24:	fa22 f20e 	lsr.w	r2, r2, lr
 801db28:	d8f3      	bhi.n	801db12 <__lshift+0x6e>
 801db2a:	ebac 0304 	sub.w	r3, ip, r4
 801db2e:	3b15      	subs	r3, #21
 801db30:	f023 0303 	bic.w	r3, r3, #3
 801db34:	3304      	adds	r3, #4
 801db36:	f104 0015 	add.w	r0, r4, #21
 801db3a:	4560      	cmp	r0, ip
 801db3c:	bf88      	it	hi
 801db3e:	2304      	movhi	r3, #4
 801db40:	50ca      	str	r2, [r1, r3]
 801db42:	b10a      	cbz	r2, 801db48 <__lshift+0xa4>
 801db44:	f108 0602 	add.w	r6, r8, #2
 801db48:	3e01      	subs	r6, #1
 801db4a:	4638      	mov	r0, r7
 801db4c:	612e      	str	r6, [r5, #16]
 801db4e:	4621      	mov	r1, r4
 801db50:	f7ff fde2 	bl	801d718 <_Bfree>
 801db54:	4628      	mov	r0, r5
 801db56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db5a:	f842 0f04 	str.w	r0, [r2, #4]!
 801db5e:	3301      	adds	r3, #1
 801db60:	e7c5      	b.n	801daee <__lshift+0x4a>
 801db62:	3904      	subs	r1, #4
 801db64:	f853 2b04 	ldr.w	r2, [r3], #4
 801db68:	f841 2f04 	str.w	r2, [r1, #4]!
 801db6c:	459c      	cmp	ip, r3
 801db6e:	d8f9      	bhi.n	801db64 <__lshift+0xc0>
 801db70:	e7ea      	b.n	801db48 <__lshift+0xa4>
 801db72:	bf00      	nop
 801db74:	0801f76c 	.word	0x0801f76c
 801db78:	0801f77d 	.word	0x0801f77d

0801db7c <__mcmp>:
 801db7c:	690a      	ldr	r2, [r1, #16]
 801db7e:	4603      	mov	r3, r0
 801db80:	6900      	ldr	r0, [r0, #16]
 801db82:	1a80      	subs	r0, r0, r2
 801db84:	b530      	push	{r4, r5, lr}
 801db86:	d10e      	bne.n	801dba6 <__mcmp+0x2a>
 801db88:	3314      	adds	r3, #20
 801db8a:	3114      	adds	r1, #20
 801db8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801db90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801db94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801db98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801db9c:	4295      	cmp	r5, r2
 801db9e:	d003      	beq.n	801dba8 <__mcmp+0x2c>
 801dba0:	d205      	bcs.n	801dbae <__mcmp+0x32>
 801dba2:	f04f 30ff 	mov.w	r0, #4294967295
 801dba6:	bd30      	pop	{r4, r5, pc}
 801dba8:	42a3      	cmp	r3, r4
 801dbaa:	d3f3      	bcc.n	801db94 <__mcmp+0x18>
 801dbac:	e7fb      	b.n	801dba6 <__mcmp+0x2a>
 801dbae:	2001      	movs	r0, #1
 801dbb0:	e7f9      	b.n	801dba6 <__mcmp+0x2a>
	...

0801dbb4 <__mdiff>:
 801dbb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb8:	4689      	mov	r9, r1
 801dbba:	4606      	mov	r6, r0
 801dbbc:	4611      	mov	r1, r2
 801dbbe:	4648      	mov	r0, r9
 801dbc0:	4614      	mov	r4, r2
 801dbc2:	f7ff ffdb 	bl	801db7c <__mcmp>
 801dbc6:	1e05      	subs	r5, r0, #0
 801dbc8:	d112      	bne.n	801dbf0 <__mdiff+0x3c>
 801dbca:	4629      	mov	r1, r5
 801dbcc:	4630      	mov	r0, r6
 801dbce:	f7ff fd63 	bl	801d698 <_Balloc>
 801dbd2:	4602      	mov	r2, r0
 801dbd4:	b928      	cbnz	r0, 801dbe2 <__mdiff+0x2e>
 801dbd6:	4b3e      	ldr	r3, [pc, #248]	@ (801dcd0 <__mdiff+0x11c>)
 801dbd8:	f240 2137 	movw	r1, #567	@ 0x237
 801dbdc:	483d      	ldr	r0, [pc, #244]	@ (801dcd4 <__mdiff+0x120>)
 801dbde:	f000 f999 	bl	801df14 <__assert_func>
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dbe8:	4610      	mov	r0, r2
 801dbea:	b003      	add	sp, #12
 801dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbf0:	bfbc      	itt	lt
 801dbf2:	464b      	movlt	r3, r9
 801dbf4:	46a1      	movlt	r9, r4
 801dbf6:	4630      	mov	r0, r6
 801dbf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dbfc:	bfba      	itte	lt
 801dbfe:	461c      	movlt	r4, r3
 801dc00:	2501      	movlt	r5, #1
 801dc02:	2500      	movge	r5, #0
 801dc04:	f7ff fd48 	bl	801d698 <_Balloc>
 801dc08:	4602      	mov	r2, r0
 801dc0a:	b918      	cbnz	r0, 801dc14 <__mdiff+0x60>
 801dc0c:	4b30      	ldr	r3, [pc, #192]	@ (801dcd0 <__mdiff+0x11c>)
 801dc0e:	f240 2145 	movw	r1, #581	@ 0x245
 801dc12:	e7e3      	b.n	801dbdc <__mdiff+0x28>
 801dc14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801dc18:	6926      	ldr	r6, [r4, #16]
 801dc1a:	60c5      	str	r5, [r0, #12]
 801dc1c:	f109 0310 	add.w	r3, r9, #16
 801dc20:	f109 0514 	add.w	r5, r9, #20
 801dc24:	f104 0e14 	add.w	lr, r4, #20
 801dc28:	f100 0b14 	add.w	fp, r0, #20
 801dc2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801dc30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801dc34:	9301      	str	r3, [sp, #4]
 801dc36:	46d9      	mov	r9, fp
 801dc38:	f04f 0c00 	mov.w	ip, #0
 801dc3c:	9b01      	ldr	r3, [sp, #4]
 801dc3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801dc42:	f853 af04 	ldr.w	sl, [r3, #4]!
 801dc46:	9301      	str	r3, [sp, #4]
 801dc48:	b281      	uxth	r1, r0
 801dc4a:	fa1f f38a 	uxth.w	r3, sl
 801dc4e:	1a5b      	subs	r3, r3, r1
 801dc50:	0c00      	lsrs	r0, r0, #16
 801dc52:	4463      	add	r3, ip
 801dc54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801dc58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801dc62:	4576      	cmp	r6, lr
 801dc64:	f849 3b04 	str.w	r3, [r9], #4
 801dc68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dc6c:	d8e6      	bhi.n	801dc3c <__mdiff+0x88>
 801dc6e:	1b33      	subs	r3, r6, r4
 801dc70:	3b15      	subs	r3, #21
 801dc72:	f023 0303 	bic.w	r3, r3, #3
 801dc76:	3415      	adds	r4, #21
 801dc78:	3304      	adds	r3, #4
 801dc7a:	42a6      	cmp	r6, r4
 801dc7c:	bf38      	it	cc
 801dc7e:	2304      	movcc	r3, #4
 801dc80:	441d      	add	r5, r3
 801dc82:	445b      	add	r3, fp
 801dc84:	461e      	mov	r6, r3
 801dc86:	462c      	mov	r4, r5
 801dc88:	4544      	cmp	r4, r8
 801dc8a:	d30e      	bcc.n	801dcaa <__mdiff+0xf6>
 801dc8c:	f108 0103 	add.w	r1, r8, #3
 801dc90:	1b49      	subs	r1, r1, r5
 801dc92:	f021 0103 	bic.w	r1, r1, #3
 801dc96:	3d03      	subs	r5, #3
 801dc98:	45a8      	cmp	r8, r5
 801dc9a:	bf38      	it	cc
 801dc9c:	2100      	movcc	r1, #0
 801dc9e:	440b      	add	r3, r1
 801dca0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dca4:	b191      	cbz	r1, 801dccc <__mdiff+0x118>
 801dca6:	6117      	str	r7, [r2, #16]
 801dca8:	e79e      	b.n	801dbe8 <__mdiff+0x34>
 801dcaa:	f854 1b04 	ldr.w	r1, [r4], #4
 801dcae:	46e6      	mov	lr, ip
 801dcb0:	0c08      	lsrs	r0, r1, #16
 801dcb2:	fa1c fc81 	uxtah	ip, ip, r1
 801dcb6:	4471      	add	r1, lr
 801dcb8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801dcbc:	b289      	uxth	r1, r1
 801dcbe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801dcc2:	f846 1b04 	str.w	r1, [r6], #4
 801dcc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dcca:	e7dd      	b.n	801dc88 <__mdiff+0xd4>
 801dccc:	3f01      	subs	r7, #1
 801dcce:	e7e7      	b.n	801dca0 <__mdiff+0xec>
 801dcd0:	0801f76c 	.word	0x0801f76c
 801dcd4:	0801f77d 	.word	0x0801f77d

0801dcd8 <__d2b>:
 801dcd8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801dcdc:	2101      	movs	r1, #1
 801dcde:	9e08      	ldr	r6, [sp, #32]
 801dce0:	4690      	mov	r8, r2
 801dce2:	4699      	mov	r9, r3
 801dce4:	f7ff fcd8 	bl	801d698 <_Balloc>
 801dce8:	4604      	mov	r4, r0
 801dcea:	b930      	cbnz	r0, 801dcfa <__d2b+0x22>
 801dcec:	4602      	mov	r2, r0
 801dcee:	4b24      	ldr	r3, [pc, #144]	@ (801dd80 <__d2b+0xa8>)
 801dcf0:	4824      	ldr	r0, [pc, #144]	@ (801dd84 <__d2b+0xac>)
 801dcf2:	f240 310f 	movw	r1, #783	@ 0x30f
 801dcf6:	f000 f90d 	bl	801df14 <__assert_func>
 801dcfa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801dcfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd02:	b10d      	cbz	r5, 801dd08 <__d2b+0x30>
 801dd04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dd08:	9301      	str	r3, [sp, #4]
 801dd0a:	f1b8 0300 	subs.w	r3, r8, #0
 801dd0e:	d024      	beq.n	801dd5a <__d2b+0x82>
 801dd10:	4668      	mov	r0, sp
 801dd12:	9300      	str	r3, [sp, #0]
 801dd14:	f7ff fd87 	bl	801d826 <__lo0bits>
 801dd18:	e9dd 1200 	ldrd	r1, r2, [sp]
 801dd1c:	b1d8      	cbz	r0, 801dd56 <__d2b+0x7e>
 801dd1e:	f1c0 0320 	rsb	r3, r0, #32
 801dd22:	fa02 f303 	lsl.w	r3, r2, r3
 801dd26:	430b      	orrs	r3, r1
 801dd28:	40c2      	lsrs	r2, r0
 801dd2a:	6163      	str	r3, [r4, #20]
 801dd2c:	9201      	str	r2, [sp, #4]
 801dd2e:	9b01      	ldr	r3, [sp, #4]
 801dd30:	61a3      	str	r3, [r4, #24]
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	bf0c      	ite	eq
 801dd36:	2201      	moveq	r2, #1
 801dd38:	2202      	movne	r2, #2
 801dd3a:	6122      	str	r2, [r4, #16]
 801dd3c:	b1ad      	cbz	r5, 801dd6a <__d2b+0x92>
 801dd3e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801dd42:	4405      	add	r5, r0
 801dd44:	6035      	str	r5, [r6, #0]
 801dd46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801dd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd4c:	6018      	str	r0, [r3, #0]
 801dd4e:	4620      	mov	r0, r4
 801dd50:	b002      	add	sp, #8
 801dd52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801dd56:	6161      	str	r1, [r4, #20]
 801dd58:	e7e9      	b.n	801dd2e <__d2b+0x56>
 801dd5a:	a801      	add	r0, sp, #4
 801dd5c:	f7ff fd63 	bl	801d826 <__lo0bits>
 801dd60:	9b01      	ldr	r3, [sp, #4]
 801dd62:	6163      	str	r3, [r4, #20]
 801dd64:	3020      	adds	r0, #32
 801dd66:	2201      	movs	r2, #1
 801dd68:	e7e7      	b.n	801dd3a <__d2b+0x62>
 801dd6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dd6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801dd72:	6030      	str	r0, [r6, #0]
 801dd74:	6918      	ldr	r0, [r3, #16]
 801dd76:	f7ff fd37 	bl	801d7e8 <__hi0bits>
 801dd7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dd7e:	e7e4      	b.n	801dd4a <__d2b+0x72>
 801dd80:	0801f76c 	.word	0x0801f76c
 801dd84:	0801f77d 	.word	0x0801f77d

0801dd88 <__sflush_r>:
 801dd88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd8e:	0716      	lsls	r6, r2, #28
 801dd90:	4605      	mov	r5, r0
 801dd92:	460c      	mov	r4, r1
 801dd94:	d454      	bmi.n	801de40 <__sflush_r+0xb8>
 801dd96:	684b      	ldr	r3, [r1, #4]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	dc02      	bgt.n	801dda2 <__sflush_r+0x1a>
 801dd9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	dd48      	ble.n	801de34 <__sflush_r+0xac>
 801dda2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dda4:	2e00      	cmp	r6, #0
 801dda6:	d045      	beq.n	801de34 <__sflush_r+0xac>
 801dda8:	2300      	movs	r3, #0
 801ddaa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ddae:	682f      	ldr	r7, [r5, #0]
 801ddb0:	6a21      	ldr	r1, [r4, #32]
 801ddb2:	602b      	str	r3, [r5, #0]
 801ddb4:	d030      	beq.n	801de18 <__sflush_r+0x90>
 801ddb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ddb8:	89a3      	ldrh	r3, [r4, #12]
 801ddba:	0759      	lsls	r1, r3, #29
 801ddbc:	d505      	bpl.n	801ddca <__sflush_r+0x42>
 801ddbe:	6863      	ldr	r3, [r4, #4]
 801ddc0:	1ad2      	subs	r2, r2, r3
 801ddc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ddc4:	b10b      	cbz	r3, 801ddca <__sflush_r+0x42>
 801ddc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ddc8:	1ad2      	subs	r2, r2, r3
 801ddca:	2300      	movs	r3, #0
 801ddcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ddce:	6a21      	ldr	r1, [r4, #32]
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	47b0      	blx	r6
 801ddd4:	1c43      	adds	r3, r0, #1
 801ddd6:	89a3      	ldrh	r3, [r4, #12]
 801ddd8:	d106      	bne.n	801dde8 <__sflush_r+0x60>
 801ddda:	6829      	ldr	r1, [r5, #0]
 801dddc:	291d      	cmp	r1, #29
 801ddde:	d82b      	bhi.n	801de38 <__sflush_r+0xb0>
 801dde0:	4a28      	ldr	r2, [pc, #160]	@ (801de84 <__sflush_r+0xfc>)
 801dde2:	40ca      	lsrs	r2, r1
 801dde4:	07d6      	lsls	r6, r2, #31
 801dde6:	d527      	bpl.n	801de38 <__sflush_r+0xb0>
 801dde8:	2200      	movs	r2, #0
 801ddea:	6062      	str	r2, [r4, #4]
 801ddec:	04d9      	lsls	r1, r3, #19
 801ddee:	6922      	ldr	r2, [r4, #16]
 801ddf0:	6022      	str	r2, [r4, #0]
 801ddf2:	d504      	bpl.n	801ddfe <__sflush_r+0x76>
 801ddf4:	1c42      	adds	r2, r0, #1
 801ddf6:	d101      	bne.n	801ddfc <__sflush_r+0x74>
 801ddf8:	682b      	ldr	r3, [r5, #0]
 801ddfa:	b903      	cbnz	r3, 801ddfe <__sflush_r+0x76>
 801ddfc:	6560      	str	r0, [r4, #84]	@ 0x54
 801ddfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de00:	602f      	str	r7, [r5, #0]
 801de02:	b1b9      	cbz	r1, 801de34 <__sflush_r+0xac>
 801de04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801de08:	4299      	cmp	r1, r3
 801de0a:	d002      	beq.n	801de12 <__sflush_r+0x8a>
 801de0c:	4628      	mov	r0, r5
 801de0e:	f7ff fb43 	bl	801d498 <_free_r>
 801de12:	2300      	movs	r3, #0
 801de14:	6363      	str	r3, [r4, #52]	@ 0x34
 801de16:	e00d      	b.n	801de34 <__sflush_r+0xac>
 801de18:	2301      	movs	r3, #1
 801de1a:	4628      	mov	r0, r5
 801de1c:	47b0      	blx	r6
 801de1e:	4602      	mov	r2, r0
 801de20:	1c50      	adds	r0, r2, #1
 801de22:	d1c9      	bne.n	801ddb8 <__sflush_r+0x30>
 801de24:	682b      	ldr	r3, [r5, #0]
 801de26:	2b00      	cmp	r3, #0
 801de28:	d0c6      	beq.n	801ddb8 <__sflush_r+0x30>
 801de2a:	2b1d      	cmp	r3, #29
 801de2c:	d001      	beq.n	801de32 <__sflush_r+0xaa>
 801de2e:	2b16      	cmp	r3, #22
 801de30:	d11d      	bne.n	801de6e <__sflush_r+0xe6>
 801de32:	602f      	str	r7, [r5, #0]
 801de34:	2000      	movs	r0, #0
 801de36:	e021      	b.n	801de7c <__sflush_r+0xf4>
 801de38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de3c:	b21b      	sxth	r3, r3
 801de3e:	e01a      	b.n	801de76 <__sflush_r+0xee>
 801de40:	690f      	ldr	r7, [r1, #16]
 801de42:	2f00      	cmp	r7, #0
 801de44:	d0f6      	beq.n	801de34 <__sflush_r+0xac>
 801de46:	0793      	lsls	r3, r2, #30
 801de48:	680e      	ldr	r6, [r1, #0]
 801de4a:	bf08      	it	eq
 801de4c:	694b      	ldreq	r3, [r1, #20]
 801de4e:	600f      	str	r7, [r1, #0]
 801de50:	bf18      	it	ne
 801de52:	2300      	movne	r3, #0
 801de54:	1bf6      	subs	r6, r6, r7
 801de56:	608b      	str	r3, [r1, #8]
 801de58:	2e00      	cmp	r6, #0
 801de5a:	ddeb      	ble.n	801de34 <__sflush_r+0xac>
 801de5c:	6a21      	ldr	r1, [r4, #32]
 801de5e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801de62:	4633      	mov	r3, r6
 801de64:	463a      	mov	r2, r7
 801de66:	4628      	mov	r0, r5
 801de68:	47e0      	blx	ip
 801de6a:	2800      	cmp	r0, #0
 801de6c:	dc07      	bgt.n	801de7e <__sflush_r+0xf6>
 801de6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de76:	81a3      	strh	r3, [r4, #12]
 801de78:	f04f 30ff 	mov.w	r0, #4294967295
 801de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de7e:	4407      	add	r7, r0
 801de80:	1a36      	subs	r6, r6, r0
 801de82:	e7e9      	b.n	801de58 <__sflush_r+0xd0>
 801de84:	20400001 	.word	0x20400001

0801de88 <_fflush_r>:
 801de88:	b538      	push	{r3, r4, r5, lr}
 801de8a:	690b      	ldr	r3, [r1, #16]
 801de8c:	4605      	mov	r5, r0
 801de8e:	460c      	mov	r4, r1
 801de90:	b913      	cbnz	r3, 801de98 <_fflush_r+0x10>
 801de92:	2500      	movs	r5, #0
 801de94:	4628      	mov	r0, r5
 801de96:	bd38      	pop	{r3, r4, r5, pc}
 801de98:	b118      	cbz	r0, 801dea2 <_fflush_r+0x1a>
 801de9a:	6a03      	ldr	r3, [r0, #32]
 801de9c:	b90b      	cbnz	r3, 801dea2 <_fflush_r+0x1a>
 801de9e:	f7fe fba7 	bl	801c5f0 <__sinit>
 801dea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d0f3      	beq.n	801de92 <_fflush_r+0xa>
 801deaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801deac:	07d0      	lsls	r0, r2, #31
 801deae:	d404      	bmi.n	801deba <_fflush_r+0x32>
 801deb0:	0599      	lsls	r1, r3, #22
 801deb2:	d402      	bmi.n	801deba <_fflush_r+0x32>
 801deb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801deb6:	f7fe fc92 	bl	801c7de <__retarget_lock_acquire_recursive>
 801deba:	4628      	mov	r0, r5
 801debc:	4621      	mov	r1, r4
 801debe:	f7ff ff63 	bl	801dd88 <__sflush_r>
 801dec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dec4:	07da      	lsls	r2, r3, #31
 801dec6:	4605      	mov	r5, r0
 801dec8:	d4e4      	bmi.n	801de94 <_fflush_r+0xc>
 801deca:	89a3      	ldrh	r3, [r4, #12]
 801decc:	059b      	lsls	r3, r3, #22
 801dece:	d4e1      	bmi.n	801de94 <_fflush_r+0xc>
 801ded0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ded2:	f7fe fc85 	bl	801c7e0 <__retarget_lock_release_recursive>
 801ded6:	e7dd      	b.n	801de94 <_fflush_r+0xc>

0801ded8 <_sbrk_r>:
 801ded8:	b538      	push	{r3, r4, r5, lr}
 801deda:	4d06      	ldr	r5, [pc, #24]	@ (801def4 <_sbrk_r+0x1c>)
 801dedc:	2300      	movs	r3, #0
 801dede:	4604      	mov	r4, r0
 801dee0:	4608      	mov	r0, r1
 801dee2:	602b      	str	r3, [r5, #0]
 801dee4:	f7e4 fa6c 	bl	80023c0 <_sbrk>
 801dee8:	1c43      	adds	r3, r0, #1
 801deea:	d102      	bne.n	801def2 <_sbrk_r+0x1a>
 801deec:	682b      	ldr	r3, [r5, #0]
 801deee:	b103      	cbz	r3, 801def2 <_sbrk_r+0x1a>
 801def0:	6023      	str	r3, [r4, #0]
 801def2:	bd38      	pop	{r3, r4, r5, pc}
 801def4:	200024fc 	.word	0x200024fc

0801def8 <memcpy>:
 801def8:	440a      	add	r2, r1
 801defa:	4291      	cmp	r1, r2
 801defc:	f100 33ff 	add.w	r3, r0, #4294967295
 801df00:	d100      	bne.n	801df04 <memcpy+0xc>
 801df02:	4770      	bx	lr
 801df04:	b510      	push	{r4, lr}
 801df06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df0e:	4291      	cmp	r1, r2
 801df10:	d1f9      	bne.n	801df06 <memcpy+0xe>
 801df12:	bd10      	pop	{r4, pc}

0801df14 <__assert_func>:
 801df14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df16:	4614      	mov	r4, r2
 801df18:	461a      	mov	r2, r3
 801df1a:	4b09      	ldr	r3, [pc, #36]	@ (801df40 <__assert_func+0x2c>)
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	4605      	mov	r5, r0
 801df20:	68d8      	ldr	r0, [r3, #12]
 801df22:	b14c      	cbz	r4, 801df38 <__assert_func+0x24>
 801df24:	4b07      	ldr	r3, [pc, #28]	@ (801df44 <__assert_func+0x30>)
 801df26:	9100      	str	r1, [sp, #0]
 801df28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801df2c:	4906      	ldr	r1, [pc, #24]	@ (801df48 <__assert_func+0x34>)
 801df2e:	462b      	mov	r3, r5
 801df30:	f000 f842 	bl	801dfb8 <fiprintf>
 801df34:	f000 f852 	bl	801dfdc <abort>
 801df38:	4b04      	ldr	r3, [pc, #16]	@ (801df4c <__assert_func+0x38>)
 801df3a:	461c      	mov	r4, r3
 801df3c:	e7f3      	b.n	801df26 <__assert_func+0x12>
 801df3e:	bf00      	nop
 801df40:	2000014c 	.word	0x2000014c
 801df44:	0801f7e0 	.word	0x0801f7e0
 801df48:	0801f7ed 	.word	0x0801f7ed
 801df4c:	0801f81b 	.word	0x0801f81b

0801df50 <_calloc_r>:
 801df50:	b570      	push	{r4, r5, r6, lr}
 801df52:	fba1 5402 	umull	r5, r4, r1, r2
 801df56:	b934      	cbnz	r4, 801df66 <_calloc_r+0x16>
 801df58:	4629      	mov	r1, r5
 801df5a:	f7ff fb11 	bl	801d580 <_malloc_r>
 801df5e:	4606      	mov	r6, r0
 801df60:	b928      	cbnz	r0, 801df6e <_calloc_r+0x1e>
 801df62:	4630      	mov	r0, r6
 801df64:	bd70      	pop	{r4, r5, r6, pc}
 801df66:	220c      	movs	r2, #12
 801df68:	6002      	str	r2, [r0, #0]
 801df6a:	2600      	movs	r6, #0
 801df6c:	e7f9      	b.n	801df62 <_calloc_r+0x12>
 801df6e:	462a      	mov	r2, r5
 801df70:	4621      	mov	r1, r4
 801df72:	f7fe fbb6 	bl	801c6e2 <memset>
 801df76:	e7f4      	b.n	801df62 <_calloc_r+0x12>

0801df78 <__ascii_mbtowc>:
 801df78:	b082      	sub	sp, #8
 801df7a:	b901      	cbnz	r1, 801df7e <__ascii_mbtowc+0x6>
 801df7c:	a901      	add	r1, sp, #4
 801df7e:	b142      	cbz	r2, 801df92 <__ascii_mbtowc+0x1a>
 801df80:	b14b      	cbz	r3, 801df96 <__ascii_mbtowc+0x1e>
 801df82:	7813      	ldrb	r3, [r2, #0]
 801df84:	600b      	str	r3, [r1, #0]
 801df86:	7812      	ldrb	r2, [r2, #0]
 801df88:	1e10      	subs	r0, r2, #0
 801df8a:	bf18      	it	ne
 801df8c:	2001      	movne	r0, #1
 801df8e:	b002      	add	sp, #8
 801df90:	4770      	bx	lr
 801df92:	4610      	mov	r0, r2
 801df94:	e7fb      	b.n	801df8e <__ascii_mbtowc+0x16>
 801df96:	f06f 0001 	mvn.w	r0, #1
 801df9a:	e7f8      	b.n	801df8e <__ascii_mbtowc+0x16>

0801df9c <__ascii_wctomb>:
 801df9c:	4603      	mov	r3, r0
 801df9e:	4608      	mov	r0, r1
 801dfa0:	b141      	cbz	r1, 801dfb4 <__ascii_wctomb+0x18>
 801dfa2:	2aff      	cmp	r2, #255	@ 0xff
 801dfa4:	d904      	bls.n	801dfb0 <__ascii_wctomb+0x14>
 801dfa6:	228a      	movs	r2, #138	@ 0x8a
 801dfa8:	601a      	str	r2, [r3, #0]
 801dfaa:	f04f 30ff 	mov.w	r0, #4294967295
 801dfae:	4770      	bx	lr
 801dfb0:	700a      	strb	r2, [r1, #0]
 801dfb2:	2001      	movs	r0, #1
 801dfb4:	4770      	bx	lr
	...

0801dfb8 <fiprintf>:
 801dfb8:	b40e      	push	{r1, r2, r3}
 801dfba:	b503      	push	{r0, r1, lr}
 801dfbc:	4601      	mov	r1, r0
 801dfbe:	ab03      	add	r3, sp, #12
 801dfc0:	4805      	ldr	r0, [pc, #20]	@ (801dfd8 <fiprintf+0x20>)
 801dfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfc6:	6800      	ldr	r0, [r0, #0]
 801dfc8:	9301      	str	r3, [sp, #4]
 801dfca:	f000 f835 	bl	801e038 <_vfiprintf_r>
 801dfce:	b002      	add	sp, #8
 801dfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfd4:	b003      	add	sp, #12
 801dfd6:	4770      	bx	lr
 801dfd8:	2000014c 	.word	0x2000014c

0801dfdc <abort>:
 801dfdc:	b508      	push	{r3, lr}
 801dfde:	2006      	movs	r0, #6
 801dfe0:	f000 f9fe 	bl	801e3e0 <raise>
 801dfe4:	2001      	movs	r0, #1
 801dfe6:	f7e4 f977 	bl	80022d8 <_exit>

0801dfea <__sfputc_r>:
 801dfea:	6893      	ldr	r3, [r2, #8]
 801dfec:	3b01      	subs	r3, #1
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	b410      	push	{r4}
 801dff2:	6093      	str	r3, [r2, #8]
 801dff4:	da07      	bge.n	801e006 <__sfputc_r+0x1c>
 801dff6:	6994      	ldr	r4, [r2, #24]
 801dff8:	42a3      	cmp	r3, r4
 801dffa:	db01      	blt.n	801e000 <__sfputc_r+0x16>
 801dffc:	290a      	cmp	r1, #10
 801dffe:	d102      	bne.n	801e006 <__sfputc_r+0x1c>
 801e000:	bc10      	pop	{r4}
 801e002:	f000 b931 	b.w	801e268 <__swbuf_r>
 801e006:	6813      	ldr	r3, [r2, #0]
 801e008:	1c58      	adds	r0, r3, #1
 801e00a:	6010      	str	r0, [r2, #0]
 801e00c:	7019      	strb	r1, [r3, #0]
 801e00e:	4608      	mov	r0, r1
 801e010:	bc10      	pop	{r4}
 801e012:	4770      	bx	lr

0801e014 <__sfputs_r>:
 801e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e016:	4606      	mov	r6, r0
 801e018:	460f      	mov	r7, r1
 801e01a:	4614      	mov	r4, r2
 801e01c:	18d5      	adds	r5, r2, r3
 801e01e:	42ac      	cmp	r4, r5
 801e020:	d101      	bne.n	801e026 <__sfputs_r+0x12>
 801e022:	2000      	movs	r0, #0
 801e024:	e007      	b.n	801e036 <__sfputs_r+0x22>
 801e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e02a:	463a      	mov	r2, r7
 801e02c:	4630      	mov	r0, r6
 801e02e:	f7ff ffdc 	bl	801dfea <__sfputc_r>
 801e032:	1c43      	adds	r3, r0, #1
 801e034:	d1f3      	bne.n	801e01e <__sfputs_r+0xa>
 801e036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e038 <_vfiprintf_r>:
 801e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e03c:	460d      	mov	r5, r1
 801e03e:	b09d      	sub	sp, #116	@ 0x74
 801e040:	4614      	mov	r4, r2
 801e042:	4698      	mov	r8, r3
 801e044:	4606      	mov	r6, r0
 801e046:	b118      	cbz	r0, 801e050 <_vfiprintf_r+0x18>
 801e048:	6a03      	ldr	r3, [r0, #32]
 801e04a:	b90b      	cbnz	r3, 801e050 <_vfiprintf_r+0x18>
 801e04c:	f7fe fad0 	bl	801c5f0 <__sinit>
 801e050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e052:	07d9      	lsls	r1, r3, #31
 801e054:	d405      	bmi.n	801e062 <_vfiprintf_r+0x2a>
 801e056:	89ab      	ldrh	r3, [r5, #12]
 801e058:	059a      	lsls	r2, r3, #22
 801e05a:	d402      	bmi.n	801e062 <_vfiprintf_r+0x2a>
 801e05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e05e:	f7fe fbbe 	bl	801c7de <__retarget_lock_acquire_recursive>
 801e062:	89ab      	ldrh	r3, [r5, #12]
 801e064:	071b      	lsls	r3, r3, #28
 801e066:	d501      	bpl.n	801e06c <_vfiprintf_r+0x34>
 801e068:	692b      	ldr	r3, [r5, #16]
 801e06a:	b99b      	cbnz	r3, 801e094 <_vfiprintf_r+0x5c>
 801e06c:	4629      	mov	r1, r5
 801e06e:	4630      	mov	r0, r6
 801e070:	f000 f938 	bl	801e2e4 <__swsetup_r>
 801e074:	b170      	cbz	r0, 801e094 <_vfiprintf_r+0x5c>
 801e076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e078:	07dc      	lsls	r4, r3, #31
 801e07a:	d504      	bpl.n	801e086 <_vfiprintf_r+0x4e>
 801e07c:	f04f 30ff 	mov.w	r0, #4294967295
 801e080:	b01d      	add	sp, #116	@ 0x74
 801e082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e086:	89ab      	ldrh	r3, [r5, #12]
 801e088:	0598      	lsls	r0, r3, #22
 801e08a:	d4f7      	bmi.n	801e07c <_vfiprintf_r+0x44>
 801e08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e08e:	f7fe fba7 	bl	801c7e0 <__retarget_lock_release_recursive>
 801e092:	e7f3      	b.n	801e07c <_vfiprintf_r+0x44>
 801e094:	2300      	movs	r3, #0
 801e096:	9309      	str	r3, [sp, #36]	@ 0x24
 801e098:	2320      	movs	r3, #32
 801e09a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e09e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0a2:	2330      	movs	r3, #48	@ 0x30
 801e0a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e254 <_vfiprintf_r+0x21c>
 801e0a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e0ac:	f04f 0901 	mov.w	r9, #1
 801e0b0:	4623      	mov	r3, r4
 801e0b2:	469a      	mov	sl, r3
 801e0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0b8:	b10a      	cbz	r2, 801e0be <_vfiprintf_r+0x86>
 801e0ba:	2a25      	cmp	r2, #37	@ 0x25
 801e0bc:	d1f9      	bne.n	801e0b2 <_vfiprintf_r+0x7a>
 801e0be:	ebba 0b04 	subs.w	fp, sl, r4
 801e0c2:	d00b      	beq.n	801e0dc <_vfiprintf_r+0xa4>
 801e0c4:	465b      	mov	r3, fp
 801e0c6:	4622      	mov	r2, r4
 801e0c8:	4629      	mov	r1, r5
 801e0ca:	4630      	mov	r0, r6
 801e0cc:	f7ff ffa2 	bl	801e014 <__sfputs_r>
 801e0d0:	3001      	adds	r0, #1
 801e0d2:	f000 80a7 	beq.w	801e224 <_vfiprintf_r+0x1ec>
 801e0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0d8:	445a      	add	r2, fp
 801e0da:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	f000 809f 	beq.w	801e224 <_vfiprintf_r+0x1ec>
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801e0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0f0:	f10a 0a01 	add.w	sl, sl, #1
 801e0f4:	9304      	str	r3, [sp, #16]
 801e0f6:	9307      	str	r3, [sp, #28]
 801e0f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e0fc:	931a      	str	r3, [sp, #104]	@ 0x68
 801e0fe:	4654      	mov	r4, sl
 801e100:	2205      	movs	r2, #5
 801e102:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e106:	4853      	ldr	r0, [pc, #332]	@ (801e254 <_vfiprintf_r+0x21c>)
 801e108:	f7e2 f83a 	bl	8000180 <memchr>
 801e10c:	9a04      	ldr	r2, [sp, #16]
 801e10e:	b9d8      	cbnz	r0, 801e148 <_vfiprintf_r+0x110>
 801e110:	06d1      	lsls	r1, r2, #27
 801e112:	bf44      	itt	mi
 801e114:	2320      	movmi	r3, #32
 801e116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e11a:	0713      	lsls	r3, r2, #28
 801e11c:	bf44      	itt	mi
 801e11e:	232b      	movmi	r3, #43	@ 0x2b
 801e120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e124:	f89a 3000 	ldrb.w	r3, [sl]
 801e128:	2b2a      	cmp	r3, #42	@ 0x2a
 801e12a:	d015      	beq.n	801e158 <_vfiprintf_r+0x120>
 801e12c:	9a07      	ldr	r2, [sp, #28]
 801e12e:	4654      	mov	r4, sl
 801e130:	2000      	movs	r0, #0
 801e132:	f04f 0c0a 	mov.w	ip, #10
 801e136:	4621      	mov	r1, r4
 801e138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e13c:	3b30      	subs	r3, #48	@ 0x30
 801e13e:	2b09      	cmp	r3, #9
 801e140:	d94b      	bls.n	801e1da <_vfiprintf_r+0x1a2>
 801e142:	b1b0      	cbz	r0, 801e172 <_vfiprintf_r+0x13a>
 801e144:	9207      	str	r2, [sp, #28]
 801e146:	e014      	b.n	801e172 <_vfiprintf_r+0x13a>
 801e148:	eba0 0308 	sub.w	r3, r0, r8
 801e14c:	fa09 f303 	lsl.w	r3, r9, r3
 801e150:	4313      	orrs	r3, r2
 801e152:	9304      	str	r3, [sp, #16]
 801e154:	46a2      	mov	sl, r4
 801e156:	e7d2      	b.n	801e0fe <_vfiprintf_r+0xc6>
 801e158:	9b03      	ldr	r3, [sp, #12]
 801e15a:	1d19      	adds	r1, r3, #4
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	9103      	str	r1, [sp, #12]
 801e160:	2b00      	cmp	r3, #0
 801e162:	bfbb      	ittet	lt
 801e164:	425b      	neglt	r3, r3
 801e166:	f042 0202 	orrlt.w	r2, r2, #2
 801e16a:	9307      	strge	r3, [sp, #28]
 801e16c:	9307      	strlt	r3, [sp, #28]
 801e16e:	bfb8      	it	lt
 801e170:	9204      	strlt	r2, [sp, #16]
 801e172:	7823      	ldrb	r3, [r4, #0]
 801e174:	2b2e      	cmp	r3, #46	@ 0x2e
 801e176:	d10a      	bne.n	801e18e <_vfiprintf_r+0x156>
 801e178:	7863      	ldrb	r3, [r4, #1]
 801e17a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e17c:	d132      	bne.n	801e1e4 <_vfiprintf_r+0x1ac>
 801e17e:	9b03      	ldr	r3, [sp, #12]
 801e180:	1d1a      	adds	r2, r3, #4
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	9203      	str	r2, [sp, #12]
 801e186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e18a:	3402      	adds	r4, #2
 801e18c:	9305      	str	r3, [sp, #20]
 801e18e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801e258 <_vfiprintf_r+0x220>
 801e192:	7821      	ldrb	r1, [r4, #0]
 801e194:	2203      	movs	r2, #3
 801e196:	4650      	mov	r0, sl
 801e198:	f7e1 fff2 	bl	8000180 <memchr>
 801e19c:	b138      	cbz	r0, 801e1ae <_vfiprintf_r+0x176>
 801e19e:	9b04      	ldr	r3, [sp, #16]
 801e1a0:	eba0 000a 	sub.w	r0, r0, sl
 801e1a4:	2240      	movs	r2, #64	@ 0x40
 801e1a6:	4082      	lsls	r2, r0
 801e1a8:	4313      	orrs	r3, r2
 801e1aa:	3401      	adds	r4, #1
 801e1ac:	9304      	str	r3, [sp, #16]
 801e1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1b2:	482a      	ldr	r0, [pc, #168]	@ (801e25c <_vfiprintf_r+0x224>)
 801e1b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e1b8:	2206      	movs	r2, #6
 801e1ba:	f7e1 ffe1 	bl	8000180 <memchr>
 801e1be:	2800      	cmp	r0, #0
 801e1c0:	d03f      	beq.n	801e242 <_vfiprintf_r+0x20a>
 801e1c2:	4b27      	ldr	r3, [pc, #156]	@ (801e260 <_vfiprintf_r+0x228>)
 801e1c4:	bb1b      	cbnz	r3, 801e20e <_vfiprintf_r+0x1d6>
 801e1c6:	9b03      	ldr	r3, [sp, #12]
 801e1c8:	3307      	adds	r3, #7
 801e1ca:	f023 0307 	bic.w	r3, r3, #7
 801e1ce:	3308      	adds	r3, #8
 801e1d0:	9303      	str	r3, [sp, #12]
 801e1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1d4:	443b      	add	r3, r7
 801e1d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1d8:	e76a      	b.n	801e0b0 <_vfiprintf_r+0x78>
 801e1da:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1de:	460c      	mov	r4, r1
 801e1e0:	2001      	movs	r0, #1
 801e1e2:	e7a8      	b.n	801e136 <_vfiprintf_r+0xfe>
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	3401      	adds	r4, #1
 801e1e8:	9305      	str	r3, [sp, #20]
 801e1ea:	4619      	mov	r1, r3
 801e1ec:	f04f 0c0a 	mov.w	ip, #10
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1f6:	3a30      	subs	r2, #48	@ 0x30
 801e1f8:	2a09      	cmp	r2, #9
 801e1fa:	d903      	bls.n	801e204 <_vfiprintf_r+0x1cc>
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d0c6      	beq.n	801e18e <_vfiprintf_r+0x156>
 801e200:	9105      	str	r1, [sp, #20]
 801e202:	e7c4      	b.n	801e18e <_vfiprintf_r+0x156>
 801e204:	fb0c 2101 	mla	r1, ip, r1, r2
 801e208:	4604      	mov	r4, r0
 801e20a:	2301      	movs	r3, #1
 801e20c:	e7f0      	b.n	801e1f0 <_vfiprintf_r+0x1b8>
 801e20e:	ab03      	add	r3, sp, #12
 801e210:	9300      	str	r3, [sp, #0]
 801e212:	462a      	mov	r2, r5
 801e214:	4b13      	ldr	r3, [pc, #76]	@ (801e264 <_vfiprintf_r+0x22c>)
 801e216:	a904      	add	r1, sp, #16
 801e218:	4630      	mov	r0, r6
 801e21a:	f7fd fda5 	bl	801bd68 <_printf_float>
 801e21e:	4607      	mov	r7, r0
 801e220:	1c78      	adds	r0, r7, #1
 801e222:	d1d6      	bne.n	801e1d2 <_vfiprintf_r+0x19a>
 801e224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e226:	07d9      	lsls	r1, r3, #31
 801e228:	d405      	bmi.n	801e236 <_vfiprintf_r+0x1fe>
 801e22a:	89ab      	ldrh	r3, [r5, #12]
 801e22c:	059a      	lsls	r2, r3, #22
 801e22e:	d402      	bmi.n	801e236 <_vfiprintf_r+0x1fe>
 801e230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e232:	f7fe fad5 	bl	801c7e0 <__retarget_lock_release_recursive>
 801e236:	89ab      	ldrh	r3, [r5, #12]
 801e238:	065b      	lsls	r3, r3, #25
 801e23a:	f53f af1f 	bmi.w	801e07c <_vfiprintf_r+0x44>
 801e23e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e240:	e71e      	b.n	801e080 <_vfiprintf_r+0x48>
 801e242:	ab03      	add	r3, sp, #12
 801e244:	9300      	str	r3, [sp, #0]
 801e246:	462a      	mov	r2, r5
 801e248:	4b06      	ldr	r3, [pc, #24]	@ (801e264 <_vfiprintf_r+0x22c>)
 801e24a:	a904      	add	r1, sp, #16
 801e24c:	4630      	mov	r0, r6
 801e24e:	f7fe f825 	bl	801c29c <_printf_i>
 801e252:	e7e4      	b.n	801e21e <_vfiprintf_r+0x1e6>
 801e254:	0801f81c 	.word	0x0801f81c
 801e258:	0801f822 	.word	0x0801f822
 801e25c:	0801f826 	.word	0x0801f826
 801e260:	0801bd69 	.word	0x0801bd69
 801e264:	0801e015 	.word	0x0801e015

0801e268 <__swbuf_r>:
 801e268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e26a:	460e      	mov	r6, r1
 801e26c:	4614      	mov	r4, r2
 801e26e:	4605      	mov	r5, r0
 801e270:	b118      	cbz	r0, 801e27a <__swbuf_r+0x12>
 801e272:	6a03      	ldr	r3, [r0, #32]
 801e274:	b90b      	cbnz	r3, 801e27a <__swbuf_r+0x12>
 801e276:	f7fe f9bb 	bl	801c5f0 <__sinit>
 801e27a:	69a3      	ldr	r3, [r4, #24]
 801e27c:	60a3      	str	r3, [r4, #8]
 801e27e:	89a3      	ldrh	r3, [r4, #12]
 801e280:	071a      	lsls	r2, r3, #28
 801e282:	d501      	bpl.n	801e288 <__swbuf_r+0x20>
 801e284:	6923      	ldr	r3, [r4, #16]
 801e286:	b943      	cbnz	r3, 801e29a <__swbuf_r+0x32>
 801e288:	4621      	mov	r1, r4
 801e28a:	4628      	mov	r0, r5
 801e28c:	f000 f82a 	bl	801e2e4 <__swsetup_r>
 801e290:	b118      	cbz	r0, 801e29a <__swbuf_r+0x32>
 801e292:	f04f 37ff 	mov.w	r7, #4294967295
 801e296:	4638      	mov	r0, r7
 801e298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e29a:	6823      	ldr	r3, [r4, #0]
 801e29c:	6922      	ldr	r2, [r4, #16]
 801e29e:	1a98      	subs	r0, r3, r2
 801e2a0:	6963      	ldr	r3, [r4, #20]
 801e2a2:	b2f6      	uxtb	r6, r6
 801e2a4:	4283      	cmp	r3, r0
 801e2a6:	4637      	mov	r7, r6
 801e2a8:	dc05      	bgt.n	801e2b6 <__swbuf_r+0x4e>
 801e2aa:	4621      	mov	r1, r4
 801e2ac:	4628      	mov	r0, r5
 801e2ae:	f7ff fdeb 	bl	801de88 <_fflush_r>
 801e2b2:	2800      	cmp	r0, #0
 801e2b4:	d1ed      	bne.n	801e292 <__swbuf_r+0x2a>
 801e2b6:	68a3      	ldr	r3, [r4, #8]
 801e2b8:	3b01      	subs	r3, #1
 801e2ba:	60a3      	str	r3, [r4, #8]
 801e2bc:	6823      	ldr	r3, [r4, #0]
 801e2be:	1c5a      	adds	r2, r3, #1
 801e2c0:	6022      	str	r2, [r4, #0]
 801e2c2:	701e      	strb	r6, [r3, #0]
 801e2c4:	6962      	ldr	r2, [r4, #20]
 801e2c6:	1c43      	adds	r3, r0, #1
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	d004      	beq.n	801e2d6 <__swbuf_r+0x6e>
 801e2cc:	89a3      	ldrh	r3, [r4, #12]
 801e2ce:	07db      	lsls	r3, r3, #31
 801e2d0:	d5e1      	bpl.n	801e296 <__swbuf_r+0x2e>
 801e2d2:	2e0a      	cmp	r6, #10
 801e2d4:	d1df      	bne.n	801e296 <__swbuf_r+0x2e>
 801e2d6:	4621      	mov	r1, r4
 801e2d8:	4628      	mov	r0, r5
 801e2da:	f7ff fdd5 	bl	801de88 <_fflush_r>
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	d0d9      	beq.n	801e296 <__swbuf_r+0x2e>
 801e2e2:	e7d6      	b.n	801e292 <__swbuf_r+0x2a>

0801e2e4 <__swsetup_r>:
 801e2e4:	b538      	push	{r3, r4, r5, lr}
 801e2e6:	4b29      	ldr	r3, [pc, #164]	@ (801e38c <__swsetup_r+0xa8>)
 801e2e8:	4605      	mov	r5, r0
 801e2ea:	6818      	ldr	r0, [r3, #0]
 801e2ec:	460c      	mov	r4, r1
 801e2ee:	b118      	cbz	r0, 801e2f8 <__swsetup_r+0x14>
 801e2f0:	6a03      	ldr	r3, [r0, #32]
 801e2f2:	b90b      	cbnz	r3, 801e2f8 <__swsetup_r+0x14>
 801e2f4:	f7fe f97c 	bl	801c5f0 <__sinit>
 801e2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2fc:	0719      	lsls	r1, r3, #28
 801e2fe:	d422      	bmi.n	801e346 <__swsetup_r+0x62>
 801e300:	06da      	lsls	r2, r3, #27
 801e302:	d407      	bmi.n	801e314 <__swsetup_r+0x30>
 801e304:	2209      	movs	r2, #9
 801e306:	602a      	str	r2, [r5, #0]
 801e308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e30c:	81a3      	strh	r3, [r4, #12]
 801e30e:	f04f 30ff 	mov.w	r0, #4294967295
 801e312:	e033      	b.n	801e37c <__swsetup_r+0x98>
 801e314:	0758      	lsls	r0, r3, #29
 801e316:	d512      	bpl.n	801e33e <__swsetup_r+0x5a>
 801e318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e31a:	b141      	cbz	r1, 801e32e <__swsetup_r+0x4a>
 801e31c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e320:	4299      	cmp	r1, r3
 801e322:	d002      	beq.n	801e32a <__swsetup_r+0x46>
 801e324:	4628      	mov	r0, r5
 801e326:	f7ff f8b7 	bl	801d498 <_free_r>
 801e32a:	2300      	movs	r3, #0
 801e32c:	6363      	str	r3, [r4, #52]	@ 0x34
 801e32e:	89a3      	ldrh	r3, [r4, #12]
 801e330:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e334:	81a3      	strh	r3, [r4, #12]
 801e336:	2300      	movs	r3, #0
 801e338:	6063      	str	r3, [r4, #4]
 801e33a:	6923      	ldr	r3, [r4, #16]
 801e33c:	6023      	str	r3, [r4, #0]
 801e33e:	89a3      	ldrh	r3, [r4, #12]
 801e340:	f043 0308 	orr.w	r3, r3, #8
 801e344:	81a3      	strh	r3, [r4, #12]
 801e346:	6923      	ldr	r3, [r4, #16]
 801e348:	b94b      	cbnz	r3, 801e35e <__swsetup_r+0x7a>
 801e34a:	89a3      	ldrh	r3, [r4, #12]
 801e34c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e354:	d003      	beq.n	801e35e <__swsetup_r+0x7a>
 801e356:	4621      	mov	r1, r4
 801e358:	4628      	mov	r0, r5
 801e35a:	f000 f883 	bl	801e464 <__smakebuf_r>
 801e35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e362:	f013 0201 	ands.w	r2, r3, #1
 801e366:	d00a      	beq.n	801e37e <__swsetup_r+0x9a>
 801e368:	2200      	movs	r2, #0
 801e36a:	60a2      	str	r2, [r4, #8]
 801e36c:	6962      	ldr	r2, [r4, #20]
 801e36e:	4252      	negs	r2, r2
 801e370:	61a2      	str	r2, [r4, #24]
 801e372:	6922      	ldr	r2, [r4, #16]
 801e374:	b942      	cbnz	r2, 801e388 <__swsetup_r+0xa4>
 801e376:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e37a:	d1c5      	bne.n	801e308 <__swsetup_r+0x24>
 801e37c:	bd38      	pop	{r3, r4, r5, pc}
 801e37e:	0799      	lsls	r1, r3, #30
 801e380:	bf58      	it	pl
 801e382:	6962      	ldrpl	r2, [r4, #20]
 801e384:	60a2      	str	r2, [r4, #8]
 801e386:	e7f4      	b.n	801e372 <__swsetup_r+0x8e>
 801e388:	2000      	movs	r0, #0
 801e38a:	e7f7      	b.n	801e37c <__swsetup_r+0x98>
 801e38c:	2000014c 	.word	0x2000014c

0801e390 <_raise_r>:
 801e390:	291f      	cmp	r1, #31
 801e392:	b538      	push	{r3, r4, r5, lr}
 801e394:	4605      	mov	r5, r0
 801e396:	460c      	mov	r4, r1
 801e398:	d904      	bls.n	801e3a4 <_raise_r+0x14>
 801e39a:	2316      	movs	r3, #22
 801e39c:	6003      	str	r3, [r0, #0]
 801e39e:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a2:	bd38      	pop	{r3, r4, r5, pc}
 801e3a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e3a6:	b112      	cbz	r2, 801e3ae <_raise_r+0x1e>
 801e3a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e3ac:	b94b      	cbnz	r3, 801e3c2 <_raise_r+0x32>
 801e3ae:	4628      	mov	r0, r5
 801e3b0:	f000 f830 	bl	801e414 <_getpid_r>
 801e3b4:	4622      	mov	r2, r4
 801e3b6:	4601      	mov	r1, r0
 801e3b8:	4628      	mov	r0, r5
 801e3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3be:	f000 b817 	b.w	801e3f0 <_kill_r>
 801e3c2:	2b01      	cmp	r3, #1
 801e3c4:	d00a      	beq.n	801e3dc <_raise_r+0x4c>
 801e3c6:	1c59      	adds	r1, r3, #1
 801e3c8:	d103      	bne.n	801e3d2 <_raise_r+0x42>
 801e3ca:	2316      	movs	r3, #22
 801e3cc:	6003      	str	r3, [r0, #0]
 801e3ce:	2001      	movs	r0, #1
 801e3d0:	e7e7      	b.n	801e3a2 <_raise_r+0x12>
 801e3d2:	2100      	movs	r1, #0
 801e3d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e3d8:	4620      	mov	r0, r4
 801e3da:	4798      	blx	r3
 801e3dc:	2000      	movs	r0, #0
 801e3de:	e7e0      	b.n	801e3a2 <_raise_r+0x12>

0801e3e0 <raise>:
 801e3e0:	4b02      	ldr	r3, [pc, #8]	@ (801e3ec <raise+0xc>)
 801e3e2:	4601      	mov	r1, r0
 801e3e4:	6818      	ldr	r0, [r3, #0]
 801e3e6:	f7ff bfd3 	b.w	801e390 <_raise_r>
 801e3ea:	bf00      	nop
 801e3ec:	2000014c 	.word	0x2000014c

0801e3f0 <_kill_r>:
 801e3f0:	b538      	push	{r3, r4, r5, lr}
 801e3f2:	4d07      	ldr	r5, [pc, #28]	@ (801e410 <_kill_r+0x20>)
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	4604      	mov	r4, r0
 801e3f8:	4608      	mov	r0, r1
 801e3fa:	4611      	mov	r1, r2
 801e3fc:	602b      	str	r3, [r5, #0]
 801e3fe:	f7e3 ff5b 	bl	80022b8 <_kill>
 801e402:	1c43      	adds	r3, r0, #1
 801e404:	d102      	bne.n	801e40c <_kill_r+0x1c>
 801e406:	682b      	ldr	r3, [r5, #0]
 801e408:	b103      	cbz	r3, 801e40c <_kill_r+0x1c>
 801e40a:	6023      	str	r3, [r4, #0]
 801e40c:	bd38      	pop	{r3, r4, r5, pc}
 801e40e:	bf00      	nop
 801e410:	200024fc 	.word	0x200024fc

0801e414 <_getpid_r>:
 801e414:	f7e3 bf49 	b.w	80022aa <_getpid>

0801e418 <__swhatbuf_r>:
 801e418:	b570      	push	{r4, r5, r6, lr}
 801e41a:	460c      	mov	r4, r1
 801e41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e420:	2900      	cmp	r1, #0
 801e422:	b096      	sub	sp, #88	@ 0x58
 801e424:	4615      	mov	r5, r2
 801e426:	461e      	mov	r6, r3
 801e428:	da0d      	bge.n	801e446 <__swhatbuf_r+0x2e>
 801e42a:	89a3      	ldrh	r3, [r4, #12]
 801e42c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e430:	f04f 0100 	mov.w	r1, #0
 801e434:	bf14      	ite	ne
 801e436:	2340      	movne	r3, #64	@ 0x40
 801e438:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e43c:	2000      	movs	r0, #0
 801e43e:	6031      	str	r1, [r6, #0]
 801e440:	602b      	str	r3, [r5, #0]
 801e442:	b016      	add	sp, #88	@ 0x58
 801e444:	bd70      	pop	{r4, r5, r6, pc}
 801e446:	466a      	mov	r2, sp
 801e448:	f000 f848 	bl	801e4dc <_fstat_r>
 801e44c:	2800      	cmp	r0, #0
 801e44e:	dbec      	blt.n	801e42a <__swhatbuf_r+0x12>
 801e450:	9901      	ldr	r1, [sp, #4]
 801e452:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e456:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e45a:	4259      	negs	r1, r3
 801e45c:	4159      	adcs	r1, r3
 801e45e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e462:	e7eb      	b.n	801e43c <__swhatbuf_r+0x24>

0801e464 <__smakebuf_r>:
 801e464:	898b      	ldrh	r3, [r1, #12]
 801e466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e468:	079d      	lsls	r5, r3, #30
 801e46a:	4606      	mov	r6, r0
 801e46c:	460c      	mov	r4, r1
 801e46e:	d507      	bpl.n	801e480 <__smakebuf_r+0x1c>
 801e470:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e474:	6023      	str	r3, [r4, #0]
 801e476:	6123      	str	r3, [r4, #16]
 801e478:	2301      	movs	r3, #1
 801e47a:	6163      	str	r3, [r4, #20]
 801e47c:	b003      	add	sp, #12
 801e47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e480:	ab01      	add	r3, sp, #4
 801e482:	466a      	mov	r2, sp
 801e484:	f7ff ffc8 	bl	801e418 <__swhatbuf_r>
 801e488:	9f00      	ldr	r7, [sp, #0]
 801e48a:	4605      	mov	r5, r0
 801e48c:	4639      	mov	r1, r7
 801e48e:	4630      	mov	r0, r6
 801e490:	f7ff f876 	bl	801d580 <_malloc_r>
 801e494:	b948      	cbnz	r0, 801e4aa <__smakebuf_r+0x46>
 801e496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e49a:	059a      	lsls	r2, r3, #22
 801e49c:	d4ee      	bmi.n	801e47c <__smakebuf_r+0x18>
 801e49e:	f023 0303 	bic.w	r3, r3, #3
 801e4a2:	f043 0302 	orr.w	r3, r3, #2
 801e4a6:	81a3      	strh	r3, [r4, #12]
 801e4a8:	e7e2      	b.n	801e470 <__smakebuf_r+0xc>
 801e4aa:	89a3      	ldrh	r3, [r4, #12]
 801e4ac:	6020      	str	r0, [r4, #0]
 801e4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e4b2:	81a3      	strh	r3, [r4, #12]
 801e4b4:	9b01      	ldr	r3, [sp, #4]
 801e4b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e4ba:	b15b      	cbz	r3, 801e4d4 <__smakebuf_r+0x70>
 801e4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4c0:	4630      	mov	r0, r6
 801e4c2:	f000 f81d 	bl	801e500 <_isatty_r>
 801e4c6:	b128      	cbz	r0, 801e4d4 <__smakebuf_r+0x70>
 801e4c8:	89a3      	ldrh	r3, [r4, #12]
 801e4ca:	f023 0303 	bic.w	r3, r3, #3
 801e4ce:	f043 0301 	orr.w	r3, r3, #1
 801e4d2:	81a3      	strh	r3, [r4, #12]
 801e4d4:	89a3      	ldrh	r3, [r4, #12]
 801e4d6:	431d      	orrs	r5, r3
 801e4d8:	81a5      	strh	r5, [r4, #12]
 801e4da:	e7cf      	b.n	801e47c <__smakebuf_r+0x18>

0801e4dc <_fstat_r>:
 801e4dc:	b538      	push	{r3, r4, r5, lr}
 801e4de:	4d07      	ldr	r5, [pc, #28]	@ (801e4fc <_fstat_r+0x20>)
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	4608      	mov	r0, r1
 801e4e6:	4611      	mov	r1, r2
 801e4e8:	602b      	str	r3, [r5, #0]
 801e4ea:	f7e3 ff44 	bl	8002376 <_fstat>
 801e4ee:	1c43      	adds	r3, r0, #1
 801e4f0:	d102      	bne.n	801e4f8 <_fstat_r+0x1c>
 801e4f2:	682b      	ldr	r3, [r5, #0]
 801e4f4:	b103      	cbz	r3, 801e4f8 <_fstat_r+0x1c>
 801e4f6:	6023      	str	r3, [r4, #0]
 801e4f8:	bd38      	pop	{r3, r4, r5, pc}
 801e4fa:	bf00      	nop
 801e4fc:	200024fc 	.word	0x200024fc

0801e500 <_isatty_r>:
 801e500:	b538      	push	{r3, r4, r5, lr}
 801e502:	4d06      	ldr	r5, [pc, #24]	@ (801e51c <_isatty_r+0x1c>)
 801e504:	2300      	movs	r3, #0
 801e506:	4604      	mov	r4, r0
 801e508:	4608      	mov	r0, r1
 801e50a:	602b      	str	r3, [r5, #0]
 801e50c:	f7e3 ff42 	bl	8002394 <_isatty>
 801e510:	1c43      	adds	r3, r0, #1
 801e512:	d102      	bne.n	801e51a <_isatty_r+0x1a>
 801e514:	682b      	ldr	r3, [r5, #0]
 801e516:	b103      	cbz	r3, 801e51a <_isatty_r+0x1a>
 801e518:	6023      	str	r3, [r4, #0]
 801e51a:	bd38      	pop	{r3, r4, r5, pc}
 801e51c:	200024fc 	.word	0x200024fc

0801e520 <floor>:
 801e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e524:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e528:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801e52c:	2e13      	cmp	r6, #19
 801e52e:	4602      	mov	r2, r0
 801e530:	460b      	mov	r3, r1
 801e532:	460c      	mov	r4, r1
 801e534:	4605      	mov	r5, r0
 801e536:	4680      	mov	r8, r0
 801e538:	dc35      	bgt.n	801e5a6 <floor+0x86>
 801e53a:	2e00      	cmp	r6, #0
 801e53c:	da17      	bge.n	801e56e <floor+0x4e>
 801e53e:	a334      	add	r3, pc, #208	@ (adr r3, 801e610 <floor+0xf0>)
 801e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e544:	f7e1 fe7a 	bl	800023c <__adddf3>
 801e548:	2200      	movs	r2, #0
 801e54a:	2300      	movs	r3, #0
 801e54c:	f7e2 fabc 	bl	8000ac8 <__aeabi_dcmpgt>
 801e550:	b150      	cbz	r0, 801e568 <floor+0x48>
 801e552:	2c00      	cmp	r4, #0
 801e554:	da57      	bge.n	801e606 <floor+0xe6>
 801e556:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e55a:	432c      	orrs	r4, r5
 801e55c:	2500      	movs	r5, #0
 801e55e:	42ac      	cmp	r4, r5
 801e560:	4c2d      	ldr	r4, [pc, #180]	@ (801e618 <floor+0xf8>)
 801e562:	bf08      	it	eq
 801e564:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e568:	4623      	mov	r3, r4
 801e56a:	462a      	mov	r2, r5
 801e56c:	e024      	b.n	801e5b8 <floor+0x98>
 801e56e:	4f2b      	ldr	r7, [pc, #172]	@ (801e61c <floor+0xfc>)
 801e570:	4137      	asrs	r7, r6
 801e572:	ea01 0c07 	and.w	ip, r1, r7
 801e576:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e57a:	d01d      	beq.n	801e5b8 <floor+0x98>
 801e57c:	a324      	add	r3, pc, #144	@ (adr r3, 801e610 <floor+0xf0>)
 801e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e582:	f7e1 fe5b 	bl	800023c <__adddf3>
 801e586:	2200      	movs	r2, #0
 801e588:	2300      	movs	r3, #0
 801e58a:	f7e2 fa9d 	bl	8000ac8 <__aeabi_dcmpgt>
 801e58e:	2800      	cmp	r0, #0
 801e590:	d0ea      	beq.n	801e568 <floor+0x48>
 801e592:	2c00      	cmp	r4, #0
 801e594:	bfbe      	ittt	lt
 801e596:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e59a:	4133      	asrlt	r3, r6
 801e59c:	18e4      	addlt	r4, r4, r3
 801e59e:	ea24 0407 	bic.w	r4, r4, r7
 801e5a2:	2500      	movs	r5, #0
 801e5a4:	e7e0      	b.n	801e568 <floor+0x48>
 801e5a6:	2e33      	cmp	r6, #51	@ 0x33
 801e5a8:	dd0a      	ble.n	801e5c0 <floor+0xa0>
 801e5aa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e5ae:	d103      	bne.n	801e5b8 <floor+0x98>
 801e5b0:	f7e1 fe44 	bl	800023c <__adddf3>
 801e5b4:	4602      	mov	r2, r0
 801e5b6:	460b      	mov	r3, r1
 801e5b8:	4610      	mov	r0, r2
 801e5ba:	4619      	mov	r1, r3
 801e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5c0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e5c4:	f04f 3cff 	mov.w	ip, #4294967295
 801e5c8:	fa2c f707 	lsr.w	r7, ip, r7
 801e5cc:	4207      	tst	r7, r0
 801e5ce:	d0f3      	beq.n	801e5b8 <floor+0x98>
 801e5d0:	a30f      	add	r3, pc, #60	@ (adr r3, 801e610 <floor+0xf0>)
 801e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d6:	f7e1 fe31 	bl	800023c <__adddf3>
 801e5da:	2200      	movs	r2, #0
 801e5dc:	2300      	movs	r3, #0
 801e5de:	f7e2 fa73 	bl	8000ac8 <__aeabi_dcmpgt>
 801e5e2:	2800      	cmp	r0, #0
 801e5e4:	d0c0      	beq.n	801e568 <floor+0x48>
 801e5e6:	2c00      	cmp	r4, #0
 801e5e8:	da0a      	bge.n	801e600 <floor+0xe0>
 801e5ea:	2e14      	cmp	r6, #20
 801e5ec:	d101      	bne.n	801e5f2 <floor+0xd2>
 801e5ee:	3401      	adds	r4, #1
 801e5f0:	e006      	b.n	801e600 <floor+0xe0>
 801e5f2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e5f6:	2301      	movs	r3, #1
 801e5f8:	40b3      	lsls	r3, r6
 801e5fa:	441d      	add	r5, r3
 801e5fc:	4545      	cmp	r5, r8
 801e5fe:	d3f6      	bcc.n	801e5ee <floor+0xce>
 801e600:	ea25 0507 	bic.w	r5, r5, r7
 801e604:	e7b0      	b.n	801e568 <floor+0x48>
 801e606:	2500      	movs	r5, #0
 801e608:	462c      	mov	r4, r5
 801e60a:	e7ad      	b.n	801e568 <floor+0x48>
 801e60c:	f3af 8000 	nop.w
 801e610:	8800759c 	.word	0x8800759c
 801e614:	7e37e43c 	.word	0x7e37e43c
 801e618:	bff00000 	.word	0xbff00000
 801e61c:	000fffff 	.word	0x000fffff

0801e620 <_init>:
 801e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e622:	bf00      	nop
 801e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e626:	bc08      	pop	{r3}
 801e628:	469e      	mov	lr, r3
 801e62a:	4770      	bx	lr

0801e62c <_fini>:
 801e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e62e:	bf00      	nop
 801e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e632:	bc08      	pop	{r3}
 801e634:	469e      	mov	lr, r3
 801e636:	4770      	bx	lr
